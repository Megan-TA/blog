{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"themes/hu/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/hu/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"themes/hu/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/hu/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/hu/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/hu/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/hu/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563847051723},{"_id":"themes/hu/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1563847051866},{"_id":"themes/hu/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1563847051867},{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1563847051723},{"_id":"themes/hu/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1563847051868},{"_id":"themes/hu/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1563847051868},{"_id":"themes/hu/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1563847051869},{"_id":"themes/hu/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1563847051869},{"_id":"themes/hu/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1563847051870},{"_id":"themes/hu/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1563847051870},{"_id":"themes/hu/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1563847051871},{"_id":"themes/hu/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1563847051871},{"_id":"themes/hu/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1563847051872},{"_id":"themes/hu/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1563847051872},{"_id":"themes/hu/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1563847051881},{"_id":"themes/hu/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1563847051881},{"_id":"themes/hu/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1563847051882},{"_id":"themes/hu/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1563847051883},{"_id":"themes/hu/layout/layout.ejs","hash":"a6f0f1369afaddf5b63cc04589f17dfee409fcd0","modified":1563847051883},{"_id":"themes/hu/layout/page.ejs","hash":"5e588f200a7b7cd3ae40402b0dd3b779aac6787f","modified":1563847051884},{"_id":"themes/hu/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1563847051886},{"_id":"themes/hu/layout/post.ejs","hash":"a36524a762090581a858ae55b62ca18e6251876a","modified":1563847051885},{"_id":"source/_posts/docker基本使用.md","hash":"1c6bb9408f90c447c6292fc619bbdc69b77c0b4e","modified":1563847051726},{"_id":"source/_posts/git-submodule.md","hash":"b906140520df7411ecb8cbe466dce79281002aae","modified":1563847051727},{"_id":"source/_posts/centos下开机自动重启服务和脚本.md","hash":"9156114c42ea391ec849408a8565f884cdb659c7","modified":1563847051724},{"_id":"source/_posts/js中几种设计模式.md","hash":"302889da49a4891d763abe5554edddcab0df9359","modified":1563847051728},{"_id":"source/_posts/nginx入门.md","hash":"7de7608cb4c4202bf9091756017d93d0d6bec245","modified":1563847051728},{"_id":"source/_posts/python爬虫框架scrapy.md","hash":"76d22ddccadd1054452b9603a194069c522c9d2e","modified":1563847051729},{"_id":"source/_posts/react-vue中dom-diff简易版实现.md","hash":"e2596d658de1c39b12896e5b0fb36ec21431ceda","modified":1563847051729},{"_id":"source/_posts/一些新的api.md","hash":"25b0ef488e660f2fac3143b2b4260cc3f4f6b7be","modified":1563847051730},{"_id":"source/_posts/分享个人vscode常用插件.md","hash":"344f32ffb1d7c0c327b94876f5f4e0cda2e8fa5a","modified":1563847051731},{"_id":"source/_posts/利用verdaccio搭建私有npm仓库.md","hash":"82acd8cc995ca3bd275598dd5bd997a9ca889b02","modified":1563847051731},{"_id":"source/_posts/前端多项目公共模块管理实践.md","hash":"bbf1786241f78f6d1969c55c86db2fe35ba69f4c","modified":1563847051732},{"_id":"source/_posts/常用npm包整理.md","hash":"db6c07c146188c962c924c9f939d314771898846","modified":1563847051733},{"_id":"source/_posts/序.md","hash":"f6b814efcc0228443127066d69e86f8340f49dcf","modified":1563847051734},{"_id":"source/_posts/记录typescript使用的几个注意点.md","hash":"cd1d70175f67ba5c0669a94d3794998c1cf3f8d7","modified":1563847051735},{"_id":"source/_posts/记录工单系统的前端性能优化.md","hash":"04234e9755bd3fbc37dce738d3283d831f2236dc","modified":1563847051736},{"_id":"source/about/index.md","hash":"56b5f984a91bba5206db3b3fe1b1a02cf6f830e7","modified":1563847051737},{"_id":"source/archive/index.md","hash":"e4c40d8a769b9076bebf7b8a07f20a4e339a4804","modified":1563847051738},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1563847051856},{"_id":"source/tags/index.md","hash":"4e62b153da9d097c43aa29bb1a37586bc47d5a62","modified":1563847051865},{"_id":"themes/hu/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1563847051874},{"_id":"themes/hu/layout/_partial/footer.ejs","hash":"e69b7c4a446db77588b981521471194dff5fc5f7","modified":1563847051873},{"_id":"themes/hu/layout/_partial/head.ejs","hash":"7858f29b52340f2ba2fc52733167c802028820e5","modified":1563847051874},{"_id":"themes/hu/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1563847051875},{"_id":"themes/hu/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1563847051876},{"_id":"themes/hu/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1563847051876},{"_id":"themes/hu/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1563847051877},{"_id":"themes/hu/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1563847051875},{"_id":"themes/hu/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1563847051878},{"_id":"themes/hu/layout/_widget/featured-tags.ejs","hash":"229b58f185955a9bfbc658fd00b3e7f3c69cbb2c","modified":1563847051878},{"_id":"themes/hu/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1563847051879},{"_id":"themes/hu/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1563847051879},{"_id":"themes/hu/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1563847051880},{"_id":"themes/hu/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1563847051887},{"_id":"themes/hu/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1563847051888},{"_id":"themes/hu/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1563847051888},{"_id":"themes/hu/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1563847051892},{"_id":"themes/hu/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1563847051893},{"_id":"themes/hu/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1563847051893},{"_id":"themes/hu/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1563847051895},{"_id":"themes/hu/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1563847051896},{"_id":"themes/hu/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1563847051896},{"_id":"themes/hu/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1563847051897},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1563847051898},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1563847051901},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1563847051900},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1563847051901},{"_id":"themes/hu/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1563847051904},{"_id":"themes/hu/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1563847051905},{"_id":"themes/hu/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1563847051905},{"_id":"themes/hu/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1563847051909},{"_id":"themes/hu/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1563847051909},{"_id":"themes/hu/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1563847051909},{"_id":"themes/hu/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1563847051909},{"_id":"source/_posts/centos下开机自动重启服务和脚本/WX20190708-113220.png","hash":"2ddd3501c319f9cd7848239f1ec6ccfc138ca9cd","modified":1563847051725},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1563847051744},{"_id":"themes/hu/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1563847051891},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1563847051899},{"_id":"themes/hu/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1563847051904},{"_id":"themes/hu/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1563847051908},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1563847051797},{"_id":"themes/hu/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1563847051889},{"_id":"themes/hu/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1563847051894},{"_id":"themes/hu/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1563847051894},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1563847051799},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1563847051863},{"_id":"themes/hu/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1563847051907},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1563847051802},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1563847051859},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1563847051768},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1563847051747},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1563847051744},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1563847051826},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1563847051777},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1563847051855},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1563847051817},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1563847051762},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1563847051845},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1563847051794},{"_id":"public/post-sitemap.xml","hash":"94531c06a3651a28299b48eb9e459059e6b6fe38","modified":1563847181214},{"_id":"public/page-sitemap.xml","hash":"9e74fe36f8e54d64c87dad7ab23f2786c9d0e4dc","modified":1563847181214},{"_id":"public/tag-sitemap.xml","hash":"ed2f968e201af269f9c422edb73091a66a92c9cb","modified":1563847181468},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1563847181468},{"_id":"public/sitemap.xml","hash":"d3320eb3cd7049994082bffc99adbf5b3c622fef","modified":1563847181546},{"_id":"public/404.html","hash":"65713d36d462bc378eb17c066ec6e04b1fe2af74","modified":1563847181559},{"_id":"public/2019/07/22/一些新的api/index.html","hash":"09ba537cd60edab8d2ce6766714c7c0d7e26cc30","modified":1563847181560},{"_id":"public/2019/07/22/记录工单系统的前端性能优化/index.html","hash":"f18dbf2196ba2c5d2a18e03d906456485fde6be7","modified":1563847181560},{"_id":"public/tags/index.html","hash":"312ec94e1bcc2f7cd6e34591019d15e7dff53955","modified":1563847181560},{"_id":"public/2019/07/22/记录typescript使用的几个注意点/index.html","hash":"06d2d4827568325a077adc2994c01127deb34d4e","modified":1563847181560},{"_id":"public/2019/07/14/js中几种设计模式/index.html","hash":"052d4540460d3e9094ab5ee5c0e396595ada25d8","modified":1563847181560},{"_id":"public/2019/07/10/git-submodule/index.html","hash":"07e0ca9e010f1daca3ceb181208e55c6f70320c7","modified":1563847181560},{"_id":"public/2019/07/08/centos下开机自动重启服务和脚本/index.html","hash":"614982d11ceb6c495f8e517a8b5c6d5fb0fd7612","modified":1563847181560},{"_id":"public/2019/07/03/常用npm包整理/index.html","hash":"193e5000f956c7e436d920d125b70bb5ca49b684","modified":1563847181560},{"_id":"public/2019/06/21/前端多项目公共模块管理实践/index.html","hash":"6e44edf7eae093283d2a8014f2d9961986c8d908","modified":1563847181560},{"_id":"public/2019/06/20/react-vue中dom-diff简易版实现/index.html","hash":"bde2b8b77cbca99e7c9e2e9adcf8d33b0184726b","modified":1563847181560},{"_id":"public/2019/06/19/docker基本使用/index.html","hash":"6eb5a9aee5017654f0cbc5b5a474af1c99ece0e6","modified":1563847181560},{"_id":"public/2019/06/19/python爬虫框架scrapy/index.html","hash":"f68427836bebff7e3d5a551d83a17df5e6c37e7d","modified":1563847181560},{"_id":"public/2019/06/19/分享个人vscode常用插件/index.html","hash":"ada1a60b0261e25ab1f998a53cde113adf2d04e5","modified":1563847181561},{"_id":"public/2019/06/19/nginx入门/index.html","hash":"8008fdda9e778ef238653932b51ecc3b27f0679c","modified":1563847181561},{"_id":"public/2019/06/16/利用verdaccio搭建私有npm仓库/index.html","hash":"f5013677f89a2d485cf194cadf73e83f2570be31","modified":1563847181561},{"_id":"public/2019/06/15/序/index.html","hash":"17fdad1800441835f5c1bd7343a57b9c9f2e74fd","modified":1563847181561},{"_id":"public/about/index.html","hash":"ce974f7a093fb240c17eb9d14b27433d5d87162f","modified":1563847181561},{"_id":"public/archive/index.html","hash":"25d4d9f9c805289892063db3053307e1a3e4dc1f","modified":1563847181561},{"_id":"public/index.html","hash":"18f7f21fc6a1f700125b5bc4bc6439f309640ead","modified":1563847181561},{"_id":"public/archives/2/index.html","hash":"eefc3b46a00e764bdd154cd62c3add560bdfc311","modified":1563847181561},{"_id":"public/archives/index.html","hash":"379f9b294c3e69c26322bd21512f468528aaac5d","modified":1563847181561},{"_id":"public/archives/archives/2/index.html","hash":"b1a093a0ac19a46d5179c2493802e7b97ef8c1f6","modified":1563847181561},{"_id":"public/archives/2019/index.html","hash":"97477f885f4f23a68c9c6d503d28205a4a747021","modified":1563847181561},{"_id":"public/archives/2019/archives/2/index.html","hash":"fd24d7158ad263749652f32c3ec08e83cd6e5abd","modified":1563847181561},{"_id":"public/archives/2019/06/index.html","hash":"3ae6b1a915f2538247fc4f2550271baa8696bd31","modified":1563847181561},{"_id":"public/archives/2019/07/index.html","hash":"ec100058e2c8903aa6b206d128299f992de41c7c","modified":1563847181562},{"_id":"public/tags/docker/index.html","hash":"a66fc0fa7983718b77a60d1b5881eaf1a4c6a236","modified":1563847181562},{"_id":"public/tags/web/index.html","hash":"aca5cbaf0fcc9d4654914fbf929e397514289007","modified":1563847181562},{"_id":"public/tags/linux/index.html","hash":"feae19030e5eddc7718e504be33ec1e58fbc0aea","modified":1563847181562},{"_id":"public/tags/javascript/index.html","hash":"1e0a52a43363b4b69a1edd56c50a12c943817a87","modified":1563847181562},{"_id":"public/tags/python/index.html","hash":"ba8d287dbb6b268a94907b91a56cf1082e5abda0","modified":1563847181562},{"_id":"public/tags/vue-react/index.html","hash":"0409c6ff15954441462f8e980595cd9830d07a01","modified":1563847181562},{"_id":"public/tags/IDE/index.html","hash":"8861be3015799f62fb245fe17de506751b0601a4","modified":1563847181562},{"_id":"public/tags/node/index.html","hash":"10aa436636379acf471e7c8fd2ffffa74daa2227","modified":1563847181562},{"_id":"public/tags/npm/index.html","hash":"cd68c5c688a514fa7cb3da722dfb44c5d033b07d","modified":1563847181562},{"_id":"public/tags/随笔/index.html","hash":"5a94824d51d07ea105bdd49f6c770c4737d8b1ea","modified":1563847181562},{"_id":"public/tags/前端/index.html","hash":"a4ac0b3dbd83baefebaff4a6f77777b74497b4d3","modified":1563847181562},{"_id":"public/tags/nginx/index.html","hash":"4eee68297d695f72555ab3d9c5a2130c1703afc7","modified":1563847181562},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563847181570},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1563847181575},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1563847181575},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1563847181575},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1563847181575},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1563847181575},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1563847181576},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1563847181576},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1563847181576},{"_id":"public/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png","hash":"2ddd3501c319f9cd7848239f1ec6ccfc138ca9cd","modified":1563847181576},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1563847181825},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1563847181830},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1563847181830},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1563847181831},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1563847181831},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1563847181831},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1563847181831},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1563847181831},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1563847181831},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1563847181831},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1563847181831},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1563847181831},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1563847181832},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1563847181832},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1563847181832},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1563847181832},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1563847181832},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1563847181842},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1563847181846},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1563847181846},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1563847181846},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1563847181847},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1563847181853},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1563847181853},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1563847181856},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1563847181878},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1563847181879},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1563847181882},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1563847181883},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1563847181883},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1563847181888},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1563847181892},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1563847181895},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1563847181905},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1563847181910},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1563847181920},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1563847181920},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1563847181930}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-07-23T01:57:31.723Z","updated":"2019-07-23T01:57:31.723Z","path":"404.html","title":"","comments":1,"_id":"cjyf68f680000n71pqqdnsjbu","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"走在成为极客的路上","header-img":"/blog/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>Just do it !    (翻译：nike名言)\n\n### 关于我\n\n>\n>\n>\n\n### 兴趣方向\n\n>\n\n### 参与社区\n\n > 掘金: \n >\n\n### 联系我\n\n>Email: hc1132107224@163.com\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"走在成为极客的路上\"\nheader-img: \"/blog/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>Just do it !    (翻译：nike名言)\n\n### 关于我\n\n>\n>\n>\n\n### 兴趣方向\n\n>\n\n### 参与社区\n\n > 掘金: \n >\n\n### 联系我\n\n>Email: hc1132107224@163.com\n","updated":"2019-07-23T01:57:31.737Z","path":"about/index.html","comments":1,"_id":"cjyf68f7c0002n71pryc4ifn6","content":"<h3><span id=\"一句话\">一句话</span></h3>\n<blockquote>\n<p>Just do it !    (翻译：nike名言)</p>\n</blockquote>\n<h3><span id=\"关于我\">关于我</span></h3>\n<blockquote></blockquote>\n<h3><span id=\"兴趣方向\">兴趣方向</span></h3>\n<blockquote></blockquote>\n<h3><span id=\"参与社区\">参与社区</span></h3>\n<blockquote>\n<p>掘金:</p>\n</blockquote>\n<h3><span id=\"联系我\">联系我</span></h3>\n<blockquote>\n<p>Email: <a href=\"mailto:hc1132107224@163.com\" target=\"_blank\" rel=\"noopener\">hc1132107224@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Just do it !    (翻译：nike名言)</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote></blockquote>\n<h3>兴趣方向</h3>\n<blockquote></blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>掘金:</p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:hc1132107224@163.com\" target=\"_blank\" rel=\"noopener\">hc1132107224@163.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/blog/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/blog/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-07-23T01:57:31.738Z","path":"archive/index.html","_id":"cjyf68f7e0004n71p8ur5dvx9","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/blog/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/blog/img/header_img/tag.png\"\n---\n","date":"2019-07-23T01:57:31.865Z","updated":"2019-07-23T01:57:31.865Z","path":"tags/index.html","comments":1,"_id":"cjyf68f7i0007n71pttumeacw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker基本使用","catalog":true,"date":"2019-06-19T06:15:03.000Z","subtitle":null,"header-img":null,"_content":"本文都是基于`centos7`环境使用\n\n1. 启动docker\n\n启动配置文件默认`/etc/docker/daemon.json`\n可以修改配置文件指定docker服务启动的一些默认参数\n\n- --regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速Docker镜像拉取\n\n2.docker pull NAME[:TAG]\n      默认都是从 `docker`官方仓库去拉取镜像（registry.hub.docker.com）\n 一般直接pull  \n比如：\n`docker`下载`node`的`alpine`版本\n\n```shell\ndocker pull node:10.15-alpine\n```\n\n相当于\n\n```shell\ndocker pull registry.hub.docker.com/ubuntu:node:10.15-alpine\n```\n\n`alpine`是`node`在`docker`运行的最小环境的版本，相比于完整的`node`包体积更小\n\n如果不指定版本默认拉取 `latest`版本，生产环境的时候最好指定版本号，因为`lastest`版本会跟踪最新版本的变更而变化\n\n3.如何进入`未启动`的`node`镜像内部去修改默认一些配置\n\n```shell\ndocker run -it node:10.15-alpine sh\n```\n\n以`shell`脚本的方式去执行`node`命令\n\n4.docker exec  ／ docker attach\n\n两者都是进入容器内部\n\n`attach`的不足：\n\n- 多个窗口同时 `attach`同一个容器时候，所有窗口会同步显示；\n- 当某个窗口因命令阻塞，所有窗口都无法执行操作；\n\n进入`已成功运行`的容器内部\n\n```shell\ndocker exec -it 容器名称/容器ID /bin/sh\n```\n\n- -i 支持标准输入\n- -t 开启一个伪终端\n\n5.docker ps\n\n- docker ps\n查看已经成功运行的容器（如果运行容器之后ps未看到说明容器启动失败）\n- docker ps  -a\n    查看所有容器（包含未成功运行的容器）\n- docker ps -f 容器id  \n    根据容器id筛选指定容器\n\n6.docker run\n\n参数部分\n\n- -d  守护进程方式运行\n- -p 端口映射 （外部访问的端口：docker内部端口）\n- -u 指定容器的用户\n- -v 挂载存储卷映射 （外部存储卷位置：docker内部存储卷位置）\n- -h 指定容器的主机名\n- -root\n- --name 容器重命名\n- --rm  容器停止后自动删除\n- --link 关联其它容器\n  \n","source":"_posts/docker基本使用.md","raw":"---\ntitle: docker基本使用\ncatalog: true\ndate: 2019-06-19 14:15:03\nsubtitle:\nheader-img:\ntags: docker\n---\n本文都是基于`centos7`环境使用\n\n1. 启动docker\n\n启动配置文件默认`/etc/docker/daemon.json`\n可以修改配置文件指定docker服务启动的一些默认参数\n\n- --regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速Docker镜像拉取\n\n2.docker pull NAME[:TAG]\n      默认都是从 `docker`官方仓库去拉取镜像（registry.hub.docker.com）\n 一般直接pull  \n比如：\n`docker`下载`node`的`alpine`版本\n\n```shell\ndocker pull node:10.15-alpine\n```\n\n相当于\n\n```shell\ndocker pull registry.hub.docker.com/ubuntu:node:10.15-alpine\n```\n\n`alpine`是`node`在`docker`运行的最小环境的版本，相比于完整的`node`包体积更小\n\n如果不指定版本默认拉取 `latest`版本，生产环境的时候最好指定版本号，因为`lastest`版本会跟踪最新版本的变更而变化\n\n3.如何进入`未启动`的`node`镜像内部去修改默认一些配置\n\n```shell\ndocker run -it node:10.15-alpine sh\n```\n\n以`shell`脚本的方式去执行`node`命令\n\n4.docker exec  ／ docker attach\n\n两者都是进入容器内部\n\n`attach`的不足：\n\n- 多个窗口同时 `attach`同一个容器时候，所有窗口会同步显示；\n- 当某个窗口因命令阻塞，所有窗口都无法执行操作；\n\n进入`已成功运行`的容器内部\n\n```shell\ndocker exec -it 容器名称/容器ID /bin/sh\n```\n\n- -i 支持标准输入\n- -t 开启一个伪终端\n\n5.docker ps\n\n- docker ps\n查看已经成功运行的容器（如果运行容器之后ps未看到说明容器启动失败）\n- docker ps  -a\n    查看所有容器（包含未成功运行的容器）\n- docker ps -f 容器id  \n    根据容器id筛选指定容器\n\n6.docker run\n\n参数部分\n\n- -d  守护进程方式运行\n- -p 端口映射 （外部访问的端口：docker内部端口）\n- -u 指定容器的用户\n- -v 挂载存储卷映射 （外部存储卷位置：docker内部存储卷位置）\n- -h 指定容器的主机名\n- -root\n- --name 容器重命名\n- --rm  容器停止后自动删除\n- --link 关联其它容器\n  \n","slug":"docker基本使用","published":1,"updated":"2019-07-23T01:57:31.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f780001n71ptdfwjbnn","content":"<p>本文都是基于<code>centos7</code>环境使用</p>\n<ol>\n<li>启动docker</li>\n</ol>\n<p>启动配置文件默认<code>/etc/docker/daemon.json</code><br>\n可以修改配置文件指定docker服务启动的一些默认参数</p>\n<ul>\n<li>–regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速Docker镜像拉取</li>\n</ul>\n<p>2.docker pull NAME[:TAG]<br>\n默认都是从 <code>docker</code>官方仓库去拉取镜像（<a href=\"http://registry.hub.docker.com\" target=\"_blank\" rel=\"noopener\">registry.hub.docker.com</a>）<br>\n一般直接pull<br>\n比如：<br>\n<code>docker</code>下载<code>node</code>的<code>alpine</code>版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull node:10.15-alpine</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.hub.docker.com/ubuntu:node:10.15-alpine</span><br></pre></td></tr></table></figure>\n<p><code>alpine</code>是<code>node</code>在<code>docker</code>运行的最小环境的版本，相比于完整的<code>node</code>包体积更小</p>\n<p>如果不指定版本默认拉取 <code>latest</code>版本，生产环境的时候最好指定版本号，因为<code>lastest</code>版本会跟踪最新版本的变更而变化</p>\n<p>3.如何进入<code>未启动</code>的<code>node</code>镜像内部去修改默认一些配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it node:10.15-alpine sh</span><br></pre></td></tr></table></figure>\n<p>以<code>shell</code>脚本的方式去执行<code>node</code>命令</p>\n<p>4.docker exec  ／ docker attach</p>\n<p>两者都是进入容器内部</p>\n<p><code>attach</code>的不足：</p>\n<ul>\n<li>多个窗口同时 <code>attach</code>同一个容器时候，所有窗口会同步显示；</li>\n<li>当某个窗口因命令阻塞，所有窗口都无法执行操作；</li>\n</ul>\n<p>进入<code>已成功运行</code>的容器内部</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器名称/容器ID /bin/sh</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-i 支持标准输入</li>\n<li>-t 开启一个伪终端</li>\n</ul>\n<p>5.docker ps</p>\n<ul>\n<li>docker ps<br>\n查看已经成功运行的容器（如果运行容器之后ps未看到说明容器启动失败）</li>\n<li>docker ps  -a<br>\n查看所有容器（包含未成功运行的容器）</li>\n<li>docker ps -f 容器id<br>\n根据容器id筛选指定容器</li>\n</ul>\n<p>6.docker run</p>\n<p>参数部分</p>\n<ul>\n<li>-d  守护进程方式运行</li>\n<li>-p 端口映射 （外部访问的端口：docker内部端口）</li>\n<li>-u 指定容器的用户</li>\n<li>-v 挂载存储卷映射 （外部存储卷位置：docker内部存储卷位置）</li>\n<li>-h 指定容器的主机名</li>\n<li>-root</li>\n<li>–name 容器重命名</li>\n<li>–rm  容器停止后自动删除</li>\n<li>–link 关联其它容器</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文都是基于<code>centos7</code>环境使用</p>\n<ol>\n<li>启动docker</li>\n</ol>\n<p>启动配置文件默认<code>/etc/docker/daemon.json</code><br>\n可以修改配置文件指定docker服务启动的一些默认参数</p>\n<ul>\n<li>–regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速Docker镜像拉取</li>\n</ul>\n<p>2.docker pull NAME[:TAG]<br>\n默认都是从 <code>docker</code>官方仓库去拉取镜像（<a href=\"http://registry.hub.docker.com\" target=\"_blank\" rel=\"noopener\">registry.hub.docker.com</a>）<br>\n一般直接pull<br>\n比如：<br>\n<code>docker</code>下载<code>node</code>的<code>alpine</code>版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull node:10.15-alpine</span><br></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.hub.docker.com/ubuntu:node:10.15-alpine</span><br></pre></td></tr></table></figure>\n<p><code>alpine</code>是<code>node</code>在<code>docker</code>运行的最小环境的版本，相比于完整的<code>node</code>包体积更小</p>\n<p>如果不指定版本默认拉取 <code>latest</code>版本，生产环境的时候最好指定版本号，因为<code>lastest</code>版本会跟踪最新版本的变更而变化</p>\n<p>3.如何进入<code>未启动</code>的<code>node</code>镜像内部去修改默认一些配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it node:10.15-alpine sh</span><br></pre></td></tr></table></figure>\n<p>以<code>shell</code>脚本的方式去执行<code>node</code>命令</p>\n<p>4.docker exec  ／ docker attach</p>\n<p>两者都是进入容器内部</p>\n<p><code>attach</code>的不足：</p>\n<ul>\n<li>多个窗口同时 <code>attach</code>同一个容器时候，所有窗口会同步显示；</li>\n<li>当某个窗口因命令阻塞，所有窗口都无法执行操作；</li>\n</ul>\n<p>进入<code>已成功运行</code>的容器内部</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器名称/容器ID /bin/sh</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-i 支持标准输入</li>\n<li>-t 开启一个伪终端</li>\n</ul>\n<p>5.docker ps</p>\n<ul>\n<li>docker ps<br>\n查看已经成功运行的容器（如果运行容器之后ps未看到说明容器启动失败）</li>\n<li>docker ps  -a<br>\n查看所有容器（包含未成功运行的容器）</li>\n<li>docker ps -f 容器id<br>\n根据容器id筛选指定容器</li>\n</ul>\n<p>6.docker run</p>\n<p>参数部分</p>\n<ul>\n<li>-d  守护进程方式运行</li>\n<li>-p 端口映射 （外部访问的端口：docker内部端口）</li>\n<li>-u 指定容器的用户</li>\n<li>-v 挂载存储卷映射 （外部存储卷位置：docker内部存储卷位置）</li>\n<li>-h 指定容器的主机名</li>\n<li>-root</li>\n<li>–name 容器重命名</li>\n<li>–rm  容器停止后自动删除</li>\n<li>–link 关联其它容器</li>\n</ul>\n"},{"title":"git submodule","catalog":true,"date":"2019-07-10T08:31:04.000Z","subtitle":null,"header-img":null,"_content":"\n子模块一些操作方法：\n\n- 克隆带有子模块的项目\n\n```shell\ngit clone --recursive 远程地址\n```\n\n- 拉取子模块更新\n\n```shell\ngit submodule update --remote\n```\n\n- 提交子模块修改（需要切换到`master`分支）\n\n```shell\ngit add .\ngit commit -m 'xxxx'\ngit push origin master\n```\n\n- 删除子模块\n\n```shell\ngit submodule deinit themes/hugo-nuo\nvim .gitmodules # 移除要删除的子模块\ngit add .gitmodules\ngit rm --cached themes/hugo-nuo\nrm -rf .git/modules/themes/hugo-nuo\nrm -rf themes/hugo-nuo\ngit commit -m \"Remove submodule themes/hugo-nuo\"\n```\n\n参考链接： 1. [Git Submodule 的使用](https://www.jianshu.com/p/0107698498af) 2. [Git Submodule](https://laozhu.me/post/git-submodule-tutorial/)\n\n使用过程中遇到的问题：\n\n1. `jenkins`构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面\n\n```shell\n\ngit config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git\n\n\ngit submodule init\ngit submodule update --remote\n\nyarn install\ngit submodule foreach 'yarn install'\nyarn build\n```\n","source":"_posts/git-submodule.md","raw":"---\ntitle: git submodule\ncatalog: true\ndate: 2019-07-10 16:31:04\nsubtitle:\nheader-img:\ntags: web\n---\n\n子模块一些操作方法：\n\n- 克隆带有子模块的项目\n\n```shell\ngit clone --recursive 远程地址\n```\n\n- 拉取子模块更新\n\n```shell\ngit submodule update --remote\n```\n\n- 提交子模块修改（需要切换到`master`分支）\n\n```shell\ngit add .\ngit commit -m 'xxxx'\ngit push origin master\n```\n\n- 删除子模块\n\n```shell\ngit submodule deinit themes/hugo-nuo\nvim .gitmodules # 移除要删除的子模块\ngit add .gitmodules\ngit rm --cached themes/hugo-nuo\nrm -rf .git/modules/themes/hugo-nuo\nrm -rf themes/hugo-nuo\ngit commit -m \"Remove submodule themes/hugo-nuo\"\n```\n\n参考链接： 1. [Git Submodule 的使用](https://www.jianshu.com/p/0107698498af) 2. [Git Submodule](https://laozhu.me/post/git-submodule-tutorial/)\n\n使用过程中遇到的问题：\n\n1. `jenkins`构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面\n\n```shell\n\ngit config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git\n\n\ngit submodule init\ngit submodule update --remote\n\nyarn install\ngit submodule foreach 'yarn install'\nyarn build\n```\n","slug":"git-submodule","published":1,"updated":"2019-07-23T01:57:31.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7c0003n71plquhw2la","content":"<p>子模块一些操作方法：</p>\n<ul>\n<li>克隆带有子模块的项目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --recursive 远程地址</span><br></pre></td></tr></table></figure>\n<ul>\n<li>拉取子模块更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提交子模块修改（需要切换到<code>master</code>分支）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'xxxx'</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit themes/hugo-nuo</span><br><span class=\"line\">vim .gitmodules # 移除要删除的子模块</span><br><span class=\"line\">git add .gitmodules</span><br><span class=\"line\">git rm --cached themes/hugo-nuo</span><br><span class=\"line\">rm -rf .git/modules/themes/hugo-nuo</span><br><span class=\"line\">rm -rf themes/hugo-nuo</span><br><span class=\"line\">git commit -m \"Remove submodule themes/hugo-nuo\"</span><br></pre></td></tr></table></figure>\n<p>参考链接： 1. <a href=\"https://www.jianshu.com/p/0107698498af\" target=\"_blank\" rel=\"noopener\">Git Submodule 的使用</a> 2. <a href=\"https://laozhu.me/post/git-submodule-tutorial/\" target=\"_blank\" rel=\"noopener\">Git Submodule</a></p>\n<p>使用过程中遇到的问题：</p>\n<ol>\n<li><code>jenkins</code>构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\">yarn install</span><br><span class=\"line\">git submodule foreach 'yarn install'</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>子模块一些操作方法：</p>\n<ul>\n<li>克隆带有子模块的项目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --recursive 远程地址</span><br></pre></td></tr></table></figure>\n<ul>\n<li>拉取子模块更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提交子模块修改（需要切换到<code>master</code>分支）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'xxxx'</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit themes/hugo-nuo</span><br><span class=\"line\">vim .gitmodules # 移除要删除的子模块</span><br><span class=\"line\">git add .gitmodules</span><br><span class=\"line\">git rm --cached themes/hugo-nuo</span><br><span class=\"line\">rm -rf .git/modules/themes/hugo-nuo</span><br><span class=\"line\">rm -rf themes/hugo-nuo</span><br><span class=\"line\">git commit -m \"Remove submodule themes/hugo-nuo\"</span><br></pre></td></tr></table></figure>\n<p>参考链接： 1. <a href=\"https://www.jianshu.com/p/0107698498af\" target=\"_blank\" rel=\"noopener\">Git Submodule 的使用</a> 2. <a href=\"https://laozhu.me/post/git-submodule-tutorial/\" target=\"_blank\" rel=\"noopener\">Git Submodule</a></p>\n<p>使用过程中遇到的问题：</p>\n<ol>\n<li><code>jenkins</code>构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\">yarn install</span><br><span class=\"line\">git submodule foreach 'yarn install'</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n"},{"title":"centos下开机自动重启服务和脚本","catalog":true,"date":"2019-07-08T02:45:59.000Z","subtitle":null,"header-img":null,"_content":"\n1. ### 利用`chkconfig`添加开机自启服务\n\n```shell\nchkconfig\n\n--list 各项服务状态栏显示出来\n--level 设置某个服务在该状态栏显示出来\n\n单独开启某一服务的命令：chkconfig 服务名 on\n\n单独关闭某一服务的命令：chkconfig 服务名 off\n\n查看某一服务的状态：/etc/intd.d/服务名 status\n\n```\n\n我这里以docker 服务为例，设置如下两条命令即可：\n\n```shell\n1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on\n2 # systemctl start docker.service #启动docker服务\n\n```\n\n2. ### 添加开机自启脚本\n\n - 方法一\n\n    1. 赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）\n\n    2. 打开/etc/rc.d/rc.local文件，在末尾增加如下内容\n\n    ```shell\n    echo \"/opt/script/duDefaultService.sh\" >> /etc/rc.d/rc.local\n    ```\n\n    3. 在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限\n\n    ```shell\n    chmod +x /etc/rc.d/rc.local\n    ```\n\n- 方法二\n\n    0. 设置sh启动脚本必要参数\n\n    ```shell\n    #!/bin/sh\n    #chkconfig: 2345 80 80\n    #description: auto start web server\n\n    ```\n\n    第一句：必须的\n    声明sh\n    第二句：必须的\n    2345 表示linux 有 0-6种状态 在2345下启动\n    80：表示启动顺序\n    80：表示关闭顺序\n    后面两个参数小于 100\n    第三句：必须的\n    描述\n\n    结果截图如下：\n    {% asset_img WX20190708-113220.png 自动重启服务列表截图 %}\n\n    1. 将脚本移动到/etc/rc.d/init.d目录下\n\n    ```shell\n    mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d\n    ```\n\n    2. 增加脚本的可执行权限\n\n    ```shell\n    chmod +x  /etc/rc.d/init.d/duDefaultService.sh\n    ```\n\n    3. 添加脚本到开机自动启动项目中\n\n    ```shell\n    cd /etc/rc.d/init.d\n    chkconfig --add duDefaultService.sh\n    chkconfig duDefaultService.sh on\n    ```\n\n- 方法三\n\n    1.建立服务文件\n\n    vim /lib/systemd/system/nginx.service\n\n    [Unit]\n\n    Description=nginx\n\n    After=network.target\n\n    [Service]\n\n    Type=forking\n\n    ExecStart=/www/lanmps/init.d/nginx start\n\n    ExecReload=/www/lanmps/init.d/nginx restart\n\n    ExecStop=/www/lanmps/init.d/nginx  stop\n\n    PrivateTmp=true\n\n    [Install]\n\n    WantedBy=multi-user.target\n\n    [Unit]:服务的说明\n\n    Description:描述服务\n\n    After:描述服务类别\n\n    [Service]服务运行参数的设置\n\n    Type=forking是后台运行的形式\n\n    ExecStart为服务的具体运行命令\n\n    ExecReload为重启命令\n\n    ExecStop为停止命令\n\n    PrivateTmp=True表示给服务分配独立的临时空间\n\n    注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n\n    [Install]服务安装的相关设置，可设置为多用户\n\n    2.保存目录\n\n    以754的权限保存在目录：\n\n    /lib/systemd/system  \n\n    3.设置开机自启动\n\n    systemctl enable nginx.service  \n\n    ```shell\n    systemctl enable XXXX.service\n    ```\n","source":"_posts/centos下开机自动重启服务和脚本.md","raw":"---\ntitle: centos下开机自动重启服务和脚本\ncatalog: true\ndate: 2019-07-08 10:45:59\nsubtitle:\nheader-img:\ntags: linux\n---\n\n1. ### 利用`chkconfig`添加开机自启服务\n\n```shell\nchkconfig\n\n--list 各项服务状态栏显示出来\n--level 设置某个服务在该状态栏显示出来\n\n单独开启某一服务的命令：chkconfig 服务名 on\n\n单独关闭某一服务的命令：chkconfig 服务名 off\n\n查看某一服务的状态：/etc/intd.d/服务名 status\n\n```\n\n我这里以docker 服务为例，设置如下两条命令即可：\n\n```shell\n1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on\n2 # systemctl start docker.service #启动docker服务\n\n```\n\n2. ### 添加开机自启脚本\n\n - 方法一\n\n    1. 赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）\n\n    2. 打开/etc/rc.d/rc.local文件，在末尾增加如下内容\n\n    ```shell\n    echo \"/opt/script/duDefaultService.sh\" >> /etc/rc.d/rc.local\n    ```\n\n    3. 在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限\n\n    ```shell\n    chmod +x /etc/rc.d/rc.local\n    ```\n\n- 方法二\n\n    0. 设置sh启动脚本必要参数\n\n    ```shell\n    #!/bin/sh\n    #chkconfig: 2345 80 80\n    #description: auto start web server\n\n    ```\n\n    第一句：必须的\n    声明sh\n    第二句：必须的\n    2345 表示linux 有 0-6种状态 在2345下启动\n    80：表示启动顺序\n    80：表示关闭顺序\n    后面两个参数小于 100\n    第三句：必须的\n    描述\n\n    结果截图如下：\n    {% asset_img WX20190708-113220.png 自动重启服务列表截图 %}\n\n    1. 将脚本移动到/etc/rc.d/init.d目录下\n\n    ```shell\n    mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d\n    ```\n\n    2. 增加脚本的可执行权限\n\n    ```shell\n    chmod +x  /etc/rc.d/init.d/duDefaultService.sh\n    ```\n\n    3. 添加脚本到开机自动启动项目中\n\n    ```shell\n    cd /etc/rc.d/init.d\n    chkconfig --add duDefaultService.sh\n    chkconfig duDefaultService.sh on\n    ```\n\n- 方法三\n\n    1.建立服务文件\n\n    vim /lib/systemd/system/nginx.service\n\n    [Unit]\n\n    Description=nginx\n\n    After=network.target\n\n    [Service]\n\n    Type=forking\n\n    ExecStart=/www/lanmps/init.d/nginx start\n\n    ExecReload=/www/lanmps/init.d/nginx restart\n\n    ExecStop=/www/lanmps/init.d/nginx  stop\n\n    PrivateTmp=true\n\n    [Install]\n\n    WantedBy=multi-user.target\n\n    [Unit]:服务的说明\n\n    Description:描述服务\n\n    After:描述服务类别\n\n    [Service]服务运行参数的设置\n\n    Type=forking是后台运行的形式\n\n    ExecStart为服务的具体运行命令\n\n    ExecReload为重启命令\n\n    ExecStop为停止命令\n\n    PrivateTmp=True表示给服务分配独立的临时空间\n\n    注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n\n    [Install]服务安装的相关设置，可设置为多用户\n\n    2.保存目录\n\n    以754的权限保存在目录：\n\n    /lib/systemd/system  \n\n    3.设置开机自启动\n\n    systemctl enable nginx.service  \n\n    ```shell\n    systemctl enable XXXX.service\n    ```\n","slug":"centos下开机自动重启服务和脚本","published":1,"updated":"2019-07-23T01:57:31.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7g0006n71pctzweuk9","content":"<ol>\n<li>\n<h3><span id=\"利用chkconfig添加开机自启服务\">利用<code>chkconfig</code>添加开机自启服务</span></h3>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig</span><br><span class=\"line\"></span><br><span class=\"line\">--list 各项服务状态栏显示出来</span><br><span class=\"line\">--level 设置某个服务在该状态栏显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">单独开启某一服务的命令：chkconfig 服务名 on</span><br><span class=\"line\"></span><br><span class=\"line\">单独关闭某一服务的命令：chkconfig 服务名 off</span><br><span class=\"line\"></span><br><span class=\"line\">查看某一服务的状态：/etc/intd.d/服务名 status</span><br></pre></td></tr></table></figure>\n<p>我这里以docker 服务为例，设置如下两条命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on</span><br><span class=\"line\">2 # systemctl start docker.service #启动docker服务</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<h3><span id=\"添加开机自启脚本\">添加开机自启脚本</span></h3>\n</li>\n</ol>\n<ul>\n<li>\n<p>方法一</p>\n<ol>\n<li>\n<p>赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）</p>\n</li>\n<li>\n<p>打开/etc/rc.d/rc.local文件，在末尾增加如下内容</p>\n</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"/opt/script/duDefaultService.sh\" &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法二</p>\n<ol start=\"0\">\n<li>设置sh启动脚本必要参数</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"><span class=\"meta\">#</span>chkconfig: 2345 80 80</span><br><span class=\"line\"><span class=\"meta\">#</span>description: auto start web server</span><br></pre></td></tr></table></figure>\n<p>第一句：必须的<br>\n声明sh<br>\n第二句：必须的<br>\n2345 表示linux 有 0-6种状态 在2345下启动<br>\n80：表示启动顺序<br>\n80：表示关闭顺序<br>\n后面两个参数小于 100<br>\n第三句：必须的<br>\n描述</p>\n<p>结果截图如下：</p>\n  <img src=\"/blog/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png\" title=\"自动重启服务列表截图\">\n<ol>\n<li>将脚本移动到/etc/rc.d/init.d目录下</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>增加脚本的可执行权限</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x  /etc/rc.d/init.d/duDefaultService.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>添加脚本到开机自动启动项目中</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rc.d/init.d</span><br><span class=\"line\">chkconfig --add duDefaultService.sh</span><br><span class=\"line\">chkconfig duDefaultService.sh on</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法三</p>\n<p>1.建立服务文件</p>\n<p>vim /lib/systemd/system/nginx.service</p>\n<p><a href=\"%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AF%B4%E6%98%8E\">Unit</a></p>\n<p>Description=nginx</p>\n<p>After=network.target</p>\n<p>[Service]</p>\n<p>Type=forking</p>\n<p>ExecStart=/www/lanmps/init.d/nginx start</p>\n<p>ExecReload=/www/lanmps/init.d/nginx restart</p>\n<p>ExecStop=/www/lanmps/init.d/nginx  stop</p>\n<p>PrivateTmp=true</p>\n<p>[Install]</p>\n<p>WantedBy=multi-user.target</p>\n<p>Description:描述服务</p>\n<p>After:描述服务类别</p>\n<p>[Service]服务运行参数的设置</p>\n<p>Type=forking是后台运行的形式</p>\n<p>ExecStart为服务的具体运行命令</p>\n<p>ExecReload为重启命令</p>\n<p>ExecStop为停止命令</p>\n<p>PrivateTmp=True表示给服务分配独立的临时空间</p>\n<p>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</p>\n<p>[Install]服务安装的相关设置，可设置为多用户</p>\n<p>2.保存目录</p>\n<p>以754的权限保存在目录：</p>\n<p>/lib/systemd/system</p>\n<p>3.设置开机自启动</p>\n<p>systemctl enable nginx.service</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable XXXX.service</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>\n<h3>利用<code>chkconfig</code>添加开机自启服务</h3>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig</span><br><span class=\"line\"></span><br><span class=\"line\">--list 各项服务状态栏显示出来</span><br><span class=\"line\">--level 设置某个服务在该状态栏显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">单独开启某一服务的命令：chkconfig 服务名 on</span><br><span class=\"line\"></span><br><span class=\"line\">单独关闭某一服务的命令：chkconfig 服务名 off</span><br><span class=\"line\"></span><br><span class=\"line\">查看某一服务的状态：/etc/intd.d/服务名 status</span><br></pre></td></tr></table></figure>\n<p>我这里以docker 服务为例，设置如下两条命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on</span><br><span class=\"line\">2 # systemctl start docker.service #启动docker服务</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<h3>添加开机自启脚本</h3>\n</li>\n</ol>\n<ul>\n<li>\n<p>方法一</p>\n<ol>\n<li>\n<p>赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）</p>\n</li>\n<li>\n<p>打开/etc/rc.d/rc.local文件，在末尾增加如下内容</p>\n</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"/opt/script/duDefaultService.sh\" &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法二</p>\n<ol start=\"0\">\n<li>设置sh启动脚本必要参数</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"><span class=\"meta\">#</span>chkconfig: 2345 80 80</span><br><span class=\"line\"><span class=\"meta\">#</span>description: auto start web server</span><br></pre></td></tr></table></figure>\n<p>第一句：必须的<br>\n声明sh<br>\n第二句：必须的<br>\n2345 表示linux 有 0-6种状态 在2345下启动<br>\n80：表示启动顺序<br>\n80：表示关闭顺序<br>\n后面两个参数小于 100<br>\n第三句：必须的<br>\n描述</p>\n<p>结果截图如下：</p>\n  <img src=\"/blog/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png\" title=\"自动重启服务列表截图\">\n<ol>\n<li>将脚本移动到/etc/rc.d/init.d目录下</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>增加脚本的可执行权限</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x  /etc/rc.d/init.d/duDefaultService.sh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>添加脚本到开机自动启动项目中</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rc.d/init.d</span><br><span class=\"line\">chkconfig --add duDefaultService.sh</span><br><span class=\"line\">chkconfig duDefaultService.sh on</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>方法三</p>\n<p>1.建立服务文件</p>\n<p>vim /lib/systemd/system/nginx.service</p>\n<p><a href=\"%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AF%B4%E6%98%8E\">Unit</a></p>\n<p>Description=nginx</p>\n<p>After=network.target</p>\n<p>[Service]</p>\n<p>Type=forking</p>\n<p>ExecStart=/www/lanmps/init.d/nginx start</p>\n<p>ExecReload=/www/lanmps/init.d/nginx restart</p>\n<p>ExecStop=/www/lanmps/init.d/nginx  stop</p>\n<p>PrivateTmp=true</p>\n<p>[Install]</p>\n<p>WantedBy=multi-user.target</p>\n<p>Description:描述服务</p>\n<p>After:描述服务类别</p>\n<p>[Service]服务运行参数的设置</p>\n<p>Type=forking是后台运行的形式</p>\n<p>ExecStart为服务的具体运行命令</p>\n<p>ExecReload为重启命令</p>\n<p>ExecStop为停止命令</p>\n<p>PrivateTmp=True表示给服务分配独立的临时空间</p>\n<p>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</p>\n<p>[Install]服务安装的相关设置，可设置为多用户</p>\n<p>2.保存目录</p>\n<p>以754的权限保存在目录：</p>\n<p>/lib/systemd/system</p>\n<p>3.设置开机自启动</p>\n<p>systemctl enable nginx.service</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable XXXX.service</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"js中几种设计模式","catalog":true,"date":"2019-07-14T13:50:10.000Z","subtitle":null,"header-img":null,"_content":"\n1. 工厂模式\n\n> TODO\n\n```javascript\nclass Product  {\n    constructor (name) {\n        this.name = name\n    }\n}\n\nclass Creator {\n    create (name) {\n        return new Product(name)\n    }\n}\n\nconst creatorInstance = new Creator()\n\ncreatorInstance.create('张三')\n```\n\n应用场景：TODO\n\n2. 单例模式\n\n> 一个类只有一个实例，并提供全局访问的方法，一般用于登录、购物车等场景\n\n```javascript\nclass Single {\n    login () {}\n    shopping () {}\n}\n\nSingle.getInstance = (function () {\n    let Instance\n    return () => {\n        if (!Instance) {\n                Instance = new Single()\n        }\n        return Instance\n    }\n})()\n\nconst signleInstanceA = Single.getInstance()\nconst signleInstanceB = Single.getInstance()\nconsole.log(signleInstanceA === signleInstanceB) // true\n```\n\n应用场景：TODO\n\n3. 适配器模式\n\n> 用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问\n\n```javascript\nclass Adapter {\n    money () {\n        return '人民币'\n    }\n}\n\nclass AdapterWrapper {\n    constructor () {\n        this.Adapter = new Adapter()\n    }\n\n    m2$ () {\n        const m = this.Adapter.money()\n        return `人民币兑换成美元`\n    }\n}\n\nconst adapterWrapper = new AdapterWrapper()\nadapterWrapper.m2$()\n```\n\n应用场景：多个对象合并成一个对象\n\n4. 装饰器模式（AOP编程）\n\n> 在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能\n\n```javascript\nclass Source {\n    add (a, b) {\n        return a + b\n    }\n}\n\nclass DecorateSource {\n    constructor () {\n        this.source = new Source()\n    }\n    add (a, b) {\n        console.log('传入的参数为', a, b)\n        return this.source.add(a, b)\n    }\n}\n\nconst decorateSource = new DecorateSource()\ndecorateSource.add(1, 2) // 传入的参数为 1 2     3\n```\n\n应用场景：\n\n- 处理ajax异常上报，数据分析\n- Vue中处理数组变异方法\n\n5. 观察者模式\n\n> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知\n\n```javascript\nclass Sub {\n    constructor () {\n        this.observers = []\n    }\n    attach (observer) {\n        this.observers.push(observer)\n    }\n    notify () {\n        this.observers.forEach(observer => {\n            observer.update()\n        } )\n    }\n}\n\nclass Observer {\n    constructor (name) {\n        this.name = name\n    }\n    update () {\n        console.log(`${this.name}触发更新`)\n    }\n}\n\nconst observerA = new Observer('A')\nconst observerB = new Observer('B')\nconst sub = new Sub()\nsub.attach(observerA)\nsub.attach(observerB)\nsub.notify()\n\n```\n\n应用场景：JS事件、promise、Vue的watch方法\n\n与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。\n","source":"_posts/js中几种设计模式.md","raw":"---\ntitle: js中几种设计模式\ncatalog: true\ndate: 2019-07-14 21:50:10\nsubtitle:\nheader-img:\ntags: javascript\n---\n\n1. 工厂模式\n\n> TODO\n\n```javascript\nclass Product  {\n    constructor (name) {\n        this.name = name\n    }\n}\n\nclass Creator {\n    create (name) {\n        return new Product(name)\n    }\n}\n\nconst creatorInstance = new Creator()\n\ncreatorInstance.create('张三')\n```\n\n应用场景：TODO\n\n2. 单例模式\n\n> 一个类只有一个实例，并提供全局访问的方法，一般用于登录、购物车等场景\n\n```javascript\nclass Single {\n    login () {}\n    shopping () {}\n}\n\nSingle.getInstance = (function () {\n    let Instance\n    return () => {\n        if (!Instance) {\n                Instance = new Single()\n        }\n        return Instance\n    }\n})()\n\nconst signleInstanceA = Single.getInstance()\nconst signleInstanceB = Single.getInstance()\nconsole.log(signleInstanceA === signleInstanceB) // true\n```\n\n应用场景：TODO\n\n3. 适配器模式\n\n> 用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问\n\n```javascript\nclass Adapter {\n    money () {\n        return '人民币'\n    }\n}\n\nclass AdapterWrapper {\n    constructor () {\n        this.Adapter = new Adapter()\n    }\n\n    m2$ () {\n        const m = this.Adapter.money()\n        return `人民币兑换成美元`\n    }\n}\n\nconst adapterWrapper = new AdapterWrapper()\nadapterWrapper.m2$()\n```\n\n应用场景：多个对象合并成一个对象\n\n4. 装饰器模式（AOP编程）\n\n> 在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能\n\n```javascript\nclass Source {\n    add (a, b) {\n        return a + b\n    }\n}\n\nclass DecorateSource {\n    constructor () {\n        this.source = new Source()\n    }\n    add (a, b) {\n        console.log('传入的参数为', a, b)\n        return this.source.add(a, b)\n    }\n}\n\nconst decorateSource = new DecorateSource()\ndecorateSource.add(1, 2) // 传入的参数为 1 2     3\n```\n\n应用场景：\n\n- 处理ajax异常上报，数据分析\n- Vue中处理数组变异方法\n\n5. 观察者模式\n\n> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知\n\n```javascript\nclass Sub {\n    constructor () {\n        this.observers = []\n    }\n    attach (observer) {\n        this.observers.push(observer)\n    }\n    notify () {\n        this.observers.forEach(observer => {\n            observer.update()\n        } )\n    }\n}\n\nclass Observer {\n    constructor (name) {\n        this.name = name\n    }\n    update () {\n        console.log(`${this.name}触发更新`)\n    }\n}\n\nconst observerA = new Observer('A')\nconst observerB = new Observer('B')\nconst sub = new Sub()\nsub.attach(observerA)\nsub.attach(observerB)\nsub.notify()\n\n```\n\n应用场景：JS事件、promise、Vue的watch方法\n\n与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。\n","slug":"js中几种设计模式","published":1,"updated":"2019-07-23T01:57:31.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7j0008n71pi4i6fq8e","content":"<ol>\n<li>工厂模式</li>\n</ol>\n<blockquote>\n<p>TODO</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">    create (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creatorInstance = <span class=\"keyword\">new</span> Creator()</span><br><span class=\"line\"></span><br><span class=\"line\">creatorInstance.create(<span class=\"string\">'张三'</span>)</span><br></pre></td></tr></table></figure>\n<p>应用场景：TODO</p>\n<ol start=\"2\">\n<li>单例模式</li>\n</ol>\n<blockquote>\n<p>一个类只有一个实例，并提供全局访问的方法，一般用于登录、购物车等场景</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span> </span>&#123;</span><br><span class=\"line\">    login () &#123;&#125;</span><br><span class=\"line\">    shopping () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Single.getInstance = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Instance</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Instance) &#123;</span><br><span class=\"line\">                Instance = <span class=\"keyword\">new</span> Single()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceA = Single.getInstance()</span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceB = Single.getInstance()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signleInstanceA === signleInstanceB) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>应用场景：TODO</p>\n<ol start=\"3\">\n<li>适配器模式</li>\n</ol>\n<blockquote>\n<p>用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</span><br><span class=\"line\">    money () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'人民币'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterWrapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Adapter = <span class=\"keyword\">new</span> Adapter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    m2$ () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> m = <span class=\"keyword\">this</span>.Adapter.money()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`人民币兑换成美元`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> adapterWrapper = <span class=\"keyword\">new</span> AdapterWrapper()</span><br><span class=\"line\">adapterWrapper.m2$()</span><br></pre></td></tr></table></figure>\n<p>应用场景：多个对象合并成一个对象</p>\n<ol start=\"4\">\n<li>装饰器模式（AOP编程）</li>\n</ol>\n<blockquote>\n<p>在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;</span><br><span class=\"line\">    add (a, b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorateSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    add (a, b) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'传入的参数为'</span>, a, b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.add(a, b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decorateSource = <span class=\"keyword\">new</span> DecorateSource()</span><br><span class=\"line\">decorateSource.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 传入的参数为 1 2     3</span></span><br></pre></td></tr></table></figure>\n<p>应用场景：</p>\n<ul>\n<li>处理ajax异常上报，数据分析</li>\n<li>Vue中处理数组变异方法</li>\n</ul>\n<ol start=\"5\">\n<li>观察者模式</li>\n</ol>\n<blockquote>\n<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    attach (observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    notify () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">            observer.update()</span><br><span class=\"line\">        &#125; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>触发更新`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observerA = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> observerB = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">sub.attach(observerA)</span><br><span class=\"line\">sub.attach(observerB)</span><br><span class=\"line\">sub.notify()</span><br></pre></td></tr></table></figure>\n<p>应用场景：JS事件、promise、Vue的watch方法</p>\n<p>与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>工厂模式</li>\n</ol>\n<blockquote>\n<p>TODO</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">    create (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creatorInstance = <span class=\"keyword\">new</span> Creator()</span><br><span class=\"line\"></span><br><span class=\"line\">creatorInstance.create(<span class=\"string\">'张三'</span>)</span><br></pre></td></tr></table></figure>\n<p>应用场景：TODO</p>\n<ol start=\"2\">\n<li>单例模式</li>\n</ol>\n<blockquote>\n<p>一个类只有一个实例，并提供全局访问的方法，一般用于登录、购物车等场景</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span> </span>&#123;</span><br><span class=\"line\">    login () &#123;&#125;</span><br><span class=\"line\">    shopping () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Single.getInstance = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Instance</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Instance) &#123;</span><br><span class=\"line\">                Instance = <span class=\"keyword\">new</span> Single()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceA = Single.getInstance()</span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceB = Single.getInstance()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signleInstanceA === signleInstanceB) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>应用场景：TODO</p>\n<ol start=\"3\">\n<li>适配器模式</li>\n</ol>\n<blockquote>\n<p>用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</span><br><span class=\"line\">    money () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'人民币'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterWrapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Adapter = <span class=\"keyword\">new</span> Adapter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    m2$ () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> m = <span class=\"keyword\">this</span>.Adapter.money()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`人民币兑换成美元`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> adapterWrapper = <span class=\"keyword\">new</span> AdapterWrapper()</span><br><span class=\"line\">adapterWrapper.m2$()</span><br></pre></td></tr></table></figure>\n<p>应用场景：多个对象合并成一个对象</p>\n<ol start=\"4\">\n<li>装饰器模式（AOP编程）</li>\n</ol>\n<blockquote>\n<p>在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;</span><br><span class=\"line\">    add (a, b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorateSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    add (a, b) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'传入的参数为'</span>, a, b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.add(a, b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decorateSource = <span class=\"keyword\">new</span> DecorateSource()</span><br><span class=\"line\">decorateSource.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 传入的参数为 1 2     3</span></span><br></pre></td></tr></table></figure>\n<p>应用场景：</p>\n<ul>\n<li>处理ajax异常上报，数据分析</li>\n<li>Vue中处理数组变异方法</li>\n</ul>\n<ol start=\"5\">\n<li>观察者模式</li>\n</ol>\n<blockquote>\n<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    attach (observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    notify () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">            observer.update()</span><br><span class=\"line\">        &#125; )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>触发更新`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observerA = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> observerB = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">sub.attach(observerA)</span><br><span class=\"line\">sub.attach(observerB)</span><br><span class=\"line\">sub.notify()</span><br></pre></td></tr></table></figure>\n<p>应用场景：JS事件、promise、Vue的watch方法</p>\n<p>与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。</p>\n"},{"title":"python爬虫框架scrapy","catalog":true,"date":"2019-06-19T06:07:34.000Z","subtitle":null,"header-img":null,"_content":"### 基本用法\n\n1.创建项目\n\n```shell\nscrapy startproject 项目名称\n```\n\n2.创建一个爬虫\n\n```shell\nscrapy genspider XX XX.com\n```\n\n3.启动脚本\n\n``` shell\nscrapy crawl XX\n```\n\n4.爬虫脚本\n\n 必须要有`name`和`parse`以及`start_urls`方法，`allowed_domains`可选\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    start_urls = ['https://www.baidu.com/']\n\n    def parse(self, response):\n        print(response.text)\n```\n\n其中 start_urls可以接受多个url参数，也可以拆分成多个步骤\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    # start_urls = ['https://www.baidu.com/']\n\n    def start_requests(self):\n        yield scrapy.Request('https://www.baidu.com')\n\n    def parse(self, response):\n        print(response.text)\n```\n\n---\n\n1.`Items`相当于定义的需要输出的数据结构；\n\n`item`传参是爬虫脚本的`parse`方法`yield`过来的对象\n\n---\n\n## Pipline\n\n### 1. 介绍\n\n  当item在Spider中被收集之后，会传递到item pipline中处理；\n\n  作用：\n\n- 清理html数据\n- 验证爬取数据\n- 去重并丢弃\n- 数据持久化\n\n### 2. 编写item pipline\n  \n2.1 必须实现的函数\n\n- process_item\n\n  每个`pipline`都是一个python类，负责接收到`item`并执行一些行为，内部必须实现`process_item(self, item, spider)`方法，必须返回一个`dict`或者`item`对象。\n\n  `piplines`只能接受字典和`items`，在主程序的`parse`方法通过`yield`推送到`piplines`\n\n2.2可以选择实现\n\n- `open_spider(self, spider)`表示当spider开启的时候调用的方法；\n- `close_spider(self, spider)`标识当spider关闭的时候调用的方法；\n  \n注意：\n\n- `pipline`写完需要在配置项`settings`的`ITEM_PIPELINES`里写入来启动\n\n```python\nITEM_PIPELINE {\n  demo.pipelines.testDemoPipeline : 300    // 300是优先级 越大优先级越高\n}\n```\n\n- 文件流写入是缓冲一定字节的数据再一次性写入\n\n  强制立刻写入\n\n```python\nself.file.flush()\n```\n\n---\n","source":"_posts/python爬虫框架scrapy.md","raw":"---\ntitle: python爬虫框架scrapy\ncatalog: true\ndate: 2019-06-19 14:07:34\nsubtitle:\nheader-img:\ntags: python\n---\n### 基本用法\n\n1.创建项目\n\n```shell\nscrapy startproject 项目名称\n```\n\n2.创建一个爬虫\n\n```shell\nscrapy genspider XX XX.com\n```\n\n3.启动脚本\n\n``` shell\nscrapy crawl XX\n```\n\n4.爬虫脚本\n\n 必须要有`name`和`parse`以及`start_urls`方法，`allowed_domains`可选\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    start_urls = ['https://www.baidu.com/']\n\n    def parse(self, response):\n        print(response.text)\n```\n\n其中 start_urls可以接受多个url参数，也可以拆分成多个步骤\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    # start_urls = ['https://www.baidu.com/']\n\n    def start_requests(self):\n        yield scrapy.Request('https://www.baidu.com')\n\n    def parse(self, response):\n        print(response.text)\n```\n\n---\n\n1.`Items`相当于定义的需要输出的数据结构；\n\n`item`传参是爬虫脚本的`parse`方法`yield`过来的对象\n\n---\n\n## Pipline\n\n### 1. 介绍\n\n  当item在Spider中被收集之后，会传递到item pipline中处理；\n\n  作用：\n\n- 清理html数据\n- 验证爬取数据\n- 去重并丢弃\n- 数据持久化\n\n### 2. 编写item pipline\n  \n2.1 必须实现的函数\n\n- process_item\n\n  每个`pipline`都是一个python类，负责接收到`item`并执行一些行为，内部必须实现`process_item(self, item, spider)`方法，必须返回一个`dict`或者`item`对象。\n\n  `piplines`只能接受字典和`items`，在主程序的`parse`方法通过`yield`推送到`piplines`\n\n2.2可以选择实现\n\n- `open_spider(self, spider)`表示当spider开启的时候调用的方法；\n- `close_spider(self, spider)`标识当spider关闭的时候调用的方法；\n  \n注意：\n\n- `pipline`写完需要在配置项`settings`的`ITEM_PIPELINES`里写入来启动\n\n```python\nITEM_PIPELINE {\n  demo.pipelines.testDemoPipeline : 300    // 300是优先级 越大优先级越高\n}\n```\n\n- 文件流写入是缓冲一定字节的数据再一次性写入\n\n  强制立刻写入\n\n```python\nself.file.flush()\n```\n\n---\n","slug":"python爬虫框架scrapy","published":1,"updated":"2019-07-23T01:57:31.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7l0009n71pm5thzchh","content":"<h3><span id=\"基本用法\">基本用法</span></h3>\n<p>1.创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure>\n<p>2.创建一个爬虫</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider XX XX.com</span><br></pre></td></tr></table></figure>\n<p>3.启动脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl XX</span><br></pre></td></tr></table></figure>\n<p>4.爬虫脚本</p>\n<p>必须要有<code>name</code>和<code>parse</code>以及<code>start_urls</code>方法，<code>allowed_domains</code>可选</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'https://www.baidu.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n<p>其中 start_urls可以接受多个url参数，也可以拆分成多个步骤</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># start_urls = ['https://www.baidu.com/']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>1.<code>Items</code>相当于定义的需要输出的数据结构；</p>\n<p><code>item</code>传参是爬虫脚本的<code>parse</code>方法<code>yield</code>过来的对象</p>\n<hr>\n<h2><span id=\"pipline\">Pipline</span></h2>\n<h3><span id=\"1-介绍\">1. 介绍</span></h3>\n<p>当item在Spider中被收集之后，会传递到item pipline中处理；</p>\n<p>作用：</p>\n<ul>\n<li>清理html数据</li>\n<li>验证爬取数据</li>\n<li>去重并丢弃</li>\n<li>数据持久化</li>\n</ul>\n<h3><span id=\"2-编写item-pipline\">2. 编写item pipline</span></h3>\n<p>2.1 必须实现的函数</p>\n<ul>\n<li>\n<p>process_item</p>\n<p>每个<code>pipline</code>都是一个python类，负责接收到<code>item</code>并执行一些行为，内部必须实现<code>process_item(self, item, spider)</code>方法，必须返回一个<code>dict</code>或者<code>item</code>对象。</p>\n<p><code>piplines</code>只能接受字典和<code>items</code>，在主程序的<code>parse</code>方法通过<code>yield</code>推送到<code>piplines</code></p>\n</li>\n</ul>\n<p>2.2可以选择实现</p>\n<ul>\n<li><code>open_spider(self, spider)</code>表示当spider开启的时候调用的方法；</li>\n<li><code>close_spider(self, spider)</code>标识当spider关闭的时候调用的方法；</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><code>pipline</code>写完需要在配置项<code>settings</code>的<code>ITEM_PIPELINES</code>里写入来启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINE &#123;</span><br><span class=\"line\">  demo.pipelines.testDemoPipeline : <span class=\"number\">300</span>    // <span class=\"number\">300</span>是优先级 越大优先级越高</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>文件流写入是缓冲一定字节的数据再一次性写入</p>\n<p>强制立刻写入</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.file.flush()</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h3>基本用法</h3>\n<p>1.创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure>\n<p>2.创建一个爬虫</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider XX XX.com</span><br></pre></td></tr></table></figure>\n<p>3.启动脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl XX</span><br></pre></td></tr></table></figure>\n<p>4.爬虫脚本</p>\n<p>必须要有<code>name</code>和<code>parse</code>以及<code>start_urls</code>方法，<code>allowed_domains</code>可选</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'https://www.baidu.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n<p>其中 start_urls可以接受多个url参数，也可以拆分成多个步骤</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># start_urls = ['https://www.baidu.com/']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>1.<code>Items</code>相当于定义的需要输出的数据结构；</p>\n<p><code>item</code>传参是爬虫脚本的<code>parse</code>方法<code>yield</code>过来的对象</p>\n<hr>\n<h2>Pipline</h2>\n<h3>1. 介绍</h3>\n<p>当item在Spider中被收集之后，会传递到item pipline中处理；</p>\n<p>作用：</p>\n<ul>\n<li>清理html数据</li>\n<li>验证爬取数据</li>\n<li>去重并丢弃</li>\n<li>数据持久化</li>\n</ul>\n<h3>2. 编写item pipline</h3>\n<p>2.1 必须实现的函数</p>\n<ul>\n<li>\n<p>process_item</p>\n<p>每个<code>pipline</code>都是一个python类，负责接收到<code>item</code>并执行一些行为，内部必须实现<code>process_item(self, item, spider)</code>方法，必须返回一个<code>dict</code>或者<code>item</code>对象。</p>\n<p><code>piplines</code>只能接受字典和<code>items</code>，在主程序的<code>parse</code>方法通过<code>yield</code>推送到<code>piplines</code></p>\n</li>\n</ul>\n<p>2.2可以选择实现</p>\n<ul>\n<li><code>open_spider(self, spider)</code>表示当spider开启的时候调用的方法；</li>\n<li><code>close_spider(self, spider)</code>标识当spider关闭的时候调用的方法；</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><code>pipline</code>写完需要在配置项<code>settings</code>的<code>ITEM_PIPELINES</code>里写入来启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINE &#123;</span><br><span class=\"line\">  demo.pipelines.testDemoPipeline : <span class=\"number\">300</span>    // <span class=\"number\">300</span>是优先级 越大优先级越高</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>文件流写入是缓冲一定字节的数据再一次性写入</p>\n<p>强制立刻写入</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.file.flush()</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"react/vue中dom-diff简易版实现","catalog":true,"date":"2019-06-20T03:33:40.000Z","subtitle":null,"header-img":null,"_content":"\n## 一、创建虚拟dom\n\n利用 `create-react-app`快速创建一个项目模板；\n\n删掉src下的源文件，替换成 index.js\n\n首先我们先要用一个对象定义一个虚拟DOM的数据结构：\n\n```shell\nElement {\n    type: 'ul',\n    props: {\n        class: 'list'\n    },\n    children: [\n        Element{\n            type: 'li',\n            props: {\n                class: 'item'\n            },\n            children: ['a']\n        }\n    ]\n}\n```\n\n开始码代码实现虚拟dom的方法实现。\n\n!['虚拟DOM结构'](https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739)\n浏览器上查看打印的日志信息，如下：\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781)\n\n既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法`render`\n\n先遍历最外层`ul`的`type`和`props`两个属性\n\n![render](https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171)\n\n注意：`input`标签的`value`属性 还有所有标签的`style`属性\n\n好了，接下来就是继续遍历`children`属性，此时`children`会有两种情况\n\n1. 如果是文本 直接插入；\n2. 如果是子元素，递归遍历直到最终的结果是文本；\n\n![遍历虚拟don元素转换为真实dom结构](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439)\n\n下一步我们将这个实际的DOM元素结构插入到页面中\n\n![append](https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016)\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852)\n\n完成第一部分。\n\n---\n\n## 二、实现dom-diff算法\n\n`dom-diff`算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。\n\n若`type`不一致直接替换当前节点以及当前节点下的子节点；\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。\n\n补丁包的定义规则如下：\n\n1. 属性不同（type: 'ATTRS', attrs）\n2. 新的节点被删除了 （type: 'REMOVE', index: xxxx）\n3. 节点类型不同/\b新增 （type: 'REPLACE', newNode）\n4. 仅仅是文本变化（type: 'TEXT', text）\n\n新建一个`dom-diff.js`，专门处理`diff`算法\n\n手动调用`diff`方法（react中\b调用`diff`算法是在触发`setState`之后）\n\n两个虚拟dom结构如下：\n\n![虚拟dom结构](https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549)\n\n先处理`type`相同，属性不同的情况。\n\n![属性不同](https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893)\n\n发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中\n\n```shell\n// 补丁包 存放两个虚拟dom的差异部分\nlet patchs = {}\n// 放到最外层的大补丁包中\nif (currentPatchs.length > 0) {\n  patchs[index] = currentPatchs\n}\n```\n\n好了 相同类型的父节点一样，在属性比较完成之后，就需要比较`children`的属性是否有变化\n比较`children`属性内部元素是否变化，利用递归去遍历\n\n```shell\nlet globalIndex = 0\n\nfunction diffChildren (oldChildrens, newChildrens) {\n  oldChildrens.forEach((child, idx) => {\n    walk(child, newChildrens[idx], ++globalIndex)\n  })\n}\n```\n\n如果一开始`type`类型不相同不需要再去比较，直接用新节点替换老节点即可；\n\n```shell\n// type不一致\ncurrentPatchs.push({\n  type: TYPES.REPLACE,\n  newNode: newTree\n})\n```\n\n兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；\n\n最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043)\n\n补丁包的`key`就是对应新节点有变化的数据位置。\n\n---\n\n## 三、 打补丁更新视图\n\n最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。\n\n![开始打补丁](https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221)\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704)\n\n根据之前定义的不同补丁对象结构依次处理\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960)\n\n大功告成！\n\n---\n\n这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了`diff`算法的原理。\n\n如有笔误或者其他实现不对的地方，还望大家指出，谢谢！\n\n具体代码可以参考github链接查看：[dom-diff-demo](https://github.com/Megan-TA/dom-diff-demo)\n","source":"_posts/react-vue中dom-diff简易版实现.md","raw":"---\ntitle: react/vue中dom-diff简易版实现\ncatalog: true\ndate: 2019-06-20 11:33:40\nsubtitle:\nheader-img:\ntags: vue react\n---\n\n## 一、创建虚拟dom\n\n利用 `create-react-app`快速创建一个项目模板；\n\n删掉src下的源文件，替换成 index.js\n\n首先我们先要用一个对象定义一个虚拟DOM的数据结构：\n\n```shell\nElement {\n    type: 'ul',\n    props: {\n        class: 'list'\n    },\n    children: [\n        Element{\n            type: 'li',\n            props: {\n                class: 'item'\n            },\n            children: ['a']\n        }\n    ]\n}\n```\n\n开始码代码实现虚拟dom的方法实现。\n\n!['虚拟DOM结构'](https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739)\n浏览器上查看打印的日志信息，如下：\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781)\n\n既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法`render`\n\n先遍历最外层`ul`的`type`和`props`两个属性\n\n![render](https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171)\n\n注意：`input`标签的`value`属性 还有所有标签的`style`属性\n\n好了，接下来就是继续遍历`children`属性，此时`children`会有两种情况\n\n1. 如果是文本 直接插入；\n2. 如果是子元素，递归遍历直到最终的结果是文本；\n\n![遍历虚拟don元素转换为真实dom结构](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439)\n\n下一步我们将这个实际的DOM元素结构插入到页面中\n\n![append](https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016)\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852)\n\n完成第一部分。\n\n---\n\n## 二、实现dom-diff算法\n\n`dom-diff`算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。\n\n若`type`不一致直接替换当前节点以及当前节点下的子节点；\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。\n\n补丁包的定义规则如下：\n\n1. 属性不同（type: 'ATTRS', attrs）\n2. 新的节点被删除了 （type: 'REMOVE', index: xxxx）\n3. 节点类型不同/\b新增 （type: 'REPLACE', newNode）\n4. 仅仅是文本变化（type: 'TEXT', text）\n\n新建一个`dom-diff.js`，专门处理`diff`算法\n\n手动调用`diff`方法（react中\b调用`diff`算法是在触发`setState`之后）\n\n两个虚拟dom结构如下：\n\n![虚拟dom结构](https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549)\n\n先处理`type`相同，属性不同的情况。\n\n![属性不同](https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893)\n\n发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中\n\n```shell\n// 补丁包 存放两个虚拟dom的差异部分\nlet patchs = {}\n// 放到最外层的大补丁包中\nif (currentPatchs.length > 0) {\n  patchs[index] = currentPatchs\n}\n```\n\n好了 相同类型的父节点一样，在属性比较完成之后，就需要比较`children`的属性是否有变化\n比较`children`属性内部元素是否变化，利用递归去遍历\n\n```shell\nlet globalIndex = 0\n\nfunction diffChildren (oldChildrens, newChildrens) {\n  oldChildrens.forEach((child, idx) => {\n    walk(child, newChildrens[idx], ++globalIndex)\n  })\n}\n```\n\n如果一开始`type`类型不相同不需要再去比较，直接用新节点替换老节点即可；\n\n```shell\n// type不一致\ncurrentPatchs.push({\n  type: TYPES.REPLACE,\n  newNode: newTree\n})\n```\n\n兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；\n\n最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043)\n\n补丁包的`key`就是对应新节点有变化的数据位置。\n\n---\n\n## 三、 打补丁更新视图\n\n最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。\n\n![开始打补丁](https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221)\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704)\n\n根据之前定义的不同补丁对象结构依次处理\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960)\n\n大功告成！\n\n---\n\n这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了`diff`算法的原理。\n\n如有笔误或者其他实现不对的地方，还望大家指出，谢谢！\n\n具体代码可以参考github链接查看：[dom-diff-demo](https://github.com/Megan-TA/dom-diff-demo)\n","slug":"react-vue中dom-diff简易版实现","published":1,"updated":"2019-07-23T01:57:31.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7o000cn71pxu6t71r4","content":"<h2><span id=\"一-创建虚拟dom\">一、创建虚拟dom</span></h2>\n<p>利用 <code>create-react-app</code>快速创建一个项目模板；</p>\n<p>删掉src下的源文件，替换成 index.js</p>\n<p>首先我们先要用一个对象定义一个虚拟DOM的数据结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element &#123;</span><br><span class=\"line\">    type: 'ul',</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        class: 'list'</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Element&#123;</span><br><span class=\"line\">            type: 'li',</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                class: 'item'</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            children: ['a']</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始码代码实现虚拟dom的方法实现。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&amp;h=992&amp;f=png&amp;s=271739\" alt=\"'虚拟DOM结构'\"><br>\n浏览器上查看打印的日志信息，如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&amp;h=410&amp;f=png&amp;s=97781\" alt=\"控制台日志\"></p>\n<p>既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法<code>render</code></p>\n<p>先遍历最外层<code>ul</code>的<code>type</code>和<code>props</code>两个属性</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&amp;h=1244&amp;f=png&amp;s=359336\" alt=\"render\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&amp;h=128&amp;f=png&amp;s=25171\" alt=\"控制台日志\"></p>\n<p>注意：<code>input</code>标签的<code>value</code>属性 还有所有标签的<code>style</code>属性</p>\n<p>好了，接下来就是继续遍历<code>children</code>属性，此时<code>children</code>会有两种情况</p>\n<ol>\n<li>如果是文本 直接插入；</li>\n<li>如果是子元素，递归遍历直到最终的结果是文本；</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&amp;h=484&amp;f=png&amp;s=95541\" alt=\"遍历虚拟don元素转换为真实dom结构\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&amp;h=198&amp;f=png&amp;s=31439\" alt=\"控制台日志\"></p>\n<p>下一步我们将这个实际的DOM元素结构插入到页面中</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&amp;h=774&amp;f=png&amp;s=270016\" alt=\"append\"><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&amp;h=862&amp;f=png&amp;s=112852\" alt=\"控制台日志\"></p>\n<p>完成第一部分。</p>\n<hr>\n<h2><span id=\"二-实现dom-diff算法\">二、实现dom-diff算法</span></h2>\n<p><code>dom-diff</code>算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。</p>\n<p>若<code>type</code>不一致直接替换当前节点以及当前节点下的子节点；<br>\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。</p>\n<p>补丁包的定义规则如下：</p>\n<ol>\n<li>属性不同（type: ‘ATTRS’, attrs）</li>\n<li>新的节点被删除了 （type: ‘REMOVE’, index: xxxx）</li>\n<li>节点类型不同/\b新增 （type: ‘REPLACE’, newNode）</li>\n<li>仅仅是文本变化（type: ‘TEXT’, text）</li>\n</ol>\n<p>新建一个<code>dom-diff.js</code>，专门处理<code>diff</code>算法</p>\n<p>手动调用<code>diff</code>方法（react中\b调用<code>diff</code>算法是在触发<code>setState</code>之后）</p>\n<p>两个虚拟dom结构如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&amp;h=896&amp;f=png&amp;s=189549\" alt=\"虚拟dom结构\"></p>\n<p>先处理<code>type</code>相同，属性不同的情况。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&amp;h=1688&amp;f=png&amp;s=288100\" alt=\"属性不同\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&amp;h=420&amp;f=png&amp;s=70893\" alt=\"控制台日志\"></p>\n<p>发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 补丁包 存放两个虚拟dom的差异部分</span><br><span class=\"line\">let patchs = &#123;&#125;</span><br><span class=\"line\">// 放到最外层的大补丁包中</span><br><span class=\"line\">if (currentPatchs.length &gt; 0) &#123;</span><br><span class=\"line\">  patchs[index] = currentPatchs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了 相同类型的父节点一样，在属性比较完成之后，就需要比较<code>children</code>的属性是否有变化<br>\n比较<code>children</code>属性内部元素是否变化，利用递归去遍历</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalIndex = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function diffChildren (oldChildrens, newChildrens) &#123;</span><br><span class=\"line\">  oldChildrens.forEach((child, idx) =&gt; &#123;</span><br><span class=\"line\">    walk(child, newChildrens[idx], ++globalIndex)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果一开始<code>type</code>类型不相同不需要再去比较，直接用新节点替换老节点即可；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type不一致</span><br><span class=\"line\">currentPatchs.push(&#123;</span><br><span class=\"line\">  type: TYPES.REPLACE,</span><br><span class=\"line\">  newNode: newTree</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；</p>\n<p>最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&amp;h=1092&amp;f=png&amp;s=211043\" alt=\"控制台日志\"></p>\n<p>补丁包的<code>key</code>就是对应新节点有变化的数据位置。</p>\n<hr>\n<h2><span id=\"三-打补丁更新视图\">三、 打补丁更新视图</span></h2>\n<p>最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&amp;h=426&amp;f=png&amp;s=61221\" alt=\"开始打补丁\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&amp;h=1094&amp;f=png&amp;s=175704\" alt=\"补丁步骤\"></p>\n<p>根据之前定义的不同补丁对象结构依次处理</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&amp;h=1138&amp;f=png&amp;s=192351\" alt=\"补丁步骤\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&amp;h=1032&amp;f=png&amp;s=120960\" alt=\"控制台日志\"></p>\n<p>大功告成！</p>\n<hr>\n<p>这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了<code>diff</code>算法的原理。</p>\n<p>如有笔误或者其他实现不对的地方，还望大家指出，谢谢！</p>\n<p>具体代码可以参考github链接查看：<a href=\"https://github.com/Megan-TA/dom-diff-demo\" target=\"_blank\" rel=\"noopener\">dom-diff-demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>一、创建虚拟dom</h2>\n<p>利用 <code>create-react-app</code>快速创建一个项目模板；</p>\n<p>删掉src下的源文件，替换成 index.js</p>\n<p>首先我们先要用一个对象定义一个虚拟DOM的数据结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element &#123;</span><br><span class=\"line\">    type: 'ul',</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        class: 'list'</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Element&#123;</span><br><span class=\"line\">            type: 'li',</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                class: 'item'</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            children: ['a']</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开始码代码实现虚拟dom的方法实现。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&amp;h=992&amp;f=png&amp;s=271739\" alt=\"'虚拟DOM结构'\"><br>\n浏览器上查看打印的日志信息，如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&amp;h=410&amp;f=png&amp;s=97781\" alt=\"控制台日志\"></p>\n<p>既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法<code>render</code></p>\n<p>先遍历最外层<code>ul</code>的<code>type</code>和<code>props</code>两个属性</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&amp;h=1244&amp;f=png&amp;s=359336\" alt=\"render\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&amp;h=128&amp;f=png&amp;s=25171\" alt=\"控制台日志\"></p>\n<p>注意：<code>input</code>标签的<code>value</code>属性 还有所有标签的<code>style</code>属性</p>\n<p>好了，接下来就是继续遍历<code>children</code>属性，此时<code>children</code>会有两种情况</p>\n<ol>\n<li>如果是文本 直接插入；</li>\n<li>如果是子元素，递归遍历直到最终的结果是文本；</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&amp;h=484&amp;f=png&amp;s=95541\" alt=\"遍历虚拟don元素转换为真实dom结构\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&amp;h=198&amp;f=png&amp;s=31439\" alt=\"控制台日志\"></p>\n<p>下一步我们将这个实际的DOM元素结构插入到页面中</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&amp;h=774&amp;f=png&amp;s=270016\" alt=\"append\"><br>\n<img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&amp;h=862&amp;f=png&amp;s=112852\" alt=\"控制台日志\"></p>\n<p>完成第一部分。</p>\n<hr>\n<h2>二、实现dom-diff算法</h2>\n<p><code>dom-diff</code>算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。</p>\n<p>若<code>type</code>不一致直接替换当前节点以及当前节点下的子节点；<br>\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。</p>\n<p>补丁包的定义规则如下：</p>\n<ol>\n<li>属性不同（type: ‘ATTRS’, attrs）</li>\n<li>新的节点被删除了 （type: ‘REMOVE’, index: xxxx）</li>\n<li>节点类型不同/\b新增 （type: ‘REPLACE’, newNode）</li>\n<li>仅仅是文本变化（type: ‘TEXT’, text）</li>\n</ol>\n<p>新建一个<code>dom-diff.js</code>，专门处理<code>diff</code>算法</p>\n<p>手动调用<code>diff</code>方法（react中\b调用<code>diff</code>算法是在触发<code>setState</code>之后）</p>\n<p>两个虚拟dom结构如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&amp;h=896&amp;f=png&amp;s=189549\" alt=\"虚拟dom结构\"></p>\n<p>先处理<code>type</code>相同，属性不同的情况。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&amp;h=1688&amp;f=png&amp;s=288100\" alt=\"属性不同\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&amp;h=420&amp;f=png&amp;s=70893\" alt=\"控制台日志\"></p>\n<p>发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 补丁包 存放两个虚拟dom的差异部分</span><br><span class=\"line\">let patchs = &#123;&#125;</span><br><span class=\"line\">// 放到最外层的大补丁包中</span><br><span class=\"line\">if (currentPatchs.length &gt; 0) &#123;</span><br><span class=\"line\">  patchs[index] = currentPatchs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了 相同类型的父节点一样，在属性比较完成之后，就需要比较<code>children</code>的属性是否有变化<br>\n比较<code>children</code>属性内部元素是否变化，利用递归去遍历</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalIndex = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function diffChildren (oldChildrens, newChildrens) &#123;</span><br><span class=\"line\">  oldChildrens.forEach((child, idx) =&gt; &#123;</span><br><span class=\"line\">    walk(child, newChildrens[idx], ++globalIndex)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果一开始<code>type</code>类型不相同不需要再去比较，直接用新节点替换老节点即可；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type不一致</span><br><span class=\"line\">currentPatchs.push(&#123;</span><br><span class=\"line\">  type: TYPES.REPLACE,</span><br><span class=\"line\">  newNode: newTree</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；</p>\n<p>最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&amp;h=1092&amp;f=png&amp;s=211043\" alt=\"控制台日志\"></p>\n<p>补丁包的<code>key</code>就是对应新节点有变化的数据位置。</p>\n<hr>\n<h2>三、 打补丁更新视图</h2>\n<p>最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&amp;h=426&amp;f=png&amp;s=61221\" alt=\"开始打补丁\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&amp;h=1094&amp;f=png&amp;s=175704\" alt=\"补丁步骤\"></p>\n<p>根据之前定义的不同补丁对象结构依次处理</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&amp;h=1138&amp;f=png&amp;s=192351\" alt=\"补丁步骤\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&amp;h=1032&amp;f=png&amp;s=120960\" alt=\"控制台日志\"></p>\n<p>大功告成！</p>\n<hr>\n<p>这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了<code>diff</code>算法的原理。</p>\n<p>如有笔误或者其他实现不对的地方，还望大家指出，谢谢！</p>\n<p>具体代码可以参考github链接查看：<a href=\"https://github.com/Megan-TA/dom-diff-demo\" target=\"_blank\" rel=\"noopener\">dom-diff-demo</a></p>\n"},{"title":"一些新的api","catalog":true,"date":"2019-07-22T15:00:47.000Z","subtitle":null,"header-img":null,"_content":"\n1. IntersectionObserver\n\n懒加载实现的一种api，兼容性\n\n参考资料： [谈谈IntersectionObserver懒加载](https://www.jianshu.com/p/84a86e41eb2b)\n","source":"_posts/一些新的api.md","raw":"---\ntitle: 一些新的api\ncatalog: true\ndate: 2019-07-22 23:00:47\nsubtitle:\nheader-img:\ntags: javascript\n---\n\n1. IntersectionObserver\n\n懒加载实现的一种api，兼容性\n\n参考资料： [谈谈IntersectionObserver懒加载](https://www.jianshu.com/p/84a86e41eb2b)\n","slug":"一些新的api","published":1,"updated":"2019-07-23T01:57:31.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7q000dn71pw2i09yam","content":"<ol>\n<li>IntersectionObserver</li>\n</ol>\n<p>懒加载实现的一种api，兼容性</p>\n<p>参考资料： <a href=\"https://www.jianshu.com/p/84a86e41eb2b\" target=\"_blank\" rel=\"noopener\">谈谈IntersectionObserver懒加载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>IntersectionObserver</li>\n</ol>\n<p>懒加载实现的一种api，兼容性</p>\n<p>参考资料： <a href=\"https://www.jianshu.com/p/84a86e41eb2b\" target=\"_blank\" rel=\"noopener\">谈谈IntersectionObserver懒加载</a></p>\n"},{"title":"分享个人vscode常用插件","catalog":true,"date":"2019-06-19T05:39:11.000Z","subtitle":null,"header-img":null,"_content":"\n1. Visual Studio IntelliCode 智能补全\n2. prettier 快速格式化 CMD+Shift+P\n3. Regex Previewer 正则表达式测试\n4. stylelint\n5. vetur # 开发 vue，语法补全、提示助手 （必备插件）\n6. vscode-icons # vscode 图标显示\n7. 小程序助手\n8. vscode-element-helper\n9. SVG Viewer # 预览 SVG\n10. Path Intellisense 路径自动补全\n11. minapp # 小程序开发语法补全、提示助手\n12. markdownlint markdown 语法支持和预览\n13. Live Server\n14. koroFileHeader # 函数注释、文件信息\n15. GitLens # git 辅助工具\n16. javascript code snippets # js 代码提示、补全\n17. Eslint # 代码风格提示\n18. Element UI Snippets\n19. EditorConfig for vs code\n20. Document This\n21. Debugger for Chrome\n22. Color HighLight\n23. CodeIf\n24. Code Runner\n25. Chinese Lanfguage Pack for vs code\n26. Bracket Pair Colorizer 括号以多彩颜色区分\n27. Beautify # 美化代码\n28. Auto Rename Tag # 自动重命名标签\n29. Auto Close Tag # 自动闭合标签\n","source":"_posts/分享个人vscode常用插件.md","raw":"---\ntitle: 分享个人vscode常用插件\ncatalog: true\ndate: 2019-06-19 13:39:11\nsubtitle:\nheader-img:\ntags: IDE\n---\n\n1. Visual Studio IntelliCode 智能补全\n2. prettier 快速格式化 CMD+Shift+P\n3. Regex Previewer 正则表达式测试\n4. stylelint\n5. vetur # 开发 vue，语法补全、提示助手 （必备插件）\n6. vscode-icons # vscode 图标显示\n7. 小程序助手\n8. vscode-element-helper\n9. SVG Viewer # 预览 SVG\n10. Path Intellisense 路径自动补全\n11. minapp # 小程序开发语法补全、提示助手\n12. markdownlint markdown 语法支持和预览\n13. Live Server\n14. koroFileHeader # 函数注释、文件信息\n15. GitLens # git 辅助工具\n16. javascript code snippets # js 代码提示、补全\n17. Eslint # 代码风格提示\n18. Element UI Snippets\n19. EditorConfig for vs code\n20. Document This\n21. Debugger for Chrome\n22. Color HighLight\n23. CodeIf\n24. Code Runner\n25. Chinese Lanfguage Pack for vs code\n26. Bracket Pair Colorizer 括号以多彩颜色区分\n27. Beautify # 美化代码\n28. Auto Rename Tag # 自动重命名标签\n29. Auto Close Tag # 自动闭合标签\n","slug":"分享个人vscode常用插件","published":1,"updated":"2019-07-23T01:57:31.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7s000fn71ph60ug35c","content":"<ol>\n<li>Visual Studio IntelliCode 智能补全</li>\n<li>prettier 快速格式化 CMD+Shift+P</li>\n<li>Regex Previewer 正则表达式测试</li>\n<li>stylelint</li>\n<li>vetur # 开发 vue，语法补全、提示助手 （必备插件）</li>\n<li>vscode-icons # vscode 图标显示</li>\n<li>小程序助手</li>\n<li>vscode-element-helper</li>\n<li>SVG Viewer # 预览 SVG</li>\n<li>Path Intellisense 路径自动补全</li>\n<li>minapp # 小程序开发语法补全、提示助手</li>\n<li>markdownlint markdown 语法支持和预览</li>\n<li>Live Server</li>\n<li>koroFileHeader # 函数注释、文件信息</li>\n<li>GitLens # git 辅助工具</li>\n<li>javascript code snippets # js 代码提示、补全</li>\n<li>Eslint # 代码风格提示</li>\n<li>Element UI Snippets</li>\n<li>EditorConfig for vs code</li>\n<li>Document This</li>\n<li>Debugger for Chrome</li>\n<li>Color HighLight</li>\n<li>CodeIf</li>\n<li>Code Runner</li>\n<li>Chinese Lanfguage Pack for vs code</li>\n<li>Bracket Pair Colorizer 括号以多彩颜色区分</li>\n<li>Beautify # 美化代码</li>\n<li>Auto Rename Tag # 自动重命名标签</li>\n<li>Auto Close Tag # 自动闭合标签</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Visual Studio IntelliCode 智能补全</li>\n<li>prettier 快速格式化 CMD+Shift+P</li>\n<li>Regex Previewer 正则表达式测试</li>\n<li>stylelint</li>\n<li>vetur # 开发 vue，语法补全、提示助手 （必备插件）</li>\n<li>vscode-icons # vscode 图标显示</li>\n<li>小程序助手</li>\n<li>vscode-element-helper</li>\n<li>SVG Viewer # 预览 SVG</li>\n<li>Path Intellisense 路径自动补全</li>\n<li>minapp # 小程序开发语法补全、提示助手</li>\n<li>markdownlint markdown 语法支持和预览</li>\n<li>Live Server</li>\n<li>koroFileHeader # 函数注释、文件信息</li>\n<li>GitLens # git 辅助工具</li>\n<li>javascript code snippets # js 代码提示、补全</li>\n<li>Eslint # 代码风格提示</li>\n<li>Element UI Snippets</li>\n<li>EditorConfig for vs code</li>\n<li>Document This</li>\n<li>Debugger for Chrome</li>\n<li>Color HighLight</li>\n<li>CodeIf</li>\n<li>Code Runner</li>\n<li>Chinese Lanfguage Pack for vs code</li>\n<li>Bracket Pair Colorizer 括号以多彩颜色区分</li>\n<li>Beautify # 美化代码</li>\n<li>Auto Rename Tag # 自动重命名标签</li>\n<li>Auto Close Tag # 自动闭合标签</li>\n</ol>\n"},{"title":"利用verdaccio搭建私有npm仓库","catalog":true,"date":"2019-06-16T00:25:18.000Z","subtitle":null,"header-img":null,"_content":"\n随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。\n\n[verdaccio]([https://github.com/verdaccio/verdaccio](https://github.com/verdaccio/verdaccio)\n)是一个部署简易的可以实现github仓储私有化的npm组件，fork于`sinopia`项目，由于`sinopia`项目现在不太维护，存在一些bug，不建议使用。\n\n使用verdaccio的优势\n\n- 配置简单，开箱即用；\n- 不需要数据库,verdaccio内置一个数据库了；\n- 当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；\n\n## 1. 安装verdaccio\n\n```javascript\nnpm i verdaccio -g\n```\n\n## 2. 启动verdaccio\n\n- 默认开启方式\n\n ```shell\nverdaccio\n```\n\n启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中`config.yaml`是配置文件，相关配置文件说明如下\n\n```shell\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to \"+inf\".\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源\n\npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"\n    access: $all  // 所有人都能下载\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: verdaccio.log, level: info}\n\n# you can specify listen address (or simply a port)\nlisten: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。\n```\n\n若在服务端部署，需要以守护进程的方式，推荐使用`pm2`去开启\n\n```shell\npm2 start `which verdaccio`\n```\n\npm2启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n## 如何使用\n\n 打开浏览器输入对应的暴露的地址，比如`192.168.0.1:4873`，\n\n截图如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照截图提示，注册一个用户\n\n```shell\nnpm adduser --registry http://192.168.0.1:4873\n```\n\n安装提示输入账号，密码\n\n## 更改下载源\n\n在每一个客户端中需要更改下载源为verdaccio，这里推荐使用`nrm`，这是一个包下载源管理器。\n\n```shell\nnpm install -g nrm\n\nnrm add verdaccio http://x.x.x.x:4873/\n\nnrm use verdaccio\n```\n\n## 维护\n\n如果需要发布一个包，需要先进行登录\n\n```shell\nnpm login\n```\n\n登录成功之后，在对应的包文件夹下，改好`package.json`版本号，再执行创建发布命令\n\n```shell\nnpm publish\n```\n","source":"_posts/利用verdaccio搭建私有npm仓库.md","raw":"---\ntitle: 利用verdaccio搭建私有npm仓库\ncatalog: true\ndate: 2019-06-16 08:25:18\nsubtitle: \nheader-img:\ntags: node\n---\n\n随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。\n\n[verdaccio]([https://github.com/verdaccio/verdaccio](https://github.com/verdaccio/verdaccio)\n)是一个部署简易的可以实现github仓储私有化的npm组件，fork于`sinopia`项目，由于`sinopia`项目现在不太维护，存在一些bug，不建议使用。\n\n使用verdaccio的优势\n\n- 配置简单，开箱即用；\n- 不需要数据库,verdaccio内置一个数据库了；\n- 当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；\n\n## 1. 安装verdaccio\n\n```javascript\nnpm i verdaccio -g\n```\n\n## 2. 启动verdaccio\n\n- 默认开启方式\n\n ```shell\nverdaccio\n```\n\n启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中`config.yaml`是配置文件，相关配置文件说明如下\n\n```shell\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to \"+inf\".\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源\n\npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"\n    access: $all  // 所有人都能下载\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: verdaccio.log, level: info}\n\n# you can specify listen address (or simply a port)\nlisten: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。\n```\n\n若在服务端部署，需要以守护进程的方式，推荐使用`pm2`去开启\n\n```shell\npm2 start `which verdaccio`\n```\n\npm2启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n## 如何使用\n\n 打开浏览器输入对应的暴露的地址，比如`192.168.0.1:4873`，\n\n截图如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照截图提示，注册一个用户\n\n```shell\nnpm adduser --registry http://192.168.0.1:4873\n```\n\n安装提示输入账号，密码\n\n## 更改下载源\n\n在每一个客户端中需要更改下载源为verdaccio，这里推荐使用`nrm`，这是一个包下载源管理器。\n\n```shell\nnpm install -g nrm\n\nnrm add verdaccio http://x.x.x.x:4873/\n\nnrm use verdaccio\n```\n\n## 维护\n\n如果需要发布一个包，需要先进行登录\n\n```shell\nnpm login\n```\n\n登录成功之后，在对应的包文件夹下，改好`package.json`版本号，再执行创建发布命令\n\n```shell\nnpm publish\n```\n","slug":"利用verdaccio搭建私有npm仓库","published":1,"updated":"2019-07-23T01:57:31.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7t000hn71p0yhchubu","content":"<p>随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。</p>\n<p><a href=\"%5Bhttps://github.com/verdaccio/verdaccio%5D(https://github.com/verdaccio/verdaccio)\">verdaccio</a>是一个部署简易的可以实现github仓储私有化的npm组件，fork于<code>sinopia</code>项目，由于<code>sinopia</code>项目现在不太维护，存在一些bug，不建议使用。</p>\n<p>使用verdaccio的优势</p>\n<ul>\n<li>配置简单，开箱即用；</li>\n<li>不需要数据库,verdaccio内置一个数据库了；</li>\n<li>当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；</li>\n</ul>\n<h2><span id=\"1-安装verdaccio\">1. 安装verdaccio</span></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-启动verdaccio\">2. 启动verdaccio</span></h2>\n<ul>\n<li>默认开启方式</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br></pre></td></tr></table></figure>\n<p>启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中<code>config.yaml</code>是配置文件，相关配置文件说明如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage: ./storage  //npm包存放的路径</span><br><span class=\"line\"></span><br><span class=\"line\">auth:</span><br><span class=\"line\">  htpasswd:</span><br><span class=\"line\">    file: ./htpasswd   //保存用户的账号密码等信息</span><br><span class=\"line\">    # Maximum amount of users allowed to register, defaults to \"+inf\".</span><br><span class=\"line\">    # You can set this to -1 to disable registration.</span><br><span class=\"line\">    max_users: -1  //默认为1000，改为-1，禁止注册</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> a list of other known repositories we can talk to</span><br><span class=\"line\">uplinks:</span><br><span class=\"line\">  npmjs:</span><br><span class=\"line\">    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源</span><br><span class=\"line\"></span><br><span class=\"line\">packages:  //配置权限管理</span><br><span class=\"line\">  '@*/*':</span><br><span class=\"line\">    # scoped packages</span><br><span class=\"line\">    access: $all</span><br><span class=\"line\">    publish: $authenticated</span><br><span class=\"line\"></span><br><span class=\"line\">  '*':</span><br><span class=\"line\">    # allow all users (including non-authenticated users) to read and</span><br><span class=\"line\">    # publish all packages</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # you can specify usernames/groupnames (depending on your auth plugin)</span><br><span class=\"line\">    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"</span><br><span class=\"line\">    access: $all  // 所有人都能下载</span><br><span class=\"line\"></span><br><span class=\"line\">    # allow all known users to publish packages</span><br><span class=\"line\">    # (anyone can register by default, remember?)</span><br><span class=\"line\">    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字</span><br><span class=\"line\"></span><br><span class=\"line\">    # if package is not available locally, proxy requests to 'npmjs' registry</span><br><span class=\"line\">    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> log settings</span><br><span class=\"line\">logs:</span><br><span class=\"line\">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class=\"line\"><span class=\"meta\">  #</span>- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> you can specify listen address (or simply a port)</span><br><span class=\"line\">listen: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。</span><br></pre></td></tr></table></figure>\n<p>若在服务端部署，需要以守护进程的方式，推荐使用<code>pm2</code>去开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `which verdaccio`</span><br></pre></td></tr></table></figure>\n<p>pm2启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<h2><span id=\"如何使用\">如何使用</span></h2>\n<p>打开浏览器输入对应的暴露的地址，比如<code>192.168.0.1:4873</code>，</p>\n<p>截图如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>按照截图提示，注册一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://192.168.0.1:4873</span><br></pre></td></tr></table></figure>\n<p>安装提示输入账号，密码</p>\n<h2><span id=\"更改下载源\">更改下载源</span></h2>\n<p>在每一个客户端中需要更改下载源为verdaccio，这里推荐使用<code>nrm</code>，这是一个包下载源管理器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\"></span><br><span class=\"line\">nrm add verdaccio http://x.x.x.x:4873/</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use verdaccio</span><br></pre></td></tr></table></figure>\n<h2><span id=\"维护\">维护</span></h2>\n<p>如果需要发布一个包，需要先进行登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p>登录成功之后，在对应的包文件夹下，改好<code>package.json</code>版本号，再执行创建发布命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。</p>\n<p><a href=\"%5Bhttps://github.com/verdaccio/verdaccio%5D(https://github.com/verdaccio/verdaccio)\">verdaccio</a>是一个部署简易的可以实现github仓储私有化的npm组件，fork于<code>sinopia</code>项目，由于<code>sinopia</code>项目现在不太维护，存在一些bug，不建议使用。</p>\n<p>使用verdaccio的优势</p>\n<ul>\n<li>配置简单，开箱即用；</li>\n<li>不需要数据库,verdaccio内置一个数据库了；</li>\n<li>当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；</li>\n</ul>\n<h2>1. 安装verdaccio</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g</span><br></pre></td></tr></table></figure>\n<h2>2. 启动verdaccio</h2>\n<ul>\n<li>默认开启方式</li>\n</ul>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br></pre></td></tr></table></figure>\n<p>启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中<code>config.yaml</code>是配置文件，相关配置文件说明如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage: ./storage  //npm包存放的路径</span><br><span class=\"line\"></span><br><span class=\"line\">auth:</span><br><span class=\"line\">  htpasswd:</span><br><span class=\"line\">    file: ./htpasswd   //保存用户的账号密码等信息</span><br><span class=\"line\">    # Maximum amount of users allowed to register, defaults to \"+inf\".</span><br><span class=\"line\">    # You can set this to -1 to disable registration.</span><br><span class=\"line\">    max_users: -1  //默认为1000，改为-1，禁止注册</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> a list of other known repositories we can talk to</span><br><span class=\"line\">uplinks:</span><br><span class=\"line\">  npmjs:</span><br><span class=\"line\">    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源</span><br><span class=\"line\"></span><br><span class=\"line\">packages:  //配置权限管理</span><br><span class=\"line\">  '@*/*':</span><br><span class=\"line\">    # scoped packages</span><br><span class=\"line\">    access: $all</span><br><span class=\"line\">    publish: $authenticated</span><br><span class=\"line\"></span><br><span class=\"line\">  '*':</span><br><span class=\"line\">    # allow all users (including non-authenticated users) to read and</span><br><span class=\"line\">    # publish all packages</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # you can specify usernames/groupnames (depending on your auth plugin)</span><br><span class=\"line\">    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"</span><br><span class=\"line\">    access: $all  // 所有人都能下载</span><br><span class=\"line\"></span><br><span class=\"line\">    # allow all known users to publish packages</span><br><span class=\"line\">    # (anyone can register by default, remember?)</span><br><span class=\"line\">    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字</span><br><span class=\"line\"></span><br><span class=\"line\">    # if package is not available locally, proxy requests to 'npmjs' registry</span><br><span class=\"line\">    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> log settings</span><br><span class=\"line\">logs:</span><br><span class=\"line\">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class=\"line\"><span class=\"meta\">  #</span>- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> you can specify listen address (or simply a port)</span><br><span class=\"line\">listen: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。</span><br></pre></td></tr></table></figure>\n<p>若在服务端部署，需要以守护进程的方式，推荐使用<code>pm2</code>去开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `which verdaccio`</span><br></pre></td></tr></table></figure>\n<p>pm2启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<h2>如何使用</h2>\n<p>打开浏览器输入对应的暴露的地址，比如<code>192.168.0.1:4873</code>，</p>\n<p>截图如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>按照截图提示，注册一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://192.168.0.1:4873</span><br></pre></td></tr></table></figure>\n<p>安装提示输入账号，密码</p>\n<h2>更改下载源</h2>\n<p>在每一个客户端中需要更改下载源为verdaccio，这里推荐使用<code>nrm</code>，这是一个包下载源管理器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\"></span><br><span class=\"line\">nrm add verdaccio http://x.x.x.x:4873/</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use verdaccio</span><br></pre></td></tr></table></figure>\n<h2>维护</h2>\n<p>如果需要发布一个包，需要先进行登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p>登录成功之后，在对应的包文件夹下，改好<code>package.json</code>版本号，再执行创建发布命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n"},{"title":"前端多项目公共模块管理实践","catalog":false,"date":"2019-06-21T06:12:19.000Z","subtitle":null,"header-img":null,"_content":"\n### 1、背景\n\n由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。\n\n### 2、调研\n\n参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：\n\n1. 搭建私有npm仓库；\n2. git submodule；\n3. 外部脚本SDK形式；\n4. iframe；\n\n其中方案1、2比较符合现在工程化和模块化开发形式；\n\n方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；\n\n方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；\n\n方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；\n","source":"_posts/前端多项目公共模块管理实践.md","raw":"---\ntitle: 前端多项目公共模块管理实践\ncatalog: false\ndate: 2019-06-21 14:12:19\nsubtitle:\nheader-img:\ntags: web\n---\n\n### 1、背景\n\n由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。\n\n### 2、调研\n\n参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：\n\n1. 搭建私有npm仓库；\n2. git submodule；\n3. 外部脚本SDK形式；\n4. iframe；\n\n其中方案1、2比较符合现在工程化和模块化开发形式；\n\n方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；\n\n方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；\n\n方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；\n","slug":"前端多项目公共模块管理实践","published":1,"updated":"2019-07-23T01:57:31.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7u000jn71p8m8vusia","content":"<h3><span id=\"1-背景\">1、背景</span></h3>\n<p>由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。</p>\n<h3><span id=\"2-调研\">2、调研</span></h3>\n<p>参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：</p>\n<ol>\n<li>搭建私有npm仓库；</li>\n<li>git submodule；</li>\n<li>外部脚本SDK形式；</li>\n<li>iframe；</li>\n</ol>\n<p>其中方案1、2比较符合现在工程化和模块化开发形式；</p>\n<p>方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；</p>\n<p>方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；</p>\n<p>方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3>1、背景</h3>\n<p>由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。</p>\n<h3>2、调研</h3>\n<p>参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：</p>\n<ol>\n<li>搭建私有npm仓库；</li>\n<li>git submodule；</li>\n<li>外部脚本SDK形式；</li>\n<li>iframe；</li>\n</ol>\n<p>其中方案1、2比较符合现在工程化和模块化开发形式；</p>\n<p>方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；</p>\n<p>方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；</p>\n<p>方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；</p>\n"},{"title":"常用npm包整理","catalog":false,"date":"2019-07-03T01:56:32.000Z","subtitle":null,"header-img":null,"_content":"\n### git钩子\n\n- husky\n- lint-staged\n\n### 代码风格相关\n\n- commitizen\n- eslint\n- standard-version\n- stylelint\n\n```shell\nnpm install commitizen -g\n\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n\n\nyarn add standard-version -D\n\n```\n\n配置`package.json`\n\n```json\n\n\"scripts\": {\n\"release\": \"standard-version\"\n},\n\"husky\": {\n    \"hooks\": {\n        \"pre-commit\": \"lint-staged\"\n    }\n},\n\"lint-staged\": {\n    \"src/**/*.{js}\": [\n        \"eslint --fix\",\n        \"git add\"\n    ]\n}\n```\n\n参考链接：\n\n1. [commitizen](https://github.com/commitizen/cz-cli)\n","source":"_posts/常用npm包整理.md","raw":"---\ntitle: 常用npm包整理\ncatalog: false\ndate: 2019-07-03 09:56:32\nsubtitle:\nheader-img:\ntags: npm\n---\n\n### git钩子\n\n- husky\n- lint-staged\n\n### 代码风格相关\n\n- commitizen\n- eslint\n- standard-version\n- stylelint\n\n```shell\nnpm install commitizen -g\n\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n\n\nyarn add standard-version -D\n\n```\n\n配置`package.json`\n\n```json\n\n\"scripts\": {\n\"release\": \"standard-version\"\n},\n\"husky\": {\n    \"hooks\": {\n        \"pre-commit\": \"lint-staged\"\n    }\n},\n\"lint-staged\": {\n    \"src/**/*.{js}\": [\n        \"eslint --fix\",\n        \"git add\"\n    ]\n}\n```\n\n参考链接：\n\n1. [commitizen](https://github.com/commitizen/cz-cli)\n","slug":"常用npm包整理","published":1,"updated":"2019-07-23T01:57:31.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7v000ln71pf0zd7ivb","content":"<h3><span id=\"git钩子\">git钩子</span></h3>\n<ul>\n<li>husky</li>\n<li>lint-staged</li>\n</ul>\n<h3><span id=\"代码风格相关\">代码风格相关</span></h3>\n<ul>\n<li>commitizen</li>\n<li>eslint</li>\n<li>standard-version</li>\n<li>stylelint</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commitizen -g</span><br><span class=\"line\"></span><br><span class=\"line\">commitizen init cz-conventional-changelog --yarn --dev --exact</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add standard-version -D</span><br></pre></td></tr></table></figure>\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">\"release\": \"standard-version\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">        \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js&#125;\": [</span><br><span class=\"line\">        \"eslint --fix\",</span><br><span class=\"line\">        <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">commitizen</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3>git钩子</h3>\n<ul>\n<li>husky</li>\n<li>lint-staged</li>\n</ul>\n<h3>代码风格相关</h3>\n<ul>\n<li>commitizen</li>\n<li>eslint</li>\n<li>standard-version</li>\n<li>stylelint</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commitizen -g</span><br><span class=\"line\"></span><br><span class=\"line\">commitizen init cz-conventional-changelog --yarn --dev --exact</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add standard-version -D</span><br></pre></td></tr></table></figure>\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">\"release\": \"standard-version\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">        \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js&#125;\": [</span><br><span class=\"line\">        \"eslint --fix\",</span><br><span class=\"line\">        <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">commitizen</a></li>\n</ol>\n"},{"title":"序","catalog":true,"date":"2019-06-15T06:00:06.000Z","subtitle":null,"header-img":null,"_content":"\nhello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。\n\n搭建这个博客的原因，主要受限于以下几点：\n\n1. 平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；\n2. 知识点需要查阅，温故知新，查漏补缺；\n3. 分享自己遇到的一些知识和经验给其他人去参考和借鉴；\n4. 锻炼书写表达能力；\n5. 希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；\n\n如果有任何疑问或者问题咨询，欢迎留言向我咨询；\n\n谢谢。\n","source":"_posts/序.md","raw":"---\ntitle: 序\ncatalog: true\ndate: 2019-06-15 14:00:06\nsubtitle:\nheader-img:\ntags: 随笔\n---\n\nhello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。\n\n搭建这个博客的原因，主要受限于以下几点：\n\n1. 平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；\n2. 知识点需要查阅，温故知新，查漏补缺；\n3. 分享自己遇到的一些知识和经验给其他人去参考和借鉴；\n4. 锻炼书写表达能力；\n5. 希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；\n\n如果有任何疑问或者问题咨询，欢迎留言向我咨询；\n\n谢谢。\n","slug":"序","published":1,"updated":"2019-07-23T01:57:31.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7w000on71phnj1o9xi","content":"<p>hello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。</p>\n<p>搭建这个博客的原因，主要受限于以下几点：</p>\n<ol>\n<li>平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；</li>\n<li>知识点需要查阅，温故知新，查漏补缺；</li>\n<li>分享自己遇到的一些知识和经验给其他人去参考和借鉴；</li>\n<li>锻炼书写表达能力；</li>\n<li>希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；</li>\n</ol>\n<p>如果有任何疑问或者问题咨询，欢迎留言向我咨询；</p>\n<p>谢谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。</p>\n<p>搭建这个博客的原因，主要受限于以下几点：</p>\n<ol>\n<li>平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；</li>\n<li>知识点需要查阅，温故知新，查漏补缺；</li>\n<li>分享自己遇到的一些知识和经验给其他人去参考和借鉴；</li>\n<li>锻炼书写表达能力；</li>\n<li>希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；</li>\n</ol>\n<p>如果有任何疑问或者问题咨询，欢迎留言向我咨询；</p>\n<p>谢谢。</p>\n"},{"title":"记录typescript使用的几个注意点","catalog":true,"date":"2019-07-22T05:38:34.000Z","subtitle":null,"header-img":null,"_content":"\n近期在做前端团队公共模块和方法的私有npm包的时候，采用`typescript`保证包的代码质量，在使用`ts`的过程遇到一些小问题，特此记录下遇到的一些小问题。\n\n1. 不想一个个导入类型文件，希望有全局引用类型文件\n\n一开始在给每个文件定义类型的时候，都会将文件类型放在`types`文件夹下，通过`es6`模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：\n\n```javascript\n// types/test.d.ts\nexport declare const test = '123'\n\n// src/test.ts\nimport { test } from '../types/test'\n\n```\n\n这样的话默认也是把`.d.ts`文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？\n\n答案是有的：利用全局的`namespace`和`tsconfig.json`配置\n\n以下是`tsconfig.json`一些配置项：\n\n```javascript\n{\n    \"compilerOptions\": {\n      \"target\": \"es5\",\n      \"module\": \"commonjs\",\n      \"outDir\": \"./dist/lib\",\n      \"declaration\": true,  // 开启打包之后会输出.d.ts文件\n      \"declarationDir\": \"./dist/types\",  // 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径\n      \"strict\": true,\n      \"jsx\": \"preserve\",\n      \"importHelpers\": true,\n      \"removeComments\": true,\n      \"moduleResolution\": \"node\",\n      \"experimentalDecorators\": true,\n      \"allowJs\": false,\n      \"esModuleInterop\": true,\n      \"allowSyntheticDefaultImports\": true,\n      \"sourceMap\": false,\n      \"baseUrl\": \".\",\n      \"types\": [\n        \"node\",\n        \"./types\"  // 本地types所在目录，必须在此引入\n      ],\n      \"lib\": [\n        \"esnext\",\n        \"dom\",\n        \"dom.iterable\",\n        \"scripthost\"\n      ]\n    },\n    \"include\": [\n      \"src/**/*.ts\",\n      \"src/**/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"node_modules\"\n    ]\n}\n\n```\n\n注意上面的types配置需要将自己定义的`types`文件导入进来，这样一个未知类型会在这个指定范围去查找。\n\n项目代码使用：\n\n```javascript\n//types/test.d.ts\ndeclare namespace Test {\n    interface Detail {\n        name: string\n    }\n}\n\n// src/test.ts\nfunction getTestDetail (detail: Test.Detail){}\n\n```\n\n这样就不需要项目代码去引用类型文件，缺点是暴露全局的`namespace`，需要自己根据情况作出取舍。\n\n2. 定义自定义对象的属性枚举值\n\n定义一个配置对象，除了`key`之外其他属性一样，利用枚举特性定义`key`\n\n```javascript\ndeclare enum ENV {\n  dev = 'dev',\n  prod = 'prod'\n}\n\nexport interface ConfigResult {\n  region: string\n  accessKeyId: string\n  accessKeySecret: string\n  expAfter: number\n  bucket: string\n  maxSize: number\n  startsWith: string\n  ossHost: string\n  host: string\n}\n\nexport interface Config {\n  [key: string]: {\n    [key in ENV]: ConfigResult\n  }\n}\n\n```\n","source":"_posts/记录typescript使用的几个注意点.md","raw":"---\ntitle: 记录typescript使用的几个注意点\ncatalog: true\ndate: 2019-07-22 13:38:34\nsubtitle:\nheader-img:\ntags: javascript\n---\n\n近期在做前端团队公共模块和方法的私有npm包的时候，采用`typescript`保证包的代码质量，在使用`ts`的过程遇到一些小问题，特此记录下遇到的一些小问题。\n\n1. 不想一个个导入类型文件，希望有全局引用类型文件\n\n一开始在给每个文件定义类型的时候，都会将文件类型放在`types`文件夹下，通过`es6`模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：\n\n```javascript\n// types/test.d.ts\nexport declare const test = '123'\n\n// src/test.ts\nimport { test } from '../types/test'\n\n```\n\n这样的话默认也是把`.d.ts`文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？\n\n答案是有的：利用全局的`namespace`和`tsconfig.json`配置\n\n以下是`tsconfig.json`一些配置项：\n\n```javascript\n{\n    \"compilerOptions\": {\n      \"target\": \"es5\",\n      \"module\": \"commonjs\",\n      \"outDir\": \"./dist/lib\",\n      \"declaration\": true,  // 开启打包之后会输出.d.ts文件\n      \"declarationDir\": \"./dist/types\",  // 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径\n      \"strict\": true,\n      \"jsx\": \"preserve\",\n      \"importHelpers\": true,\n      \"removeComments\": true,\n      \"moduleResolution\": \"node\",\n      \"experimentalDecorators\": true,\n      \"allowJs\": false,\n      \"esModuleInterop\": true,\n      \"allowSyntheticDefaultImports\": true,\n      \"sourceMap\": false,\n      \"baseUrl\": \".\",\n      \"types\": [\n        \"node\",\n        \"./types\"  // 本地types所在目录，必须在此引入\n      ],\n      \"lib\": [\n        \"esnext\",\n        \"dom\",\n        \"dom.iterable\",\n        \"scripthost\"\n      ]\n    },\n    \"include\": [\n      \"src/**/*.ts\",\n      \"src/**/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"node_modules\"\n    ]\n}\n\n```\n\n注意上面的types配置需要将自己定义的`types`文件导入进来，这样一个未知类型会在这个指定范围去查找。\n\n项目代码使用：\n\n```javascript\n//types/test.d.ts\ndeclare namespace Test {\n    interface Detail {\n        name: string\n    }\n}\n\n// src/test.ts\nfunction getTestDetail (detail: Test.Detail){}\n\n```\n\n这样就不需要项目代码去引用类型文件，缺点是暴露全局的`namespace`，需要自己根据情况作出取舍。\n\n2. 定义自定义对象的属性枚举值\n\n定义一个配置对象，除了`key`之外其他属性一样，利用枚举特性定义`key`\n\n```javascript\ndeclare enum ENV {\n  dev = 'dev',\n  prod = 'prod'\n}\n\nexport interface ConfigResult {\n  region: string\n  accessKeyId: string\n  accessKeySecret: string\n  expAfter: number\n  bucket: string\n  maxSize: number\n  startsWith: string\n  ossHost: string\n  host: string\n}\n\nexport interface Config {\n  [key: string]: {\n    [key in ENV]: ConfigResult\n  }\n}\n\n```\n","slug":"记录typescript使用的几个注意点","published":1,"updated":"2019-07-23T01:57:31.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7w000qn71p56kgrjqj","content":"<p>近期在做前端团队公共模块和方法的私有npm包的时候，采用<code>typescript</code>保证包的代码质量，在使用<code>ts</code>的过程遇到一些小问题，特此记录下遇到的一些小问题。</p>\n<ol>\n<li>不想一个个导入类型文件，希望有全局引用类型文件</li>\n</ol>\n<p>一开始在给每个文件定义类型的时候，都会将文件类型放在<code>types</code>文件夹下，通过<code>es6</code>模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types/test.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> declare <span class=\"keyword\">const</span> test = <span class=\"string\">'123'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/test'</span></span><br></pre></td></tr></table></figure>\n<p>这样的话默认也是把<code>.d.ts</code>文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？</p>\n<p>答案是有的：利用全局的<code>namespace</code>和<code>tsconfig.json</code>配置</p>\n<p>以下是<code>tsconfig.json</code>一些配置项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist/lib\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">// 开启打包之后会输出.d.ts文件</span></span><br><span class=\"line\">      <span class=\"string\">\"declarationDir\"</span>: <span class=\"string\">\"./dist/types\"</span>,  <span class=\"comment\">// 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径</span></span><br><span class=\"line\">      <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"string\">\"preserve\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowJs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./types\"</span>  <span class=\"comment\">// 本地types所在目录，必须在此引入</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"lib\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"esnext\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom.iterable\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"scripthost\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"src/**/*.ts\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"src/**/**/*.ts\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上面的types配置需要将自己定义的<code>types</code>文件导入进来，这样一个未知类型会在这个指定范围去查找。</p>\n<p>项目代码使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//types/test.d.ts</span></span><br><span class=\"line\">declare namespace Test &#123;</span><br><span class=\"line\">    interface Detail &#123;</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTestDetail</span> (<span class=\"params\">detail: Test.Detail</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就不需要项目代码去引用类型文件，缺点是暴露全局的<code>namespace</code>，需要自己根据情况作出取舍。</p>\n<ol start=\"2\">\n<li>定义自定义对象的属性枚举值</li>\n</ol>\n<p>定义一个配置对象，除了<code>key</code>之外其他属性一样，利用枚举特性定义<code>key</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare enum ENV &#123;</span><br><span class=\"line\">  dev = <span class=\"string\">'dev'</span>,</span><br><span class=\"line\">  prod = <span class=\"string\">'prod'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ConfigResult &#123;</span><br><span class=\"line\">  region: string</span><br><span class=\"line\">  accessKeyId: string</span><br><span class=\"line\">  accessKeySecret: string</span><br><span class=\"line\">  expAfter: number</span><br><span class=\"line\">  bucket: string</span><br><span class=\"line\">  maxSize: number</span><br><span class=\"line\">  startsWith: string</span><br><span class=\"line\">  ossHost: string</span><br><span class=\"line\">  host: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface Config &#123;</span><br><span class=\"line\">  [key: string]: &#123;</span><br><span class=\"line\">    [key <span class=\"keyword\">in</span> ENV]: ConfigResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>近期在做前端团队公共模块和方法的私有npm包的时候，采用<code>typescript</code>保证包的代码质量，在使用<code>ts</code>的过程遇到一些小问题，特此记录下遇到的一些小问题。</p>\n<ol>\n<li>不想一个个导入类型文件，希望有全局引用类型文件</li>\n</ol>\n<p>一开始在给每个文件定义类型的时候，都会将文件类型放在<code>types</code>文件夹下，通过<code>es6</code>模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types/test.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> declare <span class=\"keyword\">const</span> test = <span class=\"string\">'123'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/test'</span></span><br></pre></td></tr></table></figure>\n<p>这样的话默认也是把<code>.d.ts</code>文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？</p>\n<p>答案是有的：利用全局的<code>namespace</code>和<code>tsconfig.json</code>配置</p>\n<p>以下是<code>tsconfig.json</code>一些配置项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist/lib\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">// 开启打包之后会输出.d.ts文件</span></span><br><span class=\"line\">      <span class=\"string\">\"declarationDir\"</span>: <span class=\"string\">\"./dist/types\"</span>,  <span class=\"comment\">// 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径</span></span><br><span class=\"line\">      <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"string\">\"preserve\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowJs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./types\"</span>  <span class=\"comment\">// 本地types所在目录，必须在此引入</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"lib\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"esnext\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom.iterable\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"scripthost\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"src/**/*.ts\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"src/**/**/*.ts\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上面的types配置需要将自己定义的<code>types</code>文件导入进来，这样一个未知类型会在这个指定范围去查找。</p>\n<p>项目代码使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//types/test.d.ts</span></span><br><span class=\"line\">declare namespace Test &#123;</span><br><span class=\"line\">    interface Detail &#123;</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTestDetail</span> (<span class=\"params\">detail: Test.Detail</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就不需要项目代码去引用类型文件，缺点是暴露全局的<code>namespace</code>，需要自己根据情况作出取舍。</p>\n<ol start=\"2\">\n<li>定义自定义对象的属性枚举值</li>\n</ol>\n<p>定义一个配置对象，除了<code>key</code>之外其他属性一样，利用枚举特性定义<code>key</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare enum ENV &#123;</span><br><span class=\"line\">  dev = <span class=\"string\">'dev'</span>,</span><br><span class=\"line\">  prod = <span class=\"string\">'prod'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ConfigResult &#123;</span><br><span class=\"line\">  region: string</span><br><span class=\"line\">  accessKeyId: string</span><br><span class=\"line\">  accessKeySecret: string</span><br><span class=\"line\">  expAfter: number</span><br><span class=\"line\">  bucket: string</span><br><span class=\"line\">  maxSize: number</span><br><span class=\"line\">  startsWith: string</span><br><span class=\"line\">  ossHost: string</span><br><span class=\"line\">  host: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface Config &#123;</span><br><span class=\"line\">  [key: string]: &#123;</span><br><span class=\"line\">    [key <span class=\"keyword\">in</span> ENV]: ConfigResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"记录工单系统的前端性能优化","catalog":true,"date":"2019-07-22T06:01:38.000Z","subtitle":null,"header-img":null,"_content":"\n","source":"_posts/记录工单系统的前端性能优化.md","raw":"---\ntitle: 记录工单系统的前端性能优化\ncatalog: true\ndate: 2019-07-22 14:01:38\nsubtitle:\nheader-img:\ntags: 前端\n---\n\n","slug":"记录工单系统的前端性能优化","published":1,"updated":"2019-07-23T01:57:31.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f7x000rn71p6npq1k9h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"nginx入门","catalog":true,"date":"2019-06-19T05:34:23.000Z","subtitle":null,"header-img":null,"_content":"\n1. 环境\n\n    CENTOS>=7.0,位数 X64 CENTOS 7.2\n\n2. 关闭 iptables\n\n    iptables命令是Linux上常用的防火墙软件\n\n    | 功能        | 命令           |\n    | :------------- |:-------------|\n    | 停止防火墙      | systemctl stop firewalld.service |\n    | 永久关闭防火墙   | systemctl disable firewalld.service |\n\n3. 安装依赖\n\n    ```shell\n    yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n    yum  -y install wget httpd-tools vim\n    ```\n\n4. 开始安装nginx\n\n    新建一个文件\n\n    ```shell\n    vi /etc/yum.repos.d/nginx.repo\n    ```\n\n    内容输入如下：\n\n    ```shell\n    [nginx]\n    name=nginx repo\n    baseurl=http://nginx.org/packages/centos/7/$basearch/\n    gpgcheck=0\n    enabled=1\n    ```\n\n    其中 centos/7 根据自己运行环境配置 系统名/版本号\n\n    下载nginx\n\n    ```shell\n    yum install nginx -y\n    nginx -v\n    nginx -V\n    ```\n\n---\n\n## nginx常用操作\n\n1. 查看配置文件和目录\n\n    ```shell\n    rpm -ql nginx\n    ```\n\n    相关文件说明：\n\n    | 类型 | 路径  | 用途 |\n    | :--- | :--- | :-- |\n    | 配置文件| /etc/logrotate.d/nginx| 用于logrotate服务的日志切割\n    | 配置文件| /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf| 主配置文件\n    | 配置文件| /etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params| cgi配置,fastcgi配置\n    | 配置文件| /etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf| 编码转换映射转化文件\n    | 配置文件| /etc/nginx/mime.types| 设置http协议的Content-Type与扩展名对应关系\n    | 配置文件| /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug| 用于配置系统守护进程管理器管理方式\n    | 配置文件| /etc/nginx/modules /usr/lib64/nginx/modules| nginx模块目录\n    | 命令| /usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT| nginx的手册和帮助文件\n    | 目录| /var/cache/nginx| nginx的缓存目录\n    | 目录| /var/log/nginx| nginx的日志目录\n\n2. 启动和重新加载以及关闭\n\n    ```shell\n    systemctl restart nginx.service\n    systemctl reload nginx.service\n    systemctl stop nginx.service\n\n    nginx -s reload\n    ```\n\n    如果在启动的时候可能会遇到下列问题：\n\n    1. 端口被占用；\n\n    ```shell\n    Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] still could not bind\n\n    ```\n\n    可以先查看进程，再杀死对应进程\n\n    ```shell\n    netstat -ntpl\n\n    kill 进程号\n    ```\n\n3. 配置nginx\n\n  > /etc/nginx/nginx.conf\n\n 查看日志命令 tailf -f log目录\n\n  ```shell\n    user  nginx;   设置nginx服务的系统使用用户  \n    worker_processes  1;  工作进程数,一般和CPU数量相同\n\n    error_log  /var/log/nginx/error.log warn;   nginx的错误日志  \n    pid        /var/run/nginx.pid;   nginx服务启动时的pid\n\n    events {\n        worker_connections  1024;每个进程允许的最大连接数 10000\n    }\n\n    http {\n        include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系\n        default_type  application/octet-stream;//默认content-type\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                        '$status $body_bytes_sent \"$http_referer\" '\n                        '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式\n\n        access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应\n\n        sendfile        on;//启用sendfile\n        #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）\n        #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率\n\n        keepalive_timeout  65;//超时时间是65秒\n\n        #gzip  on;gzip压缩\n\n        include /etc/nginx/conf.d/*.conf;//包含的子配置文件\n    }\n  ```\n\n  > /etc/default.conf\n\n  ```shell\n    server {\n        listen       80;\n        # 用域名方式访问的地址\n        server_name  localhost;  \n\n        #charset koi8-r; //编码\n        #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称\n\n        # 代理\n        location / {\n            proxy_pass http://localhost:3000\n        }\n\n\n        # 转发请求静态资源（js、css）规则\n        location ~ .*\\.(html|js|css)$ {\n            # CORS\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,DELETE;\n            add_header Access-Control-Allow-Headers Content-Type;\n            # 默认带上客户端cookie\n            add_header Access-Control-Allow-Credentials true;\n            # 缓存1h\n            expires 1h;\n            # 开启gzip\n            gzip on;\n            # gzip压缩HTTP版本号 一般是1.1\n            gzip_http_version 1.1;\n            # gzip压缩等级 越大压缩率越高 1-9\n            gzip_comp_level 2;\n            # 默认不指定不会缓存css资源 需要指定text/css类型\n            gzip_types application/javascript text/css;\n            # 资源目录\n            root /data/html;\n        }\n\n        # 设置图片请求规则\n        location ~ .*\\.(gif|png|jpg|webp)$ {\n            expires 1h;\n            gzip on;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types image/jpeg image/png image/gif image/webp;\n            ## 防盗链\n            valid_referers none blocked xx.xxx.xxx.xx;\n            if ($invalid_referer) {\n                return 403;\n            }\n            # 资源目录\n            root /data/html;\n        }\n\n        location ~ ^/download {\n            # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩\n            # linux下运行gzip 文件名会生成压缩gz文件\n            # url最直接访问该文件路径就会自动启动下载该资源\n            gzip_static on;\n            tcp_nopush on;  \n            root /data/download;\n        }\n\n        location / {\n            root   /usr/share/nginx/html;  //静态文件根目录\n            index  index.html index.htm;  //首页的索引文件\n        }\n\n        #error_page  404              /404.html;  //指定错误页面\n\n        # redirect server error pages to the static page /50x.html\n        # 把后台错误重定向到静态的50x.html页面\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        # 把PHP脚本9000端口上监听的FastCGI服务\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # 不允许访问.htaccess文件 只允许指定的ip访问\n        location ~ /\\.ht {\n            allow 127.0.0.1\n            deny  all;\n        }\n    }\n  ```\n\n> 实现负载均衡\n\n1. 解决高并发、海量数据问题\n2. 配置类型\n    1. 轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；\n    2. ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定放一个后端服务器，可以解决session的问题；\n    3. weight（加权轮询）指定轮询策略，weight和访问比率成正比，用于后端服务器性能不均的情况；\n    4. least_conn 最小连接数，哪个连接少就分给谁。\n\n    集群状态：\n\n| 状态 | 描述 |\n| :--- | :--- |\n| down | 不参与负载均衡 |\n| backup | 备份的服务器 |\n| max_fails | 允许请求失败的次数 |\n| fail_timeout | 经过max_fails失败后，服务暂停的时间 |\n| max_conts | 限制最大的接收的连接数 |\n\n```shell\n    upstream test1 {\n        ip_hsah;\n        server http://localhost:3000 weight=2;\n        server http://localhost:4000 weight=1;\n        server http://localhost:5000 down;\n    }\n\n    server {\n        # 访问负载均衡构造的集群\n        location / {\n            # 和upstrem的name对应\n            proxy_pass http://test1;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test1.com;\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test2.com;\n        location / {\n            proxy_pass http://localhost:4000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test3.com;\n        location / {\n            proxy_pass http://localhost:5000;\n        }\n    }\n\n```\n\n此时访问`www.test.com`通过代理到访问`www.test1.com`，而访问test1的请求被负载均衡按照策略访问test1或者test2\n","source":"_posts/nginx入门.md","raw":"---\ntitle: nginx入门\ncatalog: true\ndate: 2019-06-19 13:34:23\nsubtitle:\nheader-img:\ntags: nginx\n---\n\n1. 环境\n\n    CENTOS>=7.0,位数 X64 CENTOS 7.2\n\n2. 关闭 iptables\n\n    iptables命令是Linux上常用的防火墙软件\n\n    | 功能        | 命令           |\n    | :------------- |:-------------|\n    | 停止防火墙      | systemctl stop firewalld.service |\n    | 永久关闭防火墙   | systemctl disable firewalld.service |\n\n3. 安装依赖\n\n    ```shell\n    yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n    yum  -y install wget httpd-tools vim\n    ```\n\n4. 开始安装nginx\n\n    新建一个文件\n\n    ```shell\n    vi /etc/yum.repos.d/nginx.repo\n    ```\n\n    内容输入如下：\n\n    ```shell\n    [nginx]\n    name=nginx repo\n    baseurl=http://nginx.org/packages/centos/7/$basearch/\n    gpgcheck=0\n    enabled=1\n    ```\n\n    其中 centos/7 根据自己运行环境配置 系统名/版本号\n\n    下载nginx\n\n    ```shell\n    yum install nginx -y\n    nginx -v\n    nginx -V\n    ```\n\n---\n\n## nginx常用操作\n\n1. 查看配置文件和目录\n\n    ```shell\n    rpm -ql nginx\n    ```\n\n    相关文件说明：\n\n    | 类型 | 路径  | 用途 |\n    | :--- | :--- | :-- |\n    | 配置文件| /etc/logrotate.d/nginx| 用于logrotate服务的日志切割\n    | 配置文件| /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf| 主配置文件\n    | 配置文件| /etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params| cgi配置,fastcgi配置\n    | 配置文件| /etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf| 编码转换映射转化文件\n    | 配置文件| /etc/nginx/mime.types| 设置http协议的Content-Type与扩展名对应关系\n    | 配置文件| /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug| 用于配置系统守护进程管理器管理方式\n    | 配置文件| /etc/nginx/modules /usr/lib64/nginx/modules| nginx模块目录\n    | 命令| /usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT| nginx的手册和帮助文件\n    | 目录| /var/cache/nginx| nginx的缓存目录\n    | 目录| /var/log/nginx| nginx的日志目录\n\n2. 启动和重新加载以及关闭\n\n    ```shell\n    systemctl restart nginx.service\n    systemctl reload nginx.service\n    systemctl stop nginx.service\n\n    nginx -s reload\n    ```\n\n    如果在启动的时候可能会遇到下列问题：\n\n    1. 端口被占用；\n\n    ```shell\n    Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n    nginx: [emerg] still could not bind\n\n    ```\n\n    可以先查看进程，再杀死对应进程\n\n    ```shell\n    netstat -ntpl\n\n    kill 进程号\n    ```\n\n3. 配置nginx\n\n  > /etc/nginx/nginx.conf\n\n 查看日志命令 tailf -f log目录\n\n  ```shell\n    user  nginx;   设置nginx服务的系统使用用户  \n    worker_processes  1;  工作进程数,一般和CPU数量相同\n\n    error_log  /var/log/nginx/error.log warn;   nginx的错误日志  \n    pid        /var/run/nginx.pid;   nginx服务启动时的pid\n\n    events {\n        worker_connections  1024;每个进程允许的最大连接数 10000\n    }\n\n    http {\n        include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系\n        default_type  application/octet-stream;//默认content-type\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                        '$status $body_bytes_sent \"$http_referer\" '\n                        '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式\n\n        access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应\n\n        sendfile        on;//启用sendfile\n        #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）\n        #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率\n\n        keepalive_timeout  65;//超时时间是65秒\n\n        #gzip  on;gzip压缩\n\n        include /etc/nginx/conf.d/*.conf;//包含的子配置文件\n    }\n  ```\n\n  > /etc/default.conf\n\n  ```shell\n    server {\n        listen       80;\n        # 用域名方式访问的地址\n        server_name  localhost;  \n\n        #charset koi8-r; //编码\n        #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称\n\n        # 代理\n        location / {\n            proxy_pass http://localhost:3000\n        }\n\n\n        # 转发请求静态资源（js、css）规则\n        location ~ .*\\.(html|js|css)$ {\n            # CORS\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,DELETE;\n            add_header Access-Control-Allow-Headers Content-Type;\n            # 默认带上客户端cookie\n            add_header Access-Control-Allow-Credentials true;\n            # 缓存1h\n            expires 1h;\n            # 开启gzip\n            gzip on;\n            # gzip压缩HTTP版本号 一般是1.1\n            gzip_http_version 1.1;\n            # gzip压缩等级 越大压缩率越高 1-9\n            gzip_comp_level 2;\n            # 默认不指定不会缓存css资源 需要指定text/css类型\n            gzip_types application/javascript text/css;\n            # 资源目录\n            root /data/html;\n        }\n\n        # 设置图片请求规则\n        location ~ .*\\.(gif|png|jpg|webp)$ {\n            expires 1h;\n            gzip on;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types image/jpeg image/png image/gif image/webp;\n            ## 防盗链\n            valid_referers none blocked xx.xxx.xxx.xx;\n            if ($invalid_referer) {\n                return 403;\n            }\n            # 资源目录\n            root /data/html;\n        }\n\n        location ~ ^/download {\n            # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩\n            # linux下运行gzip 文件名会生成压缩gz文件\n            # url最直接访问该文件路径就会自动启动下载该资源\n            gzip_static on;\n            tcp_nopush on;  \n            root /data/download;\n        }\n\n        location / {\n            root   /usr/share/nginx/html;  //静态文件根目录\n            index  index.html index.htm;  //首页的索引文件\n        }\n\n        #error_page  404              /404.html;  //指定错误页面\n\n        # redirect server error pages to the static page /50x.html\n        # 把后台错误重定向到静态的50x.html页面\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        # 把PHP脚本9000端口上监听的FastCGI服务\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # 不允许访问.htaccess文件 只允许指定的ip访问\n        location ~ /\\.ht {\n            allow 127.0.0.1\n            deny  all;\n        }\n    }\n  ```\n\n> 实现负载均衡\n\n1. 解决高并发、海量数据问题\n2. 配置类型\n    1. 轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；\n    2. ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定放一个后端服务器，可以解决session的问题；\n    3. weight（加权轮询）指定轮询策略，weight和访问比率成正比，用于后端服务器性能不均的情况；\n    4. least_conn 最小连接数，哪个连接少就分给谁。\n\n    集群状态：\n\n| 状态 | 描述 |\n| :--- | :--- |\n| down | 不参与负载均衡 |\n| backup | 备份的服务器 |\n| max_fails | 允许请求失败的次数 |\n| fail_timeout | 经过max_fails失败后，服务暂停的时间 |\n| max_conts | 限制最大的接收的连接数 |\n\n```shell\n    upstream test1 {\n        ip_hsah;\n        server http://localhost:3000 weight=2;\n        server http://localhost:4000 weight=1;\n        server http://localhost:5000 down;\n    }\n\n    server {\n        # 访问负载均衡构造的集群\n        location / {\n            # 和upstrem的name对应\n            proxy_pass http://test1;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test1.com;\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test2.com;\n        location / {\n            proxy_pass http://localhost:4000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test3.com;\n        location / {\n            proxy_pass http://localhost:5000;\n        }\n    }\n\n```\n\n此时访问`www.test.com`通过代理到访问`www.test1.com`，而访问test1的请求被负载均衡按照策略访问test1或者test2\n","slug":"nginx入门","published":1,"updated":"2019-07-23T01:57:31.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyf68f8a0018n71pnlykgax5","content":"<ol>\n<li>\n<p>环境</p>\n<p>CENTOS&gt;=7.0,位数 X64 CENTOS 7.2</p>\n</li>\n<li>\n<p>关闭 iptables</p>\n<p>iptables命令是Linux上常用的防火墙软件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">停止防火墙</td>\n<td style=\"text-align:left\">systemctl stop firewalld.service</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">永久关闭防火墙</td>\n<td style=\"text-align:left\">systemctl disable firewalld.service</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>安装依赖</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class=\"line\">yum  -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>开始安装nginx</p>\n<p>新建一个文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n<p>内容输入如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>其中 centos/7 根据自己运行环境配置 系统名/版本号</p>\n<p>下载nginx</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2><span id=\"nginx常用操作\">nginx常用操作</span></h2>\n<ol>\n<li>\n<p>查看配置文件和目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<p>相关文件说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">路径</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/logrotate.d/nginx</td>\n<td style=\"text-align:left\">用于logrotate服务的日志切割</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td style=\"text-align:left\">主配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params</td>\n<td style=\"text-align:left\">cgi配置,fastcgi配置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf</td>\n<td style=\"text-align:left\">编码转换映射转化文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/mime.types</td>\n<td style=\"text-align:left\">设置http协议的Content-Type与扩展名对应关系</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td style=\"text-align:left\">用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/modules /usr/lib64/nginx/modules</td>\n<td style=\"text-align:left\">nginx模块目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">命令</td>\n<td style=\"text-align:left\">/usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT</td>\n<td style=\"text-align:left\">nginx的手册和帮助文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目录</td>\n<td style=\"text-align:left\">/var/cache/nginx</td>\n<td style=\"text-align:left\">nginx的缓存目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目录</td>\n<td style=\"text-align:left\">/var/log/nginx</td>\n<td style=\"text-align:left\">nginx的日志目录</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>启动和重新加载以及关闭</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>如果在启动的时候可能会遇到下列问题：</p>\n<ol>\n<li>端口被占用；</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] still could not bind</span><br></pre></td></tr></table></figure>\n<p>可以先查看进程，再杀死对应进程</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br><span class=\"line\"></span><br><span class=\"line\">kill 进程号</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置nginx</p>\n</li>\n</ol>\n<blockquote>\n<p>/etc/nginx/nginx.conf</p>\n</blockquote>\n<p>查看日志命令 tailf -f log目录</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;   设置nginx服务的系统使用用户  </span><br><span class=\"line\">worker_processes  1;  工作进程数,一般和CPU数量相同</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;   nginx的错误日志  </span><br><span class=\"line\">pid        /var/run/nginx.pid;   nginx服务启动时的pid</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;每个进程允许的最大连接数 10000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系</span><br><span class=\"line\">    default_type  application/octet-stream;//默认content-type</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span><br><span class=\"line\">                    '$status $body_bytes_sent \"$http_referer\" '</span><br><span class=\"line\">                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;//启用sendfile</span><br><span class=\"line\">    #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）</span><br><span class=\"line\">    #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;//超时时间是65秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;gzip压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;//包含的子配置文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/etc/default.conf</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # 用域名方式访问的地址</span><br><span class=\"line\">    server_name  localhost;  </span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r; //编码</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 转发请求静态资源（js、css）规则</span><br><span class=\"line\">    location ~ .*\\.(html|js|css)$ &#123;</span><br><span class=\"line\">        # CORS</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods GET,POST,DELETE;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers Content-Type;</span><br><span class=\"line\">        # 默认带上客户端cookie</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        # 缓存1h</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        # 开启gzip</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        # gzip压缩HTTP版本号 一般是1.1</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        # gzip压缩等级 越大压缩率越高 1-9</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        # 默认不指定不会缓存css资源 需要指定text/css类型</span><br><span class=\"line\">        gzip_types application/javascript text/css;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设置图片请求规则</span><br><span class=\"line\">    location ~ .*\\.(gif|png|jpg|webp)$ &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        gzip_comp_level 3;</span><br><span class=\"line\">        gzip_types image/jpeg image/png image/gif image/webp;</span><br><span class=\"line\">        ## 防盗链</span><br><span class=\"line\">        valid_referers none blocked xx.xxx.xxx.xx;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/download &#123;</span><br><span class=\"line\">        # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩</span><br><span class=\"line\">        # linux下运行gzip 文件名会生成压缩gz文件</span><br><span class=\"line\">        # url最直接访问该文件路径就会自动启动下载该资源</span><br><span class=\"line\">        gzip_static on;</span><br><span class=\"line\">        tcp_nopush on;  </span><br><span class=\"line\">        root /data/download;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;  //静态文件根目录</span><br><span class=\"line\">        index  index.html index.htm;  //首页的索引文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;  //指定错误页面</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    # 把后台错误重定向到静态的50x.html页面</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    # 把PHP脚本9000端口上监听的FastCGI服务</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不允许访问.htaccess文件 只允许指定的ip访问</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        allow 127.0.0.1</span><br><span class=\"line\">        deny  all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现负载均衡</p>\n</blockquote>\n<ol>\n<li>\n<p>解决高并发、海量数据问题</p>\n</li>\n<li>\n<p>配置类型</p>\n<ol>\n<li>轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；</li>\n<li>ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定放一个后端服务器，可以解决session的问题；</li>\n<li>weight（加权轮询）指定轮询策略，weight和访问比率成正比，用于后端服务器性能不均的情况；</li>\n<li>least_conn 最小连接数，哪个连接少就分给谁。</li>\n</ol>\n<p>集群状态：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">down</td>\n<td style=\"text-align:left\">不参与负载均衡</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">backup</td>\n<td style=\"text-align:left\">备份的服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max_fails</td>\n<td style=\"text-align:left\">允许请求失败的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail_timeout</td>\n<td style=\"text-align:left\">经过max_fails失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max_conts</td>\n<td style=\"text-align:left\">限制最大的接收的连接数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test1 &#123;</span><br><span class=\"line\">    ip_hsah;</span><br><span class=\"line\">    server http://localhost:3000 weight=2;</span><br><span class=\"line\">    server http://localhost:4000 weight=1;</span><br><span class=\"line\">    server http://localhost:5000 down;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 访问负载均衡构造的集群</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 和upstrem的name对应</span><br><span class=\"line\">        proxy_pass http://test1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test2.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:4000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test3.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时访问<code>www.test.com</code>通过代理到访问<code>www.test1.com</code>，而访问test1的请求被负载均衡按照策略访问test1或者test2</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>\n<p>环境</p>\n<p>CENTOS&gt;=7.0,位数 X64 CENTOS 7.2</p>\n</li>\n<li>\n<p>关闭 iptables</p>\n<p>iptables命令是Linux上常用的防火墙软件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">停止防火墙</td>\n<td style=\"text-align:left\">systemctl stop firewalld.service</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">永久关闭防火墙</td>\n<td style=\"text-align:left\">systemctl disable firewalld.service</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>安装依赖</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class=\"line\">yum  -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>开始安装nginx</p>\n<p>新建一个文件</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n<p>内容输入如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>其中 centos/7 根据自己运行环境配置 系统名/版本号</p>\n<p>下载nginx</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2>nginx常用操作</h2>\n<ol>\n<li>\n<p>查看配置文件和目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<p>相关文件说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">路径</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/logrotate.d/nginx</td>\n<td style=\"text-align:left\">用于logrotate服务的日志切割</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td style=\"text-align:left\">主配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params</td>\n<td style=\"text-align:left\">cgi配置,fastcgi配置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf</td>\n<td style=\"text-align:left\">编码转换映射转化文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/mime.types</td>\n<td style=\"text-align:left\">设置http协议的Content-Type与扩展名对应关系</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td style=\"text-align:left\">用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置文件</td>\n<td style=\"text-align:left\">/etc/nginx/modules /usr/lib64/nginx/modules</td>\n<td style=\"text-align:left\">nginx模块目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">命令</td>\n<td style=\"text-align:left\">/usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT</td>\n<td style=\"text-align:left\">nginx的手册和帮助文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目录</td>\n<td style=\"text-align:left\">/var/cache/nginx</td>\n<td style=\"text-align:left\">nginx的缓存目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目录</td>\n<td style=\"text-align:left\">/var/log/nginx</td>\n<td style=\"text-align:left\">nginx的日志目录</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>启动和重新加载以及关闭</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>如果在启动的时候可能会遇到下列问题：</p>\n<ol>\n<li>端口被占用；</li>\n</ol>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] still could not bind</span><br></pre></td></tr></table></figure>\n<p>可以先查看进程，再杀死对应进程</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br><span class=\"line\"></span><br><span class=\"line\">kill 进程号</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置nginx</p>\n</li>\n</ol>\n<blockquote>\n<p>/etc/nginx/nginx.conf</p>\n</blockquote>\n<p>查看日志命令 tailf -f log目录</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;   设置nginx服务的系统使用用户  </span><br><span class=\"line\">worker_processes  1;  工作进程数,一般和CPU数量相同</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;   nginx的错误日志  </span><br><span class=\"line\">pid        /var/run/nginx.pid;   nginx服务启动时的pid</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;每个进程允许的最大连接数 10000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系</span><br><span class=\"line\">    default_type  application/octet-stream;//默认content-type</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span><br><span class=\"line\">                    '$status $body_bytes_sent \"$http_referer\" '</span><br><span class=\"line\">                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;//启用sendfile</span><br><span class=\"line\">    #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）</span><br><span class=\"line\">    #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;//超时时间是65秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;gzip压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;//包含的子配置文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/etc/default.conf</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # 用域名方式访问的地址</span><br><span class=\"line\">    server_name  localhost;  </span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r; //编码</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 转发请求静态资源（js、css）规则</span><br><span class=\"line\">    location ~ .*\\.(html|js|css)$ &#123;</span><br><span class=\"line\">        # CORS</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods GET,POST,DELETE;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers Content-Type;</span><br><span class=\"line\">        # 默认带上客户端cookie</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        # 缓存1h</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        # 开启gzip</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        # gzip压缩HTTP版本号 一般是1.1</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        # gzip压缩等级 越大压缩率越高 1-9</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        # 默认不指定不会缓存css资源 需要指定text/css类型</span><br><span class=\"line\">        gzip_types application/javascript text/css;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设置图片请求规则</span><br><span class=\"line\">    location ~ .*\\.(gif|png|jpg|webp)$ &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        gzip_comp_level 3;</span><br><span class=\"line\">        gzip_types image/jpeg image/png image/gif image/webp;</span><br><span class=\"line\">        ## 防盗链</span><br><span class=\"line\">        valid_referers none blocked xx.xxx.xxx.xx;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/download &#123;</span><br><span class=\"line\">        # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩</span><br><span class=\"line\">        # linux下运行gzip 文件名会生成压缩gz文件</span><br><span class=\"line\">        # url最直接访问该文件路径就会自动启动下载该资源</span><br><span class=\"line\">        gzip_static on;</span><br><span class=\"line\">        tcp_nopush on;  </span><br><span class=\"line\">        root /data/download;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;  //静态文件根目录</span><br><span class=\"line\">        index  index.html index.htm;  //首页的索引文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;  //指定错误页面</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    # 把后台错误重定向到静态的50x.html页面</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    # 把PHP脚本9000端口上监听的FastCGI服务</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不允许访问.htaccess文件 只允许指定的ip访问</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        allow 127.0.0.1</span><br><span class=\"line\">        deny  all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实现负载均衡</p>\n</blockquote>\n<ol>\n<li>\n<p>解决高并发、海量数据问题</p>\n</li>\n<li>\n<p>配置类型</p>\n<ol>\n<li>轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；</li>\n<li>ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定放一个后端服务器，可以解决session的问题；</li>\n<li>weight（加权轮询）指定轮询策略，weight和访问比率成正比，用于后端服务器性能不均的情况；</li>\n<li>least_conn 最小连接数，哪个连接少就分给谁。</li>\n</ol>\n<p>集群状态：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">down</td>\n<td style=\"text-align:left\">不参与负载均衡</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">backup</td>\n<td style=\"text-align:left\">备份的服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max_fails</td>\n<td style=\"text-align:left\">允许请求失败的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail_timeout</td>\n<td style=\"text-align:left\">经过max_fails失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max_conts</td>\n<td style=\"text-align:left\">限制最大的接收的连接数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test1 &#123;</span><br><span class=\"line\">    ip_hsah;</span><br><span class=\"line\">    server http://localhost:3000 weight=2;</span><br><span class=\"line\">    server http://localhost:4000 weight=1;</span><br><span class=\"line\">    server http://localhost:5000 down;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 访问负载均衡构造的集群</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 和upstrem的name对应</span><br><span class=\"line\">        proxy_pass http://test1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test2.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:4000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test3.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时访问<code>www.test.com</code>通过代理到访问<code>www.test1.com</code>，而访问test1的请求被负载均衡按照策略访问test1或者test2</p>\n"}],"PostAsset":[{"_id":"source/_posts/centos下开机自动重启服务和脚本/WX20190708-113220.png","post":"cjyf68f7g0006n71pctzweuk9","slug":"WX20190708-113220.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjyf68f780001n71ptdfwjbnn","tag_id":"cjyf68f7f0005n71plhikikm7","_id":"cjyf68f7o000bn71pk51hpocu"},{"post_id":"cjyf68f7c0003n71plquhw2la","tag_id":"cjyf68f7n000an71poepz2tfm","_id":"cjyf68f7t000gn71pw9ipk57t"},{"post_id":"cjyf68f7g0006n71pctzweuk9","tag_id":"cjyf68f7s000en71pv98cfaji","_id":"cjyf68f7v000kn71pnnv3j61c"},{"post_id":"cjyf68f7u000jn71p8m8vusia","tag_id":"cjyf68f7n000an71poepz2tfm","_id":"cjyf68f7w000mn71pxvjvpv5s"},{"post_id":"cjyf68f7j0008n71pi4i6fq8e","tag_id":"cjyf68f7u000in71py4og1qnx","_id":"cjyf68f7w000pn71paoakc932"},{"post_id":"cjyf68f7w000qn71p56kgrjqj","tag_id":"cjyf68f7u000in71py4og1qnx","_id":"cjyf68f7y000tn71p6mjduz58"},{"post_id":"cjyf68f7l0009n71pm5thzchh","tag_id":"cjyf68f7w000nn71pfotwy19y","_id":"cjyf68f7y000un71pssazyz2i"},{"post_id":"cjyf68f7o000cn71pxu6t71r4","tag_id":"cjyf68f7x000sn71pxdmlxnqo","_id":"cjyf68f7z000wn71po9i09pgr"},{"post_id":"cjyf68f7q000dn71pw2i09yam","tag_id":"cjyf68f7u000in71py4og1qnx","_id":"cjyf68f7z000yn71p5vvjatmx"},{"post_id":"cjyf68f7s000fn71ph60ug35c","tag_id":"cjyf68f7z000xn71po0g4kz60","_id":"cjyf68f800010n71pqnvbmrvo"},{"post_id":"cjyf68f7t000hn71p0yhchubu","tag_id":"cjyf68f7z000zn71phg9u5ib5","_id":"cjyf68f800012n71p96uvgrjw"},{"post_id":"cjyf68f7v000ln71pf0zd7ivb","tag_id":"cjyf68f800011n71p7n4sfy4z","_id":"cjyf68f800014n71pfhelx1xa"},{"post_id":"cjyf68f7w000on71phnj1o9xi","tag_id":"cjyf68f800013n71pqq3dyh9f","_id":"cjyf68f800016n71pr3fjb8yj"},{"post_id":"cjyf68f7x000rn71p6npq1k9h","tag_id":"cjyf68f800015n71p583uig3n","_id":"cjyf68f810017n71pomifb2ty"},{"post_id":"cjyf68f8a0018n71pnlykgax5","tag_id":"cjyf68f8b0019n71p43zf6ho8","_id":"cjyf68f8c001an71pes9o6v4n"}],"Tag":[{"name":"docker","_id":"cjyf68f7f0005n71plhikikm7"},{"name":"web","_id":"cjyf68f7n000an71poepz2tfm"},{"name":"linux","_id":"cjyf68f7s000en71pv98cfaji"},{"name":"javascript","_id":"cjyf68f7u000in71py4og1qnx"},{"name":"python","_id":"cjyf68f7w000nn71pfotwy19y"},{"name":"vue react","_id":"cjyf68f7x000sn71pxdmlxnqo"},{"name":"IDE","_id":"cjyf68f7z000xn71po0g4kz60"},{"name":"node","_id":"cjyf68f7z000zn71phg9u5ib5"},{"name":"npm","_id":"cjyf68f800011n71p7n4sfy4z"},{"name":"随笔","_id":"cjyf68f800013n71pqq3dyh9f"},{"name":"前端","_id":"cjyf68f800015n71p583uig3n"},{"name":"nginx","_id":"cjyf68f8b0019n71p43zf6ho8"}]}}