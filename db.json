{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"themes/hu/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/hu/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/hu/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/hu/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hu/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/article/gitlab-runner/403.png","path":"img/article/gitlab-runner/403.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/build-1.png","path":"img/article/gitlab-runner/build-1.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/build-2.png","path":"img/article/gitlab-runner/build-2.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/build-3.png","path":"img/article/gitlab-runner/build-3.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/chmod.png","path":"img/article/gitlab-runner/chmod.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/git-permisson-denied.png","path":"img/article/gitlab-runner/git-permisson-denied.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/git-failed-write.png","path":"img/article/gitlab-runner/git-failed-write.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/dist-permission.png","path":"img/article/gitlab-runner/dist-permission.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/shell-catch.png","path":"img/article/gitlab-runner/shell-catch.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/stage-1.png","path":"img/article/gitlab-runner/stage-1.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/push.png","path":"img/article/gitlab-runner/push.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/stage-2.png","path":"img/article/gitlab-runner/stage-2.png","modified":1,"renderable":0},{"_id":"source/img/article/gitlab-runner/stage-3.png","path":"img/article/gitlab-runner/stage-3.png","modified":1,"renderable":0},{"_id":"themes/hu/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/hu/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/hu/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/article/gitlab-runner/devflow.png","path":"img/article/gitlab-runner/devflow.png","modified":1,"renderable":0},{"_id":"themes/hu/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1708411725191},{"_id":"source/.DS_Store","hash":"425d3de68908ca9e818ff612739d107840c1a9c0","modified":1708411725190},{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1708411725191},{"_id":"themes/hu/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1708411725242},{"_id":"themes/hu/_config.yml","hash":"d6dfaeff4294592bfda4ea66a93955998ab5aa18","modified":1708411725242},{"_id":"source/_drafts/mocha浏览器测试.md","hash":"919744c9c6f36c030f39d89d8cb5da141990c789","modified":1708411725191},{"_id":"source/_drafts/js部分代码模拟实现.md","hash":"3155a78d0f4849d464b671f5c366baf990b201df","modified":1708411725191},{"_id":"source/_drafts/redis基础.md","hash":"14c24631cc8c83c2dbfbc1409d682171a52a3d5c","modified":1708411725191},{"_id":"source/_drafts/rollup-js使用.md","hash":"5f2a53ede7f2a94ab99370751a4f2fff2c6a2553","modified":1708411725192},{"_id":"source/_drafts/mysql使用.md","hash":"235ea66fa1d2b5f0e6af6b044a39a1aed75b2550","modified":1708411725191},{"_id":"source/_drafts/业务技术感想.md","hash":"e9381cda173c18f9ebc09dc0ac68033ef9814ca7","modified":1708411725192},{"_id":"source/_drafts/前端多项目公共模块管理实践.md","hash":"b989ccc16df4a1a08c37c58a4d7a90cad2b98034","modified":1708411725192},{"_id":"source/_drafts/微信封禁自动监控技术调研.md","hash":"f514b2e48ecb6e9c84df4797b6e6b26bc1566e61","modified":1708411725192},{"_id":"source/_drafts/微前端.md","hash":"b0912a6ad4a6ab71f81138c15a40ab4a95fe6705","modified":1708411725192},{"_id":"source/_drafts/掉坑记录.md","hash":"ea11dcc82a0f5612a29ea1fe19e4773d82732a4a","modified":1708411725193},{"_id":"source/_drafts/正则表达式必知必会.js","hash":"3d5e2047f400d9785fa9563217b4f397f6c7b265","modified":1708411725193},{"_id":"source/_drafts/活动业务痛点.md","hash":"509d2a5d5b8ae38c66e24bd047443f270100b5f4","modified":1708411725193},{"_id":"source/_drafts/移动端遇到问题汇总.md","hash":"0073c1198f696a8e1560da224be00ef502a02bcd","modified":1708411725193},{"_id":"source/_drafts/遇到过的代码题.md","hash":"5609cd63dfc1b948e16ca5bdd472843aa60740e7","modified":1708411725193},{"_id":"source/_posts/Next-js接入sentry.md","hash":"7bcf641dc899c1b3ce1a508ec714d0bf18bd7050","modified":1708411725193},{"_id":"source/_posts/centos下利用nvm安装node.md","hash":"61b29e502300cf548e74e266faeb3a579960e1e6","modified":1708411725194},{"_id":"source/_posts/centos下开机自动重启服务和脚本.md","hash":"bff5b1cbe59fc72df28427c848c1068ff4f5ee05","modified":1708411725194},{"_id":"source/_posts/docker基本使用.md","hash":"4cac38aeeeb4f76af2ef10151baf26c025f31059","modified":1708411725195},{"_id":"source/_posts/git-submodule.md","hash":"2a6ee0166b814a0f570c3b1006558c8aaaa92b6a","modified":1708411725195},{"_id":"source/_posts/gitlab-runner搭建CICD平台.md","hash":"58b08021a0131f09b22e72356584d479d001a5aa","modified":1708483213834},{"_id":"source/_posts/git常用命令.md","hash":"177c992260fc11dd77ae9c23a374aa4490f5064e","modified":1708411725196},{"_id":"source/_posts/js中几种设计模式.md","hash":"628638a773b0d77b82296e8ba05345f88e640ec8","modified":1708411725196},{"_id":"source/_posts/js继承问题总结.md","hash":"4e2dc77693daf0ee83fa0214513bc8feb41b752a","modified":1708411725196},{"_id":"source/_posts/linux常用指令记录.md","hash":"c0e0d21a4933880acda577c77dcf3d76ae0dddaa","modified":1708411725196},{"_id":"source/_posts/nginx入门.md","hash":"59c8bbc8bbca73ce134693df4d0d345280c99399","modified":1708411725196},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied.md","hash":"725e62a4e87a4a9499443d5d7e713b1509c0c65e","modified":1708411725197},{"_id":"source/_posts/node内存监控.md","hash":"3811451f29b0791353d51ed012971f45f4d0845d","modified":1708411725202},{"_id":"source/_posts/node性能优化.md","hash":"e0fc5b2c0e9175246fd0ef5156c836bdfc713542","modified":1708411725203},{"_id":"source/_posts/pm2常用命令整理.md","hash":"2796e8c26f0464225e436b3c0f1342744b80c9fb","modified":1708411725203},{"_id":"source/_posts/python爬虫框架scrapy.md","hash":"3c51ba5a7f4f97f2be7fbf73a715efc967222378","modified":1708411725203},{"_id":"source/_posts/react-hooks入门.md","hash":"9ff238502b3969c0c75d9bfb62449ff1bb3621c0","modified":1708411725204},{"_id":"source/_posts/react-vue中dom-diff简易版实现.md","hash":"ae94bd05b59d3c556c7115232504468530a632c2","modified":1708411725204},{"_id":"source/_posts/vscode使用.md","hash":"c851baadd28cdb9b57d66461677d88ad724d7edf","modified":1708411725205},{"_id":"source/_posts/vue项目接入sentry.md","hash":"cf358223889fd756368fa472499cfdccb0eeb588","modified":1708411725205},{"_id":"source/_posts/windows下安装node-gyp失败.md","hash":"e159993f9f19259834346e5d6fd67a3fad5e500d","modified":1708411725206},{"_id":"source/_posts/一些新的api.md","hash":"e9a6044457c31c6e6b3206038978e4f815f35737","modified":1708411725206},{"_id":"source/_posts/二叉树.md","hash":"247599ab11c9ea159d11b5d3c7f253eb3b099ee8","modified":1708411725206},{"_id":"source/_posts/利用verdaccio搭建私有npm仓库.md","hash":"2700e89e4c6cf5a05a286c71ae607181ec025526","modified":1708411725207},{"_id":"source/_posts/前端http与https问题整理.md","hash":"6a28e7838ba4d601436fd34d928fa72b417b77c1","modified":1708411725207},{"_id":"source/_posts/前端基础面试题整理.md","hash":"43f809280984b69776e0e71a4e4be833ecd46a40","modified":1708411725208},{"_id":"source/_posts/前端知识点总结.md","hash":"976fea74b679d719435f2037e63b028002979a65","modified":1708411725209},{"_id":"source/_posts/前端算法题整理.md","hash":"bf528a0391c8fbed8a9815856c828c668a969c93","modified":1708411725209},{"_id":"source/_posts/动态换肤.md","hash":"521ced04234bb4cecf815c553e3dfa5ae0db60c6","modified":1708411725210},{"_id":"source/_posts/动态规划入门.md","hash":"0c182b5c7c8cb512698682beff3c87e1b7e88c90","modified":1708411725210},{"_id":"source/_posts/基于sentry的异常捕获平台.md","hash":"e288a148e052ca4482d59bb59667f17f3b2bdfda","modified":1708411725211},{"_id":"source/_posts/堆排序.md","hash":"3f2ab78ace665b4d948ce2ca7ff03a707dc636b7","modified":1708411725211},{"_id":"source/_posts/小程序带二维码分享图注意点.md","hash":"83c8ccbac475b4bff11386071b7ef25bc6cb3ddf","modified":1708411725211},{"_id":"source/_posts/常用npm包整理.md","hash":"67236666dfbffc8b784c26c596f2c5bc7178469b","modified":1708411725212},{"_id":"source/_posts/常见css布局问题.md","hash":"d5191a9216e92e1433aa2162d363328f8661aaa7","modified":1708411725212},{"_id":"source/_posts/序.md","hash":"f6b814efcc0228443127066d69e86f8340f49dcf","modified":1708411725212},{"_id":"source/_posts/性能上报.md","hash":"8485e95efeaa304e55984dee7c4978c4331f8bb2","modified":1708411725212},{"_id":"source/_posts/正则表达式必知必会.md","hash":"71443c8bac00f0deb88b3957c062ffd6e19608bf","modified":1708411725213},{"_id":"source/_posts/浅析node进程与线程.md","hash":"cc229f25715ede02104bc563f7b4c2136ac20f7e","modified":1708483838878},{"_id":"source/_posts/记录typescript使用的几个注意点.md","hash":"122fba22d859bd27a4ccc02ab759f3ff5de5f2d9","modified":1708411725213},{"_id":"source/_posts/记录一次node爬虫开发.md","hash":"1efdc238f188cf3bb24d8c3848e3bbf487a16001","modified":1708411725214},{"_id":"source/_posts/记录平时jenkins使用遇到的问题.md","hash":"f8536ca017dbf9b9972e93b2838cd4b93c352f75","modified":1708411725214},{"_id":"source/_posts/遇到过的面试题.md","hash":"b6c50a3f3127a6bedee7f7ce4b540f3f88d8be19","modified":1708411725215},{"_id":"source/archive/index.md","hash":"4b2dcba33730bfeafb865dbda1d8211fa6e91969","modified":1708411725215},{"_id":"source/about/index.md","hash":"375aac264e4d8eeca3ab12277eaef6f5b5fdae45","modified":1708411725215},{"_id":"source/img/.DS_Store","hash":"99ba9eccb9189ccb7879028f93e106b7705b1b62","modified":1708412699296},{"_id":"source/tags/index.md","hash":"d5ebcb7ddfbb005ed4e0887b11c192c68b6e4dc8","modified":1708411725241},{"_id":"themes/hu/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1708411725242},{"_id":"themes/hu/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1708411725242},{"_id":"themes/hu/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1708411725242},{"_id":"themes/hu/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1708411725242},{"_id":"themes/hu/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1708411725243},{"_id":"themes/hu/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1708411725243},{"_id":"themes/hu/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1708411725243},{"_id":"themes/hu/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1708411725243},{"_id":"themes/hu/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1708411725243},{"_id":"themes/hu/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1708411725244},{"_id":"themes/hu/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1708411725247},{"_id":"themes/hu/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1708411725247},{"_id":"themes/hu/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1708411725247},{"_id":"themes/hu/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1708411725247},{"_id":"themes/hu/layout/layout.ejs","hash":"0c8ed1145e06f0031435169a3a89908b44264463","modified":1708411725247},{"_id":"themes/hu/layout/page.ejs","hash":"6426826eb144e2cb644aa1c21aae75adfa6d1044","modified":1708411725248},{"_id":"themes/hu/layout/post.ejs","hash":"a36524a762090581a858ae55b62ca18e6251876a","modified":1708411725248},{"_id":"themes/hu/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1708411725248},{"_id":"source/_posts/centos下开机自动重启服务和脚本/WX20190708-113220.png","hash":"2ddd3501c319f9cd7848239f1ec6ccfc138ca9cd","modified":1708411725195},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1708411725226},{"_id":"themes/hu/layout/_partial/footer.ejs","hash":"08b24e01400c70f545b001c0fc3e198cde2d5440","modified":1708411725244},{"_id":"themes/hu/layout/_partial/head.ejs","hash":"396a519f12ef21ce96ba1ab7c343123051312707","modified":1708411725244},{"_id":"themes/hu/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1708411725244},{"_id":"themes/hu/layout/_partial/header.ejs","hash":"7fd5738b2cee6796c6fc33957be21f95d8da0edb","modified":1708411725244},{"_id":"themes/hu/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1708411725245},{"_id":"themes/hu/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1708411725244},{"_id":"themes/hu/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1708411725245},{"_id":"themes/hu/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1708411725245},{"_id":"themes/hu/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1708411725245},{"_id":"themes/hu/layout/_widget/featured-tags.ejs","hash":"229b58f185955a9bfbc658fd00b3e7f3c69cbb2c","modified":1708411725246},{"_id":"themes/hu/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1708411725246},{"_id":"themes/hu/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1708411725246},{"_id":"themes/hu/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1708411725246},{"_id":"themes/hu/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1708411725249},{"_id":"themes/hu/source/css/beantech.min.css","hash":"82dfc9319fc6186873d4b81b3ef3690bd2eeec9a","modified":1708411725250},{"_id":"themes/hu/source/css/beantech.css","hash":"8d0caa58529b1cace7e3e381b603dc5600b246a7","modified":1708411725249},{"_id":"themes/hu/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1708411725252},{"_id":"themes/hu/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1708411725252},{"_id":"themes/hu/source/css/hux-blog.min.css","hash":"db9c7fa4d7b1907dbb521541d42017135d63526d","modified":1708411725252},{"_id":"themes/hu/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1708411725253},{"_id":"themes/hu/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1708411725253},{"_id":"themes/hu/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1708411725253},{"_id":"themes/hu/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1708411725254},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1708411725254},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1708411725257},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1708411725257},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1708411725258},{"_id":"themes/hu/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1708411725259},{"_id":"themes/hu/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1708411725259},{"_id":"themes/hu/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1708411725260},{"_id":"themes/hu/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1708411725265},{"_id":"themes/hu/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1708411725265},{"_id":"themes/hu/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1708411725265},{"_id":"themes/hu/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1708411725266},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-success.png","hash":"2d7fc994d0f3dac87e6462f1fa663f70e93ddd50","modified":1708411725201},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/root-rw.png","hash":"455ee6d5efea8aa80a975f484714809f147c4280","modified":1708411725202},{"_id":"themes/hu/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1708411725251},{"_id":"themes/hu/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1708411725255},{"_id":"themes/hu/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1708411725259},{"_id":"themes/hu/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1708411725264},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-error.png","hash":"90c32bd437a52ff5374137917edebdd0735aad2d","modified":1708411725199},{"_id":"source/img/article/gitlab-runner/403.png","hash":"3d1ff20bc4b17a6fa35867d1141981c2aad1f214","modified":1708413437215},{"_id":"source/img/article/gitlab-runner/build-1.png","hash":"55998cd25a987e1bd157ee53dbd48c00a2673616","modified":1708414355458},{"_id":"source/img/article/gitlab-runner/build-2.png","hash":"4a778992dd0c5566e2592a4dece0081732f358ea","modified":1708414367174},{"_id":"source/img/article/gitlab-runner/build-3.png","hash":"8a2d64f67485f1cbf8f73db0fd94ef07c56d6b84","modified":1708414431766},{"_id":"source/img/article/gitlab-runner/chmod.png","hash":"c2db9d14da6607b6ebcc8cb37ab3a7436a563763","modified":1708414032131},{"_id":"source/img/article/gitlab-runner/git-permisson-denied.png","hash":"b6c796cbe230703112a1b600e6a931b3bbf5b91e","modified":1708412967816},{"_id":"source/img/article/gitlab-runner/git-failed-write.png","hash":"d769ab4c4f6b3895d8a319f148816689463e32f9","modified":1708412702363},{"_id":"source/img/article/gitlab-runner/dist-permission.png","hash":"edc59cf2011b904ae209a05e5fd02544590e3b0a","modified":1708414232374},{"_id":"source/img/article/gitlab-runner/shell-catch.png","hash":"d04d843d9706bffe68b3abae53b5fc692c1c7a18","modified":1708415124832},{"_id":"source/img/article/gitlab-runner/stage-1.png","hash":"bad23b337e5077dbbcae0b8b92a36f5ad9fd07d7","modified":1708414742201},{"_id":"source/img/article/gitlab-runner/push.png","hash":"045838373afacf6b4ef5fa5bc74251b4375b1d3b","modified":1708413790635},{"_id":"source/img/article/gitlab-runner/stage-2.png","hash":"3d9ad177b52ebac755a5539bd8951c506a01caa0","modified":1708414755989},{"_id":"source/img/article/gitlab-runner/stage-3.png","hash":"fb1b978fcc80138ec630ae0105e60a0e8ff1ea64","modified":1708414810141},{"_id":"themes/hu/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1708411725251},{"_id":"themes/hu/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1708411725253},{"_id":"themes/hu/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1708411725253},{"_id":"source/img/article/gitlab-runner/devflow.png","hash":"a9364f02af09f714cdfc021a07ef539cec2a6e20","modified":1708422818788},{"_id":"themes/hu/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1708411725263},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1708411725229},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1708411725241},{"_id":"public/baidusitemap.xml","hash":"9af29198567f6cde7e98efc2482c463622f3b6f1","modified":1708484427540},{"_id":"public/sitemap.xml","hash":"6089369184181c266d04bf35463cbcd1112f59fd","modified":1708484427540},{"_id":"public/404.html","hash":"88a50c7c9e7ff4b7b7ab565c470bd4206a537529","modified":1708484430549},{"_id":"public/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/index.html","hash":"952a16924991c988f30a5acab4e129c3dd2aa90f","modified":1708484430549},{"_id":"public/2019/07/25/pm2常用命令整理/index.html","hash":"4193ed680f89b61dc302bb18b081fc86a0c03545","modified":1708484430549},{"_id":"public/2019/07/24/centos下利用nvm安装node/index.html","hash":"4b1e80936213aee30bbbd21cd7f7e2a359e63ff4","modified":1708484430549},{"_id":"public/2019/07/22/一些新的api/index.html","hash":"bf57a3b27688582fa47def4dc0eb640ba2724c60","modified":1708484430549},{"_id":"public/2019/06/15/序/index.html","hash":"7f7d395aed0842c08f7802eec858eac5fc3cbf0b","modified":1708484430549},{"_id":"public/tags/index.html","hash":"f05046125e18cdfdc1f4fc31b8f2b1404743db50","modified":1708484430550},{"_id":"public/2024/02/21/gitlab-runner搭建CICD平台/index.html","hash":"418e2b5a9c7ce425de2389e36347c3226cc1ee10","modified":1708484430550},{"_id":"public/2021/01/21/小程序带二维码分享图注意点/index.html","hash":"9c4f7b551af32a7c468c05dcf7b00104734550d6","modified":1708484430550},{"_id":"public/2020/12/02/堆排序/index.html","hash":"4a35863b7182a44b805dcde5772eab8acbe841e4","modified":1708484430550},{"_id":"public/2020/11/12/node内存监控/index.html","hash":"a7eec000ca271568cc76dff8b2e9511cb9e5dbc8","modified":1708484430550},{"_id":"public/2020/08/27/动态规划入门/index.html","hash":"d32a2b68749f4c4b67bb524598e5794fd9440925","modified":1708484430550},{"_id":"public/2020/07/31/windows下安装node-gyp失败/index.html","hash":"35d47de1a9a056ff91a9b648d73a19a18a69857e","modified":1708484430550},{"_id":"public/2020/06/15/性能上报/index.html","hash":"a0523654542404238952062829fdcb23c6d1cc0c","modified":1708484430550},{"_id":"public/2020/06/12/动态换肤/index.html","hash":"f0570d65bf3196db80e7c8eecdbb1ff20c665ba1","modified":1708484430550},{"_id":"public/2020/05/11/vscode使用/index.html","hash":"05e73655f9d092e72d01e9c563a84b5e18e90db6","modified":1708484430550},{"_id":"public/2020/03/19/常见css布局问题/index.html","hash":"fb39eb114ceda4823a543b1a72d995856fe4bc2d","modified":1708484430550},{"_id":"public/2020/03/17/遇到过的面试题/index.html","hash":"c014e8b7d600c801a37483bb4087721187268f2c","modified":1708484430550},{"_id":"public/2020/03/17/前端http与https问题整理/index.html","hash":"aa48c8080919969970ba9b61fd49505b95baac40","modified":1708484430550},{"_id":"public/2020/03/13/浅析node进程与线程/index.html","hash":"6e798f215c23c87f43057880c292b38291ccf703","modified":1708484430550},{"_id":"public/2020/03/15/二叉树/index.html","hash":"d12d0d26785d623ffd8afcffe802c670f8bab594","modified":1708484430550},{"_id":"public/2020/03/12/Next-js接入sentry/index.html","hash":"8133197a1c4806b9998bbfb380678ae66dd69e42","modified":1708484430550},{"_id":"public/2020/01/08/react-hooks入门/index.html","hash":"5ac473ad3dac1f9773a2b47a3af3b0501dd26880","modified":1708484430550},{"_id":"public/2019/12/23/node性能优化/index.html","hash":"9077d75487d0c26576fffed5863acab97300afbd","modified":1708484430550},{"_id":"public/2019/12/16/前端算法题整理/index.html","hash":"229ae096ada74f34f39870f0baf8e8bdebaca39a","modified":1708484430550},{"_id":"public/2019/11/12/前端基础面试题整理/index.html","hash":"1d23731f6e8469b00acc40e5cd60666e1642d9fb","modified":1708484430550},{"_id":"public/2019/11/05/基于sentry的异常捕获平台/index.html","hash":"59b950964761fb522f9e613036fe308b7beb6028","modified":1708484430550},{"_id":"public/2019/10/11/vue项目接入sentry/index.html","hash":"2ef6633fdea4f097949bc9d4212daee84871915d","modified":1708484430550},{"_id":"public/2019/09/24/js继承问题总结/index.html","hash":"3b0ad9157b0eda6dd99a974469a585cbfcd04c87","modified":1708484430550},{"_id":"public/2019/08/30/正则表达式必知必会/index.html","hash":"a286d9076181cbfa5468b8b339e34c78e525977e","modified":1708484430550},{"_id":"public/2019/07/22/记录typescript使用的几个注意点/index.html","hash":"b544075b9a0d650480f92635e2845b4b32272541","modified":1708484430550},{"_id":"public/2019/07/14/js中几种设计模式/index.html","hash":"dbcc920fb573ec996df21051c99d0bc2fbd2cff6","modified":1708484430550},{"_id":"public/2019/07/10/git-submodule/index.html","hash":"cc6eba19772bc11e40164d39a8869457552ae6f4","modified":1708484430550},{"_id":"public/2019/07/08/centos下开机自动重启服务和脚本/index.html","hash":"aaa3218413b2d0a2f33117e8576b35a0cd614728","modified":1708484430550},{"_id":"public/2019/07/03/常用npm包整理/index.html","hash":"7ec98f8c0ff285998aeaa76fcef04693d8353240","modified":1708484430550},{"_id":"public/2019/06/20/react-vue中dom-diff简易版实现/index.html","hash":"5b2e91518ad7f18032f7e17a7c47033a0711167c","modified":1708484430550},{"_id":"public/2019/06/19/docker基本使用/index.html","hash":"8e6a04e1903c31f392e54c339057e1a208214d51","modified":1708484430550},{"_id":"public/2019/06/19/python爬虫框架scrapy/index.html","hash":"13917e0cb3aff7a3f0022ac14cd248cfdd6a346b","modified":1708484430550},{"_id":"public/2019/06/19/nginx入门/index.html","hash":"7ecbf913be129e7f985fd4e0c96e1c22a50724d1","modified":1708484430550},{"_id":"public/2019/06/16/利用verdaccio搭建私有npm仓库/index.html","hash":"d8e62bc57b5a69db673ab00cecbe4255193b224f","modified":1708484430550},{"_id":"public/2019/05/21/记录平时jenkins使用遇到的问题/index.html","hash":"cada3d9894aa11c563c82fcd25a9ac4d825b724c","modified":1708484430551},{"_id":"public/2019/05/07/记录一次node爬虫开发/index.html","hash":"fc1c210cdf5dcf0c344ebbcd42b45bf548e53121","modified":1708484430551},{"_id":"public/2019/04/25/git常用命令/index.html","hash":"8182b26c7747310d51cc786b7627861b369f4d75","modified":1708484430551},{"_id":"public/2019/03/25/linux常用指令记录/index.html","hash":"ac2a500b443c81ac97a3fcf6c7350dd29a6d40a9","modified":1708484430551},{"_id":"public/2018/07/21/前端知识点总结/index.html","hash":"5a2b57a360adfbe880796b9fd4056522d30729d8","modified":1708484430551},{"_id":"public/archive/index.html","hash":"7989c10ec3413e7d664b156730b9f4bff9dae6c8","modified":1708484430551},{"_id":"public/about/index.html","hash":"ce096a08057305ce9c5f548910cc264b81ef64e5","modified":1708484430551},{"_id":"public/categories/前端/index.html","hash":"c43d4089de84ed0722fce9385b13108ca167d379","modified":1708484430551},{"_id":"public/categories/前端/archives/2/index.html","hash":"c6f6cbb900b2b32faf357156ea329a59dd53fcd5","modified":1708484430551},{"_id":"public/categories/前端/archives/3/index.html","hash":"e8a71b43f092d698269df2da49d44d34f7c6183b","modified":1708484430551},{"_id":"public/categories/前端/archives/4/index.html","hash":"456f9e0f85d458d17a1c7a13379bdc17195079ef","modified":1708484430551},{"_id":"public/categories/运维/index.html","hash":"f531bb71367e782c8285231d99c3117e2df4d086","modified":1708484430551},{"_id":"public/categories/python/index.html","hash":"7458b7fc3ed153e71a38aa93d0996167b6dea2e2","modified":1708484430551},{"_id":"public/index.html","hash":"c25c49ffe09c933e321c62f84b3f703251407fd5","modified":1708484430551},{"_id":"public/archives/2/index.html","hash":"bbc7b04775027dd5de2d5971a749c59023547517","modified":1708484430551},{"_id":"public/archives/3/index.html","hash":"b33dd4b83ea9bd722514dad5dca44f2a0921a8c0","modified":1708484430551},{"_id":"public/archives/4/index.html","hash":"5511986a13367688ab24c7fc2ea4bf4418ecc718","modified":1708484430551},{"_id":"public/archives/5/index.html","hash":"6056b2c934ad894fa0e2ba6960ca531ade891c5b","modified":1708484430551},{"_id":"public/archives/index.html","hash":"0392e0620dd7d09ccaa39cbcc1389817d13aa090","modified":1708484430551},{"_id":"public/archives/archives/2/index.html","hash":"8122f13db4ab761e5e80b8cd0255b37d5039984a","modified":1708484430551},{"_id":"public/archives/archives/3/index.html","hash":"7b9dec293e62ed4ab19558be25c783a1103098b8","modified":1708484430551},{"_id":"public/archives/archives/4/index.html","hash":"7e4ce7c20ca2b9faa50958967adb30bddd73f729","modified":1708484430551},{"_id":"public/archives/archives/5/index.html","hash":"191e0f2f8dfc9aa97efa187d43bf8cb2f95367e5","modified":1708484430551},{"_id":"public/archives/2018/index.html","hash":"e8a67c75538a6b4c143262ec72f8a1d3fe78808a","modified":1708484430551},{"_id":"public/archives/2018/07/index.html","hash":"6b91c2bf4f229fdf60af391226192c7eb686499d","modified":1708484430552},{"_id":"public/archives/2019/index.html","hash":"3f702415e61c94f61de4fe1f9c1cd2d53c5b4c78","modified":1708484430552},{"_id":"public/archives/2019/archives/2/index.html","hash":"620966dd4706c612d9894f85eb475f376a9cfd79","modified":1708484430552},{"_id":"public/archives/2019/archives/3/index.html","hash":"ca0b5482f875df27b2f6a3db387ba65fda70f147","modified":1708484430552},{"_id":"public/archives/2019/03/index.html","hash":"562dfd65dfe50fbb582075691d85ad3c0cc997ed","modified":1708484430552},{"_id":"public/archives/2019/04/index.html","hash":"a4b374ac41187f269d210fcdc03e305f20addece","modified":1708484430552},{"_id":"public/archives/2019/05/index.html","hash":"60933c920d5c0a4d52dc64a6fe2d100e63ec84b5","modified":1708484430552},{"_id":"public/archives/2019/06/index.html","hash":"4f97afc5e7cedf79742f95af373328fa1262c91a","modified":1708484430552},{"_id":"public/archives/2019/07/index.html","hash":"7d4d9d7535ef4f6c3c588f92cedf6724ef2e07d1","modified":1708484430552},{"_id":"public/archives/2019/08/index.html","hash":"1322b51028d502881ca2b803bce4582ecf56d118","modified":1708484430552},{"_id":"public/archives/2019/09/index.html","hash":"6043741198a27c98b83f7a1a6754558fe477bfc0","modified":1708484430552},{"_id":"public/archives/2019/10/index.html","hash":"35bd2e9811f2b48327688db550cc4958c5ccffb8","modified":1708484430552},{"_id":"public/archives/2019/11/index.html","hash":"7902c3f5e0a037b0ef370d218c0cbaace0993911","modified":1708484430552},{"_id":"public/archives/2019/12/index.html","hash":"10a0e0cc67beede2ec96e485dae75a388bb017b8","modified":1708484430552},{"_id":"public/archives/2020/index.html","hash":"514f90c4d1b66c2a3e8f3f5673cd6d9780e745e1","modified":1708484430552},{"_id":"public/archives/2020/archives/2/index.html","hash":"d36a926a92a3598f5d56726ae63b4a00337f3d2a","modified":1708484430552},{"_id":"public/archives/2020/01/index.html","hash":"695947b24e0350253beec85c39bba31b926fa07c","modified":1708484430552},{"_id":"public/archives/2020/03/index.html","hash":"01e4a8f7450cbf013cd29df6d81f1324a05c5af5","modified":1708484430552},{"_id":"public/archives/2020/05/index.html","hash":"616e46e2e95a4713a6e3d69a1efadc04e9e6d8ac","modified":1708484430552},{"_id":"public/archives/2020/06/index.html","hash":"c74f41d0869b69596df8646faaad0fd7a8390aa4","modified":1708484430552},{"_id":"public/archives/2020/07/index.html","hash":"47870a7e7bee1d0220fa69245c78c837880d3270","modified":1708484430552},{"_id":"public/archives/2020/08/index.html","hash":"ee2d3fd7d1b6ce60e6401ef705e5f126ed6d824a","modified":1708484430552},{"_id":"public/archives/2020/11/index.html","hash":"aba5f50bf03f999b33e6290473f0a436d9f3be3a","modified":1708484430552},{"_id":"public/archives/2020/12/index.html","hash":"cbf83cba527ede3ea8b3e7e365b8354da91bc433","modified":1708484430552},{"_id":"public/archives/2021/index.html","hash":"2db22b75f2d1577c8ee445696c9275e63c8b1f2b","modified":1708484430552},{"_id":"public/archives/2021/01/index.html","hash":"523eea5d0830d1b409441ad4b789e1c1e38d9c14","modified":1708484430552},{"_id":"public/archives/2024/02/index.html","hash":"527c36ca29909ac12d3fc3a89656ee3b6afcaecd","modified":1708484430552},{"_id":"public/tags/javascript/index.html","hash":"c23fb527ea00b841f6a82eb42969d9ecaa51cd3a","modified":1708484430552},{"_id":"public/tags/linux/index.html","hash":"de63af7225e36024f25402f80fb847829a2aaf81","modified":1708484430552},{"_id":"public/tags/docker/index.html","hash":"5b7de5d091894e3271552bbd34c85f44814c7dae","modified":1708484430552},{"_id":"public/archives/2024/index.html","hash":"46e1e508db83ca6e881fe5923a6dcb75c371042a","modified":1708484430552},{"_id":"public/tags/git/index.html","hash":"58a659c61c2776d81fbfed60c507322cc0c9b372","modified":1708484430552},{"_id":"public/tags/CI-CD/index.html","hash":"a0306a776941486bfcef2afa814dcce603ed2d31","modified":1708484430552},{"_id":"public/tags/nginx/index.html","hash":"0b596accee9c3375de79a9127ca6ce6e36431096","modified":1708484430552},{"_id":"public/tags/npm/index.html","hash":"2b9dd7443a7c3236b395cfcf843683d0b2e8f540","modified":1708484430552},{"_id":"public/tags/node/index.html","hash":"735f011f18f12c2ffe4352c353ef709470e8cd79","modified":1708484430552},{"_id":"public/tags/crawler/index.html","hash":"db7b152ba6ba32af59d8828b5541ecc59e60cde2","modified":1708484430552},{"_id":"public/tags/react/index.html","hash":"524ca8bdde32ed383b850ac0197a20f2765f8bb7","modified":1708484430552},{"_id":"public/tags/IDE/index.html","hash":"3d6d9986ccee5fcb64dbffaa0737b1e3bfec3a36","modified":1708484430552},{"_id":"public/tags/sentry/index.html","hash":"777f63dc8f32841b1c5933c8088a7515a78df81a","modified":1708484430552},{"_id":"public/tags/algorithm/index.html","hash":"20498617e86039c4e41e86104b32bcc4d31ed230","modified":1708484430552},{"_id":"public/tags/httpa/index.html","hash":"96a93d355c3f3db2aa0ee2d5e0f62017f97ea3c9","modified":1708484430552},{"_id":"public/tags/interview/index.html","hash":"85fcd9c874a58998644c19a39098bd5e7777cc58","modified":1708484430552},{"_id":"public/tags/小程序/index.html","hash":"1fc8056c82b3a5abb96b87f1397f0bf80ca77fb5","modified":1708484430552},{"_id":"public/tags/css/index.html","hash":"0dd2f63a019c41820f7b261570f9d90735f6b9dd","modified":1708484430552},{"_id":"public/tags/随笔/index.html","hash":"e152c231e5c0784d384a37483edfeb380482e630","modified":1708484430552},{"_id":"public/tags/typescript/index.html","hash":"c1ae6f5ea0228d27d9ff99503b3e5ce75da33380","modified":1708484430552},{"_id":"public/tags/jenkins/index.html","hash":"1f76485848c28536250af8c8fd004138d316e4a2","modified":1708484430552},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1708484430553},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1708484430560},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1708484430560},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1708484430560},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1708484430560},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1708484430560},{"_id":"public/img/article/gitlab-runner/build-1.png","hash":"55998cd25a987e1bd157ee53dbd48c00a2673616","modified":1708484430560},{"_id":"public/img/article/gitlab-runner/403.png","hash":"3d1ff20bc4b17a6fa35867d1141981c2aad1f214","modified":1708484430561},{"_id":"public/img/article/gitlab-runner/build-2.png","hash":"4a778992dd0c5566e2592a4dece0081732f358ea","modified":1708484430561},{"_id":"public/img/article/gitlab-runner/build-3.png","hash":"8a2d64f67485f1cbf8f73db0fd94ef07c56d6b84","modified":1708484430561},{"_id":"public/img/article/gitlab-runner/git-permisson-denied.png","hash":"b6c796cbe230703112a1b600e6a931b3bbf5b91e","modified":1708484430561},{"_id":"public/img/article/gitlab-runner/chmod.png","hash":"c2db9d14da6607b6ebcc8cb37ab3a7436a563763","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/git-failed-write.png","hash":"d769ab4c4f6b3895d8a319f148816689463e32f9","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/shell-catch.png","hash":"d04d843d9706bffe68b3abae53b5fc692c1c7a18","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/stage-1.png","hash":"bad23b337e5077dbbcae0b8b92a36f5ad9fd07d7","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/dist-permission.png","hash":"edc59cf2011b904ae209a05e5fd02544590e3b0a","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/push.png","hash":"045838373afacf6b4ef5fa5bc74251b4375b1d3b","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/stage-2.png","hash":"3d9ad177b52ebac755a5539bd8951c506a01caa0","modified":1708484430562},{"_id":"public/img/article/gitlab-runner/stage-3.png","hash":"fb1b978fcc80138ec630ae0105e60a0e8ff1ea64","modified":1708484430562},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1708484430562},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1708484430562},{"_id":"public/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png","hash":"2ddd3501c319f9cd7848239f1ec6ccfc138ca9cd","modified":1708484430562},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1708484430745},{"_id":"public/img/article/gitlab-runner/devflow.png","hash":"a9364f02af09f714cdfc021a07ef539cec2a6e20","modified":1708484430747},{"_id":"public/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/root-rw.png","hash":"455ee6d5efea8aa80a975f484714809f147c4280","modified":1708484430747},{"_id":"public/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-success.png","hash":"2d7fc994d0f3dac87e6462f1fa663f70e93ddd50","modified":1708484430747},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1708484430751},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1708484430751},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1708484430751},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1708484430751},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1708484430751},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1708484430751},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1708484430751},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1708484430751},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1708484430751},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1708484430752},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1708484430752},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1708484430752},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1708484430752},{"_id":"public/css/beantech.min.css","hash":"82dfc9319fc6186873d4b81b3ef3690bd2eeec9a","modified":1708484430752},{"_id":"public/css/beantech.css","hash":"8d0caa58529b1cace7e3e381b603dc5600b246a7","modified":1708484430752},{"_id":"public/css/hux-blog.min.css","hash":"db9c7fa4d7b1907dbb521541d42017135d63526d","modified":1708484430752},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1708484430752},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1708484430752},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1708484430752},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1708484430752},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1708484430752},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1708484430752},{"_id":"public/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-error.png","hash":"90c32bd437a52ff5374137917edebdd0735aad2d","modified":1708484430752},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1708484430757},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1708484430789}],"Category":[{"name":"前端","_id":"clsv7ijtt000flwxaboc5m079"},{"name":"运维","_id":"clsv7ijub0018lwxa25ex3rm8"},{"name":"python","_id":"clsv7ijuw002elwxalbrmexlu"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2024-02-20T06:48:45.191Z","updated":"2024-02-20T06:48:45.191Z","path":"404.html","title":"","comments":1,"_id":"clsv7ijs40000lwxaont3reyu","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"//s1.ax1x.com/2020/06/04/twLMYn.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"//s1.ax1x.com/2020/06/04/twLMYn.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2024-02-20T06:48:45.215Z","path":"archive/index.html","_id":"clsv7ijth0002lwxay56nhqp5","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"走在成为极客的路上","header-img":"//s1.ax1x.com/2020/06/04/twxqWd.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n> Just do it !\n\n### 关于我\n\n> 一个混迹在四流圈子里的程序员\n\n### 兴趣方向\n\n> code、游戏、篮球\n\n### 参与社区\n\n > 掘金: <https://juejin.im/user/1503787635195054>\n\n### 联系我\n\n>Email: hc1132107224@163.com\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"走在成为极客的路上\"\nheader-img: \"//s1.ax1x.com/2020/06/04/twxqWd.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n> Just do it !\n\n### 关于我\n\n> 一个混迹在四流圈子里的程序员\n\n### 兴趣方向\n\n> code、游戏、篮球\n\n### 参与社区\n\n > 掘金: <https://juejin.im/user/1503787635195054>\n\n### 联系我\n\n>Email: hc1132107224@163.com\n","updated":"2024-02-20T06:48:45.215Z","path":"about/index.html","comments":1,"_id":"clsv7ijtj0004lwxakw6v0mnf","content":"<h3><span id=\"一句话\">一句话</span></h3><blockquote>\n<p>Just do it !</p>\n</blockquote>\n<h3><span id=\"关于我\">关于我</span></h3><blockquote>\n<p>一个混迹在四流圈子里的程序员</p>\n</blockquote>\n<h3><span id=\"兴趣方向\">兴趣方向</span></h3><blockquote>\n<p>code、游戏、篮球</p>\n</blockquote>\n<h3><span id=\"参与社区\">参与社区</span></h3><blockquote>\n<p>掘金: <a href=\"https://juejin.im/user/1503787635195054\" target=\"_blank\" rel=\"noopener\">https://juejin.im/user/1503787635195054</a></p>\n</blockquote>\n<h3><span id=\"联系我\">联系我</span></h3><blockquote>\n<p>Email: <a href=\"mailto:&#x68;&#x63;&#49;&#49;&#x33;&#x32;&#49;&#48;&#55;&#x32;&#x32;&#52;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x68;&#x63;&#49;&#49;&#x33;&#x32;&#49;&#48;&#55;&#x32;&#x32;&#52;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n</blockquote>\n","site":{"data":{}},"length":210,"excerpt":"","more":"<h3 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h3><blockquote>\n<p>Just do it !</p>\n</blockquote>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>一个混迹在四流圈子里的程序员</p>\n</blockquote>\n<h3 id=\"兴趣方向\"><a href=\"#兴趣方向\" class=\"headerlink\" title=\"兴趣方向\"></a>兴趣方向</h3><blockquote>\n<p>code、游戏、篮球</p>\n</blockquote>\n<h3 id=\"参与社区\"><a href=\"#参与社区\" class=\"headerlink\" title=\"参与社区\"></a>参与社区</h3><blockquote>\n<p>掘金: <a href=\"https://juejin.im/user/1503787635195054\" target=\"_blank\" rel=\"noopener\">https://juejin.im/user/1503787635195054</a></p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:&#x68;&#x63;&#49;&#49;&#x33;&#x32;&#49;&#48;&#55;&#x32;&#x32;&#52;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x68;&#x63;&#49;&#49;&#x33;&#x32;&#49;&#48;&#55;&#x32;&#x32;&#52;&#64;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"//s1.ax1x.com/2020/06/04/twLGOU.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"//s1.ax1x.com/2020/06/04/twLGOU.png\"\n---\n","date":"2024-02-20T06:48:45.241Z","updated":"2024-02-20T06:48:45.241Z","path":"tags/index.html","comments":1,"_id":"clsv7ijtl0007lwxaus75s5a3","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"mocha浏览器测试","catalog":true,"date":"2020-05-25T04:55:34.000Z","subtitle":null,"header-img":null,"_content":"\n[下载phantomJS](https://phantomjs.org/download.html)\n\n```shell\n// mac\n// 将phantomjs添加到全局的bin位置\nsudo ln -s /Users/XXXXXXXXXXXXx/phantomjs/bin/phantomjs /usr/local/bin/phantomjs\n```\n\n运行mocha脚本\n\n```shell\nnpx mocha-phantomjs -p /usr/local/bin/phantomjs ./test/index.html\n```\n","source":"_drafts/mocha浏览器测试.md","raw":"---\ntitle: mocha浏览器测试\ncatalog: true\ndate: 2020-05-25 12:55:34\nsubtitle:\nheader-img:\ntags: mocha\n---\n\n[下载phantomJS](https://phantomjs.org/download.html)\n\n```shell\n// mac\n// 将phantomjs添加到全局的bin位置\nsudo ln -s /Users/XXXXXXXXXXXXx/phantomjs/bin/phantomjs /usr/local/bin/phantomjs\n```\n\n运行mocha脚本\n\n```shell\nnpx mocha-phantomjs -p /usr/local/bin/phantomjs ./test/index.html\n```\n","slug":"mocha浏览器测试","published":0,"updated":"2024-02-20T06:48:45.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijte0001lwxaevlzftz3","content":"<p><a href=\"https://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">下载phantomJS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mac</span><br><span class=\"line\">// 将phantomjs添加到全局的bin位置</span><br><span class=\"line\">sudo ln -s /Users/XXXXXXXXXXXXx/phantomjs/bin/phantomjs /usr/local/bin/phantomjs</span><br></pre></td></tr></table></figure>\n\n<p>运行mocha脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx mocha-phantomjs -p /usr/local/bin/phantomjs ./test/index.html</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":189,"excerpt":"","more":"<p><a href=\"https://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">下载phantomJS</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mac</span><br><span class=\"line\">// 将phantomjs添加到全局的bin位置</span><br><span class=\"line\">sudo ln -s /Users/XXXXXXXXXXXXx/phantomjs/bin/phantomjs /usr/local/bin/phantomjs</span><br></pre></td></tr></table></figure>\n\n<p>运行mocha脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx mocha-phantomjs -p /usr/local/bin/phantomjs ./test/index.html</span><br></pre></td></tr></table></figure>\n\n"},{"title":"js部分代码模拟实现","catalog":true,"date":"2020-03-13T17:22:37.000Z","subtitle":null,"header-img":null,"_content":"\n## 原生 ajax 实现\n\n```javascript\nconst xhr = new XMLHttpRequest();\n\n// get请求\nxhr.open(\"get\", `${url}?${参数}`, true);\n\n// post请求\nxhr.open(\"post\", url, true);\nxhr.setRequestHeader(\"Content-type\", \"application/json\");\nxhr.send(\"username=1&age=19\");\n\nxhr.onreadystatechange = function() {\n  if (xhr.status == 200 && xhr.readyState == 4) {\n    var result = xhr.responseText;\n\n    return result;\n  }\n};\n```\n","source":"_drafts/js部分代码模拟实现.md","raw":"---\ntitle: js部分代码模拟实现\ncatalog: true\ndate: 2020-03-14 01:22:37\nsubtitle:\nheader-img:\ntags: js\n---\n\n## 原生 ajax 实现\n\n```javascript\nconst xhr = new XMLHttpRequest();\n\n// get请求\nxhr.open(\"get\", `${url}?${参数}`, true);\n\n// post请求\nxhr.open(\"post\", url, true);\nxhr.setRequestHeader(\"Content-type\", \"application/json\");\nxhr.send(\"username=1&age=19\");\n\nxhr.onreadystatechange = function() {\n  if (xhr.status == 200 && xhr.readyState == 4) {\n    var result = xhr.responseText;\n\n    return result;\n  }\n};\n```\n","slug":"js部分代码模拟实现","published":0,"updated":"2024-02-20T06:48:45.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijth0003lwxaldriwsu3","content":"<h2><span id=\"原生-ajax-实现\">原生 ajax 实现</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>, <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;参数&#125;</span>`</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"post\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">\"username=1&amp;age=19\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span> &amp;&amp; xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = xhr.responseText;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":393,"excerpt":"","more":"<h2 id=\"原生-ajax-实现\"><a href=\"#原生-ajax-实现\" class=\"headerlink\" title=\"原生 ajax 实现\"></a>原生 ajax 实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>, <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;参数&#125;</span>`</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">\"post\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">\"username=1&amp;age=19\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span> &amp;&amp; xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = xhr.responseText;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"redis基础","catalog":true,"date":"2020-03-04T07:48:13.000Z","subtitle":null,"header-img":null,"_content":"\n参考资料\n\n[node 端 redis](https://www.npmjs.com/package/ioredis)\n","source":"_drafts/redis基础.md","raw":"---\ntitle: redis基础\ncatalog: true\ndate: 2020-03-04 15:48:13\nsubtitle:\nheader-img:\ntags: redis\n---\n\n参考资料\n\n[node 端 redis](https://www.npmjs.com/package/ioredis)\n","slug":"redis基础","published":0,"updated":"2024-02-20T06:48:45.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtk0006lwxaal7fxd7a","content":"<p>参考资料</p>\n<p><a href=\"https://www.npmjs.com/package/ioredis\" target=\"_blank\" rel=\"noopener\">node 端 redis</a></p>\n","site":{"data":{}},"length":14,"excerpt":"","more":"<p>参考资料</p>\n<p><a href=\"https://www.npmjs.com/package/ioredis\" target=\"_blank\" rel=\"noopener\">node 端 redis</a></p>\n"},{"title":"rollup.js使用","catalog":true,"date":"2019-09-25T03:29:27.000Z","subtitle":null,"header-img":null,"_content":"\noutput.format 生成包的格式，有如下格式：\n\n1. amd -- 异步模块定义，用于像 RequestJS 这样的模块加载器。\n2. cjs -- CommonJS, 适用于 Node 或 Browserify/webpack\n3. es -- 将软件包保存为 ES 模块文件。\n4. iife -- 一个自动执行的功能，适合作为 <script>标签这样的。\n5. umd -- 通用模块定义，以 amd, cjs, 和 iife 为一体。\n","source":"_drafts/rollup-js使用.md","raw":"---\ntitle: rollup.js使用\ncatalog: true\ndate: 2019-09-25 11:29:27\nsubtitle:\nheader-img:\ntags: javascript\n---\n\noutput.format 生成包的格式，有如下格式：\n\n1. amd -- 异步模块定义，用于像 RequestJS 这样的模块加载器。\n2. cjs -- CommonJS, 适用于 Node 或 Browserify/webpack\n3. es -- 将软件包保存为 ES 模块文件。\n4. iife -- 一个自动执行的功能，适合作为 <script>标签这样的。\n5. umd -- 通用模块定义，以 amd, cjs, 和 iife 为一体。\n","slug":"rollup-js使用","published":0,"updated":"2024-02-20T06:48:45.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtn0008lwxaqpggyxw7","content":"<p>output.format 生成包的格式，有如下格式：</p>\n<ol>\n<li>amd – 异步模块定义，用于像 RequestJS 这样的模块加载器。</li>\n<li>cjs – CommonJS, 适用于 Node 或 Browserify/webpack</li>\n<li>es – 将软件包保存为 ES 模块文件。</li>\n<li>iife – 一个自动执行的功能，适合作为 <script>标签这样的。</li>\n<li>umd – 通用模块定义，以 amd, cjs, 和 iife 为一体。</li>\n</ol>\n</script></li></ol>","site":{"data":{}},"length":168,"excerpt":"","more":"<p>output.format 生成包的格式，有如下格式：</p>\n<ol>\n<li>amd – 异步模块定义，用于像 RequestJS 这样的模块加载器。</li>\n<li>cjs – CommonJS, 适用于 Node 或 Browserify/webpack</li>\n<li>es – 将软件包保存为 ES 模块文件。</li>\n<li>iife – 一个自动执行的功能，适合作为 <script>标签这样的。</li>\n<li>umd – 通用模块定义，以 amd, cjs, 和 iife 为一体。</li>\n</ol>\n</script></li></ol>"},{"title":"mysql使用","catalog":true,"date":"2020-04-10T04:28:07.000Z","subtitle":null,"header-img":null,"_content":"\n## 安装\n\n环境变量设置\n\nMac 下\n\n```shell\nvim ~/.bash_profile\n\nPATH=$PATH:/usr/local/mysql/bin\n\nsource ~/.bash_profile\n```\n\n## 启动\n\nMac：\n\n启动 mysql 服务 `sudo /usr/local/mysql/support-files/mysql.server start`\n\n## 常用命令\n\n登录 `mysql -uroot -p`\n\n## 遇到的错误\n\n1.Navicat Premium 12 连接 MySQL 数据库时会出现 Authentication plugin 'caching_sha2_password' cannot be loaded\n\n出现这个原因是 mysql8 之前的版本中加密规则是 mysql_native_password,而在 mysql8 之后,加密规则是 caching_sha2_password, 解决问题方法有两种,一种是升级 navicat 驱动,一种是把 mysql 用户登录密码加密规则还原成 mysql_native_password.\n\n第二种方式操作如下：\n\n```shell\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;   #修改加密规则\n\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';   #更新一下用户的密码\n\nFLUSH PRIVILEGES;   #刷新权限\n```\n\n2.数据库不能插入中文\n\n## 参考资料\n\n1. [MySQL 连接出现 Authentication plugin 'caching_sha2_password' cannot be loaded](https://www.cnblogs.com/zhurong/p/9898675.html)\n","source":"_drafts/mysql使用.md","raw":"---\ntitle: mysql使用\ncatalog: true\ndate: 2020-04-10 12:28:07\nsubtitle:\nheader-img:\ntags: mysql\n---\n\n## 安装\n\n环境变量设置\n\nMac 下\n\n```shell\nvim ~/.bash_profile\n\nPATH=$PATH:/usr/local/mysql/bin\n\nsource ~/.bash_profile\n```\n\n## 启动\n\nMac：\n\n启动 mysql 服务 `sudo /usr/local/mysql/support-files/mysql.server start`\n\n## 常用命令\n\n登录 `mysql -uroot -p`\n\n## 遇到的错误\n\n1.Navicat Premium 12 连接 MySQL 数据库时会出现 Authentication plugin 'caching_sha2_password' cannot be loaded\n\n出现这个原因是 mysql8 之前的版本中加密规则是 mysql_native_password,而在 mysql8 之后,加密规则是 caching_sha2_password, 解决问题方法有两种,一种是升级 navicat 驱动,一种是把 mysql 用户登录密码加密规则还原成 mysql_native_password.\n\n第二种方式操作如下：\n\n```shell\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;   #修改加密规则\n\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';   #更新一下用户的密码\n\nFLUSH PRIVILEGES;   #刷新权限\n```\n\n2.数据库不能插入中文\n\n## 参考资料\n\n1. [MySQL 连接出现 Authentication plugin 'caching_sha2_password' cannot be loaded](https://www.cnblogs.com/zhurong/p/9898675.html)\n","slug":"mysql使用","published":0,"updated":"2024-02-20T06:48:45.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtp0009lwxa5rk1ww7k","content":"<h2><span id=\"安装\">安装</span></h2><p>环境变量设置</p>\n<p>Mac 下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:/usr/local/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"启动\">启动</span></h2><p>Mac：</p>\n<p>启动 mysql 服务 <code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h2><span id=\"常用命令\">常用命令</span></h2><p>登录 <code>mysql -uroot -p</code></p>\n<h2><span id=\"遇到的错误\">遇到的错误</span></h2><p>1.Navicat Premium 12 连接 MySQL 数据库时会出现 Authentication plugin ‘caching_sha2_password’ cannot be loaded</p>\n<p>出现这个原因是 mysql8 之前的版本中加密规则是 mysql_native_password,而在 mysql8 之后,加密规则是 caching_sha2_password, 解决问题方法有两种,一种是升级 navicat 驱动,一种是把 mysql 用户登录密码加密规则还原成 mysql_native_password.</p>\n<p>第二种方式操作如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;   #修改加密规则</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';   #更新一下用户的密码</span><br><span class=\"line\"></span><br><span class=\"line\">FLUSH PRIVILEGES;   #刷新权限</span><br></pre></td></tr></table></figure>\n\n<p>2.数据库不能插入中文</p>\n<h2><span id=\"参考资料\">参考资料</span></h2><ol>\n<li><a href=\"https://www.cnblogs.com/zhurong/p/9898675.html\" target=\"_blank\" rel=\"noopener\">MySQL 连接出现 Authentication plugin ‘caching_sha2_password’ cannot be loaded</a></li>\n</ol>\n","site":{"data":{}},"length":698,"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>环境变量设置</p>\n<p>Mac 下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:/usr/local/mysql/bin</span><br><span class=\"line\"></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>Mac：</p>\n<p>启动 mysql 服务 <code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>登录 <code>mysql -uroot -p</code></p>\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><p>1.Navicat Premium 12 连接 MySQL 数据库时会出现 Authentication plugin ‘caching_sha2_password’ cannot be loaded</p>\n<p>出现这个原因是 mysql8 之前的版本中加密规则是 mysql_native_password,而在 mysql8 之后,加密规则是 caching_sha2_password, 解决问题方法有两种,一种是升级 navicat 驱动,一种是把 mysql 用户登录密码加密规则还原成 mysql_native_password.</p>\n<p>第二种方式操作如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;   #修改加密规则</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';   #更新一下用户的密码</span><br><span class=\"line\"></span><br><span class=\"line\">FLUSH PRIVILEGES;   #刷新权限</span><br></pre></td></tr></table></figure>\n\n<p>2.数据库不能插入中文</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://www.cnblogs.com/zhurong/p/9898675.html\" target=\"_blank\" rel=\"noopener\">MySQL 连接出现 Authentication plugin ‘caching_sha2_password’ cannot be loaded</a></li>\n</ol>\n"},{"title":"业务技术感想","catalog":true,"draft":true,"date":"2020-11-12T03:13:01.000Z","subtitle":null,"header-img":null,"_content":"\n## idea\n\n当你想到一个idea，实施时，和老板、团队同学、业务方对焦，确认我想做的是不是大家想要的，此时会向你发出灵魂拷问：\n\n1. 当前业务背景下，为什么要做？（有什么业务价值？有什么技术价值？）\n2. 为什么现在必须做？\n3. 为什么是你做？\n4. 怎么做？（体系化、全链路、单点技术挑战）\n5. ROI（投入产出比）怎么样？能否被复用？\n6. 未来规划（能否跟BU或集团的方案联动、共建）\n","source":"_drafts/业务技术感想.md","raw":"---\ntitle: 业务技术感想\ncatalog: true\ndraft: true\ndate: 2020-11-12 11:13:01\nsubtitle:\nheader-img:\ntags: deep\ncategories: 前端\n---\n\n## idea\n\n当你想到一个idea，实施时，和老板、团队同学、业务方对焦，确认我想做的是不是大家想要的，此时会向你发出灵魂拷问：\n\n1. 当前业务背景下，为什么要做？（有什么业务价值？有什么技术价值？）\n2. 为什么现在必须做？\n3. 为什么是你做？\n4. 怎么做？（体系化、全链路、单点技术挑战）\n5. ROI（投入产出比）怎么样？能否被复用？\n6. 未来规划（能否跟BU或集团的方案联动、共建）\n","slug":"业务技术感想","published":0,"updated":"2024-02-20T06:48:45.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtq000clwxaq0qx2rh4","content":"<h2><span id=\"idea\">idea</span></h2><p>当你想到一个idea，实施时，和老板、团队同学、业务方对焦，确认我想做的是不是大家想要的，此时会向你发出灵魂拷问：</p>\n<ol>\n<li>当前业务背景下，为什么要做？（有什么业务价值？有什么技术价值？）</li>\n<li>为什么现在必须做？</li>\n<li>为什么是你做？</li>\n<li>怎么做？（体系化、全链路、单点技术挑战）</li>\n<li>ROI（投入产出比）怎么样？能否被复用？</li>\n<li>未来规划（能否跟BU或集团的方案联动、共建）</li>\n</ol>\n","site":{"data":{}},"length":171,"excerpt":"","more":"<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><p>当你想到一个idea，实施时，和老板、团队同学、业务方对焦，确认我想做的是不是大家想要的，此时会向你发出灵魂拷问：</p>\n<ol>\n<li>当前业务背景下，为什么要做？（有什么业务价值？有什么技术价值？）</li>\n<li>为什么现在必须做？</li>\n<li>为什么是你做？</li>\n<li>怎么做？（体系化、全链路、单点技术挑战）</li>\n<li>ROI（投入产出比）怎么样？能否被复用？</li>\n<li>未来规划（能否跟BU或集团的方案联动、共建）</li>\n</ol>\n"},{"title":"前端多项目公共模块管理实践","catalog":false,"date":"2019-06-21T06:12:19.000Z","subtitle":null,"header-img":null,"_content":"\n### 1、背景\n\n由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。\n\n### 2、调研\n\n参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：\n\n1. 搭建私有npm仓库；\n2. git submodule；\n3. 外部脚本SDK形式；\n4. iframe；\n\n其中方案1、2比较符合现在工程化和模块化开发形式；\n\n方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；\n\n方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；\n\n方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；\n","source":"_drafts/前端多项目公共模块管理实践.md","raw":"---\ntitle: 前端多项目公共模块管理实践\ncatalog: false\ndate: 2019-06-21 14:12:19\nsubtitle:\nheader-img:\ntags: 前端\n---\n\n### 1、背景\n\n由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。\n\n### 2、调研\n\n参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：\n\n1. 搭建私有npm仓库；\n2. git submodule；\n3. 外部脚本SDK形式；\n4. iframe；\n\n其中方案1、2比较符合现在工程化和模块化开发形式；\n\n方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；\n\n方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；\n\n方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；\n","slug":"前端多项目公共模块管理实践","published":0,"updated":"2024-02-20T06:48:45.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijts000dlwxaq47a6y31","content":"<h3><span id=\"1-背景\">1、背景</span></h3><p>由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。</p>\n<h3><span id=\"2-调研\">2、调研</span></h3><p>参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：</p>\n<ol>\n<li>搭建私有npm仓库；</li>\n<li>git submodule；</li>\n<li>外部脚本SDK形式；</li>\n<li>iframe；</li>\n</ol>\n<p>其中方案1、2比较符合现在工程化和模块化开发形式；</p>\n<p>方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；</p>\n<p>方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；</p>\n<p>方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；</p>\n","site":{"data":{}},"length":370,"excerpt":"","more":"<h3 id=\"1、背景\"><a href=\"#1、背景\" class=\"headerlink\" title=\"1、背景\"></a>1、背景</h3><p>由于现在公司业务发展比较迅速，产品数量急剧增多，对应的项目也越来越多，光是前端项目目前就已经拥有几十个项目，目测项目的数量会越来越多，这个时候就需要我们将一些公共模块、方法、组件提取出来单独维护和管理，避免同样功能的代码在各个项目中重复开发、复制粘贴以及不好统一维护的难题。</p>\n<h3 id=\"2、调研\"><a href=\"#2、调研\" class=\"headerlink\" title=\"2、调研\"></a>2、调研</h3><p>参考别的一些开源项目以及现在的一些解决方案，梳理下大概有现在几种解决方案：</p>\n<ol>\n<li>搭建私有npm仓库；</li>\n<li>git submodule；</li>\n<li>外部脚本SDK形式；</li>\n<li>iframe；</li>\n</ol>\n<p>其中方案1、2比较符合现在工程化和模块化开发形式；</p>\n<p>方案2会将远程代码拉下来，在项目中存在多个node_modules文件夹，优点比较适合前期频繁迭代开发；</p>\n<p>方案3存在受到浏览器缓存影响，需要及时更新资源的时候在多项目使用的时候会比较难处理；</p>\n<p>方案4存在资源隔离，代码不方便控制以及存在影响性能等问题；</p>\n"},{"title":"微信封禁自动监控技术调研","catalog":true,"subtitle":null,"header-img":null,"_content":"\n## 背景\n\n微信基于内部策略和管理，会对通过微信渠道分享的链接进行封禁。目前没有一个现成的服务可以实时并自动监控当前链接在微信中的是否被封状态。\n\n对于有一个自动监控链接是否被封的服务并且及时发送消息就非常重要了。\n\n## 需要实现的技术点\n\n- 需要一个检测微信是否被封的能力【核心技术点】\n- 轮询查询这个接口\n- 若发现异常，接入消息通知机制【调研企业微信消息接入机制】\n  \n## 现有的收费的检测微信是否被封的能力的api\n\n- <https://safe.ft12.com/safe.php?url=safe>     <https://www.ft12.com/safe.html>\n- <http://www.monkeyapi.com/>   猴子数据付费  每天只有10次机会  根据ip检测\n- <http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&url=http://baidu.com>   【有调用总次数限制】\n\n## 自行实现  检测微信是否被封的能力的api 方案调研\n\n企业公众号 有长链转换短链 接口，通过这个接口生成的短链 打开结果进行判断  【亲测可用】【正式企业号 有该接口调用权限，需要企业微信号并且需要300元开通费】\n\n可以用测试账号，每天1000次的调用机会。基本可以满足2min一次的轮询查询\n\n机器人模拟打开，模拟抓包或者模拟识图 【成本比较大】\n\nappium 模拟微信环境webview 打开某页面的情况。抓包分析【难度较大，且需要一个实体机时刻提供代理】\n\n## 使用企业公众号转短链 大致实现流程\n\n1. 申请测试账号，获取测试账号的appid和 secret    <https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index>\n\n2. 根据测试账号 appid和secret 获取token <https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html>\n获取token 后 根据 token 调用 长链转短链 接口 <https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html>\n\n3. 转成短链后 请求 若被封会 302重定向到weixin110，若没有被封则location是正常的了链接\n\n[![被封的链接](https://s3.ax1x.com/2020/11/24/DN8fPg.png)](https://imgchr.com/i/DN8fPg)\n\n[![正常重定向链接](https://s3.ax1x.com/2020/11/24/DN8RIS.png)](https://imgchr.com/i/DN8RIS)\n\n根据一定的时间间隔轮询短链的打开情况\n若检测到location到weixin110 接入企业微信消息通知机制。发送链接被封警告消息\n\n## 可参考实现\n\n<https://www.zhihu.com/question/42101054/answer/860915504>\n","source":"_drafts/微信封禁自动监控技术调研.md","raw":"---\ntitle: 微信封禁自动监控技术调研\ncatalog: true\nsubtitle:\nheader-img: \ntags: deep\ncategories: 前端\n---\n\n## 背景\n\n微信基于内部策略和管理，会对通过微信渠道分享的链接进行封禁。目前没有一个现成的服务可以实时并自动监控当前链接在微信中的是否被封状态。\n\n对于有一个自动监控链接是否被封的服务并且及时发送消息就非常重要了。\n\n## 需要实现的技术点\n\n- 需要一个检测微信是否被封的能力【核心技术点】\n- 轮询查询这个接口\n- 若发现异常，接入消息通知机制【调研企业微信消息接入机制】\n  \n## 现有的收费的检测微信是否被封的能力的api\n\n- <https://safe.ft12.com/safe.php?url=safe>     <https://www.ft12.com/safe.html>\n- <http://www.monkeyapi.com/>   猴子数据付费  每天只有10次机会  根据ip检测\n- <http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&url=http://baidu.com>   【有调用总次数限制】\n\n## 自行实现  检测微信是否被封的能力的api 方案调研\n\n企业公众号 有长链转换短链 接口，通过这个接口生成的短链 打开结果进行判断  【亲测可用】【正式企业号 有该接口调用权限，需要企业微信号并且需要300元开通费】\n\n可以用测试账号，每天1000次的调用机会。基本可以满足2min一次的轮询查询\n\n机器人模拟打开，模拟抓包或者模拟识图 【成本比较大】\n\nappium 模拟微信环境webview 打开某页面的情况。抓包分析【难度较大，且需要一个实体机时刻提供代理】\n\n## 使用企业公众号转短链 大致实现流程\n\n1. 申请测试账号，获取测试账号的appid和 secret    <https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index>\n\n2. 根据测试账号 appid和secret 获取token <https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html>\n获取token 后 根据 token 调用 长链转短链 接口 <https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html>\n\n3. 转成短链后 请求 若被封会 302重定向到weixin110，若没有被封则location是正常的了链接\n\n[![被封的链接](https://s3.ax1x.com/2020/11/24/DN8fPg.png)](https://imgchr.com/i/DN8fPg)\n\n[![正常重定向链接](https://s3.ax1x.com/2020/11/24/DN8RIS.png)](https://imgchr.com/i/DN8RIS)\n\n根据一定的时间间隔轮询短链的打开情况\n若检测到location到weixin110 接入企业微信消息通知机制。发送链接被封警告消息\n\n## 可参考实现\n\n<https://www.zhihu.com/question/42101054/answer/860915504>\n","slug":"微信封禁自动监控技术调研","published":0,"date":"2024-02-20T06:48:45.192Z","updated":"2024-02-20T06:48:45.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtt000glwxaamfmftv3","content":"<h2><span id=\"背景\">背景</span></h2><p>微信基于内部策略和管理，会对通过微信渠道分享的链接进行封禁。目前没有一个现成的服务可以实时并自动监控当前链接在微信中的是否被封状态。</p>\n<p>对于有一个自动监控链接是否被封的服务并且及时发送消息就非常重要了。</p>\n<h2><span id=\"需要实现的技术点\">需要实现的技术点</span></h2><ul>\n<li><p>需要一个检测微信是否被封的能力【核心技术点】</p>\n</li>\n<li><p>轮询查询这个接口</p>\n</li>\n<li><p>若发现异常，接入消息通知机制【调研企业微信消息接入机制】</p>\n<h2><span id=\"现有的收费的检测微信是否被封的能力的api\">现有的收费的检测微信是否被封的能力的api</span></h2></li>\n<li><p><a href=\"https://safe.ft12.com/safe.php?url=safe\" target=\"_blank\" rel=\"noopener\">https://safe.ft12.com/safe.php?url=safe</a>     <a href=\"https://www.ft12.com/safe.html\" target=\"_blank\" rel=\"noopener\">https://www.ft12.com/safe.html</a></p>\n</li>\n<li><p><a href=\"http://www.monkeyapi.com/\" target=\"_blank\" rel=\"noopener\">http://www.monkeyapi.com/</a>   猴子数据付费  每天只有10次机会  根据ip检测</p>\n</li>\n<li><p><a href=\"http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&amp;url=http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&amp;url=http://baidu.com</a>   【有调用总次数限制】</p>\n</li>\n</ul>\n<h2><span id=\"自行实现-检测微信是否被封的能力的api-方案调研\">自行实现  检测微信是否被封的能力的api 方案调研</span></h2><p>企业公众号 有长链转换短链 接口，通过这个接口生成的短链 打开结果进行判断  【亲测可用】【正式企业号 有该接口调用权限，需要企业微信号并且需要300元开通费】</p>\n<p>可以用测试账号，每天1000次的调用机会。基本可以满足2min一次的轮询查询</p>\n<p>机器人模拟打开，模拟抓包或者模拟识图 【成本比较大】</p>\n<p>appium 模拟微信环境webview 打开某页面的情况。抓包分析【难度较大，且需要一个实体机时刻提供代理】</p>\n<h2><span id=\"使用企业公众号转短链-大致实现流程\">使用企业公众号转短链 大致实现流程</span></h2><ol>\n<li><p>申请测试账号，获取测试账号的appid和 secret    <a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p>\n</li>\n<li><p>根据测试账号 appid和secret 获取token <a href=\"https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a><br>获取token 后 根据 token 调用 长链转短链 接口 <a href=\"https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html</a></p>\n</li>\n<li><p>转成短链后 请求 若被封会 302重定向到weixin110，若没有被封则location是正常的了链接</p>\n</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/DN8fPg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/24/DN8fPg.png\" alt=\"被封的链接\"></a></p>\n<p><a href=\"https://imgchr.com/i/DN8RIS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/24/DN8RIS.png\" alt=\"正常重定向链接\"></a></p>\n<p>根据一定的时间间隔轮询短链的打开情况<br>若检测到location到weixin110 接入企业微信消息通知机制。发送链接被封警告消息</p>\n<h2><span id=\"可参考实现\">可参考实现</span></h2><p><a href=\"https://www.zhihu.com/question/42101054/answer/860915504\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/42101054/answer/860915504</a></p>\n","site":{"data":{}},"length":1149,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>微信基于内部策略和管理，会对通过微信渠道分享的链接进行封禁。目前没有一个现成的服务可以实时并自动监控当前链接在微信中的是否被封状态。</p>\n<p>对于有一个自动监控链接是否被封的服务并且及时发送消息就非常重要了。</p>\n<h2 id=\"需要实现的技术点\"><a href=\"#需要实现的技术点\" class=\"headerlink\" title=\"需要实现的技术点\"></a>需要实现的技术点</h2><ul>\n<li><p>需要一个检测微信是否被封的能力【核心技术点】</p>\n</li>\n<li><p>轮询查询这个接口</p>\n</li>\n<li><p>若发现异常，接入消息通知机制【调研企业微信消息接入机制】</p>\n<h2 id=\"现有的收费的检测微信是否被封的能力的api\"><a href=\"#现有的收费的检测微信是否被封的能力的api\" class=\"headerlink\" title=\"现有的收费的检测微信是否被封的能力的api\"></a>现有的收费的检测微信是否被封的能力的api</h2></li>\n<li><p><a href=\"https://safe.ft12.com/safe.php?url=safe\" target=\"_blank\" rel=\"noopener\">https://safe.ft12.com/safe.php?url=safe</a>     <a href=\"https://www.ft12.com/safe.html\" target=\"_blank\" rel=\"noopener\">https://www.ft12.com/safe.html</a></p>\n</li>\n<li><p><a href=\"http://www.monkeyapi.com/\" target=\"_blank\" rel=\"noopener\">http://www.monkeyapi.com/</a>   猴子数据付费  每天只有10次机会  根据ip检测</p>\n</li>\n<li><p><a href=\"http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&amp;url=http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://api.70api.com/api/wx-urlck/?apiKey=2744c44452c5a95d12b3416aa5d59387&amp;url=http://baidu.com</a>   【有调用总次数限制】</p>\n</li>\n</ul>\n<h2 id=\"自行实现-检测微信是否被封的能力的api-方案调研\"><a href=\"#自行实现-检测微信是否被封的能力的api-方案调研\" class=\"headerlink\" title=\"自行实现  检测微信是否被封的能力的api 方案调研\"></a>自行实现  检测微信是否被封的能力的api 方案调研</h2><p>企业公众号 有长链转换短链 接口，通过这个接口生成的短链 打开结果进行判断  【亲测可用】【正式企业号 有该接口调用权限，需要企业微信号并且需要300元开通费】</p>\n<p>可以用测试账号，每天1000次的调用机会。基本可以满足2min一次的轮询查询</p>\n<p>机器人模拟打开，模拟抓包或者模拟识图 【成本比较大】</p>\n<p>appium 模拟微信环境webview 打开某页面的情况。抓包分析【难度较大，且需要一个实体机时刻提供代理】</p>\n<h2 id=\"使用企业公众号转短链-大致实现流程\"><a href=\"#使用企业公众号转短链-大致实现流程\" class=\"headerlink\" title=\"使用企业公众号转短链 大致实现流程\"></a>使用企业公众号转短链 大致实现流程</h2><ol>\n<li><p>申请测试账号，获取测试账号的appid和 secret    <a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p>\n</li>\n<li><p>根据测试账号 appid和secret 获取token <a href=\"https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a><br>获取token 后 根据 token 调用 长链转短链 接口 <a href=\"https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Account_Management/URL_Shortener.html</a></p>\n</li>\n<li><p>转成短链后 请求 若被封会 302重定向到weixin110，若没有被封则location是正常的了链接</p>\n</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/DN8fPg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/24/DN8fPg.png\" alt=\"被封的链接\"></a></p>\n<p><a href=\"https://imgchr.com/i/DN8RIS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/24/DN8RIS.png\" alt=\"正常重定向链接\"></a></p>\n<p>根据一定的时间间隔轮询短链的打开情况<br>若检测到location到weixin110 接入企业微信消息通知机制。发送链接被封警告消息</p>\n<h2 id=\"可参考实现\"><a href=\"#可参考实现\" class=\"headerlink\" title=\"可参考实现\"></a>可参考实现</h2><p><a href=\"https://www.zhihu.com/question/42101054/answer/860915504\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/42101054/answer/860915504</a></p>\n"},{"title":"微前端","catalog":true,"date":"2019-10-22T13:04:32.000Z","subtitle":null,"header-img":null,"_content":"\n## 微前端\n\n“ 微前端 ”一词最早于2016年底提出。它将微服务的概念扩展到前端世界。当前的趋势是构建一个功能强大的浏览器应用程序（又名单页应用程序），该应用程序位于微服务架构之上。随着时间的流逝，通常由独立团队开发的前端层会不断增长，并且变得更加难以维护，这就是我们所说的 Frontend Monolith（巨石前端）。\n\nMicro Frontends背后的想法是将网站或Web应用程序视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，并且从数据库到用户界面，端到端地开发其功能。\n\n## 背景\n\n一般来说，有以下需求的项目可以考虑使用微前端\n\n1. 技术栈的升级/有使用不同技术栈的需求\n\n    目前主流的技术栈，随着技术的发展，必然会持续不断地迭代前端的技术体系，同时也要兼容老项目运行。\n\n    采用微服务的架构，很重要的一点，是解决遗留系统，在不需要重写原有项目的基础下，可以使用新的技术。\n\n2. 巨石应用的维护困难\n\n   - 多年迭代的老项目，不能下线也没资源迁移；\n   - 超大的SPA项目，比如中台，动辄几十甚至几百+的页面数量；\n\n    上述情况，让这些系统越来越难维护，开发上，一次启动、编译耗时过长，发布上，同样需要再次经历编译打包过长的困扰，导致开发体验极其糟糕。\n\n3. 系统之间的模块组合与复用\n\n    我们可以通过复制代码去做模块复用，当然这样的结果是难以维护的。\n    如果将业务模块封装成包，然后以发布npm包的方式或子仓库git submodule来复用，理论上是可以的。\n    但现实是无法处理频繁地需求迭代，每次迭代需要将用到此类模块的项目逐个更新依赖、构建、部署，这样的效率是无法接受的，也容易出出错。\n\n4. 多团队合作开发困难\n\n    出于某些原因，我们会将一个应用拆分为多个功能模块，跨部门多团队来共同完成开发。\n\n    多团队合作的问题不言而喻\n\n    - 代码冲突\n    - 模块之间没有隔离，容易相互影响\n\n    很明显看到在处理项目跨度长、多团队合作时，具有强烈需求。那么，典型的场景，就是各大公司企业级的ToB项目以及云产品等。\n\n## 特点\n\n- 技术栈无关\n\n    主框架不限制接入应用的技术栈，微应用具备完全自主权\n\n- 独立开发、独立部署\n\n    应用独立，独立仓库，多团队可独立开发测试部署，部署后主框架自动完成同步更新\n\n- 增量升级\n\n    对遗留项目做技术栈升级或重构，微前端是一种非常好的渐进式重构的手段和策略\n\n- 独立运行\n\n    每个微应用之间状态隔离，运行时状态不可共享\n\n## 实现微前端的方式\n\n1. iframe\n\n    不考虑用户体验以及一些特定case场景，算是比较完美的微前端解决方案；\n\n2. 路由分发\n\n    通过反代、MPA方式处理跳转不同入口文件，多个独立spa应用之间互相跳转，将页面导航做成类似样式，让用户感觉像是在同一应用。\n\n3. 基座式SPA，主从应用设计\n\n    是一种通过*软件工程*的方式在构建前、构建时、构建后等步骤中，对应用进行一步的拆分并重新组合的方式。\n这里的基座就是主应用，会包含应用依赖的绝大多数环境，包括基础框架、组件和第三方依赖包，子应用只包含自身一些业务代码。主应用启动后，会捕获全局的路由事件，来判断当前路由需要加载哪个子应用，其中路由要由主应用来接管控制，子应用更像主应用的*路由模块*。\n\n4. 类Single-SPA\n\n    主应用仅作为加载容器，管理子应用的生命周期。路由部分和基座式SPA方式不一样，子应用加载后一般会由子应用去接管系统路由，而基座式的路由完全由主应用控制\n\n5. 组件化（Web Components）\n\n    主要利用Web Components的一些特性\n\n    - Custom elements\n    - Shadow DOM\n    - HTML templates\n    - HTML Imports\n\n每个组件由link标签引入\n\n```html\n<link rel=\"import\" href=\"components/di-li.html\">\n<link rel=\"import\" href=\"components/d-header.html\">\n```\n\n方案 | 优点 | 缺点\n- | - | -\nMPA + 路由分发 | 框架无关<br>100%隔离<br>独立开发、部署、运行  | 模块复用困难<br>每个独立的spa应用加载时间较长，容易出现白屏，影响体验<br>后续扩展同屏多应用不利于扩展\n组件化 |框架无关 |重写现有的前端应用<br>上下游生态系统不完善<br>兼容性\n基座式SPA | 打包后的子应用只包含业务代码，体积小，加载快，体验好 | 基座决定了与框架强相关，哪怕是基座版本升级迭代，也会非常容易造成子应用出错<br>对开发、构建方式的*规范*依赖有强烈要求\n类Single-SPA | 框架无关<br>独立开发、部署、运行<br>方便复用<br>扩展方便 | 需要子应用入口和配置项有轻微入侵\n\n## 为什么不是iframe\n\n为什么不用iframe，这几乎是所有微前端方案第一个会被追问的问题。但是大部分微前端又不约而同的放弃了iframe的方案，这自然是有一定原因的。\n\n如果不考虑体验问题，iframe几乎是最完美的微前端解决方案了。\n\niframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。\n\n下面列举几个iframe的问题：\n\n1. url不同步。浏览器刷新、前进后退会导致url状态丢失；\n2. UI。想象下子iframe窗口大小限制，需要全局展示全局弹窗，提示等；\n3. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步、应用管理等需求处理；\n4. 加载慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程；\n\n## 各厂分析实现\n\n由于微前端兴起并不久，市面上并没有统一的做法，实现效果、实现方式千差万别。就拿“是否支持不同技术栈”来说，阿里的 qiankun 视之为微服务的核心价值，而 爱奇艺 和 ThoughtWorks 的 mooa 实现中压根就不考虑支持不同技术。\n\n### 爱奇艺技术产品团队\n\n目标\n\n- 框架与业务更加的解耦\n- 模块的独立部署、发布等提高迭代效率\n\n效果\n\n- [x] 独立部署  \n- [ ] 独立技术栈：仅支持 vue\n- [ ] tree shake：手动将 Vue，Router，store，RenderPage 写到全局资源，通用模块注册为懒加载组件\n- [x]\n- [ ] 多个应用同时运行：同时只能运行一个\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n实现/特点\n\n- 应用资源：每个应用自己打包生成 manifest，标注资源地址\n- 路由：统一使用全局路由，子模块的路由加载时合并入全局路由\n- 渲染页面：document.head 中插入 script，再主动调用 window.mp.render_home(‘#containerId’)来渲染页面\n\n只支持同一版本的vue，定制化程度非常高的方案，优点是相对简单，缺点是用处不大\n\n### 美团 用微前端的方式搭建单页应用\n\n目标\n\n- 合并多个业务成一个\n\n效果\n\n- [ ] 独立开发：需要奖容器和全部微服务一起启动\n- [x] 独立部署\n- [ ] 独立技术栈：\n- [ ] tree shake：\n- [x] 环境隔离：\n- [ ] 多个应用同时运行：同时只能运行一个\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n实现/特点\n\n- 容器提供了额外的功能 *用户登录机制* 菜单权限获取 *全局异常处理* 全局数据打点\n- 路由由三部分组成权限菜单树、导航和路由树\n\n### 阿里 qiankun开源方案\n\n目标\n\n- 简单，像接入 iframe 一样容易\n- 技术栈无关\n\n效果\n\n- [x] 独立开发：容器和业务无耦合，可以随意启动\n- [x] 独立部署\n- [x] 独立技术栈\n- [ ] tree shake：无\n- [x] 环境隔离：可选沙盒模式\n- [x] 多个应用同时运行：可选支持模式\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n![qiankun](https://segmentfault.com/img/remote/1460000022275996)\n\n流程图\n\n[![qiankun流程图](https://s1.ax1x.com/2020/10/29/BJ18qP.png)](https://imgchr.com/i/BJ18qP)\n\n注意点\n\n- 加载本地资源需要更改子应用配置，携带上当前域名\n- 因使用fetch直接加载js，故暂不支持type=module的js，间接不支持vite\n\n## 参考\n\n1. [微前端的那些事儿](https://microfrontends.cn/)\n2. [可能是你见过最完善的微前端解决方案](https://zhuanlan.zhihu.com/p/78362028) - 知乎ID: kuitos\n3. [Bifrost微前端框架及其在美团闪购中的实践](https://mp.weixin.qq.com/s/GgVo5KyZPlEsEeICcPyuLA) - 美团技术团队（基座式vue）\n4. [用微前端的方式搭建类单页应用](https://mp.weixin.qq.com/s/DpFXTrQ3_kBX4EB6or4Q8Q) - 美团技术团队（基座式react）\n5. [爱奇艺号如何基于Vue定制开发微前端框架？](https://mp.weixin.qq.com/s/z3Ir-RnPQGXGRh6pDTu8IA) - 爱奇艺号（基座式vue）\n","source":"_drafts/微前端.md","raw":"---\ntitle: 微前端\ncatalog: true\ndate: 2019-10-22 21:04:32\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n## 微前端\n\n“ 微前端 ”一词最早于2016年底提出。它将微服务的概念扩展到前端世界。当前的趋势是构建一个功能强大的浏览器应用程序（又名单页应用程序），该应用程序位于微服务架构之上。随着时间的流逝，通常由独立团队开发的前端层会不断增长，并且变得更加难以维护，这就是我们所说的 Frontend Monolith（巨石前端）。\n\nMicro Frontends背后的想法是将网站或Web应用程序视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，并且从数据库到用户界面，端到端地开发其功能。\n\n## 背景\n\n一般来说，有以下需求的项目可以考虑使用微前端\n\n1. 技术栈的升级/有使用不同技术栈的需求\n\n    目前主流的技术栈，随着技术的发展，必然会持续不断地迭代前端的技术体系，同时也要兼容老项目运行。\n\n    采用微服务的架构，很重要的一点，是解决遗留系统，在不需要重写原有项目的基础下，可以使用新的技术。\n\n2. 巨石应用的维护困难\n\n   - 多年迭代的老项目，不能下线也没资源迁移；\n   - 超大的SPA项目，比如中台，动辄几十甚至几百+的页面数量；\n\n    上述情况，让这些系统越来越难维护，开发上，一次启动、编译耗时过长，发布上，同样需要再次经历编译打包过长的困扰，导致开发体验极其糟糕。\n\n3. 系统之间的模块组合与复用\n\n    我们可以通过复制代码去做模块复用，当然这样的结果是难以维护的。\n    如果将业务模块封装成包，然后以发布npm包的方式或子仓库git submodule来复用，理论上是可以的。\n    但现实是无法处理频繁地需求迭代，每次迭代需要将用到此类模块的项目逐个更新依赖、构建、部署，这样的效率是无法接受的，也容易出出错。\n\n4. 多团队合作开发困难\n\n    出于某些原因，我们会将一个应用拆分为多个功能模块，跨部门多团队来共同完成开发。\n\n    多团队合作的问题不言而喻\n\n    - 代码冲突\n    - 模块之间没有隔离，容易相互影响\n\n    很明显看到在处理项目跨度长、多团队合作时，具有强烈需求。那么，典型的场景，就是各大公司企业级的ToB项目以及云产品等。\n\n## 特点\n\n- 技术栈无关\n\n    主框架不限制接入应用的技术栈，微应用具备完全自主权\n\n- 独立开发、独立部署\n\n    应用独立，独立仓库，多团队可独立开发测试部署，部署后主框架自动完成同步更新\n\n- 增量升级\n\n    对遗留项目做技术栈升级或重构，微前端是一种非常好的渐进式重构的手段和策略\n\n- 独立运行\n\n    每个微应用之间状态隔离，运行时状态不可共享\n\n## 实现微前端的方式\n\n1. iframe\n\n    不考虑用户体验以及一些特定case场景，算是比较完美的微前端解决方案；\n\n2. 路由分发\n\n    通过反代、MPA方式处理跳转不同入口文件，多个独立spa应用之间互相跳转，将页面导航做成类似样式，让用户感觉像是在同一应用。\n\n3. 基座式SPA，主从应用设计\n\n    是一种通过*软件工程*的方式在构建前、构建时、构建后等步骤中，对应用进行一步的拆分并重新组合的方式。\n这里的基座就是主应用，会包含应用依赖的绝大多数环境，包括基础框架、组件和第三方依赖包，子应用只包含自身一些业务代码。主应用启动后，会捕获全局的路由事件，来判断当前路由需要加载哪个子应用，其中路由要由主应用来接管控制，子应用更像主应用的*路由模块*。\n\n4. 类Single-SPA\n\n    主应用仅作为加载容器，管理子应用的生命周期。路由部分和基座式SPA方式不一样，子应用加载后一般会由子应用去接管系统路由，而基座式的路由完全由主应用控制\n\n5. 组件化（Web Components）\n\n    主要利用Web Components的一些特性\n\n    - Custom elements\n    - Shadow DOM\n    - HTML templates\n    - HTML Imports\n\n每个组件由link标签引入\n\n```html\n<link rel=\"import\" href=\"components/di-li.html\">\n<link rel=\"import\" href=\"components/d-header.html\">\n```\n\n方案 | 优点 | 缺点\n- | - | -\nMPA + 路由分发 | 框架无关<br>100%隔离<br>独立开发、部署、运行  | 模块复用困难<br>每个独立的spa应用加载时间较长，容易出现白屏，影响体验<br>后续扩展同屏多应用不利于扩展\n组件化 |框架无关 |重写现有的前端应用<br>上下游生态系统不完善<br>兼容性\n基座式SPA | 打包后的子应用只包含业务代码，体积小，加载快，体验好 | 基座决定了与框架强相关，哪怕是基座版本升级迭代，也会非常容易造成子应用出错<br>对开发、构建方式的*规范*依赖有强烈要求\n类Single-SPA | 框架无关<br>独立开发、部署、运行<br>方便复用<br>扩展方便 | 需要子应用入口和配置项有轻微入侵\n\n## 为什么不是iframe\n\n为什么不用iframe，这几乎是所有微前端方案第一个会被追问的问题。但是大部分微前端又不约而同的放弃了iframe的方案，这自然是有一定原因的。\n\n如果不考虑体验问题，iframe几乎是最完美的微前端解决方案了。\n\niframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。\n\n下面列举几个iframe的问题：\n\n1. url不同步。浏览器刷新、前进后退会导致url状态丢失；\n2. UI。想象下子iframe窗口大小限制，需要全局展示全局弹窗，提示等；\n3. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步、应用管理等需求处理；\n4. 加载慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程；\n\n## 各厂分析实现\n\n由于微前端兴起并不久，市面上并没有统一的做法，实现效果、实现方式千差万别。就拿“是否支持不同技术栈”来说，阿里的 qiankun 视之为微服务的核心价值，而 爱奇艺 和 ThoughtWorks 的 mooa 实现中压根就不考虑支持不同技术。\n\n### 爱奇艺技术产品团队\n\n目标\n\n- 框架与业务更加的解耦\n- 模块的独立部署、发布等提高迭代效率\n\n效果\n\n- [x] 独立部署  \n- [ ] 独立技术栈：仅支持 vue\n- [ ] tree shake：手动将 Vue，Router，store，RenderPage 写到全局资源，通用模块注册为懒加载组件\n- [x]\n- [ ] 多个应用同时运行：同时只能运行一个\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n实现/特点\n\n- 应用资源：每个应用自己打包生成 manifest，标注资源地址\n- 路由：统一使用全局路由，子模块的路由加载时合并入全局路由\n- 渲染页面：document.head 中插入 script，再主动调用 window.mp.render_home(‘#containerId’)来渲染页面\n\n只支持同一版本的vue，定制化程度非常高的方案，优点是相对简单，缺点是用处不大\n\n### 美团 用微前端的方式搭建单页应用\n\n目标\n\n- 合并多个业务成一个\n\n效果\n\n- [ ] 独立开发：需要奖容器和全部微服务一起启动\n- [x] 独立部署\n- [ ] 独立技术栈：\n- [ ] tree shake：\n- [x] 环境隔离：\n- [ ] 多个应用同时运行：同时只能运行一个\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n实现/特点\n\n- 容器提供了额外的功能 *用户登录机制* 菜单权限获取 *全局异常处理* 全局数据打点\n- 路由由三部分组成权限菜单树、导航和路由树\n\n### 阿里 qiankun开源方案\n\n目标\n\n- 简单，像接入 iframe 一样容易\n- 技术栈无关\n\n效果\n\n- [x] 独立开发：容器和业务无耦合，可以随意启动\n- [x] 独立部署\n- [x] 独立技术栈\n- [ ] tree shake：无\n- [x] 环境隔离：可选沙盒模式\n- [x] 多个应用同时运行：可选支持模式\n- [ ] 公用依赖：否\n- [ ] 依赖冲突：否\n\n![qiankun](https://segmentfault.com/img/remote/1460000022275996)\n\n流程图\n\n[![qiankun流程图](https://s1.ax1x.com/2020/10/29/BJ18qP.png)](https://imgchr.com/i/BJ18qP)\n\n注意点\n\n- 加载本地资源需要更改子应用配置，携带上当前域名\n- 因使用fetch直接加载js，故暂不支持type=module的js，间接不支持vite\n\n## 参考\n\n1. [微前端的那些事儿](https://microfrontends.cn/)\n2. [可能是你见过最完善的微前端解决方案](https://zhuanlan.zhihu.com/p/78362028) - 知乎ID: kuitos\n3. [Bifrost微前端框架及其在美团闪购中的实践](https://mp.weixin.qq.com/s/GgVo5KyZPlEsEeICcPyuLA) - 美团技术团队（基座式vue）\n4. [用微前端的方式搭建类单页应用](https://mp.weixin.qq.com/s/DpFXTrQ3_kBX4EB6or4Q8Q) - 美团技术团队（基座式react）\n5. [爱奇艺号如何基于Vue定制开发微前端框架？](https://mp.weixin.qq.com/s/z3Ir-RnPQGXGRh6pDTu8IA) - 爱奇艺号（基座式vue）\n","slug":"微前端","published":0,"updated":"2024-02-20T06:48:45.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtv000ilwxawk03wp2y","content":"<h2><span id=\"微前端\">微前端</span></h2><p>“ 微前端 ”一词最早于2016年底提出。它将微服务的概念扩展到前端世界。当前的趋势是构建一个功能强大的浏览器应用程序（又名单页应用程序），该应用程序位于微服务架构之上。随着时间的流逝，通常由独立团队开发的前端层会不断增长，并且变得更加难以维护，这就是我们所说的 Frontend Monolith（巨石前端）。</p>\n<p>Micro Frontends背后的想法是将网站或Web应用程序视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，并且从数据库到用户界面，端到端地开发其功能。</p>\n<h2><span id=\"背景\">背景</span></h2><p>一般来说，有以下需求的项目可以考虑使用微前端</p>\n<ol>\n<li><p>技术栈的升级/有使用不同技术栈的需求</p>\n<p> 目前主流的技术栈，随着技术的发展，必然会持续不断地迭代前端的技术体系，同时也要兼容老项目运行。</p>\n<p> 采用微服务的架构，很重要的一点，是解决遗留系统，在不需要重写原有项目的基础下，可以使用新的技术。</p>\n</li>\n<li><p>巨石应用的维护困难</p>\n<ul>\n<li><p>多年迭代的老项目，不能下线也没资源迁移；</p>\n</li>\n<li><p>超大的SPA项目，比如中台，动辄几十甚至几百+的页面数量；</p>\n<p>上述情况，让这些系统越来越难维护，开发上，一次启动、编译耗时过长，发布上，同样需要再次经历编译打包过长的困扰，导致开发体验极其糟糕。</p>\n</li>\n</ul>\n</li>\n<li><p>系统之间的模块组合与复用</p>\n<p> 我们可以通过复制代码去做模块复用，当然这样的结果是难以维护的。<br> 如果将业务模块封装成包，然后以发布npm包的方式或子仓库git submodule来复用，理论上是可以的。<br> 但现实是无法处理频繁地需求迭代，每次迭代需要将用到此类模块的项目逐个更新依赖、构建、部署，这样的效率是无法接受的，也容易出出错。</p>\n</li>\n<li><p>多团队合作开发困难</p>\n<p> 出于某些原因，我们会将一个应用拆分为多个功能模块，跨部门多团队来共同完成开发。</p>\n<p> 多团队合作的问题不言而喻</p>\n<ul>\n<li><p>代码冲突</p>\n</li>\n<li><p>模块之间没有隔离，容易相互影响</p>\n<p>很明显看到在处理项目跨度长、多团队合作时，具有强烈需求。那么，典型的场景，就是各大公司企业级的ToB项目以及云产品等。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2><span id=\"特点\">特点</span></h2><ul>\n<li><p>技术栈无关</p>\n<p>  主框架不限制接入应用的技术栈，微应用具备完全自主权</p>\n</li>\n<li><p>独立开发、独立部署</p>\n<p>  应用独立，独立仓库，多团队可独立开发测试部署，部署后主框架自动完成同步更新</p>\n</li>\n<li><p>增量升级</p>\n<p>  对遗留项目做技术栈升级或重构，微前端是一种非常好的渐进式重构的手段和策略</p>\n</li>\n<li><p>独立运行</p>\n<p>  每个微应用之间状态隔离，运行时状态不可共享</p>\n</li>\n</ul>\n<h2><span id=\"实现微前端的方式\">实现微前端的方式</span></h2><ol>\n<li><p>iframe</p>\n<p> 不考虑用户体验以及一些特定case场景，算是比较完美的微前端解决方案；</p>\n</li>\n<li><p>路由分发</p>\n<p> 通过反代、MPA方式处理跳转不同入口文件，多个独立spa应用之间互相跳转，将页面导航做成类似样式，让用户感觉像是在同一应用。</p>\n</li>\n<li><p>基座式SPA，主从应用设计</p>\n<p> 是一种通过<em>软件工程</em>的方式在构建前、构建时、构建后等步骤中，对应用进行一步的拆分并重新组合的方式。<br>这里的基座就是主应用，会包含应用依赖的绝大多数环境，包括基础框架、组件和第三方依赖包，子应用只包含自身一些业务代码。主应用启动后，会捕获全局的路由事件，来判断当前路由需要加载哪个子应用，其中路由要由主应用来接管控制，子应用更像主应用的<em>路由模块</em>。</p>\n</li>\n<li><p>类Single-SPA</p>\n<p> 主应用仅作为加载容器，管理子应用的生命周期。路由部分和基座式SPA方式不一样，子应用加载后一般会由子应用去接管系统路由，而基座式的路由完全由主应用控制</p>\n</li>\n<li><p>组件化（Web Components）</p>\n<p> 主要利用Web Components的一些特性</p>\n<ul>\n<li>Custom elements</li>\n<li>Shadow DOM</li>\n<li>HTML templates</li>\n<li>HTML Imports</li>\n</ul>\n</li>\n</ol>\n<p>每个组件由link标签引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"import\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"components/di-li.html\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"import\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"components/d-header.html\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MPA + 路由分发</td>\n<td>框架无关<br>100%隔离<br>独立开发、部署、运行</td>\n<td>模块复用困难<br>每个独立的spa应用加载时间较长，容易出现白屏，影响体验<br>后续扩展同屏多应用不利于扩展</td>\n</tr>\n<tr>\n<td>组件化</td>\n<td>框架无关</td>\n<td>重写现有的前端应用<br>上下游生态系统不完善<br>兼容性</td>\n</tr>\n<tr>\n<td>基座式SPA</td>\n<td>打包后的子应用只包含业务代码，体积小，加载快，体验好</td>\n<td>基座决定了与框架强相关，哪怕是基座版本升级迭代，也会非常容易造成子应用出错<br>对开发、构建方式的<em>规范</em>依赖有强烈要求</td>\n</tr>\n<tr>\n<td>类Single-SPA</td>\n<td>框架无关<br>独立开发、部署、运行<br>方便复用<br>扩展方便</td>\n<td>需要子应用入口和配置项有轻微入侵</td>\n</tr>\n</tbody></table>\n<h2><span id=\"为什么不是iframe\">为什么不是iframe</span></h2><p>为什么不用iframe，这几乎是所有微前端方案第一个会被追问的问题。但是大部分微前端又不约而同的放弃了iframe的方案，这自然是有一定原因的。</p>\n<p>如果不考虑体验问题，iframe几乎是最完美的微前端解决方案了。</p>\n<p>iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</p>\n<p>下面列举几个iframe的问题：</p>\n<ol>\n<li>url不同步。浏览器刷新、前进后退会导致url状态丢失；</li>\n<li>UI。想象下子iframe窗口大小限制，需要全局展示全局弹窗，提示等；</li>\n<li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步、应用管理等需求处理；</li>\n<li>加载慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程；</li>\n</ol>\n<h2><span id=\"各厂分析实现\">各厂分析实现</span></h2><p>由于微前端兴起并不久，市面上并没有统一的做法，实现效果、实现方式千差万别。就拿“是否支持不同技术栈”来说，阿里的 qiankun 视之为微服务的核心价值，而 爱奇艺 和 ThoughtWorks 的 mooa 实现中压根就不考虑支持不同技术。</p>\n<h3><span id=\"爱奇艺技术产品团队\">爱奇艺技术产品团队</span></h3><p>目标</p>\n<ul>\n<li>框架与业务更加的解耦</li>\n<li>模块的独立部署、发布等提高迭代效率</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 独立部署  </li>\n<li><input disabled type=\"checkbox\"> 独立技术栈：仅支持 vue</li>\n<li><input disabled type=\"checkbox\"> tree shake：手动将 Vue，Router，store，RenderPage 写到全局资源，通用模块注册为懒加载组件</li>\n<li>[x]</li>\n<li><input disabled type=\"checkbox\"> 多个应用同时运行：同时只能运行一个</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p>实现/特点</p>\n<ul>\n<li>应用资源：每个应用自己打包生成 manifest，标注资源地址</li>\n<li>路由：统一使用全局路由，子模块的路由加载时合并入全局路由</li>\n<li>渲染页面：document.head 中插入 script，再主动调用 window.mp.render_home(‘#containerId’)来渲染页面</li>\n</ul>\n<p>只支持同一版本的vue，定制化程度非常高的方案，优点是相对简单，缺点是用处不大</p>\n<h3><span id=\"美团-用微前端的方式搭建单页应用\">美团 用微前端的方式搭建单页应用</span></h3><p>目标</p>\n<ul>\n<li>合并多个业务成一个</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 独立开发：需要奖容器和全部微服务一起启动</li>\n<li><input checked disabled type=\"checkbox\"> 独立部署</li>\n<li><input disabled type=\"checkbox\"> 独立技术栈：</li>\n<li><input disabled type=\"checkbox\"> tree shake：</li>\n<li><input checked disabled type=\"checkbox\"> 环境隔离：</li>\n<li><input disabled type=\"checkbox\"> 多个应用同时运行：同时只能运行一个</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p>实现/特点</p>\n<ul>\n<li>容器提供了额外的功能 <em>用户登录机制</em> 菜单权限获取 <em>全局异常处理</em> 全局数据打点</li>\n<li>路由由三部分组成权限菜单树、导航和路由树</li>\n</ul>\n<h3><span id=\"阿里-qiankun开源方案\">阿里 qiankun开源方案</span></h3><p>目标</p>\n<ul>\n<li>简单，像接入 iframe 一样容易</li>\n<li>技术栈无关</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 独立开发：容器和业务无耦合，可以随意启动</li>\n<li><input checked disabled type=\"checkbox\"> 独立部署</li>\n<li><input checked disabled type=\"checkbox\"> 独立技术栈</li>\n<li><input disabled type=\"checkbox\"> tree shake：无</li>\n<li><input checked disabled type=\"checkbox\"> 环境隔离：可选沙盒模式</li>\n<li><input checked disabled type=\"checkbox\"> 多个应用同时运行：可选支持模式</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000022275996\" alt=\"qiankun\"></p>\n<p>流程图</p>\n<p><a href=\"https://imgchr.com/i/BJ18qP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/10/29/BJ18qP.png\" alt=\"qiankun流程图\"></a></p>\n<p>注意点</p>\n<ul>\n<li>加载本地资源需要更改子应用配置，携带上当前域名</li>\n<li>因使用fetch直接加载js，故暂不支持type=module的js，间接不支持vite</li>\n</ul>\n<h2><span id=\"参考\">参考</span></h2><ol>\n<li><a href=\"https://microfrontends.cn/\" target=\"_blank\" rel=\"noopener\">微前端的那些事儿</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" rel=\"noopener\">可能是你见过最完善的微前端解决方案</a> - 知乎ID: kuitos</li>\n<li><a href=\"https://mp.weixin.qq.com/s/GgVo5KyZPlEsEeICcPyuLA\" target=\"_blank\" rel=\"noopener\">Bifrost微前端框架及其在美团闪购中的实践</a> - 美团技术团队（基座式vue）</li>\n<li><a href=\"https://mp.weixin.qq.com/s/DpFXTrQ3_kBX4EB6or4Q8Q\" target=\"_blank\" rel=\"noopener\">用微前端的方式搭建类单页应用</a> - 美团技术团队（基座式react）</li>\n<li><a href=\"https://mp.weixin.qq.com/s/z3Ir-RnPQGXGRh6pDTu8IA\" target=\"_blank\" rel=\"noopener\">爱奇艺号如何基于Vue定制开发微前端框架？</a> - 爱奇艺号（基座式vue）</li>\n</ol>\n","site":{"data":{}},"length":3116,"excerpt":"","more":"<h2 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h2><p>“ 微前端 ”一词最早于2016年底提出。它将微服务的概念扩展到前端世界。当前的趋势是构建一个功能强大的浏览器应用程序（又名单页应用程序），该应用程序位于微服务架构之上。随着时间的流逝，通常由独立团队开发的前端层会不断增长，并且变得更加难以维护，这就是我们所说的 Frontend Monolith（巨石前端）。</p>\n<p>Micro Frontends背后的想法是将网站或Web应用程序视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，并且从数据库到用户界面，端到端地开发其功能。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一般来说，有以下需求的项目可以考虑使用微前端</p>\n<ol>\n<li><p>技术栈的升级/有使用不同技术栈的需求</p>\n<p> 目前主流的技术栈，随着技术的发展，必然会持续不断地迭代前端的技术体系，同时也要兼容老项目运行。</p>\n<p> 采用微服务的架构，很重要的一点，是解决遗留系统，在不需要重写原有项目的基础下，可以使用新的技术。</p>\n</li>\n<li><p>巨石应用的维护困难</p>\n<ul>\n<li><p>多年迭代的老项目，不能下线也没资源迁移；</p>\n</li>\n<li><p>超大的SPA项目，比如中台，动辄几十甚至几百+的页面数量；</p>\n<p>上述情况，让这些系统越来越难维护，开发上，一次启动、编译耗时过长，发布上，同样需要再次经历编译打包过长的困扰，导致开发体验极其糟糕。</p>\n</li>\n</ul>\n</li>\n<li><p>系统之间的模块组合与复用</p>\n<p> 我们可以通过复制代码去做模块复用，当然这样的结果是难以维护的。<br> 如果将业务模块封装成包，然后以发布npm包的方式或子仓库git submodule来复用，理论上是可以的。<br> 但现实是无法处理频繁地需求迭代，每次迭代需要将用到此类模块的项目逐个更新依赖、构建、部署，这样的效率是无法接受的，也容易出出错。</p>\n</li>\n<li><p>多团队合作开发困难</p>\n<p> 出于某些原因，我们会将一个应用拆分为多个功能模块，跨部门多团队来共同完成开发。</p>\n<p> 多团队合作的问题不言而喻</p>\n<ul>\n<li><p>代码冲突</p>\n</li>\n<li><p>模块之间没有隔离，容易相互影响</p>\n<p>很明显看到在处理项目跨度长、多团队合作时，具有强烈需求。那么，典型的场景，就是各大公司企业级的ToB项目以及云产品等。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li><p>技术栈无关</p>\n<p>  主框架不限制接入应用的技术栈，微应用具备完全自主权</p>\n</li>\n<li><p>独立开发、独立部署</p>\n<p>  应用独立，独立仓库，多团队可独立开发测试部署，部署后主框架自动完成同步更新</p>\n</li>\n<li><p>增量升级</p>\n<p>  对遗留项目做技术栈升级或重构，微前端是一种非常好的渐进式重构的手段和策略</p>\n</li>\n<li><p>独立运行</p>\n<p>  每个微应用之间状态隔离，运行时状态不可共享</p>\n</li>\n</ul>\n<h2 id=\"实现微前端的方式\"><a href=\"#实现微前端的方式\" class=\"headerlink\" title=\"实现微前端的方式\"></a>实现微前端的方式</h2><ol>\n<li><p>iframe</p>\n<p> 不考虑用户体验以及一些特定case场景，算是比较完美的微前端解决方案；</p>\n</li>\n<li><p>路由分发</p>\n<p> 通过反代、MPA方式处理跳转不同入口文件，多个独立spa应用之间互相跳转，将页面导航做成类似样式，让用户感觉像是在同一应用。</p>\n</li>\n<li><p>基座式SPA，主从应用设计</p>\n<p> 是一种通过<em>软件工程</em>的方式在构建前、构建时、构建后等步骤中，对应用进行一步的拆分并重新组合的方式。<br>这里的基座就是主应用，会包含应用依赖的绝大多数环境，包括基础框架、组件和第三方依赖包，子应用只包含自身一些业务代码。主应用启动后，会捕获全局的路由事件，来判断当前路由需要加载哪个子应用，其中路由要由主应用来接管控制，子应用更像主应用的<em>路由模块</em>。</p>\n</li>\n<li><p>类Single-SPA</p>\n<p> 主应用仅作为加载容器，管理子应用的生命周期。路由部分和基座式SPA方式不一样，子应用加载后一般会由子应用去接管系统路由，而基座式的路由完全由主应用控制</p>\n</li>\n<li><p>组件化（Web Components）</p>\n<p> 主要利用Web Components的一些特性</p>\n<ul>\n<li>Custom elements</li>\n<li>Shadow DOM</li>\n<li>HTML templates</li>\n<li>HTML Imports</li>\n</ul>\n</li>\n</ol>\n<p>每个组件由link标签引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"import\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"components/di-li.html\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"import\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"components/d-header.html\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MPA + 路由分发</td>\n<td>框架无关<br>100%隔离<br>独立开发、部署、运行</td>\n<td>模块复用困难<br>每个独立的spa应用加载时间较长，容易出现白屏，影响体验<br>后续扩展同屏多应用不利于扩展</td>\n</tr>\n<tr>\n<td>组件化</td>\n<td>框架无关</td>\n<td>重写现有的前端应用<br>上下游生态系统不完善<br>兼容性</td>\n</tr>\n<tr>\n<td>基座式SPA</td>\n<td>打包后的子应用只包含业务代码，体积小，加载快，体验好</td>\n<td>基座决定了与框架强相关，哪怕是基座版本升级迭代，也会非常容易造成子应用出错<br>对开发、构建方式的<em>规范</em>依赖有强烈要求</td>\n</tr>\n<tr>\n<td>类Single-SPA</td>\n<td>框架无关<br>独立开发、部署、运行<br>方便复用<br>扩展方便</td>\n<td>需要子应用入口和配置项有轻微入侵</td>\n</tr>\n</tbody></table>\n<h2 id=\"为什么不是iframe\"><a href=\"#为什么不是iframe\" class=\"headerlink\" title=\"为什么不是iframe\"></a>为什么不是iframe</h2><p>为什么不用iframe，这几乎是所有微前端方案第一个会被追问的问题。但是大部分微前端又不约而同的放弃了iframe的方案，这自然是有一定原因的。</p>\n<p>如果不考虑体验问题，iframe几乎是最完美的微前端解决方案了。</p>\n<p>iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</p>\n<p>下面列举几个iframe的问题：</p>\n<ol>\n<li>url不同步。浏览器刷新、前进后退会导致url状态丢失；</li>\n<li>UI。想象下子iframe窗口大小限制，需要全局展示全局弹窗，提示等；</li>\n<li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步、应用管理等需求处理；</li>\n<li>加载慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程；</li>\n</ol>\n<h2 id=\"各厂分析实现\"><a href=\"#各厂分析实现\" class=\"headerlink\" title=\"各厂分析实现\"></a>各厂分析实现</h2><p>由于微前端兴起并不久，市面上并没有统一的做法，实现效果、实现方式千差万别。就拿“是否支持不同技术栈”来说，阿里的 qiankun 视之为微服务的核心价值，而 爱奇艺 和 ThoughtWorks 的 mooa 实现中压根就不考虑支持不同技术。</p>\n<h3 id=\"爱奇艺技术产品团队\"><a href=\"#爱奇艺技术产品团队\" class=\"headerlink\" title=\"爱奇艺技术产品团队\"></a>爱奇艺技术产品团队</h3><p>目标</p>\n<ul>\n<li>框架与业务更加的解耦</li>\n<li>模块的独立部署、发布等提高迭代效率</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 独立部署  </li>\n<li><input disabled type=\"checkbox\"> 独立技术栈：仅支持 vue</li>\n<li><input disabled type=\"checkbox\"> tree shake：手动将 Vue，Router，store，RenderPage 写到全局资源，通用模块注册为懒加载组件</li>\n<li>[x]</li>\n<li><input disabled type=\"checkbox\"> 多个应用同时运行：同时只能运行一个</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p>实现/特点</p>\n<ul>\n<li>应用资源：每个应用自己打包生成 manifest，标注资源地址</li>\n<li>路由：统一使用全局路由，子模块的路由加载时合并入全局路由</li>\n<li>渲染页面：document.head 中插入 script，再主动调用 window.mp.render_home(‘#containerId’)来渲染页面</li>\n</ul>\n<p>只支持同一版本的vue，定制化程度非常高的方案，优点是相对简单，缺点是用处不大</p>\n<h3 id=\"美团-用微前端的方式搭建单页应用\"><a href=\"#美团-用微前端的方式搭建单页应用\" class=\"headerlink\" title=\"美团 用微前端的方式搭建单页应用\"></a>美团 用微前端的方式搭建单页应用</h3><p>目标</p>\n<ul>\n<li>合并多个业务成一个</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input disabled type=\"checkbox\"> 独立开发：需要奖容器和全部微服务一起启动</li>\n<li><input checked disabled type=\"checkbox\"> 独立部署</li>\n<li><input disabled type=\"checkbox\"> 独立技术栈：</li>\n<li><input disabled type=\"checkbox\"> tree shake：</li>\n<li><input checked disabled type=\"checkbox\"> 环境隔离：</li>\n<li><input disabled type=\"checkbox\"> 多个应用同时运行：同时只能运行一个</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p>实现/特点</p>\n<ul>\n<li>容器提供了额外的功能 <em>用户登录机制</em> 菜单权限获取 <em>全局异常处理</em> 全局数据打点</li>\n<li>路由由三部分组成权限菜单树、导航和路由树</li>\n</ul>\n<h3 id=\"阿里-qiankun开源方案\"><a href=\"#阿里-qiankun开源方案\" class=\"headerlink\" title=\"阿里 qiankun开源方案\"></a>阿里 qiankun开源方案</h3><p>目标</p>\n<ul>\n<li>简单，像接入 iframe 一样容易</li>\n<li>技术栈无关</li>\n</ul>\n<p>效果</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> 独立开发：容器和业务无耦合，可以随意启动</li>\n<li><input checked disabled type=\"checkbox\"> 独立部署</li>\n<li><input checked disabled type=\"checkbox\"> 独立技术栈</li>\n<li><input disabled type=\"checkbox\"> tree shake：无</li>\n<li><input checked disabled type=\"checkbox\"> 环境隔离：可选沙盒模式</li>\n<li><input checked disabled type=\"checkbox\"> 多个应用同时运行：可选支持模式</li>\n<li><input disabled type=\"checkbox\"> 公用依赖：否</li>\n<li><input disabled type=\"checkbox\"> 依赖冲突：否</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000022275996\" alt=\"qiankun\"></p>\n<p>流程图</p>\n<p><a href=\"https://imgchr.com/i/BJ18qP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/10/29/BJ18qP.png\" alt=\"qiankun流程图\"></a></p>\n<p>注意点</p>\n<ul>\n<li>加载本地资源需要更改子应用配置，携带上当前域名</li>\n<li>因使用fetch直接加载js，故暂不支持type=module的js，间接不支持vite</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://microfrontends.cn/\" target=\"_blank\" rel=\"noopener\">微前端的那些事儿</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" rel=\"noopener\">可能是你见过最完善的微前端解决方案</a> - 知乎ID: kuitos</li>\n<li><a href=\"https://mp.weixin.qq.com/s/GgVo5KyZPlEsEeICcPyuLA\" target=\"_blank\" rel=\"noopener\">Bifrost微前端框架及其在美团闪购中的实践</a> - 美团技术团队（基座式vue）</li>\n<li><a href=\"https://mp.weixin.qq.com/s/DpFXTrQ3_kBX4EB6or4Q8Q\" target=\"_blank\" rel=\"noopener\">用微前端的方式搭建类单页应用</a> - 美团技术团队（基座式react）</li>\n<li><a href=\"https://mp.weixin.qq.com/s/z3Ir-RnPQGXGRh6pDTu8IA\" target=\"_blank\" rel=\"noopener\">爱奇艺号如何基于Vue定制开发微前端框架？</a> - 爱奇艺号（基座式vue）</li>\n</ol>\n"},{"title":"活动业务痛点","catalog":true,"subtitle":null,"header-img":null,"_content":"\n\n## 痛点\n\n1. 设计资源不够，导致整体开发周期过长；\n2. 因为问题1，导致有时候设计稿未经过多方完整确认，提前会在给到开发先介入时，后续改动导致视觉部分改动多；\n3. 线上用户反馈和代码块内容部分问题，目前只能通过uid到数据平台查询记录。\n4. 问题3，用户设备没有资源如何复现？\n\n## 思考\n\n- 问题3，代码块相关活动页是否考虑接入sentry？或者是重要的活动再接入呢？\n- 云手机？\n  - 百度智能云\n  - 华为云手机\n  - 多多云手机\n  - 红手指\n","source":"_drafts/活动业务痛点.md","raw":"---\ntitle: 活动业务痛点\ncatalog: true\nsubtitle:\nheader-img: \ntags: deep\ncategories: 前端\n---\n\n\n## 痛点\n\n1. 设计资源不够，导致整体开发周期过长；\n2. 因为问题1，导致有时候设计稿未经过多方完整确认，提前会在给到开发先介入时，后续改动导致视觉部分改动多；\n3. 线上用户反馈和代码块内容部分问题，目前只能通过uid到数据平台查询记录。\n4. 问题3，用户设备没有资源如何复现？\n\n## 思考\n\n- 问题3，代码块相关活动页是否考虑接入sentry？或者是重要的活动再接入呢？\n- 云手机？\n  - 百度智能云\n  - 华为云手机\n  - 多多云手机\n  - 红手指\n","slug":"活动业务痛点","published":0,"date":"2024-02-20T06:48:45.193Z","updated":"2024-02-20T06:48:45.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtw000klwxa3uejfvmq","content":"<h2><span id=\"痛点\">痛点</span></h2><ol>\n<li>设计资源不够，导致整体开发周期过长；</li>\n<li>因为问题1，导致有时候设计稿未经过多方完整确认，提前会在给到开发先介入时，后续改动导致视觉部分改动多；</li>\n<li>线上用户反馈和代码块内容部分问题，目前只能通过uid到数据平台查询记录。</li>\n<li>问题3，用户设备没有资源如何复现？</li>\n</ol>\n<h2><span id=\"思考\">思考</span></h2><ul>\n<li>问题3，代码块相关活动页是否考虑接入sentry？或者是重要的活动再接入呢？</li>\n<li>云手机？<ul>\n<li>百度智能云</li>\n<li>华为云手机</li>\n<li>多多云手机</li>\n<li>红手指</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":186,"excerpt":"","more":"<h2 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><ol>\n<li>设计资源不够，导致整体开发周期过长；</li>\n<li>因为问题1，导致有时候设计稿未经过多方完整确认，提前会在给到开发先介入时，后续改动导致视觉部分改动多；</li>\n<li>线上用户反馈和代码块内容部分问题，目前只能通过uid到数据平台查询记录。</li>\n<li>问题3，用户设备没有资源如何复现？</li>\n</ol>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><ul>\n<li>问题3，代码块相关活动页是否考虑接入sentry？或者是重要的活动再接入呢？</li>\n<li>云手机？<ul>\n<li>百度智能云</li>\n<li>华为云手机</li>\n<li>多多云手机</li>\n<li>红手指</li>\n</ul>\n</li>\n</ul>\n"},{"title":"掉坑记录","catalog":true,"date":"2019-08-28T01:57:42.000Z","subtitle":null,"header-img":null,"_content":"\n1. fetch 的 mode 设置 no-cors 返回的 response 永远都是无效信息\n\n---\n\n### UI\n\n1. `element-ui`的 dialog 组件中存在多个 select 组件，其中一个 select 组件的切换影响另一个 selct 的 options，此时会出现另一个的 select 的值选中之后并不会在 UI 层显示，必须使用 vue 提供的`$forceUpdate`方法强制更新；\n\n2. `element-ui`的走马灯`item`接受数据，要是数据源有变化，会触发重新更新数据源的操作，丢弃当前索引，导致一些特定场景（比如：实时给走马灯添加新数据展示）需要保留索引出问题；\n\n3. `element-ui`的走马灯不断鼠标 hover 的时候，会导致没有完全清除掉定时器，导致瞬间滑动的问题；\n\n4. `element-ui`的走马灯`trigger`方式默认`hover`，有时鼠标从下往上或者反方向滑动会导致索引值不知道偏移到哪里，导致出问题；\n\n---\n\n### linux\n\n1. 后端接口并没有统一提供路径给前端做反向代理，在前端项目请求后端接口时候统一加了`/api/`路径给`nginx`转发，在 nginx 那一层需要对新加的`/api/`路径的接口，去掉`/api/`路径，再将请求转发到指定目标服务。\n\n```nginx\nlocation ~ /api/ {\n    rewrite /api/(.*)$ /$1 break;\n\n    proxy_pass  http://www.baidu.com;\n}\n```\n\n### UI 框架\n\n1. vue 动态更改 data 的数据必须要用`$set`方法设置，否则可能无法响应式，出现场景：表单下拉选中切换展示不同的表单，会出现表单无法输入值来响应。\n\n2. 编辑页面场景，父组件先获取详情接口，然后取到值通过 props 传递值给子组件（比如下拉组件），子组件本身也有调用接口获取下拉数据，就导致 props 传递的值的顺序和本身接口响应拿到值的顺序不可控。为了解决这个问题，在 vue 下通过 v-if 控制子组件的渲染，只有父组件接口取到值了才渲染子组件，可以完美解决 props 传值和接口获取值的顺序不可控。但又会带来下面几个缺点：\n\n- 子组件本身封装不彻底\n- 父组件接口响应慢或者失败导致子组件有明显显示延迟或者不显示\n\n### npm\n\n1. 本地改完代码，直接发包，本地代码未推送；\n2. 多个包在各自分支维护发布，导致不能在一个分支找到所有最新代码；\n","source":"_drafts/掉坑记录.md","raw":"---\ntitle: 掉坑记录\ncatalog: true\ndate: 2019-08-28 09:57:42\nsubtitle:\nheader-img:\ntags: 前端\n---\n\n1. fetch 的 mode 设置 no-cors 返回的 response 永远都是无效信息\n\n---\n\n### UI\n\n1. `element-ui`的 dialog 组件中存在多个 select 组件，其中一个 select 组件的切换影响另一个 selct 的 options，此时会出现另一个的 select 的值选中之后并不会在 UI 层显示，必须使用 vue 提供的`$forceUpdate`方法强制更新；\n\n2. `element-ui`的走马灯`item`接受数据，要是数据源有变化，会触发重新更新数据源的操作，丢弃当前索引，导致一些特定场景（比如：实时给走马灯添加新数据展示）需要保留索引出问题；\n\n3. `element-ui`的走马灯不断鼠标 hover 的时候，会导致没有完全清除掉定时器，导致瞬间滑动的问题；\n\n4. `element-ui`的走马灯`trigger`方式默认`hover`，有时鼠标从下往上或者反方向滑动会导致索引值不知道偏移到哪里，导致出问题；\n\n---\n\n### linux\n\n1. 后端接口并没有统一提供路径给前端做反向代理，在前端项目请求后端接口时候统一加了`/api/`路径给`nginx`转发，在 nginx 那一层需要对新加的`/api/`路径的接口，去掉`/api/`路径，再将请求转发到指定目标服务。\n\n```nginx\nlocation ~ /api/ {\n    rewrite /api/(.*)$ /$1 break;\n\n    proxy_pass  http://www.baidu.com;\n}\n```\n\n### UI 框架\n\n1. vue 动态更改 data 的数据必须要用`$set`方法设置，否则可能无法响应式，出现场景：表单下拉选中切换展示不同的表单，会出现表单无法输入值来响应。\n\n2. 编辑页面场景，父组件先获取详情接口，然后取到值通过 props 传递值给子组件（比如下拉组件），子组件本身也有调用接口获取下拉数据，就导致 props 传递的值的顺序和本身接口响应拿到值的顺序不可控。为了解决这个问题，在 vue 下通过 v-if 控制子组件的渲染，只有父组件接口取到值了才渲染子组件，可以完美解决 props 传值和接口获取值的顺序不可控。但又会带来下面几个缺点：\n\n- 子组件本身封装不彻底\n- 父组件接口响应慢或者失败导致子组件有明显显示延迟或者不显示\n\n### npm\n\n1. 本地改完代码，直接发包，本地代码未推送；\n2. 多个包在各自分支维护发布，导致不能在一个分支找到所有最新代码；\n","slug":"掉坑记录","published":0,"updated":"2024-02-20T06:48:45.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijty000nlwxad9nnzij3","content":"<ol>\n<li>fetch 的 mode 设置 no-cors 返回的 response 永远都是无效信息</li>\n</ol>\n<hr>\n<h3><span id=\"ui\">UI</span></h3><ol>\n<li><p><code>element-ui</code>的 dialog 组件中存在多个 select 组件，其中一个 select 组件的切换影响另一个 selct 的 options，此时会出现另一个的 select 的值选中之后并不会在 UI 层显示，必须使用 vue 提供的<code>$forceUpdate</code>方法强制更新；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯<code>item</code>接受数据，要是数据源有变化，会触发重新更新数据源的操作，丢弃当前索引，导致一些特定场景（比如：实时给走马灯添加新数据展示）需要保留索引出问题；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯不断鼠标 hover 的时候，会导致没有完全清除掉定时器，导致瞬间滑动的问题；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯<code>trigger</code>方式默认<code>hover</code>，有时鼠标从下往上或者反方向滑动会导致索引值不知道偏移到哪里，导致出问题；</p>\n</li>\n</ol>\n<hr>\n<h3><span id=\"linux\">linux</span></h3><ol>\n<li>后端接口并没有统一提供路径给前端做反向代理，在前端项目请求后端接口时候统一加了<code>/api/</code>路径给<code>nginx</code>转发，在 nginx 那一层需要对新加的<code>/api/</code>路径的接口，去掉<code>/api/</code>路径，再将请求转发到指定目标服务。</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ /api/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /api/(.*)$ /<span class=\"variable\">$1</span> <span class=\"literal\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span>  http://www.baidu.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"ui-框架\">UI 框架</span></h3><ol>\n<li><p>vue 动态更改 data 的数据必须要用<code>$set</code>方法设置，否则可能无法响应式，出现场景：表单下拉选中切换展示不同的表单，会出现表单无法输入值来响应。</p>\n</li>\n<li><p>编辑页面场景，父组件先获取详情接口，然后取到值通过 props 传递值给子组件（比如下拉组件），子组件本身也有调用接口获取下拉数据，就导致 props 传递的值的顺序和本身接口响应拿到值的顺序不可控。为了解决这个问题，在 vue 下通过 v-if 控制子组件的渲染，只有父组件接口取到值了才渲染子组件，可以完美解决 props 传值和接口获取值的顺序不可控。但又会带来下面几个缺点：</p>\n</li>\n</ol>\n<ul>\n<li>子组件本身封装不彻底</li>\n<li>父组件接口响应慢或者失败导致子组件有明显显示延迟或者不显示</li>\n</ul>\n<h3><span id=\"npm\">npm</span></h3><ol>\n<li>本地改完代码，直接发包，本地代码未推送；</li>\n<li>多个包在各自分支维护发布，导致不能在一个分支找到所有最新代码；</li>\n</ol>\n","site":{"data":{}},"length":922,"excerpt":"","more":"<ol>\n<li>fetch 的 mode 设置 no-cors 返回的 response 永远都是无效信息</li>\n</ol>\n<hr>\n<h3 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h3><ol>\n<li><p><code>element-ui</code>的 dialog 组件中存在多个 select 组件，其中一个 select 组件的切换影响另一个 selct 的 options，此时会出现另一个的 select 的值选中之后并不会在 UI 层显示，必须使用 vue 提供的<code>$forceUpdate</code>方法强制更新；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯<code>item</code>接受数据，要是数据源有变化，会触发重新更新数据源的操作，丢弃当前索引，导致一些特定场景（比如：实时给走马灯添加新数据展示）需要保留索引出问题；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯不断鼠标 hover 的时候，会导致没有完全清除掉定时器，导致瞬间滑动的问题；</p>\n</li>\n<li><p><code>element-ui</code>的走马灯<code>trigger</code>方式默认<code>hover</code>，有时鼠标从下往上或者反方向滑动会导致索引值不知道偏移到哪里，导致出问题；</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><ol>\n<li>后端接口并没有统一提供路径给前端做反向代理，在前端项目请求后端接口时候统一加了<code>/api/</code>路径给<code>nginx</code>转发，在 nginx 那一层需要对新加的<code>/api/</code>路径的接口，去掉<code>/api/</code>路径，再将请求转发到指定目标服务。</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ /api/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /api/(.*)$ /<span class=\"variable\">$1</span> <span class=\"literal\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span>  http://www.baidu.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UI-框架\"><a href=\"#UI-框架\" class=\"headerlink\" title=\"UI 框架\"></a>UI 框架</h3><ol>\n<li><p>vue 动态更改 data 的数据必须要用<code>$set</code>方法设置，否则可能无法响应式，出现场景：表单下拉选中切换展示不同的表单，会出现表单无法输入值来响应。</p>\n</li>\n<li><p>编辑页面场景，父组件先获取详情接口，然后取到值通过 props 传递值给子组件（比如下拉组件），子组件本身也有调用接口获取下拉数据，就导致 props 传递的值的顺序和本身接口响应拿到值的顺序不可控。为了解决这个问题，在 vue 下通过 v-if 控制子组件的渲染，只有父组件接口取到值了才渲染子组件，可以完美解决 props 传值和接口获取值的顺序不可控。但又会带来下面几个缺点：</p>\n</li>\n</ol>\n<ul>\n<li>子组件本身封装不彻底</li>\n<li>父组件接口响应慢或者失败导致子组件有明显显示延迟或者不显示</li>\n</ul>\n<h3 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h3><ol>\n<li>本地改完代码，直接发包，本地代码未推送；</li>\n<li>多个包在各自分支维护发布，导致不能在一个分支找到所有最新代码；</li>\n</ol>\n"},{"_content":"\nvar a = /.+(?=:)/g\n\nvar a1 = /\\$\\d+\\.\\d+/g\nvar b1 = /(?<=\\$)\\d+\\.\\d+/g\n\n\n\nvar a2 = /\\b(?<!\\$)\\d+/g","source":"_drafts/正则表达式必知必会.js","raw":"\nvar a = /.+(?=:)/g\n\nvar a1 = /\\$\\d+\\.\\d+/g\nvar b1 = /(?<=\\$)\\d+\\.\\d+/g\n\n\n\nvar a2 = /\\b(?<!\\$)\\d+/g","slug":"正则表达式必知必会","published":0,"date":"2024-02-20T06:48:45.193Z","updated":"2024-02-20T06:48:45.193Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijtz000plwxa429l1enu","content":"var a = /.+(?=:)/g\n\nvar a1 = /\\$\\d+\\.\\d+/g\nvar b1 = /(?","site":{"data":{}},"length":43,"excerpt":"","more":"var a = /.+(?=:)/g\n\nvar a1 = /\\$\\d+\\.\\d+/g\nvar b1 = /(?"},{"title":"遇到过的代码题","catalog":true,"date":"2020-03-17T07:15:02.000Z","subtitle":null,"header-img":null,"_content":"","source":"_drafts/遇到过的代码题.md","raw":"---\ntitle: 遇到过的代码题\ncatalog: true\ndate: 2020-03-17 15:15:02\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"遇到过的代码题","published":0,"updated":"2024-02-20T06:48:45.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju1000slwxa174gobbi","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"centos下利用nvm安装node","catalog":true,"date":"2019-07-24T06:43:38.000Z","subtitle":null,"header-img":null,"_content":"\n- 安装 github\n\nyum install git -y\n\n- 下载 nvm\n\ngit clone git://github.com/creationix/nvm.git ~/nvm\n\n- 设置 nvm 自动运行;\n\necho \"source ~/nvm/nvm.sh\" >> ~/.bashrc\nsource ~/.bashrc\n\n- 查询 node 版本\n\nnvm list-remote\n\n- 安装 node.js\n\nnvm install v10.15.1\n\n- 使用 nodejs\n  nvm use v10.15.1\n","source":"_posts/centos下利用nvm安装node.md","raw":"---\ntitle: centos下利用nvm安装node\ncatalog: true\ndate: 2019-07-24 14:43:38\nsubtitle:\nheader-img:\ntags: linux\ncategories: 前端\n---\n\n- 安装 github\n\nyum install git -y\n\n- 下载 nvm\n\ngit clone git://github.com/creationix/nvm.git ~/nvm\n\n- 设置 nvm 自动运行;\n\necho \"source ~/nvm/nvm.sh\" >> ~/.bashrc\nsource ~/.bashrc\n\n- 查询 node 版本\n\nnvm list-remote\n\n- 安装 node.js\n\nnvm install v10.15.1\n\n- 使用 nodejs\n  nvm use v10.15.1\n","slug":"centos下利用nvm安装node","published":1,"updated":"2024-02-20T06:48:45.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju2000ulwxab7mk2ggs","content":"<ul>\n<li>安装 github</li>\n</ul>\n<p>yum install git -y</p>\n<ul>\n<li>下载 nvm</li>\n</ul>\n<p>git clone git://github.com/creationix/nvm.git ~/nvm</p>\n<ul>\n<li>设置 nvm 自动运行;</li>\n</ul>\n<p>echo “source ~/nvm/nvm.sh” &gt;&gt; ~/.bashrc<br>source ~/.bashrc</p>\n<ul>\n<li>查询 node 版本</li>\n</ul>\n<p>nvm list-remote</p>\n<ul>\n<li>安装 node.js</li>\n</ul>\n<p>nvm install v10.15.1</p>\n<ul>\n<li>使用 nodejs<br>nvm use v10.15.1</li>\n</ul>\n","site":{"data":{}},"length":213,"excerpt":"","more":"<ul>\n<li>安装 github</li>\n</ul>\n<p>yum install git -y</p>\n<ul>\n<li>下载 nvm</li>\n</ul>\n<p>git clone git://github.com/creationix/nvm.git ~/nvm</p>\n<ul>\n<li>设置 nvm 自动运行;</li>\n</ul>\n<p>echo “source ~/nvm/nvm.sh” &gt;&gt; ~/.bashrc<br>source ~/.bashrc</p>\n<ul>\n<li>查询 node 版本</li>\n</ul>\n<p>nvm list-remote</p>\n<ul>\n<li>安装 node.js</li>\n</ul>\n<p>nvm install v10.15.1</p>\n<ul>\n<li>使用 nodejs<br>nvm use v10.15.1</li>\n</ul>\n"},{"title":"移动端遇到问题汇总","catalog":true,"date":"2020-09-28T07:08:28.000Z","subtitle":null,"header-img":null,"_content":"\n1. 弹窗滚动穿透\n引用`tua-body-scroll-lock`第三方包处理，可解决ios、android、h5、pc多端滚动穿透问题，如果已被禁用的元素需要滚动，可以设置`point-events: auto;`\n2. ios safria浏览器下页面设置了动态动画暂停状态，回退时重新触发了css3动画；\n\n测试下来，ios下的页面回退时，会走跨页面间的缓存回到页面离开时的状态，暂时没看到能保持css3动画最终状态设置，导致表现形式和android不一致\n\n曲线救国方案，监听在ios下页面回退时触发`onpageshow`方式，强制进行更新\n\n```javascript\n// 方法1：\nwindow.addEventListener('pageshow', () => {\n  if (e.persisted || (window.performance &&\n    window.performance.navigation.type == 2)) {\n    location.reload()\n  }\n}, false);\n\n// 方法2:\nwindow.history.replaceState(null, '', window.location.href + '?timestamp=' + new Date().getTime());\n```\n\nonpageshow每次页面加载都会触发,无论是从缓存中加载还是正常加载,这是他和onload的区别;persisted判断页面是否从缓存中读出\n\n页面通过历史记录和前进后退访问时。type值为2\n","source":"_drafts/移动端遇到问题汇总.md","raw":"---\ntitle: 移动端遇到问题汇总\ncatalog: true\ndate: 2020-09-28 15:08:28\nsubtitle:\nheader-img:\ntags: javascript\n---\n\n1. 弹窗滚动穿透\n引用`tua-body-scroll-lock`第三方包处理，可解决ios、android、h5、pc多端滚动穿透问题，如果已被禁用的元素需要滚动，可以设置`point-events: auto;`\n2. ios safria浏览器下页面设置了动态动画暂停状态，回退时重新触发了css3动画；\n\n测试下来，ios下的页面回退时，会走跨页面间的缓存回到页面离开时的状态，暂时没看到能保持css3动画最终状态设置，导致表现形式和android不一致\n\n曲线救国方案，监听在ios下页面回退时触发`onpageshow`方式，强制进行更新\n\n```javascript\n// 方法1：\nwindow.addEventListener('pageshow', () => {\n  if (e.persisted || (window.performance &&\n    window.performance.navigation.type == 2)) {\n    location.reload()\n  }\n}, false);\n\n// 方法2:\nwindow.history.replaceState(null, '', window.location.href + '?timestamp=' + new Date().getTime());\n```\n\nonpageshow每次页面加载都会触发,无论是从缓存中加载还是正常加载,这是他和onload的区别;persisted判断页面是否从缓存中读出\n\n页面通过历史记录和前进后退访问时。type值为2\n","slug":"移动端遇到问题汇总","published":0,"updated":"2024-02-20T06:48:45.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju4000ylwxaa6knptti","content":"<ol>\n<li>弹窗滚动穿透<br>引用<code>tua-body-scroll-lock</code>第三方包处理，可解决ios、android、h5、pc多端滚动穿透问题，如果已被禁用的元素需要滚动，可以设置<code>point-events: auto;</code></li>\n<li>ios safria浏览器下页面设置了动态动画暂停状态，回退时重新触发了css3动画；</li>\n</ol>\n<p>测试下来，ios下的页面回退时，会走跨页面间的缓存回到页面离开时的状态，暂时没看到能保持css3动画最终状态设置，导致表现形式和android不一致</p>\n<p>曲线救国方案，监听在ios下页面回退时触发<code>onpageshow</code>方式，强制进行更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1：</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'pageshow'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.persisted || (<span class=\"built_in\">window</span>.performance &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.performance.navigation.type == <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">    location.reload()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法2:</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(<span class=\"literal\">null</span>, <span class=\"string\">''</span>, <span class=\"built_in\">window</span>.location.href + <span class=\"string\">'?timestamp='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br></pre></td></tr></table></figure>\n\n<p>onpageshow每次页面加载都会触发,无论是从缓存中加载还是正常加载,这是他和onload的区别;persisted判断页面是否从缓存中读出</p>\n<p>页面通过历史记录和前进后退访问时。type值为2</p>\n","site":{"data":{}},"length":642,"excerpt":"","more":"<ol>\n<li>弹窗滚动穿透<br>引用<code>tua-body-scroll-lock</code>第三方包处理，可解决ios、android、h5、pc多端滚动穿透问题，如果已被禁用的元素需要滚动，可以设置<code>point-events: auto;</code></li>\n<li>ios safria浏览器下页面设置了动态动画暂停状态，回退时重新触发了css3动画；</li>\n</ol>\n<p>测试下来，ios下的页面回退时，会走跨页面间的缓存回到页面离开时的状态，暂时没看到能保持css3动画最终状态设置，导致表现形式和android不一致</p>\n<p>曲线救国方案，监听在ios下页面回退时触发<code>onpageshow</code>方式，强制进行更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1：</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'pageshow'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.persisted || (<span class=\"built_in\">window</span>.performance &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.performance.navigation.type == <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">    location.reload()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法2:</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(<span class=\"literal\">null</span>, <span class=\"string\">''</span>, <span class=\"built_in\">window</span>.location.href + <span class=\"string\">'?timestamp='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br></pre></td></tr></table></figure>\n\n<p>onpageshow每次页面加载都会触发,无论是从缓存中加载还是正常加载,这是他和onload的区别;persisted判断页面是否从缓存中读出</p>\n<p>页面通过历史记录和前进后退访问时。type值为2</p>\n"},{"title":"Next.js接入sentry","catalog":true,"date":"2020-03-12T14:48:37.000Z","subtitle":null,"header-img":null,"_content":"\n## 问题\n\nNext 接入 sentry 收集不到完整的错误\n\n## 原因\n\nNext 分为客户端和服务端，需要对双端都做上报\n\nNext 获取逻辑和渲染是两个维度错误逻辑处理\n\n## 如何发现\n\n[参考 Next 官网 sentry 接入示例](https://github.com/zeit/next.js/blob/canary/examples/with-sentry/pages/_app.js)\n\n## 如何修复\n\n按照示例接入\n\n其中 sentry 需要在客户端和服务端复用，建议是抽离放在一个文件去维护\n\n综上需要更改有五处地方\n\n- config/sentry.js\n- \\_app.js\n- \\_error.js\n- server/app.js\n- next.config.js\n\n流程图如下：\n\n![Next渲染流程](https://s1.ax1x.com/2020/03/13/8mXosf.png)\n\n其中\\_app.js 接入 sentry 初始化逻辑，并且在 getInitProps 方法内，使用 try/catch 执行对应 page 组件的 getInitProps\n\n```javascript\n// _app.ts\n\nstatic async getInitialProps(appContext: AppContext) {\n try {\n  const { Component, ctx } = appContext\n  let pageProps = {}\n\n  if (Component.getInitialProps) {\n   pageProps = await Component.getInitialProps(ctx)\n  }\n\n  return {\n   pageProps,\n  }\n } catch (error) {\n  console.log('app组件捕获到错误：', error)\n  const { ctx } = appContext\n  const errorEventId = captureException(error, ctx)\n  return {\n   errorEventId,\n   hasError: true,\n   pageProps: {},\n  }\n }\n}\n\n```\n\nrender 错误需要在\\_error.js 捕获处理\n\n```javascript\n// _error.ts\nstatic getInitialProps(ctx: NextPageContext) {\n const { res, err } = ctx\n if (err) {\n  console.log('Error组件捕获到错误', err)\n  captureException(err, ctx)\n }\n const statusCode = res ? res.statusCode : err ? err.statusCode : null\n return { statusCode }\n}\n```\n\n服务端配置\n\n```javascript\n// 此处加在了全局错误中间件处理 如果不使用全局错误中间件需要监听koa等实例全局error事件处理\n\nconst errHandler = async (ctx, next) => {\n  try {\n    await next();\n    ctx.status = 200;\n  } catch (err) {\n    console.error(\"服务端捕获到错误：\", err);\n    // sentry上报错误\n    captureException(err, ctx);\n\n    ctx.status = err.code ? 200 : 500;\n    ctx.body = {\n      message: err.message,\n      ...err\n    };\n  }\n};\n\napp.prepare().then(() => {\n  const server = new Koa();\n\n  server.use(errHandler);\n});\n```\n\nsentry 配置\n\n```javascript\nimport * as Sentry from '@sentry/node'\nimport { NextPageContext } from 'next'\n\ninterface SentryExport {\n Sentry: typeof Sentry\n captureException: (err: any, ctx: NextPageContext) => string\n}\n\nexport default (release = process.env.SENTRY_RELEASE): SentryExport => {\n console.log('SENTRY_RELEASE:', process.env.SENTRY_RELEASE)\n const sentryOptions: Sentry.NodeOptions = {\n  dsn: '***********',\n  release: release || '',\n  environment: process.env.NODE_ENV,\n  maxBreadcrumbs: 10,\n  attachStacktrace: true,\n  // 只有生产环境发送到sentry\n  enabled: process.env.NODE_ENV === 'production',\n }\n\n Sentry.init(sentryOptions)\n\n return {\n  Sentry,\n  captureException: (err, ctx) => {\n   Sentry.configureScope((scope) => {\n    if (err.message) {\n     // De-duplication currently doesn't work correctly for SSR / browser errors\n     // so we force deduplication by error message if it is present\n     scope.setFingerprint([err.message])\n    }\n\n    if (err.statusCode) {\n     scope.setExtra('statusCode', err.statusCode)\n    }\n\n    if (ctx) {\n     const { req, res, query } = ctx\n\n     if (res && res.statusCode) {\n      scope.setExtra('statusCode', res.statusCode)\n     }\n\n     scope.setTag('ssr', 'true')\n     scope.setExtra('url', req.url)\n     scope.setExtra('method', req.method)\n     scope.setExtra('headers', req.headers)\n     scope.setExtra('query', query)\n    }\n   })\n\n   return Sentry.captureException(err)\n  },\n }\n}\n```\n\nnext 对应配置\n\n```javascript\nwebpack: (config, { isServer, buildId }) => {\n  if (!isServer) {\n    config.resolve.alias[\"@sentry/node\"] = \"@sentry/browser\";\n  }\n\n  config.plugins.push(\n    new webpack.DefinePlugin({\n      \"process.env.SENTRY_RELEASE\": JSON.stringify(buildId)\n    })\n  );\n\n  return config;\n};\n```\n\n## 总结\n\nNext 接入 sentry 需要考虑到方方面面，渲染逻辑和数据获取逻辑是两个维度，客户端和服务端又是一个维度。\n\n## 参考资料\n\n1. [sentry 官网 demo 接入 next](https://github.com/zeit/next.js/blob/canary/examples/with-sentry/server.js)\n","source":"_posts/Next-js接入sentry.md","raw":"---\ntitle: Next.js接入sentry\ncatalog: true\ndate: 2020-03-12 22:48:37\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n## 问题\n\nNext 接入 sentry 收集不到完整的错误\n\n## 原因\n\nNext 分为客户端和服务端，需要对双端都做上报\n\nNext 获取逻辑和渲染是两个维度错误逻辑处理\n\n## 如何发现\n\n[参考 Next 官网 sentry 接入示例](https://github.com/zeit/next.js/blob/canary/examples/with-sentry/pages/_app.js)\n\n## 如何修复\n\n按照示例接入\n\n其中 sentry 需要在客户端和服务端复用，建议是抽离放在一个文件去维护\n\n综上需要更改有五处地方\n\n- config/sentry.js\n- \\_app.js\n- \\_error.js\n- server/app.js\n- next.config.js\n\n流程图如下：\n\n![Next渲染流程](https://s1.ax1x.com/2020/03/13/8mXosf.png)\n\n其中\\_app.js 接入 sentry 初始化逻辑，并且在 getInitProps 方法内，使用 try/catch 执行对应 page 组件的 getInitProps\n\n```javascript\n// _app.ts\n\nstatic async getInitialProps(appContext: AppContext) {\n try {\n  const { Component, ctx } = appContext\n  let pageProps = {}\n\n  if (Component.getInitialProps) {\n   pageProps = await Component.getInitialProps(ctx)\n  }\n\n  return {\n   pageProps,\n  }\n } catch (error) {\n  console.log('app组件捕获到错误：', error)\n  const { ctx } = appContext\n  const errorEventId = captureException(error, ctx)\n  return {\n   errorEventId,\n   hasError: true,\n   pageProps: {},\n  }\n }\n}\n\n```\n\nrender 错误需要在\\_error.js 捕获处理\n\n```javascript\n// _error.ts\nstatic getInitialProps(ctx: NextPageContext) {\n const { res, err } = ctx\n if (err) {\n  console.log('Error组件捕获到错误', err)\n  captureException(err, ctx)\n }\n const statusCode = res ? res.statusCode : err ? err.statusCode : null\n return { statusCode }\n}\n```\n\n服务端配置\n\n```javascript\n// 此处加在了全局错误中间件处理 如果不使用全局错误中间件需要监听koa等实例全局error事件处理\n\nconst errHandler = async (ctx, next) => {\n  try {\n    await next();\n    ctx.status = 200;\n  } catch (err) {\n    console.error(\"服务端捕获到错误：\", err);\n    // sentry上报错误\n    captureException(err, ctx);\n\n    ctx.status = err.code ? 200 : 500;\n    ctx.body = {\n      message: err.message,\n      ...err\n    };\n  }\n};\n\napp.prepare().then(() => {\n  const server = new Koa();\n\n  server.use(errHandler);\n});\n```\n\nsentry 配置\n\n```javascript\nimport * as Sentry from '@sentry/node'\nimport { NextPageContext } from 'next'\n\ninterface SentryExport {\n Sentry: typeof Sentry\n captureException: (err: any, ctx: NextPageContext) => string\n}\n\nexport default (release = process.env.SENTRY_RELEASE): SentryExport => {\n console.log('SENTRY_RELEASE:', process.env.SENTRY_RELEASE)\n const sentryOptions: Sentry.NodeOptions = {\n  dsn: '***********',\n  release: release || '',\n  environment: process.env.NODE_ENV,\n  maxBreadcrumbs: 10,\n  attachStacktrace: true,\n  // 只有生产环境发送到sentry\n  enabled: process.env.NODE_ENV === 'production',\n }\n\n Sentry.init(sentryOptions)\n\n return {\n  Sentry,\n  captureException: (err, ctx) => {\n   Sentry.configureScope((scope) => {\n    if (err.message) {\n     // De-duplication currently doesn't work correctly for SSR / browser errors\n     // so we force deduplication by error message if it is present\n     scope.setFingerprint([err.message])\n    }\n\n    if (err.statusCode) {\n     scope.setExtra('statusCode', err.statusCode)\n    }\n\n    if (ctx) {\n     const { req, res, query } = ctx\n\n     if (res && res.statusCode) {\n      scope.setExtra('statusCode', res.statusCode)\n     }\n\n     scope.setTag('ssr', 'true')\n     scope.setExtra('url', req.url)\n     scope.setExtra('method', req.method)\n     scope.setExtra('headers', req.headers)\n     scope.setExtra('query', query)\n    }\n   })\n\n   return Sentry.captureException(err)\n  },\n }\n}\n```\n\nnext 对应配置\n\n```javascript\nwebpack: (config, { isServer, buildId }) => {\n  if (!isServer) {\n    config.resolve.alias[\"@sentry/node\"] = \"@sentry/browser\";\n  }\n\n  config.plugins.push(\n    new webpack.DefinePlugin({\n      \"process.env.SENTRY_RELEASE\": JSON.stringify(buildId)\n    })\n  );\n\n  return config;\n};\n```\n\n## 总结\n\nNext 接入 sentry 需要考虑到方方面面，渲染逻辑和数据获取逻辑是两个维度，客户端和服务端又是一个维度。\n\n## 参考资料\n\n1. [sentry 官网 demo 接入 next](https://github.com/zeit/next.js/blob/canary/examples/with-sentry/server.js)\n","slug":"Next-js接入sentry","published":1,"updated":"2024-02-20T06:48:45.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju60010lwxaqaf8pyvy","content":"<h2><span id=\"问题\">问题</span></h2><p>Next 接入 sentry 收集不到完整的错误</p>\n<h2><span id=\"原因\">原因</span></h2><p>Next 分为客户端和服务端，需要对双端都做上报</p>\n<p>Next 获取逻辑和渲染是两个维度错误逻辑处理</p>\n<h2><span id=\"如何发现\">如何发现</span></h2><p><a href=\"https://github.com/zeit/next.js/blob/canary/examples/with-sentry/pages/_app.js\" target=\"_blank\" rel=\"noopener\">参考 Next 官网 sentry 接入示例</a></p>\n<h2><span id=\"如何修复\">如何修复</span></h2><p>按照示例接入</p>\n<p>其中 sentry 需要在客户端和服务端复用，建议是抽离放在一个文件去维护</p>\n<p>综上需要更改有五处地方</p>\n<ul>\n<li>config/sentry.js</li>\n<li>_app.js</li>\n<li>_error.js</li>\n<li>server/app.js</li>\n<li>next.config.js</li>\n</ul>\n<p>流程图如下：</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/13/8mXosf.png\" alt=\"Next渲染流程\"></p>\n<p>其中_app.js 接入 sentry 初始化逻辑，并且在 getInitProps 方法内，使用 try/catch 执行对应 page 组件的 getInitProps</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _app.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps(appContext: AppContext) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; Component, ctx &#125; = appContext</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pageProps = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Component.getInitialProps) &#123;</span><br><span class=\"line\">   pageProps = <span class=\"keyword\">await</span> Component.getInitialProps(ctx)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   pageProps,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'app组件捕获到错误：'</span>, error)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; ctx &#125; = appContext</span><br><span class=\"line\">  <span class=\"keyword\">const</span> errorEventId = captureException(error, ctx)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   errorEventId,</span><br><span class=\"line\">   hasError: <span class=\"literal\">true</span>,</span><br><span class=\"line\">   pageProps: &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>render 错误需要在_error.js 捕获处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _error.ts</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> getInitialProps(ctx: NextPageContext) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; res, err &#125; = ctx</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error组件捕获到错误'</span>, err)</span><br><span class=\"line\">  captureException(err, ctx)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> statusCode = res ? res.statusCode : err ? err.statusCode : <span class=\"literal\">null</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123; statusCode &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务端配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处加在了全局错误中间件处理 如果不使用全局错误中间件需要监听koa等实例全局error事件处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> errHandler = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"服务端捕获到错误：\"</span>, err);</span><br><span class=\"line\">    <span class=\"comment\">// sentry上报错误</span></span><br><span class=\"line\">    captureException(err, ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.status = err.code ? <span class=\"number\">200</span> : <span class=\"number\">500</span>;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: err.message,</span><br><span class=\"line\">      ...err</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.prepare().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">  server.use(errHandler);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>sentry 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/node'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NextPageContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'next'</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface SentryExport &#123;</span><br><span class=\"line\"> Sentry: <span class=\"keyword\">typeof</span> Sentry</span><br><span class=\"line\"> captureException: <span class=\"function\">(<span class=\"params\">err: any, ctx: NextPageContext</span>) =&gt;</span> string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (release = process.env.SENTRY_RELEASE): <span class=\"function\"><span class=\"params\">SentryExport</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'SENTRY_RELEASE:'</span>, process.env.SENTRY_RELEASE)</span><br><span class=\"line\"> <span class=\"keyword\">const</span> sentryOptions: Sentry.NodeOptions = &#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'***********'</span>,</span><br><span class=\"line\">  release: release || <span class=\"string\">''</span>,</span><br><span class=\"line\">  environment: process.env.NODE_ENV,</span><br><span class=\"line\">  maxBreadcrumbs: <span class=\"number\">10</span>,</span><br><span class=\"line\">  attachStacktrace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 只有生产环境发送到sentry</span></span><br><span class=\"line\">  enabled: process.env.NODE_ENV === <span class=\"string\">'production'</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> Sentry.init(sentryOptions)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  Sentry,</span><br><span class=\"line\">  captureException: <span class=\"function\">(<span class=\"params\">err, ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.message) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// De-duplication currently doesn't work correctly for SSR / browser errors</span></span><br><span class=\"line\">     <span class=\"comment\">// so we force deduplication by error message if it is present</span></span><br><span class=\"line\">     scope.setFingerprint([err.message])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.statusCode) &#123;</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'statusCode'</span>, err.statusCode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> &#123; req, res, query &#125; = ctx</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (res &amp;&amp; res.statusCode) &#123;</span><br><span class=\"line\">      scope.setExtra(<span class=\"string\">'statusCode'</span>, res.statusCode)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     scope.setTag(<span class=\"string\">'ssr'</span>, <span class=\"string\">'true'</span>)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'url'</span>, req.url)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'method'</span>, req.method)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'headers'</span>, req.headers)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'query'</span>, query)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> Sentry.captureException(err)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>next 对应配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack: <span class=\"function\">(<span class=\"params\">config, &#123; isServer, buildId &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isServer) &#123;</span><br><span class=\"line\">    config.resolve.alias[<span class=\"string\">\"@sentry/node\"</span>] = <span class=\"string\">\"@sentry/browser\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.plugins.push(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"process.env.SENTRY_RELEASE\"</span>: <span class=\"built_in\">JSON</span>.stringify(buildId)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"总结\">总结</span></h2><p>Next 接入 sentry 需要考虑到方方面面，渲染逻辑和数据获取逻辑是两个维度，客户端和服务端又是一个维度。</p>\n<h2><span id=\"参考资料\">参考资料</span></h2><ol>\n<li><a href=\"https://github.com/zeit/next.js/blob/canary/examples/with-sentry/server.js\" target=\"_blank\" rel=\"noopener\">sentry 官网 demo 接入 next</a></li>\n</ol>\n","site":{"data":{}},"length":3262,"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Next 接入 sentry 收集不到完整的错误</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>Next 分为客户端和服务端，需要对双端都做上报</p>\n<p>Next 获取逻辑和渲染是两个维度错误逻辑处理</p>\n<h2 id=\"如何发现\"><a href=\"#如何发现\" class=\"headerlink\" title=\"如何发现\"></a>如何发现</h2><p><a href=\"https://github.com/zeit/next.js/blob/canary/examples/with-sentry/pages/_app.js\" target=\"_blank\" rel=\"noopener\">参考 Next 官网 sentry 接入示例</a></p>\n<h2 id=\"如何修复\"><a href=\"#如何修复\" class=\"headerlink\" title=\"如何修复\"></a>如何修复</h2><p>按照示例接入</p>\n<p>其中 sentry 需要在客户端和服务端复用，建议是抽离放在一个文件去维护</p>\n<p>综上需要更改有五处地方</p>\n<ul>\n<li>config/sentry.js</li>\n<li>_app.js</li>\n<li>_error.js</li>\n<li>server/app.js</li>\n<li>next.config.js</li>\n</ul>\n<p>流程图如下：</p>\n<p><img src=\"https://s1.ax1x.com/2020/03/13/8mXosf.png\" alt=\"Next渲染流程\"></p>\n<p>其中_app.js 接入 sentry 初始化逻辑，并且在 getInitProps 方法内，使用 try/catch 执行对应 page 组件的 getInitProps</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _app.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> getInitialProps(appContext: AppContext) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; Component, ctx &#125; = appContext</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pageProps = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Component.getInitialProps) &#123;</span><br><span class=\"line\">   pageProps = <span class=\"keyword\">await</span> Component.getInitialProps(ctx)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   pageProps,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'app组件捕获到错误：'</span>, error)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; ctx &#125; = appContext</span><br><span class=\"line\">  <span class=\"keyword\">const</span> errorEventId = captureException(error, ctx)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   errorEventId,</span><br><span class=\"line\">   hasError: <span class=\"literal\">true</span>,</span><br><span class=\"line\">   pageProps: &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>render 错误需要在_error.js 捕获处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _error.ts</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> getInitialProps(ctx: NextPageContext) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> &#123; res, err &#125; = ctx</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error组件捕获到错误'</span>, err)</span><br><span class=\"line\">  captureException(err, ctx)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> statusCode = res ? res.statusCode : err ? err.statusCode : <span class=\"literal\">null</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123; statusCode &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务端配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处加在了全局错误中间件处理 如果不使用全局错误中间件需要监听koa等实例全局error事件处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> errHandler = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    ctx.status = <span class=\"number\">200</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"服务端捕获到错误：\"</span>, err);</span><br><span class=\"line\">    <span class=\"comment\">// sentry上报错误</span></span><br><span class=\"line\">    captureException(err, ctx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.status = err.code ? <span class=\"number\">200</span> : <span class=\"number\">500</span>;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">      message: err.message,</span><br><span class=\"line\">      ...err</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.prepare().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">  server.use(errHandler);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>sentry 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/node'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NextPageContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'next'</span></span><br><span class=\"line\"></span><br><span class=\"line\">interface SentryExport &#123;</span><br><span class=\"line\"> Sentry: <span class=\"keyword\">typeof</span> Sentry</span><br><span class=\"line\"> captureException: <span class=\"function\">(<span class=\"params\">err: any, ctx: NextPageContext</span>) =&gt;</span> string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (release = process.env.SENTRY_RELEASE): <span class=\"function\"><span class=\"params\">SentryExport</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'SENTRY_RELEASE:'</span>, process.env.SENTRY_RELEASE)</span><br><span class=\"line\"> <span class=\"keyword\">const</span> sentryOptions: Sentry.NodeOptions = &#123;</span><br><span class=\"line\">  dsn: <span class=\"string\">'***********'</span>,</span><br><span class=\"line\">  release: release || <span class=\"string\">''</span>,</span><br><span class=\"line\">  environment: process.env.NODE_ENV,</span><br><span class=\"line\">  maxBreadcrumbs: <span class=\"number\">10</span>,</span><br><span class=\"line\">  attachStacktrace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 只有生产环境发送到sentry</span></span><br><span class=\"line\">  enabled: process.env.NODE_ENV === <span class=\"string\">'production'</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> Sentry.init(sentryOptions)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  Sentry,</span><br><span class=\"line\">  captureException: <span class=\"function\">(<span class=\"params\">err, ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   Sentry.configureScope(<span class=\"function\">(<span class=\"params\">scope</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.message) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// De-duplication currently doesn't work correctly for SSR / browser errors</span></span><br><span class=\"line\">     <span class=\"comment\">// so we force deduplication by error message if it is present</span></span><br><span class=\"line\">     scope.setFingerprint([err.message])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.statusCode) &#123;</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'statusCode'</span>, err.statusCode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctx) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> &#123; req, res, query &#125; = ctx</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (res &amp;&amp; res.statusCode) &#123;</span><br><span class=\"line\">      scope.setExtra(<span class=\"string\">'statusCode'</span>, res.statusCode)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     scope.setTag(<span class=\"string\">'ssr'</span>, <span class=\"string\">'true'</span>)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'url'</span>, req.url)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'method'</span>, req.method)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'headers'</span>, req.headers)</span><br><span class=\"line\">     scope.setExtra(<span class=\"string\">'query'</span>, query)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> Sentry.captureException(err)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>next 对应配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack: <span class=\"function\">(<span class=\"params\">config, &#123; isServer, buildId &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isServer) &#123;</span><br><span class=\"line\">    config.resolve.alias[<span class=\"string\">\"@sentry/node\"</span>] = <span class=\"string\">\"@sentry/browser\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.plugins.push(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"process.env.SENTRY_RELEASE\"</span>: <span class=\"built_in\">JSON</span>.stringify(buildId)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Next 接入 sentry 需要考虑到方方面面，渲染逻辑和数据获取逻辑是两个维度，客户端和服务端又是一个维度。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://github.com/zeit/next.js/blob/canary/examples/with-sentry/server.js\" target=\"_blank\" rel=\"noopener\">sentry 官网 demo 接入 next</a></li>\n</ol>\n"},{"title":"centos下开机自动重启服务和脚本","catalog":true,"date":"2019-07-08T02:45:59.000Z","subtitle":null,"header-img":null,"_content":"\n1. ### 利用`chkconfig`添加开机自启服务\n\n```shell\nchkconfig\n\n--list 各项服务状态栏显示出来\n--level 设置某个服务在该状态栏显示出来\n\n单独开启某一服务的命令：chkconfig 服务名 on\n\n单独关闭某一服务的命令：chkconfig 服务名 off\n\n查看某一服务的状态：/etc/intd.d/服务名 status\n\n```\n\n我这里以docker 服务为例，设置如下两条命令即可：\n\n```shell\n1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on\n2 # systemctl start docker.service #启动docker服务\n\n```\n\n2. ### 添加开机自启脚本\n\n- 方法一\n\n    1. 赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）\n\n    2. 打开/etc/rc.d/rc.local文件，在末尾增加如下内容\n\n    ```shell\n    echo \"/opt/script/duDefaultService.sh\" >> /etc/rc.d/rc.local\n    ```\n\n    3. 在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限\n\n    ```shell\n    chmod +x /etc/rc.d/rc.local\n    ```\n\n- 方法二\n\n    0. 设置sh启动脚本必要参数\n\n    ```shell\n    #!/bin/sh\n    #chkconfig: 2345 80 80\n    #description: auto start web server\n\n    ```\n\n    第一句：必须的\n    声明sh\n    第二句：必须的\n    2345 表示linux 有 0-6种状态 在2345下启动\n    80：表示启动顺序\n    80：表示关闭顺序\n    后面两个参数小于 100\n    第三句：必须的\n    描述\n\n    结果截图如下：\n    {% asset_img WX20190708-113220.png 自动重启服务列表截图 %}\n\n    1. 将脚本移动到/etc/rc.d/init.d目录下\n\n    ```shell\n    mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d\n    ```\n\n    2. 增加脚本的可执行权限\n\n    ```shell\n    chmod +x  /etc/rc.d/init.d/duDefaultService.sh\n    ```\n\n    3. 添加脚本到开机自动启动项目中\n\n    ```shell\n    cd /etc/rc.d/init.d\n    chkconfig --add duDefaultService.sh\n    chkconfig duDefaultService.sh on\n    ```\n\n- 方法三\n\n    1.建立服务文件\n\n    vim /lib/systemd/system/nginx.service\n\n    [Unit]\n\n    Description=nginx\n\n    After=network.target\n\n    [Service]\n\n    Type=forking\n\n    ExecStart=/www/lanmps/init.d/nginx start\n\n    ExecReload=/www/lanmps/init.d/nginx restart\n\n    ExecStop=/www/lanmps/init.d/nginx  stop\n\n    PrivateTmp=true\n\n    [Install]\n\n    WantedBy=multi-user.target\n\n    [Unit]:服务的说明\n\n    Description:描述服务\n\n    After:描述服务类别\n\n    [Service]服务运行参数的设置\n\n    Type=forking是后台运行的形式\n\n    ExecStart为服务的具体运行命令\n\n    ExecReload为重启命令\n\n    ExecStop为停止命令\n\n    PrivateTmp=True表示给服务分配独立的临时空间\n\n    注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n\n    [Install]服务安装的相关设置，可设置为多用户\n\n    2.保存目录\n\n    以754的权限保存在目录：\n\n    /lib/systemd/system  \n\n    3.设置开机自启动\n\n    systemctl enable nginx.service  \n\n    ```shell\n    systemctl enable XXXX.service\n    ```\n","source":"_posts/centos下开机自动重启服务和脚本.md","raw":"---\ntitle: centos下开机自动重启服务和脚本\ncatalog: true\ndate: 2019-07-08 10:45:59\nsubtitle:\nheader-img:\ntags: linux\ncategories: 运维\n---\n\n1. ### 利用`chkconfig`添加开机自启服务\n\n```shell\nchkconfig\n\n--list 各项服务状态栏显示出来\n--level 设置某个服务在该状态栏显示出来\n\n单独开启某一服务的命令：chkconfig 服务名 on\n\n单独关闭某一服务的命令：chkconfig 服务名 off\n\n查看某一服务的状态：/etc/intd.d/服务名 status\n\n```\n\n我这里以docker 服务为例，设置如下两条命令即可：\n\n```shell\n1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on\n2 # systemctl start docker.service #启动docker服务\n\n```\n\n2. ### 添加开机自启脚本\n\n- 方法一\n\n    1. 赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）\n\n    2. 打开/etc/rc.d/rc.local文件，在末尾增加如下内容\n\n    ```shell\n    echo \"/opt/script/duDefaultService.sh\" >> /etc/rc.d/rc.local\n    ```\n\n    3. 在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限\n\n    ```shell\n    chmod +x /etc/rc.d/rc.local\n    ```\n\n- 方法二\n\n    0. 设置sh启动脚本必要参数\n\n    ```shell\n    #!/bin/sh\n    #chkconfig: 2345 80 80\n    #description: auto start web server\n\n    ```\n\n    第一句：必须的\n    声明sh\n    第二句：必须的\n    2345 表示linux 有 0-6种状态 在2345下启动\n    80：表示启动顺序\n    80：表示关闭顺序\n    后面两个参数小于 100\n    第三句：必须的\n    描述\n\n    结果截图如下：\n    {% asset_img WX20190708-113220.png 自动重启服务列表截图 %}\n\n    1. 将脚本移动到/etc/rc.d/init.d目录下\n\n    ```shell\n    mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d\n    ```\n\n    2. 增加脚本的可执行权限\n\n    ```shell\n    chmod +x  /etc/rc.d/init.d/duDefaultService.sh\n    ```\n\n    3. 添加脚本到开机自动启动项目中\n\n    ```shell\n    cd /etc/rc.d/init.d\n    chkconfig --add duDefaultService.sh\n    chkconfig duDefaultService.sh on\n    ```\n\n- 方法三\n\n    1.建立服务文件\n\n    vim /lib/systemd/system/nginx.service\n\n    [Unit]\n\n    Description=nginx\n\n    After=network.target\n\n    [Service]\n\n    Type=forking\n\n    ExecStart=/www/lanmps/init.d/nginx start\n\n    ExecReload=/www/lanmps/init.d/nginx restart\n\n    ExecStop=/www/lanmps/init.d/nginx  stop\n\n    PrivateTmp=true\n\n    [Install]\n\n    WantedBy=multi-user.target\n\n    [Unit]:服务的说明\n\n    Description:描述服务\n\n    After:描述服务类别\n\n    [Service]服务运行参数的设置\n\n    Type=forking是后台运行的形式\n\n    ExecStart为服务的具体运行命令\n\n    ExecReload为重启命令\n\n    ExecStop为停止命令\n\n    PrivateTmp=True表示给服务分配独立的临时空间\n\n    注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n\n    [Install]服务安装的相关设置，可设置为多用户\n\n    2.保存目录\n\n    以754的权限保存在目录：\n\n    /lib/systemd/system  \n\n    3.设置开机自启动\n\n    systemctl enable nginx.service  \n\n    ```shell\n    systemctl enable XXXX.service\n    ```\n","slug":"centos下开机自动重启服务和脚本","published":1,"updated":"2024-02-20T06:48:45.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju70013lwxamuaextjo","content":"<ol>\n<li><h3><span id=\"利用chkconfig添加开机自启服务\">利用<code>chkconfig</code>添加开机自启服务</span></h3></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig</span><br><span class=\"line\"></span><br><span class=\"line\">--list 各项服务状态栏显示出来</span><br><span class=\"line\">--level 设置某个服务在该状态栏显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">单独开启某一服务的命令：chkconfig 服务名 on</span><br><span class=\"line\"></span><br><span class=\"line\">单独关闭某一服务的命令：chkconfig 服务名 off</span><br><span class=\"line\"></span><br><span class=\"line\">查看某一服务的状态：/etc/intd.d/服务名 status</span><br></pre></td></tr></table></figure>\n\n<p>我这里以docker 服务为例，设置如下两条命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on</span><br><span class=\"line\">2 # systemctl start docker.service #启动docker服务</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><h3><span id=\"添加开机自启脚本\">添加开机自启脚本</span></h3></li>\n</ol>\n<ul>\n<li><p>方法一</p>\n<ol>\n<li><p>赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）</p>\n</li>\n<li><p>打开/etc/rc.d/rc.local文件，在末尾增加如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"/opt/script/duDefaultService.sh\" &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>方法二</p>\n<ol start=\"0\">\n<li><p>设置sh启动脚本必要参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">chkconfig: 2345 80 80</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">description: auto start web server</span></span><br></pre></td></tr></table></figure>\n\n<p>第一句：必须的<br>声明sh<br>第二句：必须的<br>2345 表示linux 有 0-6种状态 在2345下启动<br>80：表示启动顺序<br>80：表示关闭顺序<br>后面两个参数小于 100<br>第三句：必须的<br>描述</p>\n<p>结果截图如下：</p>\n<img src=\"/blog/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png\" title=\"自动重启服务列表截图\">\n</li>\n<li><p>将脚本移动到/etc/rc.d/init.d目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加脚本的可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x  /etc/rc.d/init.d/duDefaultService.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加脚本到开机自动启动项目中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rc.d/init.d</span><br><span class=\"line\">chkconfig --add duDefaultService.sh</span><br><span class=\"line\">chkconfig duDefaultService.sh on</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>方法三</p>\n<p>  1.建立服务文件</p>\n<p>  vim /lib/systemd/system/nginx.service</p>\n<p>  [Unit]</p>\n<p>  Description=nginx</p>\n<p>  After=network.target</p>\n<p>  [Service]</p>\n<p>  Type=forking</p>\n<p>  ExecStart=/www/lanmps/init.d/nginx start</p>\n<p>  ExecReload=/www/lanmps/init.d/nginx restart</p>\n<p>  ExecStop=/www/lanmps/init.d/nginx  stop</p>\n<p>  PrivateTmp=true</p>\n<p>  [Install]</p>\n<p>  WantedBy=multi-user.target</p>\n<p>  [Unit]:服务的说明</p>\n<p>  Description:描述服务</p>\n<p>  After:描述服务类别</p>\n<p>  [Service]服务运行参数的设置</p>\n<p>  Type=forking是后台运行的形式</p>\n<p>  ExecStart为服务的具体运行命令</p>\n<p>  ExecReload为重启命令</p>\n<p>  ExecStop为停止命令</p>\n<p>  PrivateTmp=True表示给服务分配独立的临时空间</p>\n<p>  注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</p>\n<p>  [Install]服务安装的相关设置，可设置为多用户</p>\n<p>  2.保存目录</p>\n<p>  以754的权限保存在目录：</p>\n<p>  /lib/systemd/system  </p>\n<p>  3.设置开机自启动</p>\n<p>  systemctl enable nginx.service  </p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable XXXX.service</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"length":1526,"excerpt":"","more":"<ol>\n<li><h3 id=\"利用chkconfig添加开机自启服务\"><a href=\"#利用chkconfig添加开机自启服务\" class=\"headerlink\" title=\"利用chkconfig添加开机自启服务\"></a>利用<code>chkconfig</code>添加开机自启服务</h3></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig</span><br><span class=\"line\"></span><br><span class=\"line\">--list 各项服务状态栏显示出来</span><br><span class=\"line\">--level 设置某个服务在该状态栏显示出来</span><br><span class=\"line\"></span><br><span class=\"line\">单独开启某一服务的命令：chkconfig 服务名 on</span><br><span class=\"line\"></span><br><span class=\"line\">单独关闭某一服务的命令：chkconfig 服务名 off</span><br><span class=\"line\"></span><br><span class=\"line\">查看某一服务的状态：/etc/intd.d/服务名 status</span><br></pre></td></tr></table></figure>\n\n<p>我这里以docker 服务为例，设置如下两条命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  # systemctl enable docker.service #设置docker服务为自启动服务 相当于我们的 chkconfig docker on</span><br><span class=\"line\">2 # systemctl start docker.service #启动docker服务</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><h3 id=\"添加开机自启脚本\"><a href=\"#添加开机自启脚本\" class=\"headerlink\" title=\"添加开机自启脚本\"></a>添加开机自启脚本</h3></li>\n</ol>\n<ul>\n<li><p>方法一</p>\n<ol>\n<li><p>赋予脚本可执行权限（/opt/script/duDefaultService.sh是你的脚本路径）</p>\n</li>\n<li><p>打开/etc/rc.d/rc.local文件，在末尾增加如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"/opt/script/duDefaultService.sh\" &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在centos7中，/etc/rc.d/rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>方法二</p>\n<ol start=\"0\">\n<li><p>设置sh启动脚本必要参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">chkconfig: 2345 80 80</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">description: auto start web server</span></span><br></pre></td></tr></table></figure>\n\n<p>第一句：必须的<br>声明sh<br>第二句：必须的<br>2345 表示linux 有 0-6种状态 在2345下启动<br>80：表示启动顺序<br>80：表示关闭顺序<br>后面两个参数小于 100<br>第三句：必须的<br>描述</p>\n<p>结果截图如下：</p>\n<img src=\"/blog/2019/07/08/centos下开机自动重启服务和脚本/WX20190708-113220.png\" title=\"自动重启服务列表截图\">\n</li>\n<li><p>将脚本移动到/etc/rc.d/init.d目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv  /opt/script/duDefaultService.sh /etc/rc.d/init.d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加脚本的可执行权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x  /etc/rc.d/init.d/duDefaultService.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加脚本到开机自动启动项目中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/rc.d/init.d</span><br><span class=\"line\">chkconfig --add duDefaultService.sh</span><br><span class=\"line\">chkconfig duDefaultService.sh on</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>方法三</p>\n<p>  1.建立服务文件</p>\n<p>  vim /lib/systemd/system/nginx.service</p>\n<p>  [Unit]</p>\n<p>  Description=nginx</p>\n<p>  After=network.target</p>\n<p>  [Service]</p>\n<p>  Type=forking</p>\n<p>  ExecStart=/www/lanmps/init.d/nginx start</p>\n<p>  ExecReload=/www/lanmps/init.d/nginx restart</p>\n<p>  ExecStop=/www/lanmps/init.d/nginx  stop</p>\n<p>  PrivateTmp=true</p>\n<p>  [Install]</p>\n<p>  WantedBy=multi-user.target</p>\n<p>  [Unit]:服务的说明</p>\n<p>  Description:描述服务</p>\n<p>  After:描述服务类别</p>\n<p>  [Service]服务运行参数的设置</p>\n<p>  Type=forking是后台运行的形式</p>\n<p>  ExecStart为服务的具体运行命令</p>\n<p>  ExecReload为重启命令</p>\n<p>  ExecStop为停止命令</p>\n<p>  PrivateTmp=True表示给服务分配独立的临时空间</p>\n<p>  注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</p>\n<p>  [Install]服务安装的相关设置，可设置为多用户</p>\n<p>  2.保存目录</p>\n<p>  以754的权限保存在目录：</p>\n<p>  /lib/systemd/system  </p>\n<p>  3.设置开机自启动</p>\n<p>  systemctl enable nginx.service  </p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable XXXX.service</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"docker基本使用","catalog":true,"date":"2019-06-19T06:15:03.000Z","subtitle":null,"header-img":null,"_content":"\n本文都是基于`centos7`环境使用\n\n1. 启动 docker\n\ndocker linux启动配置文件默认`/etc/docker/daemon.json`\n\n\nmac 启动配置文件默认 /Users/用户/.docker/daemon.json\n可以修改配置文件指定 docker 服务启动的一些默认参数\n\n\n若报`doing migrations: migrating daemon.json: invalid character`错误，一般是在docker启动的时候报错。是daemon.json配置文件语法不对导致的报错。\n\n镜像加速\n\n```json\n{\n  \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"],\n}\n```\n\n\n- --regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速 Docker 镜像拉取\n\n  2.docker pull NAME[:TAG]\n  默认都是从 `docker`官方仓库去拉取镜像（registry.hub.docker.com）\n  一般直接 pull  \n  比如：\n  `docker`下载`node`的`alpine`版本\n\n```shell\ndocker pull node:10.15-alpine\n```\n\n相当于\n\n```shell\ndocker pull registry.hub.docker.com/ubuntu:node:10.15-alpine\n```\n\n`alpine`是`node`在`docker`运行的最小环境的版本，相比于完整的`node`包体积更小\n\n如果不指定版本默认拉取 `latest`版本，生产环境的时候最好指定版本号，因为`lastest`版本会跟踪最新版本的变更而变化\n\n3.如何进入`未启动`的`node`镜像内部去修改默认一些配置\n\n```shell\ndocker run -it node:10.15-alpine sh\n```\n\n以`shell`脚本的方式去执行`node`命令\n\n4.docker exec ／ docker attach\n\n两者都是进入容器内部\n\n`attach`的不足：\n\n- 多个窗口同时 `attach`同一个容器时候，所有窗口会同步显示；\n- 当某个窗口因命令阻塞，所有窗口都无法执行操作；\n\n进入`已成功运行`的容器内部\n\n```shell\ndocker exec -it 容器名称/容器ID /bin/sh\n```\n\n- -i 支持标准输入\n- -t 开启一个伪终端\n\n  5.docker ps\n\n- docker ps\n  查看已经成功运行的容器（如果运行容器之后 ps 未看到说明容器启动失败）\n- docker ps -a\n  查看所有容器（包含未成功运行的容器）\n- docker ps -f 容器 id  \n   根据容器 id 筛选指定容器\n\n  6.docker run\n\n参数部分\n\n- -d 守护进程方式运行\n- -p 端口映射 （外部访问的端口：docker 内部端口）\n- -u 指定容器的用户\n- -v 挂载存储卷映射 （外部存储卷位置：docker 内部存储卷位置）\n- -h 指定容器的主机名\n- -root\n- --name 容器重命名\n- --rm 容器停止后自动删除\n- --link 关联其它容器\n\n7. 删除\n\ndocker rmi XXX\n\n批量删除失效的容器\n\n```\ndocker rm `docker ps -a -q`\n```\n\n\n## docker安装redis\n\n```shell\ndocker pull redis\n\n# 启动redis\ndocker run -itd --name redis -p 6379:6379 redis\n\n# 修改redis默认配置文件（docker方法安装的redis没有配置文件，需要到官网去下载对应配置文件）\n\n# 1. 外部shell运行docker内部容器命令 查看对应redis版本\ndocker exec redis redis-server -v\n# 2. 到官网去下载对应redis版本，拷贝配置文件redis.conf到本地桌面/docker/data/redis\n# 中文版官网地址： http://www.redis.cn/download.html\n# 3. -v \n\nsudo docker run -p 6379:6379 --name redis -v /Users/knight/Desktop/docker/data/redis/redis.conf:/etc/redis/redis.conf  -v /Users/knight/Desktop/docker/data/redis:/data -d redis:5.0 redis-server /etc/redis/redis.conf --appendonly yes\n\n\ndocker run -d --name redis -p 6379:6379 redis:5.0 --requirepass \"LgvTc9BF2nusES5w\"\n\n```\n\n\n```docker-compose\n\ndocker-compose down\ndocker-compose up -d\n```\n","source":"_posts/docker基本使用.md","raw":"---\ntitle: docker基本使用\ncatalog: true\ndate: 2019-06-19 14:15:03\nsubtitle:\nheader-img:\ntags: docker\ncategories: 运维\n---\n\n本文都是基于`centos7`环境使用\n\n1. 启动 docker\n\ndocker linux启动配置文件默认`/etc/docker/daemon.json`\n\n\nmac 启动配置文件默认 /Users/用户/.docker/daemon.json\n可以修改配置文件指定 docker 服务启动的一些默认参数\n\n\n若报`doing migrations: migrating daemon.json: invalid character`错误，一般是在docker启动的时候报错。是daemon.json配置文件语法不对导致的报错。\n\n镜像加速\n\n```json\n{\n  \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"],\n}\n```\n\n\n- --regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速 Docker 镜像拉取\n\n  2.docker pull NAME[:TAG]\n  默认都是从 `docker`官方仓库去拉取镜像（registry.hub.docker.com）\n  一般直接 pull  \n  比如：\n  `docker`下载`node`的`alpine`版本\n\n```shell\ndocker pull node:10.15-alpine\n```\n\n相当于\n\n```shell\ndocker pull registry.hub.docker.com/ubuntu:node:10.15-alpine\n```\n\n`alpine`是`node`在`docker`运行的最小环境的版本，相比于完整的`node`包体积更小\n\n如果不指定版本默认拉取 `latest`版本，生产环境的时候最好指定版本号，因为`lastest`版本会跟踪最新版本的变更而变化\n\n3.如何进入`未启动`的`node`镜像内部去修改默认一些配置\n\n```shell\ndocker run -it node:10.15-alpine sh\n```\n\n以`shell`脚本的方式去执行`node`命令\n\n4.docker exec ／ docker attach\n\n两者都是进入容器内部\n\n`attach`的不足：\n\n- 多个窗口同时 `attach`同一个容器时候，所有窗口会同步显示；\n- 当某个窗口因命令阻塞，所有窗口都无法执行操作；\n\n进入`已成功运行`的容器内部\n\n```shell\ndocker exec -it 容器名称/容器ID /bin/sh\n```\n\n- -i 支持标准输入\n- -t 开启一个伪终端\n\n  5.docker ps\n\n- docker ps\n  查看已经成功运行的容器（如果运行容器之后 ps 未看到说明容器启动失败）\n- docker ps -a\n  查看所有容器（包含未成功运行的容器）\n- docker ps -f 容器 id  \n   根据容器 id 筛选指定容器\n\n  6.docker run\n\n参数部分\n\n- -d 守护进程方式运行\n- -p 端口映射 （外部访问的端口：docker 内部端口）\n- -u 指定容器的用户\n- -v 挂载存储卷映射 （外部存储卷位置：docker 内部存储卷位置）\n- -h 指定容器的主机名\n- -root\n- --name 容器重命名\n- --rm 容器停止后自动删除\n- --link 关联其它容器\n\n7. 删除\n\ndocker rmi XXX\n\n批量删除失效的容器\n\n```\ndocker rm `docker ps -a -q`\n```\n\n\n## docker安装redis\n\n```shell\ndocker pull redis\n\n# 启动redis\ndocker run -itd --name redis -p 6379:6379 redis\n\n# 修改redis默认配置文件（docker方法安装的redis没有配置文件，需要到官网去下载对应配置文件）\n\n# 1. 外部shell运行docker内部容器命令 查看对应redis版本\ndocker exec redis redis-server -v\n# 2. 到官网去下载对应redis版本，拷贝配置文件redis.conf到本地桌面/docker/data/redis\n# 中文版官网地址： http://www.redis.cn/download.html\n# 3. -v \n\nsudo docker run -p 6379:6379 --name redis -v /Users/knight/Desktop/docker/data/redis/redis.conf:/etc/redis/redis.conf  -v /Users/knight/Desktop/docker/data/redis:/data -d redis:5.0 redis-server /etc/redis/redis.conf --appendonly yes\n\n\ndocker run -d --name redis -p 6379:6379 redis:5.0 --requirepass \"LgvTc9BF2nusES5w\"\n\n```\n\n\n```docker-compose\n\ndocker-compose down\ndocker-compose up -d\n```\n","slug":"docker基本使用","published":1,"updated":"2024-02-20T06:48:45.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7iju90016lwxa47p8xv8l","content":"<p>本文都是基于<code>centos7</code>环境使用</p>\n<ol>\n<li>启动 docker</li>\n</ol>\n<p>docker linux启动配置文件默认<code>/etc/docker/daemon.json</code></p>\n<p>mac 启动配置文件默认 /Users/用户/.docker/daemon.json<br>可以修改配置文件指定 docker 服务启动的一些默认参数</p>\n<p>若报<code>doing migrations: migrating daemon.json: invalid character</code>错误，一般是在docker启动的时候报错。是daemon.json配置文件语法不对导致的报错。</p>\n<p>镜像加速</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://hub-mirror.c.163.com\"</span>],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速 Docker 镜像拉取</p>\n<p>2.docker pull NAME[:TAG]<br>默认都是从 <code>docker</code>官方仓库去拉取镜像（registry.hub.docker.com）<br>一般直接 pull<br>比如：<br><code>docker</code>下载<code>node</code>的<code>alpine</code>版本</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull node:10.15-alpine</span><br></pre></td></tr></table></figure>\n\n<p>相当于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.hub.docker.com/ubuntu:node:10.15-alpine</span><br></pre></td></tr></table></figure>\n\n<p><code>alpine</code>是<code>node</code>在<code>docker</code>运行的最小环境的版本，相比于完整的<code>node</code>包体积更小</p>\n<p>如果不指定版本默认拉取 <code>latest</code>版本，生产环境的时候最好指定版本号，因为<code>lastest</code>版本会跟踪最新版本的变更而变化</p>\n<p>3.如何进入<code>未启动</code>的<code>node</code>镜像内部去修改默认一些配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it node:10.15-alpine sh</span><br></pre></td></tr></table></figure>\n\n<p>以<code>shell</code>脚本的方式去执行<code>node</code>命令</p>\n<p>4.docker exec ／ docker attach</p>\n<p>两者都是进入容器内部</p>\n<p><code>attach</code>的不足：</p>\n<ul>\n<li>多个窗口同时 <code>attach</code>同一个容器时候，所有窗口会同步显示；</li>\n<li>当某个窗口因命令阻塞，所有窗口都无法执行操作；</li>\n</ul>\n<p>进入<code>已成功运行</code>的容器内部</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器名称/容器ID /bin/sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-i 支持标准输入</p>\n</li>\n<li><p>-t 开启一个伪终端</p>\n<p>5.docker ps</p>\n</li>\n<li><p>docker ps<br>查看已经成功运行的容器（如果运行容器之后 ps 未看到说明容器启动失败）</p>\n</li>\n<li><p>docker ps -a<br>查看所有容器（包含未成功运行的容器）</p>\n</li>\n<li><p>docker ps -f 容器 id<br> 根据容器 id 筛选指定容器</p>\n<p>6.docker run</p>\n</li>\n</ul>\n<p>参数部分</p>\n<ul>\n<li>-d 守护进程方式运行</li>\n<li>-p 端口映射 （外部访问的端口：docker 内部端口）</li>\n<li>-u 指定容器的用户</li>\n<li>-v 挂载存储卷映射 （外部存储卷位置：docker 内部存储卷位置）</li>\n<li>-h 指定容器的主机名</li>\n<li>-root</li>\n<li>–name 容器重命名</li>\n<li>–rm 容器停止后自动删除</li>\n<li>–link 关联其它容器</li>\n</ul>\n<ol start=\"7\">\n<li>删除</li>\n</ol>\n<p>docker rmi XXX</p>\n<p>批量删除失效的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"docker安装redis\">docker安装redis</span></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动redis</span></span><br><span class=\"line\">docker run -itd --name redis -p 6379:6379 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改redis默认配置文件（docker方法安装的redis没有配置文件，需要到官网去下载对应配置文件）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. 外部shell运行docker内部容器命令 查看对应redis版本</span></span><br><span class=\"line\">docker exec redis redis-server -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 到官网去下载对应redis版本，拷贝配置文件redis.conf到本地桌面/docker/data/redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 中文版官网地址： http://www.redis.cn/download.html</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. -v </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -p 6379:6379 --name redis -v /Users/knight/Desktop/docker/data/redis/redis.conf:/etc/redis/redis.conf  -v /Users/knight/Desktop/docker/data/redis:/data -d redis:5.0 redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis -p 6379:6379 redis:5.0 --requirepass \"LgvTc9BF2nusES5w\"</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1823,"excerpt":"","more":"<p>本文都是基于<code>centos7</code>环境使用</p>\n<ol>\n<li>启动 docker</li>\n</ol>\n<p>docker linux启动配置文件默认<code>/etc/docker/daemon.json</code></p>\n<p>mac 启动配置文件默认 /Users/用户/.docker/daemon.json<br>可以修改配置文件指定 docker 服务启动的一些默认参数</p>\n<p>若报<code>doing migrations: migrating daemon.json: invalid character</code>错误，一般是在docker启动的时候报错。是daemon.json配置文件语法不对导致的报错。</p>\n<p>镜像加速</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://hub-mirror.c.163.com\"</span>],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–regisrty-mirror=PROXY_URL 指定拉取镜像的地址加速 Docker 镜像拉取</p>\n<p>2.docker pull NAME[:TAG]<br>默认都是从 <code>docker</code>官方仓库去拉取镜像（registry.hub.docker.com）<br>一般直接 pull<br>比如：<br><code>docker</code>下载<code>node</code>的<code>alpine</code>版本</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull node:10.15-alpine</span><br></pre></td></tr></table></figure>\n\n<p>相当于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.hub.docker.com/ubuntu:node:10.15-alpine</span><br></pre></td></tr></table></figure>\n\n<p><code>alpine</code>是<code>node</code>在<code>docker</code>运行的最小环境的版本，相比于完整的<code>node</code>包体积更小</p>\n<p>如果不指定版本默认拉取 <code>latest</code>版本，生产环境的时候最好指定版本号，因为<code>lastest</code>版本会跟踪最新版本的变更而变化</p>\n<p>3.如何进入<code>未启动</code>的<code>node</code>镜像内部去修改默认一些配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it node:10.15-alpine sh</span><br></pre></td></tr></table></figure>\n\n<p>以<code>shell</code>脚本的方式去执行<code>node</code>命令</p>\n<p>4.docker exec ／ docker attach</p>\n<p>两者都是进入容器内部</p>\n<p><code>attach</code>的不足：</p>\n<ul>\n<li>多个窗口同时 <code>attach</code>同一个容器时候，所有窗口会同步显示；</li>\n<li>当某个窗口因命令阻塞，所有窗口都无法执行操作；</li>\n</ul>\n<p>进入<code>已成功运行</code>的容器内部</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器名称/容器ID /bin/sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-i 支持标准输入</p>\n</li>\n<li><p>-t 开启一个伪终端</p>\n<p>5.docker ps</p>\n</li>\n<li><p>docker ps<br>查看已经成功运行的容器（如果运行容器之后 ps 未看到说明容器启动失败）</p>\n</li>\n<li><p>docker ps -a<br>查看所有容器（包含未成功运行的容器）</p>\n</li>\n<li><p>docker ps -f 容器 id<br> 根据容器 id 筛选指定容器</p>\n<p>6.docker run</p>\n</li>\n</ul>\n<p>参数部分</p>\n<ul>\n<li>-d 守护进程方式运行</li>\n<li>-p 端口映射 （外部访问的端口：docker 内部端口）</li>\n<li>-u 指定容器的用户</li>\n<li>-v 挂载存储卷映射 （外部存储卷位置：docker 内部存储卷位置）</li>\n<li>-h 指定容器的主机名</li>\n<li>-root</li>\n<li>–name 容器重命名</li>\n<li>–rm 容器停止后自动删除</li>\n<li>–link 关联其它容器</li>\n</ul>\n<ol start=\"7\">\n<li>删除</li>\n</ol>\n<p>docker rmi XXX</p>\n<p>批量删除失效的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker安装redis\"><a href=\"#docker安装redis\" class=\"headerlink\" title=\"docker安装redis\"></a>docker安装redis</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动redis</span></span><br><span class=\"line\">docker run -itd --name redis -p 6379:6379 redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改redis默认配置文件（docker方法安装的redis没有配置文件，需要到官网去下载对应配置文件）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1. 外部shell运行docker内部容器命令 查看对应redis版本</span></span><br><span class=\"line\">docker exec redis redis-server -v</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2. 到官网去下载对应redis版本，拷贝配置文件redis.conf到本地桌面/docker/data/redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 中文版官网地址： http://www.redis.cn/download.html</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3. -v </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo docker run -p 6379:6379 --name redis -v /Users/knight/Desktop/docker/data/redis/redis.conf:/etc/redis/redis.conf  -v /Users/knight/Desktop/docker/data/redis:/data -d redis:5.0 redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis -p 6379:6379 redis:5.0 --requirepass \"LgvTc9BF2nusES5w\"</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n"},{"title":"gitlab-runner搭建CI/CD平台","catalog":true,"date":"2024-02-21T03:13:01.000Z","subtitle":null,"header-img":null,"_content":"\n## 项目架构图\n\n![devflow](/img/article/gitlab-runner/devflow.png)\n\n## 研发流程\n\n1. Maintainer从master拉取本次迭代上线分支，命名规则以当前年度+发布日期，比如release/20240606；\n2. 各个Developer从release/20240606拉取各自开发分支，命名规则以feat/个人姓名拼音首字母/发布日期，比如feat/a/20240606，feat/b/20240606\n3. 开发完成，各自合并到fat-deploy分支，自动触发CI/CD流程，发布到fat环境；\n4. 测试完成，需要走上线流程，将各自开发分支合并到原先拉取的发布分支release/20240606，自动触发uat发布，验证通过后，走pre发布，最后走pro发布；代码自动合并到master。\n5. 若发现上线有问题，依次执行git回滚和部署代码回滚。\n\nMaintainer关注：每次迭代拉取release发布分支，review上线的MR代码；\nDeveloper关注：当前发布分支，本地fat测试以及MR走上线流程；\n\n\n## CI/CD功能\n\n1. MR到指定分支后，支持自动触发构建应用；\n2. 并发构建应用；\n3. PRO发布成功后，自动合并发布分支到master分支；\n4. PRO发布成功后，直接一键git代码回滚，一键服务端部署回滚；\n5. 支持不同环境发布，fat、uat、pre、pro；\n6. CI/CD部署脚本和项目隔离，可复用；\n\n\n## 遇到的问题\n\n### gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\n\ngitlab-runner的nodejs版本要使用yum的方式安装，不能使用nvm、本地下载后创建bin形式，这种方式默认不会给gitlab-runner给安装nodejs，yum是可以的\n\n参考资料：\n\n[nodesource](https://github.com/nodesource/distributions)\n\n[centos7 之 yum 安装nodejs](https://juejin.cn/post/6844903938106327048)\n\n### gitlab-runner拉取的分支merge到master分支一直不成功\n\ngitlab默认拉取的是一个HEAD分支，HEAD分支是无法进行合并的，此时需要手动在本地拉取一个当前CommitID对应的分支，再进行merge操作；\n\n### 初始化在清理git时一直不成功，提示Permission denied或其他权限相关报错（block最久的问题）\n\n![.git权限不足1](/img/article/gitlab-runner/git-failed-write.png)\n![.git权限不足2](/img/article/gitlab-runner/git-permisson-denied.png)\n![.git权限不足3](/img/article/gitlab-runner/dist-permission.png)\n\n出现这个问题，主要是因为在进行git merge，git revet，或者打包生成的新目录如dist时，操作的用户（比如 root）不是gitlab-runner这个用户，导致下次在初始化时重置当前项目时，一直提示权限不足\n\n解决办法：在每次执行完任务时，重新给当前目录设置下可写等权限。需要注意处理下，job异常退出时未及时设置权限，导致下次构建又遇到权限异常的问题。\n\n![chmod](/img/article/gitlab-runner/chmod.png)\n\n![shell-catch](/img/article/gitlab-runner/shell-catch.png)\n\n\n### git merge时提示没有权限推送到master分支\n\n![push 403](/img/article/gitlab-runner/403.png)\n\n默认gitlab-ci-token来拉取的，本身权限是比较低的，基本只有read权限，push时可通过https://用户名:用户密码@xxxx.git HEAD:master的方式来推送即可\n\n![push](/img/article/gitlab-runner/push.png)\n\n\n参考资料：\n\n[Cannot push from gitlab-ci.yml](https://stackoverflow.com/questions/46472250/cannot-push-from-gitlab-ci-yml)\n\n\n### 同一个stage下，无法同时构建应用\n\n![build-1](/img/article/gitlab-runner/build-1.png)\n![build-2](/img/article/gitlab-runner/build-2.png)\n![build-3](/img/article/gitlab-runner/build-3.png)\n![stage-1](/img/article/gitlab-runner/stage-1.png)\n![stage-2](/img/article/gitlab-runner/stage-2.png)\n\n这是因为gitlab-runner在同时并发构建job时，为了保证应用相互隔离和资源竞争等考虑，会在builds不同临时目录下去构建应用。此时若将拉取git代码和安装依赖单独放在一个stage下，build在单独一个stage下，则默认只会在一个目录下拉取git和安装依赖，在并发时，另一个目录不会重复此步骤，就会出现代码不一致，本地没安装依赖等情况。需要调整将两个stage合并为一个stage。\n\n![stage-3](/img/article/gitlab-runner/stage-3.png)\n\n\n","source":"_posts/gitlab-runner搭建CICD平台.md","raw":"---\ntitle: gitlab-runner搭建CI/CD平台\ncatalog: true\ndate: 2024-02-21 11:13:01\nsubtitle:\nheader-img:\ntags: CI/CD\ncategories: 前端\n---\n\n## 项目架构图\n\n![devflow](/img/article/gitlab-runner/devflow.png)\n\n## 研发流程\n\n1. Maintainer从master拉取本次迭代上线分支，命名规则以当前年度+发布日期，比如release/20240606；\n2. 各个Developer从release/20240606拉取各自开发分支，命名规则以feat/个人姓名拼音首字母/发布日期，比如feat/a/20240606，feat/b/20240606\n3. 开发完成，各自合并到fat-deploy分支，自动触发CI/CD流程，发布到fat环境；\n4. 测试完成，需要走上线流程，将各自开发分支合并到原先拉取的发布分支release/20240606，自动触发uat发布，验证通过后，走pre发布，最后走pro发布；代码自动合并到master。\n5. 若发现上线有问题，依次执行git回滚和部署代码回滚。\n\nMaintainer关注：每次迭代拉取release发布分支，review上线的MR代码；\nDeveloper关注：当前发布分支，本地fat测试以及MR走上线流程；\n\n\n## CI/CD功能\n\n1. MR到指定分支后，支持自动触发构建应用；\n2. 并发构建应用；\n3. PRO发布成功后，自动合并发布分支到master分支；\n4. PRO发布成功后，直接一键git代码回滚，一键服务端部署回滚；\n5. 支持不同环境发布，fat、uat、pre、pro；\n6. CI/CD部署脚本和项目隔离，可复用；\n\n\n## 遇到的问题\n\n### gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\n\ngitlab-runner的nodejs版本要使用yum的方式安装，不能使用nvm、本地下载后创建bin形式，这种方式默认不会给gitlab-runner给安装nodejs，yum是可以的\n\n参考资料：\n\n[nodesource](https://github.com/nodesource/distributions)\n\n[centos7 之 yum 安装nodejs](https://juejin.cn/post/6844903938106327048)\n\n### gitlab-runner拉取的分支merge到master分支一直不成功\n\ngitlab默认拉取的是一个HEAD分支，HEAD分支是无法进行合并的，此时需要手动在本地拉取一个当前CommitID对应的分支，再进行merge操作；\n\n### 初始化在清理git时一直不成功，提示Permission denied或其他权限相关报错（block最久的问题）\n\n![.git权限不足1](/img/article/gitlab-runner/git-failed-write.png)\n![.git权限不足2](/img/article/gitlab-runner/git-permisson-denied.png)\n![.git权限不足3](/img/article/gitlab-runner/dist-permission.png)\n\n出现这个问题，主要是因为在进行git merge，git revet，或者打包生成的新目录如dist时，操作的用户（比如 root）不是gitlab-runner这个用户，导致下次在初始化时重置当前项目时，一直提示权限不足\n\n解决办法：在每次执行完任务时，重新给当前目录设置下可写等权限。需要注意处理下，job异常退出时未及时设置权限，导致下次构建又遇到权限异常的问题。\n\n![chmod](/img/article/gitlab-runner/chmod.png)\n\n![shell-catch](/img/article/gitlab-runner/shell-catch.png)\n\n\n### git merge时提示没有权限推送到master分支\n\n![push 403](/img/article/gitlab-runner/403.png)\n\n默认gitlab-ci-token来拉取的，本身权限是比较低的，基本只有read权限，push时可通过https://用户名:用户密码@xxxx.git HEAD:master的方式来推送即可\n\n![push](/img/article/gitlab-runner/push.png)\n\n\n参考资料：\n\n[Cannot push from gitlab-ci.yml](https://stackoverflow.com/questions/46472250/cannot-push-from-gitlab-ci-yml)\n\n\n### 同一个stage下，无法同时构建应用\n\n![build-1](/img/article/gitlab-runner/build-1.png)\n![build-2](/img/article/gitlab-runner/build-2.png)\n![build-3](/img/article/gitlab-runner/build-3.png)\n![stage-1](/img/article/gitlab-runner/stage-1.png)\n![stage-2](/img/article/gitlab-runner/stage-2.png)\n\n这是因为gitlab-runner在同时并发构建job时，为了保证应用相互隔离和资源竞争等考虑，会在builds不同临时目录下去构建应用。此时若将拉取git代码和安装依赖单独放在一个stage下，build在单独一个stage下，则默认只会在一个目录下拉取git和安装依赖，在并发时，另一个目录不会重复此步骤，就会出现代码不一致，本地没安装依赖等情况。需要调整将两个stage合并为一个stage。\n\n![stage-3](/img/article/gitlab-runner/stage-3.png)\n\n\n","slug":"gitlab-runner搭建CICD平台","published":1,"updated":"2024-02-21T02:40:13.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijub001alwxa35uimcoi","content":"<h2><span id=\"项目架构图\">项目架构图</span></h2><p><img src=\"/blog/img/article/gitlab-runner/devflow.png\" alt=\"devflow\"></p>\n<h2><span id=\"研发流程\">研发流程</span></h2><ol>\n<li>Maintainer从master拉取本次迭代上线分支，命名规则以当前年度+发布日期，比如release/20240606；</li>\n<li>各个Developer从release/20240606拉取各自开发分支，命名规则以feat/个人姓名拼音首字母/发布日期，比如feat/a/20240606，feat/b/20240606</li>\n<li>开发完成，各自合并到fat-deploy分支，自动触发CI/CD流程，发布到fat环境；</li>\n<li>测试完成，需要走上线流程，将各自开发分支合并到原先拉取的发布分支release/20240606，自动触发uat发布，验证通过后，走pre发布，最后走pro发布；代码自动合并到master。</li>\n<li>若发现上线有问题，依次执行git回滚和部署代码回滚。</li>\n</ol>\n<p>Maintainer关注：每次迭代拉取release发布分支，review上线的MR代码；<br>Developer关注：当前发布分支，本地fat测试以及MR走上线流程；</p>\n<h2><span id=\"cicd功能\">CI/CD功能</span></h2><ol>\n<li>MR到指定分支后，支持自动触发构建应用；</li>\n<li>并发构建应用；</li>\n<li>PRO发布成功后，自动合并发布分支到master分支；</li>\n<li>PRO发布成功后，直接一键git代码回滚，一键服务端部署回滚；</li>\n<li>支持不同环境发布，fat、uat、pre、pro；</li>\n<li>CI/CD部署脚本和项目隔离，可复用；</li>\n</ol>\n<h2><span id=\"遇到的问题\">遇到的问题</span></h2><h3><span id=\"gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\">gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致</span></h3><p>gitlab-runner的nodejs版本要使用yum的方式安装，不能使用nvm、本地下载后创建bin形式，这种方式默认不会给gitlab-runner给安装nodejs，yum是可以的</p>\n<p>参考资料：</p>\n<p><a href=\"https://github.com/nodesource/distributions\" target=\"_blank\" rel=\"noopener\">nodesource</a></p>\n<p><a href=\"https://juejin.cn/post/6844903938106327048\" target=\"_blank\" rel=\"noopener\">centos7 之 yum 安装nodejs</a></p>\n<h3><span id=\"gitlab-runner拉取的分支merge到master分支一直不成功\">gitlab-runner拉取的分支merge到master分支一直不成功</span></h3><p>gitlab默认拉取的是一个HEAD分支，HEAD分支是无法进行合并的，此时需要手动在本地拉取一个当前CommitID对应的分支，再进行merge操作；</p>\n<h3><span id=\"初始化在清理git时一直不成功提示permission-denied或其他权限相关报错block最久的问题\">初始化在清理git时一直不成功，提示Permission denied或其他权限相关报错（block最久的问题）</span></h3><p><img src=\"/blog/img/article/gitlab-runner/git-failed-write.png\" alt=\".git权限不足1\"><br><img src=\"/blog/img/article/gitlab-runner/git-permisson-denied.png\" alt=\".git权限不足2\"><br><img src=\"/blog/img/article/gitlab-runner/dist-permission.png\" alt=\".git权限不足3\"></p>\n<p>出现这个问题，主要是因为在进行git merge，git revet，或者打包生成的新目录如dist时，操作的用户（比如 root）不是gitlab-runner这个用户，导致下次在初始化时重置当前项目时，一直提示权限不足</p>\n<p>解决办法：在每次执行完任务时，重新给当前目录设置下可写等权限。需要注意处理下，job异常退出时未及时设置权限，导致下次构建又遇到权限异常的问题。</p>\n<p><img src=\"/blog/img/article/gitlab-runner/chmod.png\" alt=\"chmod\"></p>\n<p><img src=\"/blog/img/article/gitlab-runner/shell-catch.png\" alt=\"shell-catch\"></p>\n<h3><span id=\"git-merge时提示没有权限推送到master分支\">git merge时提示没有权限推送到master分支</span></h3><p><img src=\"/blog/img/article/gitlab-runner/403.png\" alt=\"push 403\"></p>\n<p>默认gitlab-ci-token来拉取的，本身权限是比较低的，基本只有read权限，push时可通过https://用户名:用户密码@xxxx.git HEAD:master的方式来推送即可</p>\n<p><img src=\"/blog/img/article/gitlab-runner/push.png\" alt=\"push\"></p>\n<p>参考资料：</p>\n<p><a href=\"https://stackoverflow.com/questions/46472250/cannot-push-from-gitlab-ci-yml\" target=\"_blank\" rel=\"noopener\">Cannot push from gitlab-ci.yml</a></p>\n<h3><span id=\"同一个stage下无法同时构建应用\">同一个stage下，无法同时构建应用</span></h3><p><img src=\"/blog/img/article/gitlab-runner/build-1.png\" alt=\"build-1\"><br><img src=\"/blog/img/article/gitlab-runner/build-2.png\" alt=\"build-2\"><br><img src=\"/blog/img/article/gitlab-runner/build-3.png\" alt=\"build-3\"><br><img src=\"/blog/img/article/gitlab-runner/stage-1.png\" alt=\"stage-1\"><br><img src=\"/blog/img/article/gitlab-runner/stage-2.png\" alt=\"stage-2\"></p>\n<p>这是因为gitlab-runner在同时并发构建job时，为了保证应用相互隔离和资源竞争等考虑，会在builds不同临时目录下去构建应用。此时若将拉取git代码和安装依赖单独放在一个stage下，build在单独一个stage下，则默认只会在一个目录下拉取git和安装依赖，在并发时，另一个目录不会重复此步骤，就会出现代码不一致，本地没安装依赖等情况。需要调整将两个stage合并为一个stage。</p>\n<p><img src=\"/blog/img/article/gitlab-runner/stage-3.png\" alt=\"stage-3\"></p>\n","site":{"data":{}},"length":1449,"excerpt":"","more":"<h2 id=\"项目架构图\"><a href=\"#项目架构图\" class=\"headerlink\" title=\"项目架构图\"></a>项目架构图</h2><p><img src=\"/blog/img/article/gitlab-runner/devflow.png\" alt=\"devflow\"></p>\n<h2 id=\"研发流程\"><a href=\"#研发流程\" class=\"headerlink\" title=\"研发流程\"></a>研发流程</h2><ol>\n<li>Maintainer从master拉取本次迭代上线分支，命名规则以当前年度+发布日期，比如release/20240606；</li>\n<li>各个Developer从release/20240606拉取各自开发分支，命名规则以feat/个人姓名拼音首字母/发布日期，比如feat/a/20240606，feat/b/20240606</li>\n<li>开发完成，各自合并到fat-deploy分支，自动触发CI/CD流程，发布到fat环境；</li>\n<li>测试完成，需要走上线流程，将各自开发分支合并到原先拉取的发布分支release/20240606，自动触发uat发布，验证通过后，走pre发布，最后走pro发布；代码自动合并到master。</li>\n<li>若发现上线有问题，依次执行git回滚和部署代码回滚。</li>\n</ol>\n<p>Maintainer关注：每次迭代拉取release发布分支，review上线的MR代码；<br>Developer关注：当前发布分支，本地fat测试以及MR走上线流程；</p>\n<h2 id=\"CI-CD功能\"><a href=\"#CI-CD功能\" class=\"headerlink\" title=\"CI/CD功能\"></a>CI/CD功能</h2><ol>\n<li>MR到指定分支后，支持自动触发构建应用；</li>\n<li>并发构建应用；</li>\n<li>PRO发布成功后，自动合并发布分支到master分支；</li>\n<li>PRO发布成功后，直接一键git代码回滚，一键服务端部署回滚；</li>\n<li>支持不同环境发布，fat、uat、pre、pro；</li>\n<li>CI/CD部署脚本和项目隔离，可复用；</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\"><a href=\"#gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\" class=\"headerlink\" title=\"gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致\"></a>gitlab-runner执行shell的nodejs版本和linux服务器的nodejs版本不一致</h3><p>gitlab-runner的nodejs版本要使用yum的方式安装，不能使用nvm、本地下载后创建bin形式，这种方式默认不会给gitlab-runner给安装nodejs，yum是可以的</p>\n<p>参考资料：</p>\n<p><a href=\"https://github.com/nodesource/distributions\" target=\"_blank\" rel=\"noopener\">nodesource</a></p>\n<p><a href=\"https://juejin.cn/post/6844903938106327048\" target=\"_blank\" rel=\"noopener\">centos7 之 yum 安装nodejs</a></p>\n<h3 id=\"gitlab-runner拉取的分支merge到master分支一直不成功\"><a href=\"#gitlab-runner拉取的分支merge到master分支一直不成功\" class=\"headerlink\" title=\"gitlab-runner拉取的分支merge到master分支一直不成功\"></a>gitlab-runner拉取的分支merge到master分支一直不成功</h3><p>gitlab默认拉取的是一个HEAD分支，HEAD分支是无法进行合并的，此时需要手动在本地拉取一个当前CommitID对应的分支，再进行merge操作；</p>\n<h3 id=\"初始化在清理git时一直不成功，提示Permission-denied或其他权限相关报错（block最久的问题）\"><a href=\"#初始化在清理git时一直不成功，提示Permission-denied或其他权限相关报错（block最久的问题）\" class=\"headerlink\" title=\"初始化在清理git时一直不成功，提示Permission denied或其他权限相关报错（block最久的问题）\"></a>初始化在清理git时一直不成功，提示Permission denied或其他权限相关报错（block最久的问题）</h3><p><img src=\"/blog/img/article/gitlab-runner/git-failed-write.png\" alt=\".git权限不足1\"><br><img src=\"/blog/img/article/gitlab-runner/git-permisson-denied.png\" alt=\".git权限不足2\"><br><img src=\"/blog/img/article/gitlab-runner/dist-permission.png\" alt=\".git权限不足3\"></p>\n<p>出现这个问题，主要是因为在进行git merge，git revet，或者打包生成的新目录如dist时，操作的用户（比如 root）不是gitlab-runner这个用户，导致下次在初始化时重置当前项目时，一直提示权限不足</p>\n<p>解决办法：在每次执行完任务时，重新给当前目录设置下可写等权限。需要注意处理下，job异常退出时未及时设置权限，导致下次构建又遇到权限异常的问题。</p>\n<p><img src=\"/blog/img/article/gitlab-runner/chmod.png\" alt=\"chmod\"></p>\n<p><img src=\"/blog/img/article/gitlab-runner/shell-catch.png\" alt=\"shell-catch\"></p>\n<h3 id=\"git-merge时提示没有权限推送到master分支\"><a href=\"#git-merge时提示没有权限推送到master分支\" class=\"headerlink\" title=\"git merge时提示没有权限推送到master分支\"></a>git merge时提示没有权限推送到master分支</h3><p><img src=\"/blog/img/article/gitlab-runner/403.png\" alt=\"push 403\"></p>\n<p>默认gitlab-ci-token来拉取的，本身权限是比较低的，基本只有read权限，push时可通过https://用户名:用户密码@xxxx.git HEAD:master的方式来推送即可</p>\n<p><img src=\"/blog/img/article/gitlab-runner/push.png\" alt=\"push\"></p>\n<p>参考资料：</p>\n<p><a href=\"https://stackoverflow.com/questions/46472250/cannot-push-from-gitlab-ci-yml\" target=\"_blank\" rel=\"noopener\">Cannot push from gitlab-ci.yml</a></p>\n<h3 id=\"同一个stage下，无法同时构建应用\"><a href=\"#同一个stage下，无法同时构建应用\" class=\"headerlink\" title=\"同一个stage下，无法同时构建应用\"></a>同一个stage下，无法同时构建应用</h3><p><img src=\"/blog/img/article/gitlab-runner/build-1.png\" alt=\"build-1\"><br><img src=\"/blog/img/article/gitlab-runner/build-2.png\" alt=\"build-2\"><br><img src=\"/blog/img/article/gitlab-runner/build-3.png\" alt=\"build-3\"><br><img src=\"/blog/img/article/gitlab-runner/stage-1.png\" alt=\"stage-1\"><br><img src=\"/blog/img/article/gitlab-runner/stage-2.png\" alt=\"stage-2\"></p>\n<p>这是因为gitlab-runner在同时并发构建job时，为了保证应用相互隔离和资源竞争等考虑，会在builds不同临时目录下去构建应用。此时若将拉取git代码和安装依赖单独放在一个stage下，build在单独一个stage下，则默认只会在一个目录下拉取git和安装依赖，在并发时，另一个目录不会重复此步骤，就会出现代码不一致，本地没安装依赖等情况。需要调整将两个stage合并为一个stage。</p>\n<p><img src=\"/blog/img/article/gitlab-runner/stage-3.png\" alt=\"stage-3\"></p>\n"},{"title":"git submodule","catalog":true,"date":"2019-07-10T08:31:04.000Z","subtitle":null,"header-img":null,"_content":"\n子模块一些操作方法：\n\n- 克隆带有子模块的项目\n\n```shell\ngit clone --recursive 远程地址\n```\n\n- 拉取子模块更新\n\n```shell\ngit submodule update --remote\n```\n\n- 提交子模块修改（需要切换到`master`分支）\n\n```shell\ngit add .\ngit commit -m 'xxxx'\ngit push origin master\n```\n\n- 删除子模块\n\n```shell\ngit submodule deinit themes/hugo-nuo\nvim .gitmodules # 移除要删除的子模块\ngit add .gitmodules\ngit rm --cached themes/hugo-nuo\nrm -rf .git/modules/themes/hugo-nuo\nrm -rf themes/hugo-nuo\ngit commit -m \"Remove submodule themes/hugo-nuo\"\n```\n\n参考链接： 1. [Git Submodule 的使用](https://www.jianshu.com/p/0107698498af) 2. [Git Submodule](https://laozhu.me/post/git-submodule-tutorial/)\n\n使用过程中遇到的问题：\n\n1. `jenkins`构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面\n\n```shell\n\ngit config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git\n\n\ngit submodule init\ngit submodule update --remote\n\nyarn install\ngit submodule foreach 'yarn install'\nyarn build\n```\n","source":"_posts/git-submodule.md","raw":"---\ntitle: git submodule\ncatalog: true\ndate: 2019-07-10 16:31:04\nsubtitle:\nheader-img:\ntags: git\ncategories: 前端\n---\n\n子模块一些操作方法：\n\n- 克隆带有子模块的项目\n\n```shell\ngit clone --recursive 远程地址\n```\n\n- 拉取子模块更新\n\n```shell\ngit submodule update --remote\n```\n\n- 提交子模块修改（需要切换到`master`分支）\n\n```shell\ngit add .\ngit commit -m 'xxxx'\ngit push origin master\n```\n\n- 删除子模块\n\n```shell\ngit submodule deinit themes/hugo-nuo\nvim .gitmodules # 移除要删除的子模块\ngit add .gitmodules\ngit rm --cached themes/hugo-nuo\nrm -rf .git/modules/themes/hugo-nuo\nrm -rf themes/hugo-nuo\ngit commit -m \"Remove submodule themes/hugo-nuo\"\n```\n\n参考链接： 1. [Git Submodule 的使用](https://www.jianshu.com/p/0107698498af) 2. [Git Submodule](https://laozhu.me/post/git-submodule-tutorial/)\n\n使用过程中遇到的问题：\n\n1. `jenkins`构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面\n\n```shell\n\ngit config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git\n\n\ngit submodule init\ngit submodule update --remote\n\nyarn install\ngit submodule foreach 'yarn install'\nyarn build\n```\n","slug":"git-submodule","published":1,"updated":"2024-02-20T06:48:45.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijue001dlwxadkxaii5o","content":"<p>子模块一些操作方法：</p>\n<ul>\n<li>克隆带有子模块的项目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --recursive 远程地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取子模块更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交子模块修改（需要切换到<code>master</code>分支）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'xxxx'</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit themes/hugo-nuo</span><br><span class=\"line\">vim .gitmodules # 移除要删除的子模块</span><br><span class=\"line\">git add .gitmodules</span><br><span class=\"line\">git rm --cached themes/hugo-nuo</span><br><span class=\"line\">rm -rf .git/modules/themes/hugo-nuo</span><br><span class=\"line\">rm -rf themes/hugo-nuo</span><br><span class=\"line\">git commit -m \"Remove submodule themes/hugo-nuo\"</span><br></pre></td></tr></table></figure>\n\n<p>参考链接： 1. <a href=\"https://www.jianshu.com/p/0107698498af\" target=\"_blank\" rel=\"noopener\">Git Submodule 的使用</a> 2. <a href=\"https://laozhu.me/post/git-submodule-tutorial/\" target=\"_blank\" rel=\"noopener\">Git Submodule</a></p>\n<p>使用过程中遇到的问题：</p>\n<ol>\n<li><code>jenkins</code>构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\">yarn install</span><br><span class=\"line\">git submodule foreach 'yarn install'</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":622,"excerpt":"","more":"<p>子模块一些操作方法：</p>\n<ul>\n<li>克隆带有子模块的项目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --recursive 远程地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取子模块更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --remote</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交子模块修改（需要切换到<code>master</code>分支）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'xxxx'</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit themes/hugo-nuo</span><br><span class=\"line\">vim .gitmodules # 移除要删除的子模块</span><br><span class=\"line\">git add .gitmodules</span><br><span class=\"line\">git rm --cached themes/hugo-nuo</span><br><span class=\"line\">rm -rf .git/modules/themes/hugo-nuo</span><br><span class=\"line\">rm -rf themes/hugo-nuo</span><br><span class=\"line\">git commit -m \"Remove submodule themes/hugo-nuo\"</span><br></pre></td></tr></table></figure>\n\n<p>参考链接： 1. <a href=\"https://www.jianshu.com/p/0107698498af\" target=\"_blank\" rel=\"noopener\">Git Submodule 的使用</a> 2. <a href=\"https://laozhu.me/post/git-submodule-tutorial/\" target=\"_blank\" rel=\"noopener\">Git Submodule</a></p>\n<p>使用过程中遇到的问题：</p>\n<ol>\n<li><code>jenkins</code>构建过程中，使用 http 方式拉取子模块一直提示需要输入账号密码，将账号密码放在 url 前面</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config submodule.H5-Base.url http://账号:密码@远程地址/app/H5-Base.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"></span><br><span class=\"line\">yarn install</span><br><span class=\"line\">git submodule foreach 'yarn install'</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n\n"},{"title":"git常用命令","catalog":true,"date":"2019-04-25T07:55:22.000Z","subtitle":null,"header-img":null,"_content":"\n## git merge（合并）\n\ngit 中有两个合并策略： fast-forward（-ff）和 no-fast-forward（--no-ff）\n\n### fast-forward（--ff）\n\n从 master 分支切出的 dev 分支，dev 在 merge 到 master 时，master 分支并没有额外提交，那么合并不会产生新的提交记录\n\n![git merge --ff](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOtuyKTBrtvK9POh0ZicUNyIXv0ibWLFrc3LicMicWlicFhqlUV5qLcC0t1tw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### no-fast-forward（--no-ff）\n\ndev 在 merge 到 master 时，master 分支有额外提交，那么合并会产生新的提交记录\n\n![git merge --no-ff](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOovc8FicicdbGMeIPQt2bFCq8xmucibxsQ7zWib2g8NDW5GWRq2arZ6sktA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git rebase（变基）\n\n除了 git merge，还能使用 git rebase 来合并分支。\n\ngit rebase 指令会 复制 当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。\n\n比较适合开发阶段，master 分支做了修改同步到开发分支。\n\n若想修改仓库第一条 commit 需要使用`git rebase -i --root`\n\n若想\n\n![git rebase](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOs1pbHgKho3v46GZhMre3BDX1JHVicL4lTlzKOmVfpwiaqRdwVGZ9WsFA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 交互式变基\n\ngit rebase 时，我们还能通过交互式变基（Interactive Rebase）方式对当前分支上的提交记录做修改！\n\n变基时提供了 6 种操作模式：\n\n- reword：修改提交信息\n- edit：修改此提交\n- squash：将当前提交合并到之前的提交中\n- fixup：将当前提交合并到之前的提交中，不保留提交日志消息\n- exec：在每一个需要变基的提交上执行一条命令\n- drop：删除提交\n\ndrop 案例：\n![git rebase -i HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOBnJ7NwOgrzMIhcKXsME3PiaIaoVQyuNpUyduZk1CZ5s6SLfec8zfONA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\nspuash 案例：\n![git rebase -i HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOfOgVv8QmLumCzyvHzLutYBgWY5u1buC2ibGibfn8b7LLFg7bM92uB97g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n变基之后，直接 push 会默认采用 fast-forward 模式去 push，如果在 master 分支其他人有修改需要进行--force 提交\n\n- 开发分支只有你一个人在开发\n\n直接进行`git push --force origin XX`。\n\n- 开发分支多人开发\n\n此时如果你贸然的使用–force 命令，会有覆盖掉其他人提交代码的风险。此时使用`git push --force-with-lease origin XX`，该命令在强制覆盖前会进行一次检查，如果其他人在该分支上有提交会有一个警告，此时可以避免覆盖代码的风险。\n\n## git reset（重置）\n\n### 软重置\n\n执行软重置时，撤回到特定提交之后，已有的修改会保留。\n\n![git reset --soft HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### 硬重置\n\n不保留提交的修改也不会保留本地文件修改，直接将当前分支的状态恢复到某个分支提交下。\n\n![git reset --hard HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### 远端重置\n\ngit push origin HEAD~XXX --force\ngit push origin COMMIT_ID --force\n\n## git revert（还原）\n\n另一种撤销更改的方式，会创建一条还原的提交记录。\n\n![git revert XXX](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git cherry-pick（检出提交）\n\n如果分支上的某次提交是合并分支需要的，可以使用 cherry-pick 单独将某次提交合并分支。\n\n![git cherry-pick XXXX](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git fetch（获取）\n\n同一分支上开发时，本地获取其他人远端提交的更新方式。\n\n![git fetch](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOuJEMNkPeXatRs6qqqKUh51nicwicuAyrm8b278TCYShxvv7wHY1n3gkw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git pull（拉取）\n\ngit pull 实际做了两件事： git fetch 和 git merge\n\n![git pull](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9Zib2iag8NqZMe4IrLnEQyqKlicfm6PjbdicfmicbCHNY0yGJu2nweOx2uA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git reflog （操作日志）\n\n每个人都会犯错，举一个例子：假设你不小心使用 git reset 命令硬重置仓库到某个提交。后面突然想到，重置导致了一些已有的正常代码的误删！\n\ngit reflog 用于显示所有已执行性操作的日志！包含合并、重置、还原等\n\n![git reflog](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOWIushRbiaiagnJor6ac0LTIDZpJiaicPBK0eMibv0uXS9vlD7VlFtva2hFQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git log (查看提交日志)\n\n-n 查看几条日志 比如： git log -1 查看第一条日志\n\n## git tag（标签）\n\n### 查看 tag\n\ngit tag\n\n### 本地打 tag\n\n```shell\n  git tag v1.0.0\n```\n\n### 删除本地标签\n\n- -m 给标签加注释\n- -a 指定标签版本\n\n比如：git tag -a v0.1.0 -m “0.1.2 版本”\n\n```shell\ngit tag -d v1.0.0\n```\n\n### 推送某次标签 和 本地全部标签\n\n```shell\ngit push origin v1.0.0\ngit push origin –tags\n```\n\n## 其他\n\n### 导出私钥\n\n没有设置 ssh 的话，拉取代码会报`Permission denied, please try again`\n\n导出公私钥的方式`ssh-keygen -t rsa -C \"xxxx@xxxx.com\"`会生成 id_rsa 和 id_rsa.pub 两个文件，将 id_rsa.pub 拷贝到 gitlab 对应的远程仓库的 ssh keys 列表里面\n\n### 旧仓库迁移到新仓库同步所有提交记录\n\n旧仓下\n\n```shell\ngit remote rename origin old-origin\ngit remote add origin 远程地址\ngit remote rm old-origin\ngit push -u origin --all\ngit push -u origin --tags\n```\n\n### 多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录\n\n先在一个旧仓下同步所有代码到新仓，在新仓下建立新的目录存放当前旧仓代码，之后在新仓库下加入新源，同步获取后将远端 master 分支\n拉取到本地，之后再切换回原来 master 分支，合并新源远端代码\n\n旧仓下\n\n```shell\ngit remote rename origin old-origin\ngit remote add origin 远程地址\ngit remote rm old-origin\ngit push -u origin --all\ngit push -u origin --tags\n```\n\n新仓下\n\n```shell\ngit remote add other 远程地址\ngit fetch other\ngit checkout -b newbench other/master\ngit checkout master\ngit merge newbench --allow-unrelated-histories\n```\n\n### 记录账户密码，不用每次 pull/push 都输入账号密码\n\n在指定项目下，或者全局的根目录下输入如下命令，再执行 pull 之后输入账号密码，以后就不用再输入了\n\n```shell\ngit config --global credential.helper store\n```\n\n### mac 上 git 使用每次都需要输入管理员密码解决\n\n```shell\nssh-add\n```\n\nssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个\nsession 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent\n服务也就重置了。\n\n下面的命令是永久记住私钥\n\n在~/.ssh/config 文件中添加如下命令：\n\n```shell\nHost *\n   AddKeysToAgent yes\n   UseKeychain yes\n   IdentityFile ~/.ssh/id_rsa\n```\n\n保存后,输入命令: ssh-add -K ~/.ssh/id_rsa 问题就解决了\n\n## 参考资料\n\n1. [Generating a new SSH key and adding it to the ssh-agent](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n\n2. [图解常用的 Git 指令含义](https://mp.weixin.qq.com/s/oKMdlo6jsIcMcZW8nzoAUg)\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ncatalog: true\ndate: 2019-04-25 15:55:22\nsubtitle:\nheader-img:\ntags: git\ncategories: 前端\n---\n\n## git merge（合并）\n\ngit 中有两个合并策略： fast-forward（-ff）和 no-fast-forward（--no-ff）\n\n### fast-forward（--ff）\n\n从 master 分支切出的 dev 分支，dev 在 merge 到 master 时，master 分支并没有额外提交，那么合并不会产生新的提交记录\n\n![git merge --ff](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOtuyKTBrtvK9POh0ZicUNyIXv0ibWLFrc3LicMicWlicFhqlUV5qLcC0t1tw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### no-fast-forward（--no-ff）\n\ndev 在 merge 到 master 时，master 分支有额外提交，那么合并会产生新的提交记录\n\n![git merge --no-ff](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOovc8FicicdbGMeIPQt2bFCq8xmucibxsQ7zWib2g8NDW5GWRq2arZ6sktA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git rebase（变基）\n\n除了 git merge，还能使用 git rebase 来合并分支。\n\ngit rebase 指令会 复制 当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。\n\n比较适合开发阶段，master 分支做了修改同步到开发分支。\n\n若想修改仓库第一条 commit 需要使用`git rebase -i --root`\n\n若想\n\n![git rebase](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOs1pbHgKho3v46GZhMre3BDX1JHVicL4lTlzKOmVfpwiaqRdwVGZ9WsFA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## 交互式变基\n\ngit rebase 时，我们还能通过交互式变基（Interactive Rebase）方式对当前分支上的提交记录做修改！\n\n变基时提供了 6 种操作模式：\n\n- reword：修改提交信息\n- edit：修改此提交\n- squash：将当前提交合并到之前的提交中\n- fixup：将当前提交合并到之前的提交中，不保留提交日志消息\n- exec：在每一个需要变基的提交上执行一条命令\n- drop：删除提交\n\ndrop 案例：\n![git rebase -i HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOBnJ7NwOgrzMIhcKXsME3PiaIaoVQyuNpUyduZk1CZ5s6SLfec8zfONA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\nspuash 案例：\n![git rebase -i HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOfOgVv8QmLumCzyvHzLutYBgWY5u1buC2ibGibfn8b7LLFg7bM92uB97g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n变基之后，直接 push 会默认采用 fast-forward 模式去 push，如果在 master 分支其他人有修改需要进行--force 提交\n\n- 开发分支只有你一个人在开发\n\n直接进行`git push --force origin XX`。\n\n- 开发分支多人开发\n\n此时如果你贸然的使用–force 命令，会有覆盖掉其他人提交代码的风险。此时使用`git push --force-with-lease origin XX`，该命令在强制覆盖前会进行一次检查，如果其他人在该分支上有提交会有一个警告，此时可以避免覆盖代码的风险。\n\n## git reset（重置）\n\n### 软重置\n\n执行软重置时，撤回到特定提交之后，已有的修改会保留。\n\n![git reset --soft HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### 硬重置\n\n不保留提交的修改也不会保留本地文件修改，直接将当前分支的状态恢复到某个分支提交下。\n\n![git reset --hard HEAD~3](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n### 远端重置\n\ngit push origin HEAD~XXX --force\ngit push origin COMMIT_ID --force\n\n## git revert（还原）\n\n另一种撤销更改的方式，会创建一条还原的提交记录。\n\n![git revert XXX](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git cherry-pick（检出提交）\n\n如果分支上的某次提交是合并分支需要的，可以使用 cherry-pick 单独将某次提交合并分支。\n\n![git cherry-pick XXXX](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git fetch（获取）\n\n同一分支上开发时，本地获取其他人远端提交的更新方式。\n\n![git fetch](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOuJEMNkPeXatRs6qqqKUh51nicwicuAyrm8b278TCYShxvv7wHY1n3gkw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git pull（拉取）\n\ngit pull 实际做了两件事： git fetch 和 git merge\n\n![git pull](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9Zib2iag8NqZMe4IrLnEQyqKlicfm6PjbdicfmicbCHNY0yGJu2nweOx2uA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git reflog （操作日志）\n\n每个人都会犯错，举一个例子：假设你不小心使用 git reset 命令硬重置仓库到某个提交。后面突然想到，重置导致了一些已有的正常代码的误删！\n\ngit reflog 用于显示所有已执行性操作的日志！包含合并、重置、还原等\n\n![git reflog](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOWIushRbiaiagnJor6ac0LTIDZpJiaicPBK0eMibv0uXS9vlD7VlFtva2hFQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1)\n\n## git log (查看提交日志)\n\n-n 查看几条日志 比如： git log -1 查看第一条日志\n\n## git tag（标签）\n\n### 查看 tag\n\ngit tag\n\n### 本地打 tag\n\n```shell\n  git tag v1.0.0\n```\n\n### 删除本地标签\n\n- -m 给标签加注释\n- -a 指定标签版本\n\n比如：git tag -a v0.1.0 -m “0.1.2 版本”\n\n```shell\ngit tag -d v1.0.0\n```\n\n### 推送某次标签 和 本地全部标签\n\n```shell\ngit push origin v1.0.0\ngit push origin –tags\n```\n\n## 其他\n\n### 导出私钥\n\n没有设置 ssh 的话，拉取代码会报`Permission denied, please try again`\n\n导出公私钥的方式`ssh-keygen -t rsa -C \"xxxx@xxxx.com\"`会生成 id_rsa 和 id_rsa.pub 两个文件，将 id_rsa.pub 拷贝到 gitlab 对应的远程仓库的 ssh keys 列表里面\n\n### 旧仓库迁移到新仓库同步所有提交记录\n\n旧仓下\n\n```shell\ngit remote rename origin old-origin\ngit remote add origin 远程地址\ngit remote rm old-origin\ngit push -u origin --all\ngit push -u origin --tags\n```\n\n### 多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录\n\n先在一个旧仓下同步所有代码到新仓，在新仓下建立新的目录存放当前旧仓代码，之后在新仓库下加入新源，同步获取后将远端 master 分支\n拉取到本地，之后再切换回原来 master 分支，合并新源远端代码\n\n旧仓下\n\n```shell\ngit remote rename origin old-origin\ngit remote add origin 远程地址\ngit remote rm old-origin\ngit push -u origin --all\ngit push -u origin --tags\n```\n\n新仓下\n\n```shell\ngit remote add other 远程地址\ngit fetch other\ngit checkout -b newbench other/master\ngit checkout master\ngit merge newbench --allow-unrelated-histories\n```\n\n### 记录账户密码，不用每次 pull/push 都输入账号密码\n\n在指定项目下，或者全局的根目录下输入如下命令，再执行 pull 之后输入账号密码，以后就不用再输入了\n\n```shell\ngit config --global credential.helper store\n```\n\n### mac 上 git 使用每次都需要输入管理员密码解决\n\n```shell\nssh-add\n```\n\nssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个\nsession 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent\n服务也就重置了。\n\n下面的命令是永久记住私钥\n\n在~/.ssh/config 文件中添加如下命令：\n\n```shell\nHost *\n   AddKeysToAgent yes\n   UseKeychain yes\n   IdentityFile ~/.ssh/id_rsa\n```\n\n保存后,输入命令: ssh-add -K ~/.ssh/id_rsa 问题就解决了\n\n## 参考资料\n\n1. [Generating a new SSH key and adding it to the ssh-agent](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\n\n2. [图解常用的 Git 指令含义](https://mp.weixin.qq.com/s/oKMdlo6jsIcMcZW8nzoAUg)\n","slug":"git常用命令","published":1,"updated":"2024-02-20T06:48:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuh001flwxa8md1vybx","content":"<h2><span id=\"git-merge合并\">git merge（合并）</span></h2><p>git 中有两个合并策略： fast-forward（-ff）和 no-fast-forward（–no-ff）</p>\n<h3><span id=\"fast-forwardff\">fast-forward（–ff）</span></h3><p>从 master 分支切出的 dev 分支，dev 在 merge 到 master 时，master 分支并没有额外提交，那么合并不会产生新的提交记录</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOtuyKTBrtvK9POh0ZicUNyIXv0ibWLFrc3LicMicWlicFhqlUV5qLcC0t1tw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git merge --ff\"></p>\n<h3><span id=\"no-fast-forwardno-ff\">no-fast-forward（–no-ff）</span></h3><p>dev 在 merge 到 master 时，master 分支有额外提交，那么合并会产生新的提交记录</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOovc8FicicdbGMeIPQt2bFCq8xmucibxsQ7zWib2g8NDW5GWRq2arZ6sktA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git merge --no-ff\"></p>\n<h2><span id=\"git-rebase变基\">git rebase（变基）</span></h2><p>除了 git merge，还能使用 git rebase 来合并分支。</p>\n<p>git rebase 指令会 复制 当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。</p>\n<p>比较适合开发阶段，master 分支做了修改同步到开发分支。</p>\n<p>若想修改仓库第一条 commit 需要使用<code>git rebase -i --root</code></p>\n<p>若想</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOs1pbHgKho3v46GZhMre3BDX1JHVicL4lTlzKOmVfpwiaqRdwVGZ9WsFA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase\"></p>\n<h2><span id=\"交互式变基\">交互式变基</span></h2><p>git rebase 时，我们还能通过交互式变基（Interactive Rebase）方式对当前分支上的提交记录做修改！</p>\n<p>变基时提供了 6 种操作模式：</p>\n<ul>\n<li>reword：修改提交信息</li>\n<li>edit：修改此提交</li>\n<li>squash：将当前提交合并到之前的提交中</li>\n<li>fixup：将当前提交合并到之前的提交中，不保留提交日志消息</li>\n<li>exec：在每一个需要变基的提交上执行一条命令</li>\n<li>drop：删除提交</li>\n</ul>\n<p>drop 案例：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOBnJ7NwOgrzMIhcKXsME3PiaIaoVQyuNpUyduZk1CZ5s6SLfec8zfONA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase -i HEAD~3\"></p>\n<p>spuash 案例：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOfOgVv8QmLumCzyvHzLutYBgWY5u1buC2ibGibfn8b7LLFg7bM92uB97g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase -i HEAD~3\"></p>\n<p>变基之后，直接 push 会默认采用 fast-forward 模式去 push，如果在 master 分支其他人有修改需要进行–force 提交</p>\n<ul>\n<li>开发分支只有你一个人在开发</li>\n</ul>\n<p>直接进行<code>git push --force origin XX</code>。</p>\n<ul>\n<li>开发分支多人开发</li>\n</ul>\n<p>此时如果你贸然的使用–force 命令，会有覆盖掉其他人提交代码的风险。此时使用<code>git push --force-with-lease origin XX</code>，该命令在强制覆盖前会进行一次检查，如果其他人在该分支上有提交会有一个警告，此时可以避免覆盖代码的风险。</p>\n<h2><span id=\"git-reset重置\">git reset（重置）</span></h2><h3><span id=\"软重置\">软重置</span></h3><p>执行软重置时，撤回到特定提交之后，已有的修改会保留。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reset --soft HEAD~3\"></p>\n<h3><span id=\"硬重置\">硬重置</span></h3><p>不保留提交的修改也不会保留本地文件修改，直接将当前分支的状态恢复到某个分支提交下。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reset --hard HEAD~3\"></p>\n<h3><span id=\"远端重置\">远端重置</span></h3><p>git push origin HEAD~XXX –force<br>git push origin COMMIT_ID –force</p>\n<h2><span id=\"git-revert还原\">git revert（还原）</span></h2><p>另一种撤销更改的方式，会创建一条还原的提交记录。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git revert XXX\"></p>\n<h2><span id=\"git-cherry-pick检出提交\">git cherry-pick（检出提交）</span></h2><p>如果分支上的某次提交是合并分支需要的，可以使用 cherry-pick 单独将某次提交合并分支。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git cherry-pick XXXX\"></p>\n<h2><span id=\"git-fetch获取\">git fetch（获取）</span></h2><p>同一分支上开发时，本地获取其他人远端提交的更新方式。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOuJEMNkPeXatRs6qqqKUh51nicwicuAyrm8b278TCYShxvv7wHY1n3gkw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git fetch\"></p>\n<h2><span id=\"git-pull拉取\">git pull（拉取）</span></h2><p>git pull 实际做了两件事： git fetch 和 git merge</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9Zib2iag8NqZMe4IrLnEQyqKlicfm6PjbdicfmicbCHNY0yGJu2nweOx2uA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git pull\"></p>\n<h2><span id=\"git-reflog-操作日志\">git reflog （操作日志）</span></h2><p>每个人都会犯错，举一个例子：假设你不小心使用 git reset 命令硬重置仓库到某个提交。后面突然想到，重置导致了一些已有的正常代码的误删！</p>\n<p>git reflog 用于显示所有已执行性操作的日志！包含合并、重置、还原等</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOWIushRbiaiagnJor6ac0LTIDZpJiaicPBK0eMibv0uXS9vlD7VlFtva2hFQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reflog\"></p>\n<h2><span id=\"git-log-查看提交日志\">git log (查看提交日志)</span></h2><p>-n 查看几条日志 比如： git log -1 查看第一条日志</p>\n<h2><span id=\"git-tag标签\">git tag（标签）</span></h2><h3><span id=\"查看-tag\">查看 tag</span></h3><p>git tag</p>\n<h3><span id=\"本地打-tag\">本地打 tag</span></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"删除本地标签\">删除本地标签</span></h3><ul>\n<li>-m 给标签加注释</li>\n<li>-a 指定标签版本</li>\n</ul>\n<p>比如：git tag -a v0.1.0 -m “0.1.2 版本”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"推送某次标签-和-本地全部标签\">推送某次标签 和 本地全部标签</span></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin v1.0.0</span><br><span class=\"line\">git push origin –tags</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"其他\">其他</span></h2><h3><span id=\"导出私钥\">导出私钥</span></h3><p>没有设置 ssh 的话，拉取代码会报<code>Permission denied, please try again</code></p>\n<p>导出公私钥的方式<code>ssh-keygen -t rsa -C &quot;xxxx@xxxx.com&quot;</code>会生成 id_rsa 和 id_rsa.pub 两个文件，将 id_rsa.pub 拷贝到 gitlab 对应的远程仓库的 ssh keys 列表里面</p>\n<h3><span id=\"旧仓库迁移到新仓库同步所有提交记录\">旧仓库迁移到新仓库同步所有提交记录</span></h3><p>旧仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin 远程地址</span><br><span class=\"line\">git remote rm old-origin</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"多个旧仓库迁移到新仓库新仓库以目录维度分别存放旧仓库代码并同步所有提交记录\">多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录</span></h3><p>先在一个旧仓下同步所有代码到新仓，在新仓下建立新的目录存放当前旧仓代码，之后在新仓库下加入新源，同步获取后将远端 master 分支<br>拉取到本地，之后再切换回原来 master 分支，合并新源远端代码</p>\n<p>旧仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin 远程地址</span><br><span class=\"line\">git remote rm old-origin</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>新仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add other 远程地址</span><br><span class=\"line\">git fetch other</span><br><span class=\"line\">git checkout -b newbench other/master</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge newbench --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"记录账户密码不用每次-pullpush-都输入账号密码\">记录账户密码，不用每次 pull/push 都输入账号密码</span></h3><p>在指定项目下，或者全局的根目录下输入如下命令，再执行 pull 之后输入账号密码，以后就不用再输入了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"mac-上-git-使用每次都需要输入管理员密码解决\">mac 上 git 使用每次都需要输入管理员密码解决</span></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure>\n\n<p>ssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个<br>session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent<br>服务也就重置了。</p>\n<p>下面的命令是永久记住私钥</p>\n<p>在~/.ssh/config 文件中添加如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host *</span><br><span class=\"line\">   AddKeysToAgent yes</span><br><span class=\"line\">   UseKeychain yes</span><br><span class=\"line\">   IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>保存后,输入命令: ssh-add -K ~/.ssh/id_rsa 问题就解决了</p>\n<h2><span id=\"参考资料\">参考资料</span></h2><ol>\n<li><p><a href=\"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\" target=\"_blank\" rel=\"noopener\">Generating a new SSH key and adding it to the ssh-agent</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/oKMdlo6jsIcMcZW8nzoAUg\" target=\"_blank\" rel=\"noopener\">图解常用的 Git 指令含义</a></p>\n</li>\n</ol>\n","site":{"data":{}},"length":2633,"excerpt":"","more":"<h2 id=\"git-merge（合并）\"><a href=\"#git-merge（合并）\" class=\"headerlink\" title=\"git merge（合并）\"></a>git merge（合并）</h2><p>git 中有两个合并策略： fast-forward（-ff）和 no-fast-forward（–no-ff）</p>\n<h3 id=\"fast-forward（–ff）\"><a href=\"#fast-forward（–ff）\" class=\"headerlink\" title=\"fast-forward（–ff）\"></a>fast-forward（–ff）</h3><p>从 master 分支切出的 dev 分支，dev 在 merge 到 master 时，master 分支并没有额外提交，那么合并不会产生新的提交记录</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOtuyKTBrtvK9POh0ZicUNyIXv0ibWLFrc3LicMicWlicFhqlUV5qLcC0t1tw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git merge --ff\"></p>\n<h3 id=\"no-fast-forward（–no-ff）\"><a href=\"#no-fast-forward（–no-ff）\" class=\"headerlink\" title=\"no-fast-forward（–no-ff）\"></a>no-fast-forward（–no-ff）</h3><p>dev 在 merge 到 master 时，master 分支有额外提交，那么合并会产生新的提交记录</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOovc8FicicdbGMeIPQt2bFCq8xmucibxsQ7zWib2g8NDW5GWRq2arZ6sktA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git merge --no-ff\"></p>\n<h2 id=\"git-rebase（变基）\"><a href=\"#git-rebase（变基）\" class=\"headerlink\" title=\"git rebase（变基）\"></a>git rebase（变基）</h2><p>除了 git merge，还能使用 git rebase 来合并分支。</p>\n<p>git rebase 指令会 复制 当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。</p>\n<p>比较适合开发阶段，master 分支做了修改同步到开发分支。</p>\n<p>若想修改仓库第一条 commit 需要使用<code>git rebase -i --root</code></p>\n<p>若想</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOs1pbHgKho3v46GZhMre3BDX1JHVicL4lTlzKOmVfpwiaqRdwVGZ9WsFA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase\"></p>\n<h2 id=\"交互式变基\"><a href=\"#交互式变基\" class=\"headerlink\" title=\"交互式变基\"></a>交互式变基</h2><p>git rebase 时，我们还能通过交互式变基（Interactive Rebase）方式对当前分支上的提交记录做修改！</p>\n<p>变基时提供了 6 种操作模式：</p>\n<ul>\n<li>reword：修改提交信息</li>\n<li>edit：修改此提交</li>\n<li>squash：将当前提交合并到之前的提交中</li>\n<li>fixup：将当前提交合并到之前的提交中，不保留提交日志消息</li>\n<li>exec：在每一个需要变基的提交上执行一条命令</li>\n<li>drop：删除提交</li>\n</ul>\n<p>drop 案例：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOBnJ7NwOgrzMIhcKXsME3PiaIaoVQyuNpUyduZk1CZ5s6SLfec8zfONA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase -i HEAD~3\"></p>\n<p>spuash 案例：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOfOgVv8QmLumCzyvHzLutYBgWY5u1buC2ibGibfn8b7LLFg7bM92uB97g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git rebase -i HEAD~3\"></p>\n<p>变基之后，直接 push 会默认采用 fast-forward 模式去 push，如果在 master 分支其他人有修改需要进行–force 提交</p>\n<ul>\n<li>开发分支只有你一个人在开发</li>\n</ul>\n<p>直接进行<code>git push --force origin XX</code>。</p>\n<ul>\n<li>开发分支多人开发</li>\n</ul>\n<p>此时如果你贸然的使用–force 命令，会有覆盖掉其他人提交代码的风险。此时使用<code>git push --force-with-lease origin XX</code>，该命令在强制覆盖前会进行一次检查，如果其他人在该分支上有提交会有一个警告，此时可以避免覆盖代码的风险。</p>\n<h2 id=\"git-reset（重置）\"><a href=\"#git-reset（重置）\" class=\"headerlink\" title=\"git reset（重置）\"></a>git reset（重置）</h2><h3 id=\"软重置\"><a href=\"#软重置\" class=\"headerlink\" title=\"软重置\"></a>软重置</h3><p>执行软重置时，撤回到特定提交之后，已有的修改会保留。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reset --soft HEAD~3\"></p>\n<h3 id=\"硬重置\"><a href=\"#硬重置\" class=\"headerlink\" title=\"硬重置\"></a>硬重置</h3><p>不保留提交的修改也不会保留本地文件修改，直接将当前分支的状态恢复到某个分支提交下。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reset --hard HEAD~3\"></p>\n<h3 id=\"远端重置\"><a href=\"#远端重置\" class=\"headerlink\" title=\"远端重置\"></a>远端重置</h3><p>git push origin HEAD~XXX –force<br>git push origin COMMIT_ID –force</p>\n<h2 id=\"git-revert（还原）\"><a href=\"#git-revert（还原）\" class=\"headerlink\" title=\"git revert（还原）\"></a>git revert（还原）</h2><p>另一种撤销更改的方式，会创建一条还原的提交记录。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git revert XXX\"></p>\n<h2 id=\"git-cherry-pick（检出提交）\"><a href=\"#git-cherry-pick（检出提交）\" class=\"headerlink\" title=\"git cherry-pick（检出提交）\"></a>git cherry-pick（检出提交）</h2><p>如果分支上的某次提交是合并分支需要的，可以使用 cherry-pick 单独将某次提交合并分支。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git cherry-pick XXXX\"></p>\n<h2 id=\"git-fetch（获取）\"><a href=\"#git-fetch（获取）\" class=\"headerlink\" title=\"git fetch（获取）\"></a>git fetch（获取）</h2><p>同一分支上开发时，本地获取其他人远端提交的更新方式。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOuJEMNkPeXatRs6qqqKUh51nicwicuAyrm8b278TCYShxvv7wHY1n3gkw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git fetch\"></p>\n<h2 id=\"git-pull（拉取）\"><a href=\"#git-pull（拉取）\" class=\"headerlink\" title=\"git pull（拉取）\"></a>git pull（拉取）</h2><p>git pull 实际做了两件事： git fetch 和 git merge</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9Zib2iag8NqZMe4IrLnEQyqKlicfm6PjbdicfmicbCHNY0yGJu2nweOx2uA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git pull\"></p>\n<h2 id=\"git-reflog-（操作日志）\"><a href=\"#git-reflog-（操作日志）\" class=\"headerlink\" title=\"git reflog （操作日志）\"></a>git reflog （操作日志）</h2><p>每个人都会犯错，举一个例子：假设你不小心使用 git reset 命令硬重置仓库到某个提交。后面突然想到，重置导致了一些已有的正常代码的误删！</p>\n<p>git reflog 用于显示所有已执行性操作的日志！包含合并、重置、还原等</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOWIushRbiaiagnJor6ac0LTIDZpJiaicPBK0eMibv0uXS9vlD7VlFtva2hFQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"git reflog\"></p>\n<h2 id=\"git-log-查看提交日志\"><a href=\"#git-log-查看提交日志\" class=\"headerlink\" title=\"git log (查看提交日志)\"></a>git log (查看提交日志)</h2><p>-n 查看几条日志 比如： git log -1 查看第一条日志</p>\n<h2 id=\"git-tag（标签）\"><a href=\"#git-tag（标签）\" class=\"headerlink\" title=\"git tag（标签）\"></a>git tag（标签）</h2><h3 id=\"查看-tag\"><a href=\"#查看-tag\" class=\"headerlink\" title=\"查看 tag\"></a>查看 tag</h3><p>git tag</p>\n<h3 id=\"本地打-tag\"><a href=\"#本地打-tag\" class=\"headerlink\" title=\"本地打 tag\"></a>本地打 tag</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h3><ul>\n<li>-m 给标签加注释</li>\n<li>-a 指定标签版本</li>\n</ul>\n<p>比如：git tag -a v0.1.0 -m “0.1.2 版本”</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推送某次标签-和-本地全部标签\"><a href=\"#推送某次标签-和-本地全部标签\" class=\"headerlink\" title=\"推送某次标签 和 本地全部标签\"></a>推送某次标签 和 本地全部标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin v1.0.0</span><br><span class=\"line\">git push origin –tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"导出私钥\"><a href=\"#导出私钥\" class=\"headerlink\" title=\"导出私钥\"></a>导出私钥</h3><p>没有设置 ssh 的话，拉取代码会报<code>Permission denied, please try again</code></p>\n<p>导出公私钥的方式<code>ssh-keygen -t rsa -C &quot;xxxx@xxxx.com&quot;</code>会生成 id_rsa 和 id_rsa.pub 两个文件，将 id_rsa.pub 拷贝到 gitlab 对应的远程仓库的 ssh keys 列表里面</p>\n<h3 id=\"旧仓库迁移到新仓库同步所有提交记录\"><a href=\"#旧仓库迁移到新仓库同步所有提交记录\" class=\"headerlink\" title=\"旧仓库迁移到新仓库同步所有提交记录\"></a>旧仓库迁移到新仓库同步所有提交记录</h3><p>旧仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin 远程地址</span><br><span class=\"line\">git remote rm old-origin</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录\"><a href=\"#多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录\" class=\"headerlink\" title=\"多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录\"></a>多个旧仓库迁移到新仓库，新仓库以目录维度分别存放旧仓库代码，并同步所有提交记录</h3><p>先在一个旧仓下同步所有代码到新仓，在新仓下建立新的目录存放当前旧仓代码，之后在新仓库下加入新源，同步获取后将远端 master 分支<br>拉取到本地，之后再切换回原来 master 分支，合并新源远端代码</p>\n<p>旧仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename origin old-origin</span><br><span class=\"line\">git remote add origin 远程地址</span><br><span class=\"line\">git remote rm old-origin</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n\n<p>新仓下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add other 远程地址</span><br><span class=\"line\">git fetch other</span><br><span class=\"line\">git checkout -b newbench other/master</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge newbench --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录账户密码，不用每次-pull-push-都输入账号密码\"><a href=\"#记录账户密码，不用每次-pull-push-都输入账号密码\" class=\"headerlink\" title=\"记录账户密码，不用每次 pull/push 都输入账号密码\"></a>记录账户密码，不用每次 pull/push 都输入账号密码</h3><p>在指定项目下，或者全局的根目录下输入如下命令，再执行 pull 之后输入账号密码，以后就不用再输入了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mac-上-git-使用每次都需要输入管理员密码解决\"><a href=\"#mac-上-git-使用每次都需要输入管理员密码解决\" class=\"headerlink\" title=\"mac 上 git 使用每次都需要输入管理员密码解决\"></a>mac 上 git 使用每次都需要输入管理员密码解决</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure>\n\n<p>ssh-add 这个命令不是用来永久性的记住你所使用的私钥的。实际上，它的作用只是把你指定的私钥添加到 ssh-agent 所管理的一个<br>session 当中。而 ssh-agent 是一个用于存储私钥的临时性的 session 服务，也就是说当你重启之后，ssh-agent<br>服务也就重置了。</p>\n<p>下面的命令是永久记住私钥</p>\n<p>在~/.ssh/config 文件中添加如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host *</span><br><span class=\"line\">   AddKeysToAgent yes</span><br><span class=\"line\">   UseKeychain yes</span><br><span class=\"line\">   IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>保存后,输入命令: ssh-add -K ~/.ssh/id_rsa 问题就解决了</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><p><a href=\"https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\" target=\"_blank\" rel=\"noopener\">Generating a new SSH key and adding it to the ssh-agent</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/oKMdlo6jsIcMcZW8nzoAUg\" target=\"_blank\" rel=\"noopener\">图解常用的 Git 指令含义</a></p>\n</li>\n</ol>\n"},{"title":"js中几种设计模式","catalog":true,"date":"2019-07-14T13:50:10.000Z","subtitle":null,"header-img":null,"_content":"\n## 工厂模式\n\n> 由工厂对象决定创建某一个对象类的实例\n\n特点：\n\n不关心创建过程，仅仅关心最终创建结果。\n\n```javascript\n// 案例1\nvar factory = funciton (name) {\n    switch(name) {\n        case 'nba':\n            return new NBA()\n\n        case 'cba':\n            return new CBA()\n    }\n}\n\n// 案例2\nclass Product {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Creator {\n  create(name) {\n    return new Product(name);\n  }\n}\n\nconst creatorInstance = new Creator();\n\ncreatorInstance.create(\"张三\");\n\n```\n\n应用场景：\n\n- 针对同一类别对象，不同表现。比如登录成功之后针对不同用户提示不同话术\n- React.createElement 也是工厂模式实现\n- jquery的$选择器\n\n## 建造者模式\n\n> 高级版本的工厂模式\n\n特点：\n\n不仅关心结果，也关心创建过程\n\n增加了结构的复杂性，如果对象粒度很小或者模块间很少复用或变动不大，最好创建完整对象。\n\n```javascript\nvar Human = () => {};\nvar Name = () => {};\nvar Work = () => {};\n\nvar Person = (name, work) => {\n  var human = new Human();\n  human.name = new Name();\n  human.work = new Work();\n};\n\nconst person1 = new Person(\"建造者模式\", \"it\");\nconst person2 = new Person(\"工厂模式\", \"it\");\n```\n\n## 单例模式\n\n一个类只有一个实例，并提供全局访问的方法\n\n单例可以利用闭包实现，达到保护私有变量目的\n\n特点：\n\n1. 命名空间；\n2. 模块分明\n\n```javascript\nclass Single {\n  login() {}\n  shopping() {}\n\n  user: {};\n\n  shop: {};\n}\n\nSingle.getInstance = (function() {\n  let Instance;\n  return () => {\n    if (!Instance) {\n      Instance = new Single();\n    }\n    return Instance;\n  };\n})();\n\nconst signleInstanceA = Single.getInstance();\nconst signleInstanceB = Single.getInstance();\nconsole.log(signleInstanceA === signleInstanceB); // true\n```\n\n应用场景：\n\n- 一般用于登录、购物车等比较单一状态应用场景\n\n---\n\n## 外观模式\n\n> 为子系统提供更高级的统一接口，屏蔽子系统内部接口差异\n\n就是常说的封装\n\n```javascript\nfunction addEvent(dom, type, fn) {\n  if (dom.addEventListener) {\n  } else if (dom.attachEvent) {\n  } else {\n    dom[\"on\" + type] = fn;\n  }\n}\n\naddEvent(div, \"click\", () => {});\n```\n\n应用场景：\n\n比如处理 js 兼容性提供兼容模式\n\n## 适配器模式\n\n> 用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问\n\n```javascript\nclass Adapter {\n  money() {\n    return \"人民币\";\n  }\n}\n\nclass AdapterWrapper {\n  constructor() {\n    this.Adapter = new Adapter();\n  }\n\n  m2$() {\n    const m = this.Adapter.money();\n    return `人民币兑换成美元`;\n  }\n}\n\nconst adapterWrapper = new AdapterWrapper();\nadapterWrapper.m2$();\n```\n\n应用场景：\n\n- 处理接口返回字段不一致\n- 多个对象合并成一个对象\n- 欧式标准插头转换成中国标准插头\n\n## 装饰器模式（AOP 编程）\n\n> 在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能\n\n```javascript\nclass Source {\n  add(a, b) {\n    return a + b;\n  }\n}\n\nclass DecorateSource {\n  constructor() {\n    this.source = new Source();\n  }\n  add(a, b) {\n    console.log(\"传入的参数为\", a, b);\n    return this.source.add(a, b);\n  }\n}\n\nconst decorateSource = new DecorateSource();\ndecorateSource.add(1, 2); // 传入的参数为 1 2     3\n```\n\n应用场景：\n\n- 处理 ajax 异常上报，数据分析\n- Vue 中处理数组变异方法\n\n## 观察者模式\n\n> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知\n\n```javascript\nclass Sub {\n  constructor() {\n    this.observers = [];\n  }\n  attach(observer) {\n    this.observers.push(observer);\n  }\n  notify() {\n    this.observers.forEach(observer => {\n      observer.update();\n    });\n  }\n}\n\nclass Observer {\n  constructor(name) {\n    this.name = name;\n  }\n  update() {\n    console.log(`${this.name}触发更新`);\n  }\n}\n\nconst observerA = new Observer(\"A\");\nconst observerB = new Observer(\"B\");\nconst sub = new Sub();\nsub.attach(observerA);\nsub.attach(observerB);\nsub.notify();\n```\n\n应用场景：JS 事件、promise、Vue 的 watch 方法\n\n与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。\n","source":"_posts/js中几种设计模式.md","raw":"---\ntitle: js中几种设计模式\ncatalog: true\ndate: 2019-07-14 21:50:10\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n## 工厂模式\n\n> 由工厂对象决定创建某一个对象类的实例\n\n特点：\n\n不关心创建过程，仅仅关心最终创建结果。\n\n```javascript\n// 案例1\nvar factory = funciton (name) {\n    switch(name) {\n        case 'nba':\n            return new NBA()\n\n        case 'cba':\n            return new CBA()\n    }\n}\n\n// 案例2\nclass Product {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Creator {\n  create(name) {\n    return new Product(name);\n  }\n}\n\nconst creatorInstance = new Creator();\n\ncreatorInstance.create(\"张三\");\n\n```\n\n应用场景：\n\n- 针对同一类别对象，不同表现。比如登录成功之后针对不同用户提示不同话术\n- React.createElement 也是工厂模式实现\n- jquery的$选择器\n\n## 建造者模式\n\n> 高级版本的工厂模式\n\n特点：\n\n不仅关心结果，也关心创建过程\n\n增加了结构的复杂性，如果对象粒度很小或者模块间很少复用或变动不大，最好创建完整对象。\n\n```javascript\nvar Human = () => {};\nvar Name = () => {};\nvar Work = () => {};\n\nvar Person = (name, work) => {\n  var human = new Human();\n  human.name = new Name();\n  human.work = new Work();\n};\n\nconst person1 = new Person(\"建造者模式\", \"it\");\nconst person2 = new Person(\"工厂模式\", \"it\");\n```\n\n## 单例模式\n\n一个类只有一个实例，并提供全局访问的方法\n\n单例可以利用闭包实现，达到保护私有变量目的\n\n特点：\n\n1. 命名空间；\n2. 模块分明\n\n```javascript\nclass Single {\n  login() {}\n  shopping() {}\n\n  user: {};\n\n  shop: {};\n}\n\nSingle.getInstance = (function() {\n  let Instance;\n  return () => {\n    if (!Instance) {\n      Instance = new Single();\n    }\n    return Instance;\n  };\n})();\n\nconst signleInstanceA = Single.getInstance();\nconst signleInstanceB = Single.getInstance();\nconsole.log(signleInstanceA === signleInstanceB); // true\n```\n\n应用场景：\n\n- 一般用于登录、购物车等比较单一状态应用场景\n\n---\n\n## 外观模式\n\n> 为子系统提供更高级的统一接口，屏蔽子系统内部接口差异\n\n就是常说的封装\n\n```javascript\nfunction addEvent(dom, type, fn) {\n  if (dom.addEventListener) {\n  } else if (dom.attachEvent) {\n  } else {\n    dom[\"on\" + type] = fn;\n  }\n}\n\naddEvent(div, \"click\", () => {});\n```\n\n应用场景：\n\n比如处理 js 兼容性提供兼容模式\n\n## 适配器模式\n\n> 用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问\n\n```javascript\nclass Adapter {\n  money() {\n    return \"人民币\";\n  }\n}\n\nclass AdapterWrapper {\n  constructor() {\n    this.Adapter = new Adapter();\n  }\n\n  m2$() {\n    const m = this.Adapter.money();\n    return `人民币兑换成美元`;\n  }\n}\n\nconst adapterWrapper = new AdapterWrapper();\nadapterWrapper.m2$();\n```\n\n应用场景：\n\n- 处理接口返回字段不一致\n- 多个对象合并成一个对象\n- 欧式标准插头转换成中国标准插头\n\n## 装饰器模式（AOP 编程）\n\n> 在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能\n\n```javascript\nclass Source {\n  add(a, b) {\n    return a + b;\n  }\n}\n\nclass DecorateSource {\n  constructor() {\n    this.source = new Source();\n  }\n  add(a, b) {\n    console.log(\"传入的参数为\", a, b);\n    return this.source.add(a, b);\n  }\n}\n\nconst decorateSource = new DecorateSource();\ndecorateSource.add(1, 2); // 传入的参数为 1 2     3\n```\n\n应用场景：\n\n- 处理 ajax 异常上报，数据分析\n- Vue 中处理数组变异方法\n\n## 观察者模式\n\n> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知\n\n```javascript\nclass Sub {\n  constructor() {\n    this.observers = [];\n  }\n  attach(observer) {\n    this.observers.push(observer);\n  }\n  notify() {\n    this.observers.forEach(observer => {\n      observer.update();\n    });\n  }\n}\n\nclass Observer {\n  constructor(name) {\n    this.name = name;\n  }\n  update() {\n    console.log(`${this.name}触发更新`);\n  }\n}\n\nconst observerA = new Observer(\"A\");\nconst observerB = new Observer(\"B\");\nconst sub = new Sub();\nsub.attach(observerA);\nsub.attach(observerB);\nsub.notify();\n```\n\n应用场景：JS 事件、promise、Vue 的 watch 方法\n\n与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。\n","slug":"js中几种设计模式","published":1,"updated":"2024-02-20T06:48:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuj001ilwxayyi2pi5b","content":"<h2><span id=\"工厂模式\">工厂模式</span></h2><blockquote>\n<p>由工厂对象决定创建某一个对象类的实例</p>\n</blockquote>\n<p>特点：</p>\n<p>不关心创建过程，仅仅关心最终创建结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 案例1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factory = funciton (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'nba'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NBA()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'cba'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CBA()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">  create(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creatorInstance = <span class=\"keyword\">new</span> Creator();</span><br><span class=\"line\"></span><br><span class=\"line\">creatorInstance.create(<span class=\"string\">\"张三\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>针对同一类别对象，不同表现。比如登录成功之后针对不同用户提示不同话术</li>\n<li>React.createElement 也是工厂模式实现</li>\n<li>jquery的$选择器</li>\n</ul>\n<h2><span id=\"建造者模式\">建造者模式</span></h2><blockquote>\n<p>高级版本的工厂模式</p>\n</blockquote>\n<p>特点：</p>\n<p>不仅关心结果，也关心创建过程</p>\n<p>增加了结构的复杂性，如果对象粒度很小或者模块间很少复用或变动不大，最好创建完整对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Human = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Work = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\">(<span class=\"params\">name, work</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> human = <span class=\"keyword\">new</span> Human();</span><br><span class=\"line\">  human.name = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\">  human.work = <span class=\"keyword\">new</span> Work();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"建造者模式\"</span>, <span class=\"string\">\"it\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"工厂模式\"</span>, <span class=\"string\">\"it\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"单例模式\">单例模式</span></h2><p>一个类只有一个实例，并提供全局访问的方法</p>\n<p>单例可以利用闭包实现，达到保护私有变量目的</p>\n<p>特点：</p>\n<ol>\n<li>命名空间；</li>\n<li>模块分明</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span> </span>&#123;</span><br><span class=\"line\">  login() &#123;&#125;</span><br><span class=\"line\">  shopping() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  user: &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  shop: &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Single.getInstance = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> Instance;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Instance) &#123;</span><br><span class=\"line\">      Instance = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceA = Single.getInstance();</span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceB = Single.getInstance();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signleInstanceA === signleInstanceB); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>一般用于登录、购物车等比较单一状态应用场景</li>\n</ul>\n<hr>\n<h2><span id=\"外观模式\">外观模式</span></h2><blockquote>\n<p>为子系统提供更高级的统一接口，屏蔽子系统内部接口差异</p>\n</blockquote>\n<p>就是常说的封装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">dom, type, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dom.addEventListener) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dom.attachEvent) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    dom[<span class=\"string\">\"on\"</span> + type] = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addEvent(div, <span class=\"string\">\"click\"</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<p>比如处理 js 兼容性提供兼容模式</p>\n<h2><span id=\"适配器模式\">适配器模式</span></h2><blockquote>\n<p>用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</span><br><span class=\"line\">  money() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"人民币\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterWrapper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Adapter = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  m2$() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = <span class=\"keyword\">this</span>.Adapter.money();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`人民币兑换成美元`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> adapterWrapper = <span class=\"keyword\">new</span> AdapterWrapper();</span><br><span class=\"line\">adapterWrapper.m2$();</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>处理接口返回字段不一致</li>\n<li>多个对象合并成一个对象</li>\n<li>欧式标准插头转换成中国标准插头</li>\n</ul>\n<h2><span id=\"装饰器模式aop-编程\">装饰器模式（AOP 编程）</span></h2><blockquote>\n<p>在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;</span><br><span class=\"line\">  add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorateSource</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"传入的参数为\"</span>, a, b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.add(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decorateSource = <span class=\"keyword\">new</span> DecorateSource();</span><br><span class=\"line\">decorateSource.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 传入的参数为 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>处理 ajax 异常上报，数据分析</li>\n<li>Vue 中处理数组变异方法</li>\n</ul>\n<h2><span id=\"观察者模式\">观察者模式</span></h2><blockquote>\n<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  attach(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">      observer.update();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>触发更新`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observerA = <span class=\"keyword\">new</span> Observer(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> observerB = <span class=\"keyword\">new</span> Observer(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub = <span class=\"keyword\">new</span> Sub();</span><br><span class=\"line\">sub.attach(observerA);</span><br><span class=\"line\">sub.attach(observerB);</span><br><span class=\"line\">sub.notify();</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：JS 事件、promise、Vue 的 watch 方法</p>\n<p>与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。</p>\n","site":{"data":{}},"length":3034,"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><blockquote>\n<p>由工厂对象决定创建某一个对象类的实例</p>\n</blockquote>\n<p>特点：</p>\n<p>不关心创建过程，仅仅关心最终创建结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 案例1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factory = funciton (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'nba'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NBA()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'cba'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CBA()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 案例2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">  create(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creatorInstance = <span class=\"keyword\">new</span> Creator();</span><br><span class=\"line\"></span><br><span class=\"line\">creatorInstance.create(<span class=\"string\">\"张三\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>针对同一类别对象，不同表现。比如登录成功之后针对不同用户提示不同话术</li>\n<li>React.createElement 也是工厂模式实现</li>\n<li>jquery的$选择器</li>\n</ul>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><blockquote>\n<p>高级版本的工厂模式</p>\n</blockquote>\n<p>特点：</p>\n<p>不仅关心结果，也关心创建过程</p>\n<p>增加了结构的复杂性，如果对象粒度很小或者模块间很少复用或变动不大，最好创建完整对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Human = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Name = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Work = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\">(<span class=\"params\">name, work</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> human = <span class=\"keyword\">new</span> Human();</span><br><span class=\"line\">  human.name = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\">  human.work = <span class=\"keyword\">new</span> Work();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"建造者模式\"</span>, <span class=\"string\">\"it\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"工厂模式\"</span>, <span class=\"string\">\"it\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>一个类只有一个实例，并提供全局访问的方法</p>\n<p>单例可以利用闭包实现，达到保护私有变量目的</p>\n<p>特点：</p>\n<ol>\n<li>命名空间；</li>\n<li>模块分明</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span> </span>&#123;</span><br><span class=\"line\">  login() &#123;&#125;</span><br><span class=\"line\">  shopping() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  user: &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  shop: &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Single.getInstance = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> Instance;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Instance) &#123;</span><br><span class=\"line\">      Instance = <span class=\"keyword\">new</span> Single();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceA = Single.getInstance();</span><br><span class=\"line\"><span class=\"keyword\">const</span> signleInstanceB = Single.getInstance();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(signleInstanceA === signleInstanceB); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>一般用于登录、购物车等比较单一状态应用场景</li>\n</ul>\n<hr>\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><blockquote>\n<p>为子系统提供更高级的统一接口，屏蔽子系统内部接口差异</p>\n</blockquote>\n<p>就是常说的封装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">dom, type, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dom.addEventListener) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dom.attachEvent) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    dom[<span class=\"string\">\"on\"</span> + type] = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addEvent(div, <span class=\"string\">\"click\"</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<p>比如处理 js 兼容性提供兼容模式</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><blockquote>\n<p>用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</span><br><span class=\"line\">  money() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"人民币\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterWrapper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Adapter = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  m2$() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> m = <span class=\"keyword\">this</span>.Adapter.money();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`人民币兑换成美元`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> adapterWrapper = <span class=\"keyword\">new</span> AdapterWrapper();</span><br><span class=\"line\">adapterWrapper.m2$();</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>处理接口返回字段不一致</li>\n<li>多个对象合并成一个对象</li>\n<li>欧式标准插头转换成中国标准插头</li>\n</ul>\n<h2 id=\"装饰器模式（AOP-编程）\"><a href=\"#装饰器模式（AOP-编程）\" class=\"headerlink\" title=\"装饰器模式（AOP 编程）\"></a>装饰器模式（AOP 编程）</h2><blockquote>\n<p>在不改变源对象的自身方法的基础上，给源对象自身方法提供新的功能</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> </span>&#123;</span><br><span class=\"line\">  add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorateSource</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"传入的参数为\"</span>, a, b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.add(a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> decorateSource = <span class=\"keyword\">new</span> DecorateSource();</span><br><span class=\"line\">decorateSource.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 传入的参数为 1 2     3</span></span><br></pre></td></tr></table></figure>\n\n<p>应用场景：</p>\n<ul>\n<li>处理 ajax 异常上报，数据分析</li>\n<li>Vue 中处理数组变异方法</li>\n</ul>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><blockquote>\n<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  attach(observer) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(observer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.forEach(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> &#123;</span><br><span class=\"line\">      observer.update();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>触发更新`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observerA = <span class=\"keyword\">new</span> Observer(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> observerB = <span class=\"keyword\">new</span> Observer(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub = <span class=\"keyword\">new</span> Sub();</span><br><span class=\"line\">sub.attach(observerA);</span><br><span class=\"line\">sub.attach(observerB);</span><br><span class=\"line\">sub.notify();</span><br></pre></td></tr></table></figure>\n\n<p>应用场景：JS 事件、promise、Vue 的 watch 方法</p>\n<p>与订阅/发布模式区别 主要在于调度不同。观察者模式由具体目标方法调度，而订阅发布模式由统一调度中心去调度，所以观察者模式的观察者和目标会有依赖，而后者没有。</p>\n"},{"title":"js继承问题总结","catalog":true,"date":"2019-09-24T04:24:41.000Z","subtitle":null,"header-img":null,"_content":"\n如果要用 js 实现一个类的话，我们会用构造函数来模拟一个类，代码如下：\n\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.height = function() {\n    console.log(this.name + \"的高度未知\");\n  };\n}\n\nAnimal.prototype.eat = function(food) {\n  console.log(this.name + \"正在吃\" + food);\n};\n```\n\n那现在我们需要继承这个`Animal`的类来实现一个具体的`Dog`类，我们一般会使用`组合继承`，方法如下：\n\n```javascript\nfunction Dog(name, age) {\n  Animal.call(this, name);\n  this.age = age;\n}\n\nDog.prototype = new Animal();\nDog.prototype.constructor = Dog;\n```\n\n目测是比较完美的继承方式了，但是仔细思考会发现有个问题：\n\n1. 在`Dog.prototype = new Animal()`执行了一次`Animal`实例；\n2. 在 Dog 类实例化时候，内部使用 call 方法的时候又执行了一次`Animal`实例化；\n\n所以这并不是最完美的继承方式。那么我们应该使用什么样的办法才能解决上述问题呢？这个时候就需要用到`寄生继承`方式，代码如下：\n\n```javascript\nfunction Dog(name, age) {\n  Animal.call(this, name);\n  this.age = age;\n}\n\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n\n利用一个中间对象先继承父类，减少了第一次继承父类原型的时候会实例化父类的缺点，这应该是目前最完美的继承方法。\n\n参考资料：\n\n1. [JS 组合继承（寄生继承）](https://www.jianshu.com/p/8a83ed26ecbb)\n2. [Javascript 完美继承方式 - 寄生组合](https://www.jianshu.com/p/5d53d06ea918)\n3. [理清原型对象、 实例对象、构造函数](https://juejin.im/post/5e6dec09f265da572c54a6e4)\n","source":"_posts/js继承问题总结.md","raw":"---\ntitle: js继承问题总结\ncatalog: true\ndate: 2019-09-24 12:24:41\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n如果要用 js 实现一个类的话，我们会用构造函数来模拟一个类，代码如下：\n\n```javascript\nfunction Animal(name) {\n  this.name = name;\n  this.height = function() {\n    console.log(this.name + \"的高度未知\");\n  };\n}\n\nAnimal.prototype.eat = function(food) {\n  console.log(this.name + \"正在吃\" + food);\n};\n```\n\n那现在我们需要继承这个`Animal`的类来实现一个具体的`Dog`类，我们一般会使用`组合继承`，方法如下：\n\n```javascript\nfunction Dog(name, age) {\n  Animal.call(this, name);\n  this.age = age;\n}\n\nDog.prototype = new Animal();\nDog.prototype.constructor = Dog;\n```\n\n目测是比较完美的继承方式了，但是仔细思考会发现有个问题：\n\n1. 在`Dog.prototype = new Animal()`执行了一次`Animal`实例；\n2. 在 Dog 类实例化时候，内部使用 call 方法的时候又执行了一次`Animal`实例化；\n\n所以这并不是最完美的继承方式。那么我们应该使用什么样的办法才能解决上述问题呢？这个时候就需要用到`寄生继承`方式，代码如下：\n\n```javascript\nfunction Dog(name, age) {\n  Animal.call(this, name);\n  this.age = age;\n}\n\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n\n利用一个中间对象先继承父类，减少了第一次继承父类原型的时候会实例化父类的缺点，这应该是目前最完美的继承方法。\n\n参考资料：\n\n1. [JS 组合继承（寄生继承）](https://www.jianshu.com/p/8a83ed26ecbb)\n2. [Javascript 完美继承方式 - 寄生组合](https://www.jianshu.com/p/5d53d06ea918)\n3. [理清原型对象、 实例对象、构造函数](https://juejin.im/post/5e6dec09f265da572c54a6e4)\n","slug":"js继承问题总结","published":1,"updated":"2024-02-20T06:48:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijul001llwxalndtgi8t","content":"<p>如果要用 js 实现一个类的话，我们会用构造函数来模拟一个类，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"的高度未知\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"正在吃\"</span> + food);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>那现在我们需要继承这个<code>Animal</code>的类来实现一个具体的<code>Dog</code>类，我们一般会使用<code>组合继承</code>，方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br></pre></td></tr></table></figure>\n\n<p>目测是比较完美的继承方式了，但是仔细思考会发现有个问题：</p>\n<ol>\n<li>在<code>Dog.prototype = new Animal()</code>执行了一次<code>Animal</code>实例；</li>\n<li>在 Dog 类实例化时候，内部使用 call 方法的时候又执行了一次<code>Animal</code>实例化；</li>\n</ol>\n<p>所以这并不是最完美的继承方式。那么我们应该使用什么样的办法才能解决上述问题呢？这个时候就需要用到<code>寄生继承</code>方式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br></pre></td></tr></table></figure>\n\n<p>利用一个中间对象先继承父类，减少了第一次继承父类原型的时候会实例化父类的缺点，这应该是目前最完美的继承方法。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/8a83ed26ecbb\" target=\"_blank\" rel=\"noopener\">JS 组合继承（寄生继承）</a></li>\n<li><a href=\"https://www.jianshu.com/p/5d53d06ea918\" target=\"_blank\" rel=\"noopener\">Javascript 完美继承方式 - 寄生组合</a></li>\n<li><a href=\"https://juejin.im/post/5e6dec09f265da572c54a6e4\" target=\"_blank\" rel=\"noopener\">理清原型对象、 实例对象、构造函数</a></li>\n</ol>\n","site":{"data":{}},"length":849,"excerpt":"","more":"<p>如果要用 js 实现一个类的话，我们会用构造函数来模拟一个类，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"的高度未知\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">food</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"正在吃\"</span> + food);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>那现在我们需要继承这个<code>Animal</code>的类来实现一个具体的<code>Dog</code>类，我们一般会使用<code>组合继承</code>，方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br></pre></td></tr></table></figure>\n\n<p>目测是比较完美的继承方式了，但是仔细思考会发现有个问题：</p>\n<ol>\n<li>在<code>Dog.prototype = new Animal()</code>执行了一次<code>Animal</code>实例；</li>\n<li>在 Dog 类实例化时候，内部使用 call 方法的时候又执行了一次<code>Animal</code>实例化；</li>\n</ol>\n<p>所以这并不是最完美的继承方式。那么我们应该使用什么样的办法才能解决上述问题呢？这个时候就需要用到<code>寄生继承</code>方式，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br></pre></td></tr></table></figure>\n\n<p>利用一个中间对象先继承父类，减少了第一次继承父类原型的时候会实例化父类的缺点，这应该是目前最完美的继承方法。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/8a83ed26ecbb\" target=\"_blank\" rel=\"noopener\">JS 组合继承（寄生继承）</a></li>\n<li><a href=\"https://www.jianshu.com/p/5d53d06ea918\" target=\"_blank\" rel=\"noopener\">Javascript 完美继承方式 - 寄生组合</a></li>\n<li><a href=\"https://juejin.im/post/5e6dec09f265da572c54a6e4\" target=\"_blank\" rel=\"noopener\">理清原型对象、 实例对象、构造函数</a></li>\n</ol>\n"},{"title":"linux常用指令记录","catalog":true,"date":"2019-03-25T12:41:36.000Z","subtitle":null,"header-img":null,"_content":"\n- 软连接\n\nln -s 软件源目录 /usr/local/bin/\n\n比如安装完 node 将`/app/software/nodejs/bin/node`的命令提示符直接通过`node`去访问\n\n```shell\n# ln -s 源文件bin目录 系统bin目录\nln -s /app/software/nodejs/bin/node /usr/local/bin/node\n```\n\n删除软连接\n\n```shell\nrm -rf /usr/local/bin/node\n```\n\n- 创建文件\n\n```shell\ntouch XXX\n```\n\n- 查看进程\n\n```shell\nnetstat -ntpl\n```\n\n- 查看使用指定端口的进程\n\nlsof -i:XXXX\n\n- 设置环境变量\n\n`vi /etc/profile`在文件的最下方倒数第三行里面编写变量名，例如：`export NGINX=/usr/local/webserver/nginx/conf` 保存之后不会立即生效，需要输入`source /etc/profile`，之后`echo $NGINX`查看是否生效\n\n- `rsync`跨服务器传输文件\n\n```shell\n  rsync  -rzte 'ssh -p 22' 源目录 目的地目录\n```\n\n要是服务器 A 要传文件到服务器 B，可能会存在没有权限的问题，这个时候就要 A 生成公钥`ssh-keygen`，将 A 的公钥`id_rsa.pub`内容复制到 B 服务器`.ssh/authorized_keys`内容下方，就可以解决权限问题了。\n\n---\n\n- 设置新建立的`shell`等脚本拥有可执行权限\n\n```shell\nchmod +x 路径\n```\n\n- 将指定用户/用户组加入到其他组\n\n```shell\n gpasswd -a www root   // www将入到root组\n```\n\n- 给指定目录以指定用户/用户组的所有权限\n\n事例：chown 用户名 目录\n\n```shell\nchown -R www:www /data/www-data/test\n```\n\n---\n\n- source\n\n用户登录系统会自动创建一个父`shell`，如果在这个父`shell`里面执行一个`shell`则为子`shell`，两者创建的变量是不会共享的，如果需要登陆的`shell`可以访问内部的`shell`变量，需要用`source`命令，在当前父`shell`窗口立刻执行子`shell`，能访问子`shell`变量，也不用注销用户登录。\n`export`是父`shell`暴露变量给子`shell`使用\n\n[source 详解](https://www.cnblogs.com/ThatsMyTiger/p/6865817.html)\n\n环境变量\n\n比如npm全局一些命令，如eslint、vue等这些，需要在`~`目录下新建`.bash_profile`文件\n\n```shell\n# 已重新设置npm全局目录为.npm-global\nexport PATH=~/.npm-global/bin:$PATH \n```\n\n每次打开一个子shell窗口时，都需要`source`命令来共享父shell暴露出来的变量，这样会很麻烦，可以新建一个`vim ~/.zshrc`文件\n\n```shell\nsource ~/.bash_profile\n```\n\n这个文件每次用户登录系统之后会默认执行此文件内容，这样就会在新建子shell的时候获取到父shell暴露出来的环境变量\n\n---\n\n- curl\n\n  -O 将指定地址的文件下载到本地\n\n```shell\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.6.tgz\n```\n\n---\n\n- tar 解压/压缩\n\n  -c: 压缩\n\n  -x：解压\n\n  -t：查看内容\n\n  -r：向压缩归档文件末尾追加文件\n\n  -u：更新原压缩包中的文件\n\n  -f：（必选且必须在最后一个参数）使用源文件名字\n\n  -z：有 gzip 属性的\n\n  -j：有 bz2 属性的\n\n  -Z：有 compress 属性的\n\n  -v：显示所有过程\n\n  -O：将文件解开到标准输出\n\n```shell\ntar -zxvf 源文件\n```\n\n- zip\n\n  -x 排除某个文件\n\n---\n\n- grep\n\n查找字符串中指定的字符\n\n```shell\n# grep -r '我要查找的字符' ./src\ngrep [-acinv] [--color=auto] '搜寻字符串' filename\n```\n\n选项与参数：\n-r : 在指定目录下搜索含有关键字的文件\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 '搜寻字符串' 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n--color=auto ：可以将找到的关键词部分加上颜色的显示喔！\n\n---\n\n- rm\n\n-r 向下遍历目录文件依次删除\n-f 强制删除\n\n全部删除但排除某个文件\n\n比如：排除.git 之外的所有文件\n\n```shell\nrm -rf `ls |grep -v .git`\n```\n\n---\n\n- cp\n\ncp -r 源目录地址 目标目录地址\n\n- 新打开一个 shell 自动执行一些配置项 在/root/.bashrc 下编辑默认环境变量 全部 shell 共享需要修改/etc/profile\n\n- ansible\n\n远程服务器 切换目录`chdir`\n\n```shell\nansible -i /opt/script/xxx.hosts duapp-node-common-service -u root -m shell -a 'chdir=/data/www-data/hupu.com/node-common sh start.sh'\n```\n\n---\n\n- 全局查找某个文件\n\n```shell\nfind / -name 文件名\n```\n\n常见错误处理参考链接：\n\n1. [nginx 在 reload 时候报错 invalid PID number](https://www.cnblogs.com/tielemao/p/6163419.html)\n2. [nginx: [emerg] invalid socket number ](https://blog.csdn.net/bikeorcl/article/details/78850265)\n\n---\n\n- 进程查看\n\nps -ef | grep\n\n- head 查看文档的开始指定数量的字符块，默认显示文档的前 10 行\n\n  - -c 显示文档开始的前c个字节\n  - -n 显示文档前n行\n  - -q 不显示包含给定文件名的文件头\n  - -v 显示包含给定文件名的文件头\n\n```bash\nlsof -i:8080 | grep node | head -n 1\n\nhead -c 5 head.txt\n```\n\n- vim 多行编辑\n\nctrl+v，选中多行，按 s 键进入插入模式，再次输入编辑的文案，最后按 ESC 键，即可完成多行编辑\n\n- bash 隐藏用户主机名称\n\n在 vim ~/.bash_profile 文件中更改 export PS1\n\n若啥也不显示 export PS1=''\n简单显示 export PS1='\\[\\033[01;32m\\]→ \\W \\[\\033[00m\\]'\n","source":"_posts/linux常用指令记录.md","raw":"---\ntitle: linux常用指令记录\ncatalog: true\ndate: 2019-03-25 20:41:36\nsubtitle:\nheader-img:\ntags: linux\ncategories: 运维\n---\n\n- 软连接\n\nln -s 软件源目录 /usr/local/bin/\n\n比如安装完 node 将`/app/software/nodejs/bin/node`的命令提示符直接通过`node`去访问\n\n```shell\n# ln -s 源文件bin目录 系统bin目录\nln -s /app/software/nodejs/bin/node /usr/local/bin/node\n```\n\n删除软连接\n\n```shell\nrm -rf /usr/local/bin/node\n```\n\n- 创建文件\n\n```shell\ntouch XXX\n```\n\n- 查看进程\n\n```shell\nnetstat -ntpl\n```\n\n- 查看使用指定端口的进程\n\nlsof -i:XXXX\n\n- 设置环境变量\n\n`vi /etc/profile`在文件的最下方倒数第三行里面编写变量名，例如：`export NGINX=/usr/local/webserver/nginx/conf` 保存之后不会立即生效，需要输入`source /etc/profile`，之后`echo $NGINX`查看是否生效\n\n- `rsync`跨服务器传输文件\n\n```shell\n  rsync  -rzte 'ssh -p 22' 源目录 目的地目录\n```\n\n要是服务器 A 要传文件到服务器 B，可能会存在没有权限的问题，这个时候就要 A 生成公钥`ssh-keygen`，将 A 的公钥`id_rsa.pub`内容复制到 B 服务器`.ssh/authorized_keys`内容下方，就可以解决权限问题了。\n\n---\n\n- 设置新建立的`shell`等脚本拥有可执行权限\n\n```shell\nchmod +x 路径\n```\n\n- 将指定用户/用户组加入到其他组\n\n```shell\n gpasswd -a www root   // www将入到root组\n```\n\n- 给指定目录以指定用户/用户组的所有权限\n\n事例：chown 用户名 目录\n\n```shell\nchown -R www:www /data/www-data/test\n```\n\n---\n\n- source\n\n用户登录系统会自动创建一个父`shell`，如果在这个父`shell`里面执行一个`shell`则为子`shell`，两者创建的变量是不会共享的，如果需要登陆的`shell`可以访问内部的`shell`变量，需要用`source`命令，在当前父`shell`窗口立刻执行子`shell`，能访问子`shell`变量，也不用注销用户登录。\n`export`是父`shell`暴露变量给子`shell`使用\n\n[source 详解](https://www.cnblogs.com/ThatsMyTiger/p/6865817.html)\n\n环境变量\n\n比如npm全局一些命令，如eslint、vue等这些，需要在`~`目录下新建`.bash_profile`文件\n\n```shell\n# 已重新设置npm全局目录为.npm-global\nexport PATH=~/.npm-global/bin:$PATH \n```\n\n每次打开一个子shell窗口时，都需要`source`命令来共享父shell暴露出来的变量，这样会很麻烦，可以新建一个`vim ~/.zshrc`文件\n\n```shell\nsource ~/.bash_profile\n```\n\n这个文件每次用户登录系统之后会默认执行此文件内容，这样就会在新建子shell的时候获取到父shell暴露出来的环境变量\n\n---\n\n- curl\n\n  -O 将指定地址的文件下载到本地\n\n```shell\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.6.tgz\n```\n\n---\n\n- tar 解压/压缩\n\n  -c: 压缩\n\n  -x：解压\n\n  -t：查看内容\n\n  -r：向压缩归档文件末尾追加文件\n\n  -u：更新原压缩包中的文件\n\n  -f：（必选且必须在最后一个参数）使用源文件名字\n\n  -z：有 gzip 属性的\n\n  -j：有 bz2 属性的\n\n  -Z：有 compress 属性的\n\n  -v：显示所有过程\n\n  -O：将文件解开到标准输出\n\n```shell\ntar -zxvf 源文件\n```\n\n- zip\n\n  -x 排除某个文件\n\n---\n\n- grep\n\n查找字符串中指定的字符\n\n```shell\n# grep -r '我要查找的字符' ./src\ngrep [-acinv] [--color=auto] '搜寻字符串' filename\n```\n\n选项与参数：\n-r : 在指定目录下搜索含有关键字的文件\n-a ：将 binary 文件以 text 文件的方式搜寻数据\n-c ：计算找到 '搜寻字符串' 的次数\n-i ：忽略大小写的不同，所以大小写视为相同\n-n ：顺便输出行号\n-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n--color=auto ：可以将找到的关键词部分加上颜色的显示喔！\n\n---\n\n- rm\n\n-r 向下遍历目录文件依次删除\n-f 强制删除\n\n全部删除但排除某个文件\n\n比如：排除.git 之外的所有文件\n\n```shell\nrm -rf `ls |grep -v .git`\n```\n\n---\n\n- cp\n\ncp -r 源目录地址 目标目录地址\n\n- 新打开一个 shell 自动执行一些配置项 在/root/.bashrc 下编辑默认环境变量 全部 shell 共享需要修改/etc/profile\n\n- ansible\n\n远程服务器 切换目录`chdir`\n\n```shell\nansible -i /opt/script/xxx.hosts duapp-node-common-service -u root -m shell -a 'chdir=/data/www-data/hupu.com/node-common sh start.sh'\n```\n\n---\n\n- 全局查找某个文件\n\n```shell\nfind / -name 文件名\n```\n\n常见错误处理参考链接：\n\n1. [nginx 在 reload 时候报错 invalid PID number](https://www.cnblogs.com/tielemao/p/6163419.html)\n2. [nginx: [emerg] invalid socket number ](https://blog.csdn.net/bikeorcl/article/details/78850265)\n\n---\n\n- 进程查看\n\nps -ef | grep\n\n- head 查看文档的开始指定数量的字符块，默认显示文档的前 10 行\n\n  - -c 显示文档开始的前c个字节\n  - -n 显示文档前n行\n  - -q 不显示包含给定文件名的文件头\n  - -v 显示包含给定文件名的文件头\n\n```bash\nlsof -i:8080 | grep node | head -n 1\n\nhead -c 5 head.txt\n```\n\n- vim 多行编辑\n\nctrl+v，选中多行，按 s 键进入插入模式，再次输入编辑的文案，最后按 ESC 键，即可完成多行编辑\n\n- bash 隐藏用户主机名称\n\n在 vim ~/.bash_profile 文件中更改 export PS1\n\n若啥也不显示 export PS1=''\n简单显示 export PS1='\\[\\033[01;32m\\]→ \\W \\[\\033[00m\\]'\n","slug":"linux常用指令记录","published":1,"updated":"2024-02-20T06:48:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijun001olwxamfoy9whl","content":"<ul>\n<li>软连接</li>\n</ul>\n<p>ln -s 软件源目录 /usr/local/bin/</p>\n<p>比如安装完 node 将<code>/app/software/nodejs/bin/node</code>的命令提示符直接通过<code>node</code>去访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s 源文件bin目录 系统bin目录</span></span><br><span class=\"line\">ln -s /app/software/nodejs/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n\n<p>删除软连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch XXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看进程</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看使用指定端口的进程</li>\n</ul>\n<p>lsof -i:XXXX</p>\n<ul>\n<li>设置环境变量</li>\n</ul>\n<p><code>vi /etc/profile</code>在文件的最下方倒数第三行里面编写变量名，例如：<code>export NGINX=/usr/local/webserver/nginx/conf</code> 保存之后不会立即生效，需要输入<code>source /etc/profile</code>，之后<code>echo $NGINX</code>查看是否生效</p>\n<ul>\n<li><code>rsync</code>跨服务器传输文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync  -rzte 'ssh -p 22' 源目录 目的地目录</span><br></pre></td></tr></table></figure>\n\n<p>要是服务器 A 要传文件到服务器 B，可能会存在没有权限的问题，这个时候就要 A 生成公钥<code>ssh-keygen</code>，将 A 的公钥<code>id_rsa.pub</code>内容复制到 B 服务器<code>.ssh/authorized_keys</code>内容下方，就可以解决权限问题了。</p>\n<hr>\n<ul>\n<li>设置新建立的<code>shell</code>等脚本拥有可执行权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x 路径</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将指定用户/用户组加入到其他组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd -a www root   // www将入到root组</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给指定目录以指定用户/用户组的所有权限</li>\n</ul>\n<p>事例：chown 用户名 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R www:www /data/www-data/test</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>source</li>\n</ul>\n<p>用户登录系统会自动创建一个父<code>shell</code>，如果在这个父<code>shell</code>里面执行一个<code>shell</code>则为子<code>shell</code>，两者创建的变量是不会共享的，如果需要登陆的<code>shell</code>可以访问内部的<code>shell</code>变量，需要用<code>source</code>命令，在当前父<code>shell</code>窗口立刻执行子<code>shell</code>，能访问子<code>shell</code>变量，也不用注销用户登录。<br><code>export</code>是父<code>shell</code>暴露变量给子<code>shell</code>使用</p>\n<p><a href=\"https://www.cnblogs.com/ThatsMyTiger/p/6865817.html\" target=\"_blank\" rel=\"noopener\">source 详解</a></p>\n<p>环境变量</p>\n<p>比如npm全局一些命令，如eslint、vue等这些，需要在<code>~</code>目录下新建<code>.bash_profile</code>文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 已重新设置npm全局目录为.npm-global</span></span><br><span class=\"line\">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>每次打开一个子shell窗口时，都需要<code>source</code>命令来共享父shell暴露出来的变量，这样会很麻烦，可以新建一个<code>vim ~/.zshrc</code>文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>这个文件每次用户登录系统之后会默认执行此文件内容，这样就会在新建子shell的时候获取到父shell暴露出来的环境变量</p>\n<hr>\n<ul>\n<li><p>curl</p>\n<p>-O 将指定地址的文件下载到本地</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.6.tgz</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li><p>tar 解压/压缩</p>\n<p>-c: 压缩</p>\n<p>-x：解压</p>\n<p>-t：查看内容</p>\n<p>-r：向压缩归档文件末尾追加文件</p>\n<p>-u：更新原压缩包中的文件</p>\n<p>-f：（必选且必须在最后一个参数）使用源文件名字</p>\n<p>-z：有 gzip 属性的</p>\n<p>-j：有 bz2 属性的</p>\n<p>-Z：有 compress 属性的</p>\n<p>-v：显示所有过程</p>\n<p>-O：将文件解开到标准输出</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf 源文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>zip</p>\n<p>-x 排除某个文件</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>grep</li>\n</ul>\n<p>查找字符串中指定的字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> grep -r <span class=\"string\">'我要查找的字符'</span> ./src</span></span><br><span class=\"line\">grep [-acinv] [--color=auto] '搜寻字符串' filename</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：<br>-r : 在指定目录下搜索含有关键字的文件<br>-a ：将 binary 文件以 text 文件的方式搜寻数据<br>-c ：计算找到 ‘搜寻字符串’ 的次数<br>-i ：忽略大小写的不同，所以大小写视为相同<br>-n ：顺便输出行号<br>-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！<br>–color=auto ：可以将找到的关键词部分加上颜色的显示喔！</p>\n<hr>\n<ul>\n<li>rm</li>\n</ul>\n<p>-r 向下遍历目录文件依次删除<br>-f 强制删除</p>\n<p>全部删除但排除某个文件</p>\n<p>比如：排除.git 之外的所有文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf `ls |grep -v .git`</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>cp</li>\n</ul>\n<p>cp -r 源目录地址 目标目录地址</p>\n<ul>\n<li><p>新打开一个 shell 自动执行一些配置项 在/root/.bashrc 下编辑默认环境变量 全部 shell 共享需要修改/etc/profile</p>\n</li>\n<li><p>ansible</p>\n</li>\n</ul>\n<p>远程服务器 切换目录<code>chdir</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i /opt/script/xxx.hosts duapp-node-common-service -u root -m shell -a 'chdir=/data/www-data/hupu.com/node-common sh start.sh'</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>全局查找某个文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name 文件名</span><br></pre></td></tr></table></figure>\n\n<p>常见错误处理参考链接：</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/tielemao/p/6163419.html\" target=\"_blank\" rel=\"noopener\">nginx 在 reload 时候报错 invalid PID number</a></li>\n<li><a href=\"https://blog.csdn.net/bikeorcl/article/details/78850265\" target=\"_blank\" rel=\"noopener\">nginx: [emerg] invalid socket number </a></li>\n</ol>\n<hr>\n<ul>\n<li>进程查看</li>\n</ul>\n<p>ps -ef | grep</p>\n<ul>\n<li><p>head 查看文档的开始指定数量的字符块，默认显示文档的前 10 行</p>\n<ul>\n<li>-c 显示文档开始的前c个字节</li>\n<li>-n 显示文档前n行</li>\n<li>-q 不显示包含给定文件名的文件头</li>\n<li>-v 显示包含给定文件名的文件头</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8080 | grep node | head -n 1</span><br><span class=\"line\"></span><br><span class=\"line\">head -c 5 head.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>vim 多行编辑</li>\n</ul>\n<p>ctrl+v，选中多行，按 s 键进入插入模式，再次输入编辑的文案，最后按 ESC 键，即可完成多行编辑</p>\n<ul>\n<li>bash 隐藏用户主机名称</li>\n</ul>\n<p>在 vim ~/.bash_profile 文件中更改 export PS1</p>\n<p>若啥也不显示 export PS1=’’<br>简单显示 export PS1=’[\\033[01;32m]→ \\W [\\033[00m]‘</p>\n","site":{"data":{}},"length":2313,"excerpt":"","more":"<ul>\n<li>软连接</li>\n</ul>\n<p>ln -s 软件源目录 /usr/local/bin/</p>\n<p>比如安装完 node 将<code>/app/software/nodejs/bin/node</code>的命令提示符直接通过<code>node</code>去访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s 源文件bin目录 系统bin目录</span></span><br><span class=\"line\">ln -s /app/software/nodejs/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n\n<p>删除软连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch XXX</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看进程</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看使用指定端口的进程</li>\n</ul>\n<p>lsof -i:XXXX</p>\n<ul>\n<li>设置环境变量</li>\n</ul>\n<p><code>vi /etc/profile</code>在文件的最下方倒数第三行里面编写变量名，例如：<code>export NGINX=/usr/local/webserver/nginx/conf</code> 保存之后不会立即生效，需要输入<code>source /etc/profile</code>，之后<code>echo $NGINX</code>查看是否生效</p>\n<ul>\n<li><code>rsync</code>跨服务器传输文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync  -rzte 'ssh -p 22' 源目录 目的地目录</span><br></pre></td></tr></table></figure>\n\n<p>要是服务器 A 要传文件到服务器 B，可能会存在没有权限的问题，这个时候就要 A 生成公钥<code>ssh-keygen</code>，将 A 的公钥<code>id_rsa.pub</code>内容复制到 B 服务器<code>.ssh/authorized_keys</code>内容下方，就可以解决权限问题了。</p>\n<hr>\n<ul>\n<li>设置新建立的<code>shell</code>等脚本拥有可执行权限</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x 路径</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将指定用户/用户组加入到其他组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpasswd -a www root   // www将入到root组</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>给指定目录以指定用户/用户组的所有权限</li>\n</ul>\n<p>事例：chown 用户名 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R www:www /data/www-data/test</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>source</li>\n</ul>\n<p>用户登录系统会自动创建一个父<code>shell</code>，如果在这个父<code>shell</code>里面执行一个<code>shell</code>则为子<code>shell</code>，两者创建的变量是不会共享的，如果需要登陆的<code>shell</code>可以访问内部的<code>shell</code>变量，需要用<code>source</code>命令，在当前父<code>shell</code>窗口立刻执行子<code>shell</code>，能访问子<code>shell</code>变量，也不用注销用户登录。<br><code>export</code>是父<code>shell</code>暴露变量给子<code>shell</code>使用</p>\n<p><a href=\"https://www.cnblogs.com/ThatsMyTiger/p/6865817.html\" target=\"_blank\" rel=\"noopener\">source 详解</a></p>\n<p>环境变量</p>\n<p>比如npm全局一些命令，如eslint、vue等这些，需要在<code>~</code>目录下新建<code>.bash_profile</code>文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 已重新设置npm全局目录为.npm-global</span></span><br><span class=\"line\">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>每次打开一个子shell窗口时，都需要<code>source</code>命令来共享父shell暴露出来的变量，这样会很麻烦，可以新建一个<code>vim ~/.zshrc</code>文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>这个文件每次用户登录系统之后会默认执行此文件内容，这样就会在新建子shell的时候获取到父shell暴露出来的环境变量</p>\n<hr>\n<ul>\n<li><p>curl</p>\n<p>-O 将指定地址的文件下载到本地</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.6.tgz</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li><p>tar 解压/压缩</p>\n<p>-c: 压缩</p>\n<p>-x：解压</p>\n<p>-t：查看内容</p>\n<p>-r：向压缩归档文件末尾追加文件</p>\n<p>-u：更新原压缩包中的文件</p>\n<p>-f：（必选且必须在最后一个参数）使用源文件名字</p>\n<p>-z：有 gzip 属性的</p>\n<p>-j：有 bz2 属性的</p>\n<p>-Z：有 compress 属性的</p>\n<p>-v：显示所有过程</p>\n<p>-O：将文件解开到标准输出</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf 源文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>zip</p>\n<p>-x 排除某个文件</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>grep</li>\n</ul>\n<p>查找字符串中指定的字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> grep -r <span class=\"string\">'我要查找的字符'</span> ./src</span></span><br><span class=\"line\">grep [-acinv] [--color=auto] '搜寻字符串' filename</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：<br>-r : 在指定目录下搜索含有关键字的文件<br>-a ：将 binary 文件以 text 文件的方式搜寻数据<br>-c ：计算找到 ‘搜寻字符串’ 的次数<br>-i ：忽略大小写的不同，所以大小写视为相同<br>-n ：顺便输出行号<br>-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！<br>–color=auto ：可以将找到的关键词部分加上颜色的显示喔！</p>\n<hr>\n<ul>\n<li>rm</li>\n</ul>\n<p>-r 向下遍历目录文件依次删除<br>-f 强制删除</p>\n<p>全部删除但排除某个文件</p>\n<p>比如：排除.git 之外的所有文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf `ls |grep -v .git`</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>cp</li>\n</ul>\n<p>cp -r 源目录地址 目标目录地址</p>\n<ul>\n<li><p>新打开一个 shell 自动执行一些配置项 在/root/.bashrc 下编辑默认环境变量 全部 shell 共享需要修改/etc/profile</p>\n</li>\n<li><p>ansible</p>\n</li>\n</ul>\n<p>远程服务器 切换目录<code>chdir</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i /opt/script/xxx.hosts duapp-node-common-service -u root -m shell -a 'chdir=/data/www-data/hupu.com/node-common sh start.sh'</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>全局查找某个文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name 文件名</span><br></pre></td></tr></table></figure>\n\n<p>常见错误处理参考链接：</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/tielemao/p/6163419.html\" target=\"_blank\" rel=\"noopener\">nginx 在 reload 时候报错 invalid PID number</a></li>\n<li><a href=\"https://blog.csdn.net/bikeorcl/article/details/78850265\" target=\"_blank\" rel=\"noopener\">nginx: [emerg] invalid socket number </a></li>\n</ol>\n<hr>\n<ul>\n<li>进程查看</li>\n</ul>\n<p>ps -ef | grep</p>\n<ul>\n<li><p>head 查看文档的开始指定数量的字符块，默认显示文档的前 10 行</p>\n<ul>\n<li>-c 显示文档开始的前c个字节</li>\n<li>-n 显示文档前n行</li>\n<li>-q 不显示包含给定文件名的文件头</li>\n<li>-v 显示包含给定文件名的文件头</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8080 | grep node | head -n 1</span><br><span class=\"line\"></span><br><span class=\"line\">head -c 5 head.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>vim 多行编辑</li>\n</ul>\n<p>ctrl+v，选中多行，按 s 键进入插入模式，再次输入编辑的文案，最后按 ESC 键，即可完成多行编辑</p>\n<ul>\n<li>bash 隐藏用户主机名称</li>\n</ul>\n<p>在 vim ~/.bash_profile 文件中更改 export PS1</p>\n<p>若啥也不显示 export PS1=’’<br>简单显示 export PS1=’[\\033[01;32m]→ \\W [\\033[00m]‘</p>\n"},{"title":"nginx入门","catalog":true,"date":"2019-06-19T05:34:23.000Z","subtitle":null,"header-img":null,"_content":"\n1. 环境\n\n   CENTOS>=7.0,位数 X64 CENTOS 7.2\n\n2. 关闭 iptables\n\n   iptables 命令是 Linux 上常用的防火墙软件\n\n   | 功能           | 命令                                |\n   | :------------- | :---------------------------------- |\n   | 停止防火墙     | systemctl stop firewalld.service    |\n   | 永久关闭防火墙 | systemctl disable firewalld.service |\n\n3. 安装依赖\n\n   ```shell\n   yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n   yum  -y install wget httpd-tools vim\n   ```\n\n4. 开始安装 nginx\n\n   新建一个文件\n\n   ```shell\n   vi /etc/yum.repos.d/nginx.repo\n   ```\n\n   内容输入如下：\n\n   ```shell\n   [nginx]\n   name=nginx repo\n   baseurl=http://nginx.org/packages/centos/7/$basearch/\n   gpgcheck=0\n   enabled=1\n   ```\n\n   其中 centos/7 根据自己运行环境配置 系统名/版本号\n\n   下载 nginx\n\n   ```shell\n   yum install nginx -y\n   nginx -v\n   nginx -V\n   ```\n\n---\n\n## nginx 常用操作\n\n1. 查看配置文件和目录\n\n   ```shell\n   rpm -ql nginx\n   ```\n\n   相关文件说明：\n\n   | 类型     | 路径                                                                                                                              | 用途                                           |\n   | :------- | :-------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------- |\n   | 配置文件 | /etc/logrotate.d/nginx                                                                                                            | 用于 logrotate 服务的日志切割                  |\n   | 配置文件 | /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf                                                 | 主配置文件                                     |\n   | 配置文件 | /etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params                                                          | cgi 配置,fastcgi 配置                          |\n   | 配置文件 | /etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf                                                                          | 编码转换映射转化文件                           |\n   | 配置文件 | /etc/nginx/mime.types                                                                                                             | 设置 http 协议的 Content-Type 与扩展名对应关系 |\n   | 配置文件 | /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug | 用于配置系统守护进程管理器管理方式             |\n   | 配置文件 | /etc/nginx/modules /usr/lib64/nginx/modules                                                                                       | nginx 模块目录                                 |\n   | 命令     | /usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT                                                                 | nginx 的手册和帮助文件                         |\n   | 目录     | /var/cache/nginx                                                                                                                  | nginx 的缓存目录                               |\n   | 目录     | /var/log/nginx                                                                                                                    | nginx 的日志目录                               |\n\n2. 启动和重新加载以及关闭\n\n   ```shell\n   systemctl restart nginx.service\n   systemctl reload nginx.service\n   systemctl stop nginx.service\n\n   nginx -s reload\n   ```\n\n   如果在启动的时候可能会遇到下列问题：\n\n   1. 端口被占用；\n\n   ```shell\n   Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] still could not bind\n\n   ```\n\n   可以先查看进程，再杀死对应进程\n\n   ```shell\n   netstat -ntpl\n\n   kill 进程号\n   ```\n\n3. 配置 nginx\n\n> /etc/nginx/nginx.conf\n\n查看日志命令 tailf -f log 目录\n\n```shell\n  user  nginx;   设置nginx服务的系统使用用户\n  worker_processes  1;  工作进程数,一般和CPU数量相同\n\n  error_log  /var/log/nginx/error.log warn;   nginx的错误日志\n  pid        /var/run/nginx.pid;   nginx服务启动时的pid\n\n  events {\n      worker_connections  1024;每个进程允许的最大连接数 10000\n  }\n\n  http {\n      include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系\n      default_type  application/octet-stream;//默认content-type\n\n      log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式\n\n      access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应\n\n      sendfile        on;//启用sendfile\n      #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）\n      #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率\n\n      keepalive_timeout  65;//超时时间是65秒\n\n      #gzip  on;gzip压缩\n\n      include /etc/nginx/conf.d/*.conf;//包含的子配置文件\n  }\n```\n\n> /etc/default.conf\n\n```shell\n  server {\n      listen       80;\n      # 用域名方式访问的地址\n      server_name  localhost;\n\n      #charset koi8-r; //编码\n      #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称\n\n      # 代理http协议请求\n      location /api {\n          proxy_pass http://localhost:3000;\n      }\n\n      # 代理ws协议请求\n      location /ws {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection ‘Upgrade‘;\n      }\n\n\n\n        # 代理/api/路径的请求 并去掉/api/路径进行转发\n        location ~ /api/ {\n            rewrite /api/(.*)$ /$1 break;\n            proxy_pass  http://www.baidu.com;\n        }\n\n        location ~ / {\n            root /data/www-data/bolton/;\n            try_files $uri $uri/ /index.html;\n            index index.html;\n        }\n\n\n\n\n\n\n\n      # 转发请求静态资源（js、css）规则\n      location ~ .*\\.(html|js|css)$ {\n          # CORS\n          add_header Access-Control-Allow-Origin *;\n          add_header Access-Control-Allow-Methods GET,POST,DELETE;\n          add_header Access-Control-Allow-Headers Content-Type;\n          # 默认带上客户端cookie\n          add_header Access-Control-Allow-Credentials true;\n          # 缓存1h\n          expires 1h;\n          # 开启gzip\n          gzip on;\n          # gzip压缩HTTP版本号 一般是1.1\n          gzip_http_version 1.1;\n          # gzip压缩等级 越大压缩率越高 1-9\n          gzip_comp_level 2;\n          # 默认不指定不会缓存css资源 需要指定text/css类型\n          gzip_types application/javascript text/css;\n          # 资源目录\n          root /data/html;\n      }\n\n      # 设置图片请求规则\n      location ~ .*\\.(gif|png|jpg|webp)$ {\n          expires 1h;\n          gzip on;\n          gzip_http_version 1.1;\n          gzip_comp_level 3;\n          gzip_types image/jpeg image/png image/gif image/webp;\n          ## 防盗链\n          ## valid_referers 合法的域名 *.baidu.com\n          ## <meta name=\"referrer\" content=\"never\">\n          valid_referers none blocked xx.xxx.xxx.xx;\n          if ($invalid_referer) {\n              return 403;\n          }\n          # 资源目录\n          root /data/html;\n      }\n\n      location ~ ^/download {\n          # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩\n          # linux下运行gzip 文件名会生成压缩gz文件\n          # url最直接访问该文件路径就会自动启动下载该资源\n          gzip_static on;\n          tcp_nopush on;\n          root /data/download;\n      }\n\n      location / {\n          root   /usr/share/nginx/html;  //静态文件根目录\n          index  index.html index.htm;  //首页的索引文件\n      }\n\n      #error_page  404              /404.html;  //指定错误页面\n\n      # redirect server error pages to the static page /50x.html\n      # 把后台错误重定向到静态的50x.html页面\n      error_page   500 502 503 504  /50x.html;\n      location = /50x.html {\n          root   /usr/share/nginx/html;\n      }\n\n      # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n      # 把PHP脚本9000端口上监听的FastCGI服务\n      #location ~ \\.php$ {\n      #    root           html;\n      #    fastcgi_pass   127.0.0.1:9000;\n      #    fastcgi_index  index.php;\n      #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n      #    include        fastcgi_params;\n      #}\n\n      # 不允许访问.htaccess文件 只允许指定的ip访问\n      location ~ /\\.ht {\n          allow 127.0.0.1\n          deny  all;\n      }\n  }\n```\n\n> 实现负载均衡\n\n1. 解决高并发、海量数据问题\n2. 配置类型\n\n   1. 轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；\n   2. ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定放一个后端服务器，可以解决 session 的问题；\n   3. weight（加权轮询）指定轮询策略，weight 和访问比率成正比，用于后端服务器性能不均的情况；\n   4. least_conn 最小连接数，哪个连接少就分给谁。\n\n   集群状态：\n\n| 状态         | 描述                                  |\n| :----------- | :------------------------------------ |\n| down         | 不参与负载均衡                        |\n| backup       | 备份的服务器                          |\n| max_fails    | 允许请求失败的次数                    |\n| fail_timeout | 经过 max_fails 失败后，服务暂停的时间 |\n| max_conts    | 限制最大的接收的连接数                |\n\n```shell\n    upstream test1 {\n        ip_hsah;\n        server http://localhost:3000 weight=2;\n        server http://localhost:4000 weight=1;\n        server http://localhost:5000 down;\n    }\n\n    server {\n        # 访问负载均衡构造的集群\n        location / {\n            # 和upstrem的name对应\n            proxy_pass http://test1;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test1.com;\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test2.com;\n        location / {\n            proxy_pass http://localhost:4000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test3.com;\n        location / {\n            proxy_pass http://localhost:5000;\n        }\n    }\n\n```\n\n此时访问`www.test.com`通过代理到访问`www.test1.com`，而访问 test1 的请求被负载均衡按照策略访问 test1 或者 test2\n","source":"_posts/nginx入门.md","raw":"---\ntitle: nginx入门\ncatalog: true\ndate: 2019-06-19 13:34:23\nsubtitle:\nheader-img:\ntags: nginx\ncategories: 运维\n---\n\n1. 环境\n\n   CENTOS>=7.0,位数 X64 CENTOS 7.2\n\n2. 关闭 iptables\n\n   iptables 命令是 Linux 上常用的防火墙软件\n\n   | 功能           | 命令                                |\n   | :------------- | :---------------------------------- |\n   | 停止防火墙     | systemctl stop firewalld.service    |\n   | 永久关闭防火墙 | systemctl disable firewalld.service |\n\n3. 安装依赖\n\n   ```shell\n   yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n   yum  -y install wget httpd-tools vim\n   ```\n\n4. 开始安装 nginx\n\n   新建一个文件\n\n   ```shell\n   vi /etc/yum.repos.d/nginx.repo\n   ```\n\n   内容输入如下：\n\n   ```shell\n   [nginx]\n   name=nginx repo\n   baseurl=http://nginx.org/packages/centos/7/$basearch/\n   gpgcheck=0\n   enabled=1\n   ```\n\n   其中 centos/7 根据自己运行环境配置 系统名/版本号\n\n   下载 nginx\n\n   ```shell\n   yum install nginx -y\n   nginx -v\n   nginx -V\n   ```\n\n---\n\n## nginx 常用操作\n\n1. 查看配置文件和目录\n\n   ```shell\n   rpm -ql nginx\n   ```\n\n   相关文件说明：\n\n   | 类型     | 路径                                                                                                                              | 用途                                           |\n   | :------- | :-------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------- |\n   | 配置文件 | /etc/logrotate.d/nginx                                                                                                            | 用于 logrotate 服务的日志切割                  |\n   | 配置文件 | /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf                                                 | 主配置文件                                     |\n   | 配置文件 | /etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params                                                          | cgi 配置,fastcgi 配置                          |\n   | 配置文件 | /etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf                                                                          | 编码转换映射转化文件                           |\n   | 配置文件 | /etc/nginx/mime.types                                                                                                             | 设置 http 协议的 Content-Type 与扩展名对应关系 |\n   | 配置文件 | /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug | 用于配置系统守护进程管理器管理方式             |\n   | 配置文件 | /etc/nginx/modules /usr/lib64/nginx/modules                                                                                       | nginx 模块目录                                 |\n   | 命令     | /usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT                                                                 | nginx 的手册和帮助文件                         |\n   | 目录     | /var/cache/nginx                                                                                                                  | nginx 的缓存目录                               |\n   | 目录     | /var/log/nginx                                                                                                                    | nginx 的日志目录                               |\n\n2. 启动和重新加载以及关闭\n\n   ```shell\n   systemctl restart nginx.service\n   systemctl reload nginx.service\n   systemctl stop nginx.service\n\n   nginx -s reload\n   ```\n\n   如果在启动的时候可能会遇到下列问题：\n\n   1. 端口被占用；\n\n   ```shell\n   Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)\n   nginx: [emerg] still could not bind\n\n   ```\n\n   可以先查看进程，再杀死对应进程\n\n   ```shell\n   netstat -ntpl\n\n   kill 进程号\n   ```\n\n3. 配置 nginx\n\n> /etc/nginx/nginx.conf\n\n查看日志命令 tailf -f log 目录\n\n```shell\n  user  nginx;   设置nginx服务的系统使用用户\n  worker_processes  1;  工作进程数,一般和CPU数量相同\n\n  error_log  /var/log/nginx/error.log warn;   nginx的错误日志\n  pid        /var/run/nginx.pid;   nginx服务启动时的pid\n\n  events {\n      worker_connections  1024;每个进程允许的最大连接数 10000\n  }\n\n  http {\n      include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系\n      default_type  application/octet-stream;//默认content-type\n\n      log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式\n\n      access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应\n\n      sendfile        on;//启用sendfile\n      #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）\n      #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率\n\n      keepalive_timeout  65;//超时时间是65秒\n\n      #gzip  on;gzip压缩\n\n      include /etc/nginx/conf.d/*.conf;//包含的子配置文件\n  }\n```\n\n> /etc/default.conf\n\n```shell\n  server {\n      listen       80;\n      # 用域名方式访问的地址\n      server_name  localhost;\n\n      #charset koi8-r; //编码\n      #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称\n\n      # 代理http协议请求\n      location /api {\n          proxy_pass http://localhost:3000;\n      }\n\n      # 代理ws协议请求\n      location /ws {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection ‘Upgrade‘;\n      }\n\n\n\n        # 代理/api/路径的请求 并去掉/api/路径进行转发\n        location ~ /api/ {\n            rewrite /api/(.*)$ /$1 break;\n            proxy_pass  http://www.baidu.com;\n        }\n\n        location ~ / {\n            root /data/www-data/bolton/;\n            try_files $uri $uri/ /index.html;\n            index index.html;\n        }\n\n\n\n\n\n\n\n      # 转发请求静态资源（js、css）规则\n      location ~ .*\\.(html|js|css)$ {\n          # CORS\n          add_header Access-Control-Allow-Origin *;\n          add_header Access-Control-Allow-Methods GET,POST,DELETE;\n          add_header Access-Control-Allow-Headers Content-Type;\n          # 默认带上客户端cookie\n          add_header Access-Control-Allow-Credentials true;\n          # 缓存1h\n          expires 1h;\n          # 开启gzip\n          gzip on;\n          # gzip压缩HTTP版本号 一般是1.1\n          gzip_http_version 1.1;\n          # gzip压缩等级 越大压缩率越高 1-9\n          gzip_comp_level 2;\n          # 默认不指定不会缓存css资源 需要指定text/css类型\n          gzip_types application/javascript text/css;\n          # 资源目录\n          root /data/html;\n      }\n\n      # 设置图片请求规则\n      location ~ .*\\.(gif|png|jpg|webp)$ {\n          expires 1h;\n          gzip on;\n          gzip_http_version 1.1;\n          gzip_comp_level 3;\n          gzip_types image/jpeg image/png image/gif image/webp;\n          ## 防盗链\n          ## valid_referers 合法的域名 *.baidu.com\n          ## <meta name=\"referrer\" content=\"never\">\n          valid_referers none blocked xx.xxx.xxx.xx;\n          if ($invalid_referer) {\n              return 403;\n          }\n          # 资源目录\n          root /data/html;\n      }\n\n      location ~ ^/download {\n          # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩\n          # linux下运行gzip 文件名会生成压缩gz文件\n          # url最直接访问该文件路径就会自动启动下载该资源\n          gzip_static on;\n          tcp_nopush on;\n          root /data/download;\n      }\n\n      location / {\n          root   /usr/share/nginx/html;  //静态文件根目录\n          index  index.html index.htm;  //首页的索引文件\n      }\n\n      #error_page  404              /404.html;  //指定错误页面\n\n      # redirect server error pages to the static page /50x.html\n      # 把后台错误重定向到静态的50x.html页面\n      error_page   500 502 503 504  /50x.html;\n      location = /50x.html {\n          root   /usr/share/nginx/html;\n      }\n\n      # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n      # 把PHP脚本9000端口上监听的FastCGI服务\n      #location ~ \\.php$ {\n      #    root           html;\n      #    fastcgi_pass   127.0.0.1:9000;\n      #    fastcgi_index  index.php;\n      #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n      #    include        fastcgi_params;\n      #}\n\n      # 不允许访问.htaccess文件 只允许指定的ip访问\n      location ~ /\\.ht {\n          allow 127.0.0.1\n          deny  all;\n      }\n  }\n```\n\n> 实现负载均衡\n\n1. 解决高并发、海量数据问题\n2. 配置类型\n\n   1. 轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；\n   2. ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定放一个后端服务器，可以解决 session 的问题；\n   3. weight（加权轮询）指定轮询策略，weight 和访问比率成正比，用于后端服务器性能不均的情况；\n   4. least_conn 最小连接数，哪个连接少就分给谁。\n\n   集群状态：\n\n| 状态         | 描述                                  |\n| :----------- | :------------------------------------ |\n| down         | 不参与负载均衡                        |\n| backup       | 备份的服务器                          |\n| max_fails    | 允许请求失败的次数                    |\n| fail_timeout | 经过 max_fails 失败后，服务暂停的时间 |\n| max_conts    | 限制最大的接收的连接数                |\n\n```shell\n    upstream test1 {\n        ip_hsah;\n        server http://localhost:3000 weight=2;\n        server http://localhost:4000 weight=1;\n        server http://localhost:5000 down;\n    }\n\n    server {\n        # 访问负载均衡构造的集群\n        location / {\n            # 和upstrem的name对应\n            proxy_pass http://test1;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test1.com;\n        location / {\n            proxy_pass http://localhost:3000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test2.com;\n        location / {\n            proxy_pass http://localhost:4000;\n        }\n    }\n    server {\n        listen 80;\n        server_name www.test3.com;\n        location / {\n            proxy_pass http://localhost:5000;\n        }\n    }\n\n```\n\n此时访问`www.test.com`通过代理到访问`www.test1.com`，而访问 test1 的请求被负载均衡按照策略访问 test1 或者 test2\n","slug":"nginx入门","published":1,"updated":"2024-02-20T06:48:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuq001slwxa8ws1a7bx","content":"<ol>\n<li><p>环境</p>\n<p>CENTOS&gt;=7.0,位数 X64 CENTOS 7.2</p>\n</li>\n<li><p>关闭 iptables</p>\n<p>iptables 命令是 Linux 上常用的防火墙软件</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">停止防火墙</td>\n<td align=\"left\">systemctl stop firewalld.service</td>\n</tr>\n<tr>\n<td align=\"left\">永久关闭防火墙</td>\n<td align=\"left\">systemctl disable firewalld.service</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class=\"line\">yum  -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开始安装 nginx</p>\n<p>新建一个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n\n<p>内容输入如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>其中 centos/7 根据自己运行环境配置 系统名/版本号</p>\n<p>下载 nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h2><span id=\"nginx-常用操作\">nginx 常用操作</span></h2><ol>\n<li><p>查看配置文件和目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<p>相关文件说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">路径</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/logrotate.d/nginx</td>\n<td align=\"left\">用于 logrotate 服务的日志切割</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td align=\"left\">主配置文件</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params</td>\n<td align=\"left\">cgi 配置,fastcgi 配置</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf</td>\n<td align=\"left\">编码转换映射转化文件</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/mime.types</td>\n<td align=\"left\">设置 http 协议的 Content-Type 与扩展名对应关系</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td align=\"left\">用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/modules /usr/lib64/nginx/modules</td>\n<td align=\"left\">nginx 模块目录</td>\n</tr>\n<tr>\n<td align=\"left\">命令</td>\n<td align=\"left\">/usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT</td>\n<td align=\"left\">nginx 的手册和帮助文件</td>\n</tr>\n<tr>\n<td align=\"left\">目录</td>\n<td align=\"left\">/var/cache/nginx</td>\n<td align=\"left\">nginx 的缓存目录</td>\n</tr>\n<tr>\n<td align=\"left\">目录</td>\n<td align=\"left\">/var/log/nginx</td>\n<td align=\"left\">nginx 的日志目录</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>启动和重新加载以及关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>如果在启动的时候可能会遇到下列问题：</p>\n<ol>\n<li>端口被占用；</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] still could not bind</span><br></pre></td></tr></table></figure>\n\n<p>可以先查看进程，再杀死对应进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br><span class=\"line\"></span><br><span class=\"line\">kill 进程号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 nginx</p>\n</li>\n</ol>\n<blockquote>\n<p>/etc/nginx/nginx.conf</p>\n</blockquote>\n<p>查看日志命令 tailf -f log 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;   设置nginx服务的系统使用用户</span><br><span class=\"line\">worker_processes  1;  工作进程数,一般和CPU数量相同</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;   nginx的错误日志</span><br><span class=\"line\">pid        /var/run/nginx.pid;   nginx服务启动时的pid</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;每个进程允许的最大连接数 10000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系</span><br><span class=\"line\">    default_type  application/octet-stream;//默认content-type</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span><br><span class=\"line\">                    '$status $body_bytes_sent \"$http_referer\" '</span><br><span class=\"line\">                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;//启用sendfile</span><br><span class=\"line\">    #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）</span><br><span class=\"line\">    #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;//超时时间是65秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;gzip压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;//包含的子配置文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/etc/default.conf</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # 用域名方式访问的地址</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r; //编码</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理http协议请求</span><br><span class=\"line\">    location /api &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理ws协议请求</span><br><span class=\"line\">    location /ws &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:3000;</span><br><span class=\"line\">      proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">      proxy_set_header Connection ‘Upgrade‘;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      # 代理/api/路径的请求 并去掉/api/路径进行转发</span><br><span class=\"line\">      location ~ /api/ &#123;</span><br><span class=\"line\">          rewrite /api/(.*)$ /$1 break;</span><br><span class=\"line\">          proxy_pass  http://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      location ~ / &#123;</span><br><span class=\"line\">          root /data/www-data/bolton/;</span><br><span class=\"line\">          try_files $uri $uri/ /index.html;</span><br><span class=\"line\">          index index.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 转发请求静态资源（js、css）规则</span><br><span class=\"line\">    location ~ .*\\.(html|js|css)$ &#123;</span><br><span class=\"line\">        # CORS</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods GET,POST,DELETE;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers Content-Type;</span><br><span class=\"line\">        # 默认带上客户端cookie</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        # 缓存1h</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        # 开启gzip</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        # gzip压缩HTTP版本号 一般是1.1</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        # gzip压缩等级 越大压缩率越高 1-9</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        # 默认不指定不会缓存css资源 需要指定text/css类型</span><br><span class=\"line\">        gzip_types application/javascript text/css;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设置图片请求规则</span><br><span class=\"line\">    location ~ .*\\.(gif|png|jpg|webp)$ &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        gzip_comp_level 3;</span><br><span class=\"line\">        gzip_types image/jpeg image/png image/gif image/webp;</span><br><span class=\"line\">        ## 防盗链</span><br><span class=\"line\">        ## valid_referers 合法的域名 *.baidu.com</span><br><span class=\"line\">        ## &lt;meta name=\"referrer\" content=\"never\"&gt;</span><br><span class=\"line\">        valid_referers none blocked xx.xxx.xxx.xx;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/download &#123;</span><br><span class=\"line\">        # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩</span><br><span class=\"line\">        # linux下运行gzip 文件名会生成压缩gz文件</span><br><span class=\"line\">        # url最直接访问该文件路径就会自动启动下载该资源</span><br><span class=\"line\">        gzip_static on;</span><br><span class=\"line\">        tcp_nopush on;</span><br><span class=\"line\">        root /data/download;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;  //静态文件根目录</span><br><span class=\"line\">        index  index.html index.htm;  //首页的索引文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;  //指定错误页面</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    # 把后台错误重定向到静态的50x.html页面</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    # 把PHP脚本9000端口上监听的FastCGI服务</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不允许访问.htaccess文件 只允许指定的ip访问</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        allow 127.0.0.1</span><br><span class=\"line\">        deny  all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实现负载均衡</p>\n</blockquote>\n<ol>\n<li><p>解决高并发、海量数据问题</p>\n</li>\n<li><p>配置类型</p>\n<ol>\n<li>轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；</li>\n<li>ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定放一个后端服务器，可以解决 session 的问题；</li>\n<li>weight（加权轮询）指定轮询策略，weight 和访问比率成正比，用于后端服务器性能不均的情况；</li>\n<li>least_conn 最小连接数，哪个连接少就分给谁。</li>\n</ol>\n<p>集群状态：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">状态</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">down</td>\n<td align=\"left\">不参与负载均衡</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份的服务器</td>\n</tr>\n<tr>\n<td align=\"left\">max_fails</td>\n<td align=\"left\">允许请求失败的次数</td>\n</tr>\n<tr>\n<td align=\"left\">fail_timeout</td>\n<td align=\"left\">经过 max_fails 失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td align=\"left\">max_conts</td>\n<td align=\"left\">限制最大的接收的连接数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test1 &#123;</span><br><span class=\"line\">    ip_hsah;</span><br><span class=\"line\">    server http://localhost:3000 weight=2;</span><br><span class=\"line\">    server http://localhost:4000 weight=1;</span><br><span class=\"line\">    server http://localhost:5000 down;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 访问负载均衡构造的集群</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 和upstrem的name对应</span><br><span class=\"line\">        proxy_pass http://test1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test2.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:4000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test3.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时访问<code>www.test.com</code>通过代理到访问<code>www.test1.com</code>，而访问 test1 的请求被负载均衡按照策略访问 test1 或者 test2</p>\n","site":{"data":{}},"length":5902,"excerpt":"","more":"<ol>\n<li><p>环境</p>\n<p>CENTOS&gt;=7.0,位数 X64 CENTOS 7.2</p>\n</li>\n<li><p>关闭 iptables</p>\n<p>iptables 命令是 Linux 上常用的防火墙软件</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">停止防火墙</td>\n<td align=\"left\">systemctl stop firewalld.service</td>\n</tr>\n<tr>\n<td align=\"left\">永久关闭防火墙</td>\n<td align=\"left\">systemctl disable firewalld.service</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum  -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class=\"line\">yum  -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开始安装 nginx</p>\n<p>新建一个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n\n<p>内容输入如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>其中 centos/7 根据自己运行环境配置 系统名/版本号</p>\n<p>下载 nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h2 id=\"nginx-常用操作\"><a href=\"#nginx-常用操作\" class=\"headerlink\" title=\"nginx 常用操作\"></a>nginx 常用操作</h2><ol>\n<li><p>查看配置文件和目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<p>相关文件说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">路径</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/logrotate.d/nginx</td>\n<td align=\"left\">用于 logrotate 服务的日志切割</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td align=\"left\">主配置文件</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/fastcgi_params /etc/nginx/scgi_params /etc/nginx/uwsgi_params</td>\n<td align=\"left\">cgi 配置,fastcgi 配置</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/koi-utf /etc/nginx/koi-win /etc/nginx/win-utf</td>\n<td align=\"left\">编码转换映射转化文件</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/mime.types</td>\n<td align=\"left\">设置 http 协议的 Content-Type 与扩展名对应关系</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td align=\"left\">用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td align=\"left\">配置文件</td>\n<td align=\"left\">/etc/nginx/modules /usr/lib64/nginx/modules</td>\n<td align=\"left\">nginx 模块目录</td>\n</tr>\n<tr>\n<td align=\"left\">命令</td>\n<td align=\"left\">/usr/share/doc/nginx-1.14.0 /usr/share/doc/nginx-1.14.0/COPYRIGHT</td>\n<td align=\"left\">nginx 的手册和帮助文件</td>\n</tr>\n<tr>\n<td align=\"left\">目录</td>\n<td align=\"left\">/var/cache/nginx</td>\n<td align=\"left\">nginx 的缓存目录</td>\n</tr>\n<tr>\n<td align=\"left\">目录</td>\n<td align=\"left\">/var/log/nginx</td>\n<td align=\"left\">nginx 的日志目录</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>启动和重新加载以及关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br><span class=\"line\">systemctl reload nginx.service</span><br><span class=\"line\">systemctl stop nginx.service</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>如果在启动的时候可能会遇到下列问题：</p>\n<ol>\n<li>端口被占用；</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting nginx: nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\"></span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] still could not bind</span><br></pre></td></tr></table></figure>\n\n<p>可以先查看进程，再杀死对应进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br><span class=\"line\"></span><br><span class=\"line\">kill 进程号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 nginx</p>\n</li>\n</ol>\n<blockquote>\n<p>/etc/nginx/nginx.conf</p>\n</blockquote>\n<p>查看日志命令 tailf -f log 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;   设置nginx服务的系统使用用户</span><br><span class=\"line\">worker_processes  1;  工作进程数,一般和CPU数量相同</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;   nginx的错误日志</span><br><span class=\"line\">pid        /var/run/nginx.pid;   nginx服务启动时的pid</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;每个进程允许的最大连接数 10000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;//文件后缀和类型类型的对应关系</span><br><span class=\"line\">    default_type  application/octet-stream;//默认content-type</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span><br><span class=\"line\">                    '$status $body_bytes_sent \"$http_referer\" '</span><br><span class=\"line\">                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';  //日志记录格式</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;//默认访问日志 日志格式与log_format main 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;//启用sendfile</span><br><span class=\"line\">    #tcp_nopush     on;//懒发送 客户端请求数据不会每次都时时相应 让数据塞满一次性发送给客户端（多用于下载、断点 续传）</span><br><span class=\"line\">    #tcp_nodelay on; // 默认开启 与nopush互斥 提高实时请求响应效率</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;//超时时间是65秒</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;gzip压缩</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;//包含的子配置文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/etc/default.conf</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    # 用域名方式访问的地址</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r; //编码</span><br><span class=\"line\">    #access_log  /var/log/nginx/host.access.log  main;  //访问日志文件和名称</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理http协议请求</span><br><span class=\"line\">    location /api &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 代理ws协议请求</span><br><span class=\"line\">    location /ws &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:3000;</span><br><span class=\"line\">      proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">      proxy_set_header Connection ‘Upgrade‘;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      # 代理/api/路径的请求 并去掉/api/路径进行转发</span><br><span class=\"line\">      location ~ /api/ &#123;</span><br><span class=\"line\">          rewrite /api/(.*)$ /$1 break;</span><br><span class=\"line\">          proxy_pass  http://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      location ~ / &#123;</span><br><span class=\"line\">          root /data/www-data/bolton/;</span><br><span class=\"line\">          try_files $uri $uri/ /index.html;</span><br><span class=\"line\">          index index.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 转发请求静态资源（js、css）规则</span><br><span class=\"line\">    location ~ .*\\.(html|js|css)$ &#123;</span><br><span class=\"line\">        # CORS</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods GET,POST,DELETE;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers Content-Type;</span><br><span class=\"line\">        # 默认带上客户端cookie</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        # 缓存1h</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        # 开启gzip</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        # gzip压缩HTTP版本号 一般是1.1</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        # gzip压缩等级 越大压缩率越高 1-9</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        # 默认不指定不会缓存css资源 需要指定text/css类型</span><br><span class=\"line\">        gzip_types application/javascript text/css;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设置图片请求规则</span><br><span class=\"line\">    location ~ .*\\.(gif|png|jpg|webp)$ &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_http_version 1.1;</span><br><span class=\"line\">        gzip_comp_level 3;</span><br><span class=\"line\">        gzip_types image/jpeg image/png image/gif image/webp;</span><br><span class=\"line\">        ## 防盗链</span><br><span class=\"line\">        ## valid_referers 合法的域名 *.baidu.com</span><br><span class=\"line\">        ## &lt;meta name=\"referrer\" content=\"never\"&gt;</span><br><span class=\"line\">        valid_referers none blocked xx.xxx.xxx.xx;</span><br><span class=\"line\">        if ($invalid_referer) &#123;</span><br><span class=\"line\">            return 403;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 资源目录</span><br><span class=\"line\">        root /data/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ ^/download &#123;</span><br><span class=\"line\">        # 默认先查找当前目录下的后缀为.gz文件 有直接返回给客户端 不需要再压缩</span><br><span class=\"line\">        # linux下运行gzip 文件名会生成压缩gz文件</span><br><span class=\"line\">        # url最直接访问该文件路径就会自动启动下载该资源</span><br><span class=\"line\">        gzip_static on;</span><br><span class=\"line\">        tcp_nopush on;</span><br><span class=\"line\">        root /data/download;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;  //静态文件根目录</span><br><span class=\"line\">        index  index.html index.htm;  //首页的索引文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;  //指定错误页面</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    # 把后台错误重定向到静态的50x.html页面</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    # 把PHP脚本9000端口上监听的FastCGI服务</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不允许访问.htaccess文件 只允许指定的ip访问</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">        allow 127.0.0.1</span><br><span class=\"line\">        deny  all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实现负载均衡</p>\n</blockquote>\n<ol>\n<li><p>解决高并发、海量数据问题</p>\n</li>\n<li><p>配置类型</p>\n<ol>\n<li>轮询（默认） 每个请求按照时间顺序逐一分配不同的后端服务器；</li>\n<li>ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定放一个后端服务器，可以解决 session 的问题；</li>\n<li>weight（加权轮询）指定轮询策略，weight 和访问比率成正比，用于后端服务器性能不均的情况；</li>\n<li>least_conn 最小连接数，哪个连接少就分给谁。</li>\n</ol>\n<p>集群状态：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">状态</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">down</td>\n<td align=\"left\">不参与负载均衡</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份的服务器</td>\n</tr>\n<tr>\n<td align=\"left\">max_fails</td>\n<td align=\"left\">允许请求失败的次数</td>\n</tr>\n<tr>\n<td align=\"left\">fail_timeout</td>\n<td align=\"left\">经过 max_fails 失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td align=\"left\">max_conts</td>\n<td align=\"left\">限制最大的接收的连接数</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test1 &#123;</span><br><span class=\"line\">    ip_hsah;</span><br><span class=\"line\">    server http://localhost:3000 weight=2;</span><br><span class=\"line\">    server http://localhost:4000 weight=1;</span><br><span class=\"line\">    server http://localhost:5000 down;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 访问负载均衡构造的集群</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        # 和upstrem的name对应</span><br><span class=\"line\">        proxy_pass http://test1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test1.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test2.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:4000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test3.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时访问<code>www.test.com</code>通过代理到访问<code>www.test1.com</code>，而访问 test1 的请求被负载均衡按照策略访问 test1 或者 test2</p>\n"},{"title":"node-gyp rebuild Error: EACCES: permission denied","catalog":true,"date":"2020-03-09T02:48:45.000Z","subtitle":null,"header-img":null,"_content":"\n1. 最近在安装 RN 项目时，执行`npm install`遇到如下报错\n\n{% asset_img node-gyp-error.png %}\n\n很明显是 fsevents 模块使用`node-gyp rebuild`失败\n\n看提示信息提示权限相关问题，猜测可能是读写权限问题，\n\n查看了下权限\n\n{% asset_img root-rw.png %}\n\n加上`sudo`，开启`root`账户模式，但并未成功。\n\n经过查询相关资料发现，实际原因是由于用的是 root 账户权限执行 npm，而 npm 默认是不适用 root 权限创建内容，因此会出现权限问题而导致失败，加上参数\n`--unsafe-perm=true --allow-root`即可解决问题。\n\n{% asset_img node-gyp-success.png %}\n\n2. `node-sass`安装提示`EACCES`错误 使用`--unsafe-perm`参数安装\n\n\n总结：安装npm包时遇到`EACCES`相关错误时，先尝试`sudo`安装，若再提示相关问题加上`--unsafe-perm`参数\n\n\n\n\n\n\n","source":"_posts/node-gyp-rebuild-Error-EACCES-permission-denied.md","raw":"---\ntitle: \"node-gyp rebuild Error: EACCES: permission denied\"\ncatalog: true\ndate: 2020-03-09 10:48:45\nsubtitle:\nheader-img:\ntags: npm\ncategories: 前端\n---\n\n1. 最近在安装 RN 项目时，执行`npm install`遇到如下报错\n\n{% asset_img node-gyp-error.png %}\n\n很明显是 fsevents 模块使用`node-gyp rebuild`失败\n\n看提示信息提示权限相关问题，猜测可能是读写权限问题，\n\n查看了下权限\n\n{% asset_img root-rw.png %}\n\n加上`sudo`，开启`root`账户模式，但并未成功。\n\n经过查询相关资料发现，实际原因是由于用的是 root 账户权限执行 npm，而 npm 默认是不适用 root 权限创建内容，因此会出现权限问题而导致失败，加上参数\n`--unsafe-perm=true --allow-root`即可解决问题。\n\n{% asset_img node-gyp-success.png %}\n\n2. `node-sass`安装提示`EACCES`错误 使用`--unsafe-perm`参数安装\n\n\n总结：安装npm包时遇到`EACCES`相关错误时，先尝试`sudo`安装，若再提示相关问题加上`--unsafe-perm`参数\n\n\n\n\n\n\n","slug":"node-gyp-rebuild-Error-EACCES-permission-denied","published":1,"updated":"2024-02-20T06:48:45.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijur001vlwxahzci71k6","content":"<ol>\n<li>最近在安装 RN 项目时，执行<code>npm install</code>遇到如下报错</li>\n</ol>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-error.png\">\n\n<p>很明显是 fsevents 模块使用<code>node-gyp rebuild</code>失败</p>\n<p>看提示信息提示权限相关问题，猜测可能是读写权限问题，</p>\n<p>查看了下权限</p>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/root-rw.png\">\n\n<p>加上<code>sudo</code>，开启<code>root</code>账户模式，但并未成功。</p>\n<p>经过查询相关资料发现，实际原因是由于用的是 root 账户权限执行 npm，而 npm 默认是不适用 root 权限创建内容，因此会出现权限问题而导致失败，加上参数<br><code>--unsafe-perm=true --allow-root</code>即可解决问题。</p>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-success.png\">\n\n<ol start=\"2\">\n<li><code>node-sass</code>安装提示<code>EACCES</code>错误 使用<code>--unsafe-perm</code>参数安装</li>\n</ol>\n<p>总结：安装npm包时遇到<code>EACCES</code>相关错误时，先尝试<code>sudo</code>安装，若再提示相关问题加上<code>--unsafe-perm</code>参数</p>\n","site":{"data":{}},"length":329,"excerpt":"","more":"<ol>\n<li>最近在安装 RN 项目时，执行<code>npm install</code>遇到如下报错</li>\n</ol>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-error.png\">\n\n<p>很明显是 fsevents 模块使用<code>node-gyp rebuild</code>失败</p>\n<p>看提示信息提示权限相关问题，猜测可能是读写权限问题，</p>\n<p>查看了下权限</p>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/root-rw.png\">\n\n<p>加上<code>sudo</code>，开启<code>root</code>账户模式，但并未成功。</p>\n<p>经过查询相关资料发现，实际原因是由于用的是 root 账户权限执行 npm，而 npm 默认是不适用 root 权限创建内容，因此会出现权限问题而导致失败，加上参数<br><code>--unsafe-perm=true --allow-root</code>即可解决问题。</p>\n<img src=\"/blog/2020/03/09/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-success.png\">\n\n<ol start=\"2\">\n<li><code>node-sass</code>安装提示<code>EACCES</code>错误 使用<code>--unsafe-perm</code>参数安装</li>\n</ol>\n<p>总结：安装npm包时遇到<code>EACCES</code>相关错误时，先尝试<code>sudo</code>安装，若再提示相关问题加上<code>--unsafe-perm</code>参数</p>\n"},{"title":"node内存监控","catalog":true,"date":"2020-11-12T10:52:17.000Z","subtitle":null,"header-img":null,"_content":"\n我们都知道，当使用Node在生产环境作为服务器语言时，并发量过大或者因为代码问题很容易造成OOM或者CPU满载这些常见问题，此时通过监控CPU、内存，再结合日志和Release就能很容易发现问题。\n\n那么如何知道本地Node服务平时占用内存多少？或者说是如何知道某个进程消耗多少内存？\n\n示例测试代码\n\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) => {\n  ctx.data = new Array(10000).fill(10000).map(x => 10)\n  await next()\n})\n\napp.use(ctx => {\n  ctx.body = 'hello, world'\n})\n\napp.listen(8080, () => console.log('Port: 8080'))\n```\n\n## 如何找到进程的pid\n\n1. 通过多余参数结合ps定位进程；\n2. 通过端口号结合lsof定位进程；\n\n```bash\n$ node index.js test\n\n# 第一种 ps+多余参数\n$ ps -ef | grep test\n\n  501 90194 83348   0  7:02下午 ttys003    0:00.08 node index.js test\n  501 90200 84062   0  7:02下午 ttys004    0:00.00 grep test\n\n# 第二种 lsof+端口号定位\n$ node  lsof -i:8080 | grep node\n\n  node 90194 mac  22u  IPv6 0x49017005e24b683s      0t0  TCP *:http-alt (LISTEN)\n\n```\n\n## 压力测试\n\n利用常用的ab进行测试\n\n```bash\n# -c 客户端数量\n# -n 请求量\nab -c 200 -n 1600 http://127.0.0.1:8080/\n```\n\n## pidstat监控内存变化\n\npidstat 是 sysstat 系列 linux 性能调试工具的一个包，竟然用它来调试 linux 的性能问题，包括内存，网络，IO，CPU 等。\n\n```bash\n# -r: 指输出内存指标\n# -p: 指定 pid\n# 1: 每一秒输出一次\n# 100: 输出100次\n\n$ pidstat -r -p 90194 1 100\n\n               UID    PID   minflt/s  majflt/s     VSZ    RSS    %MEM  Command\n19时20分39秒     0     11401      0.00      0.00  566768  19800   0.12  node\n19时20分40秒     0     11401      0.00      0.00  566768  19800   0.12  node\n19时20分41秒     0     11401   9667.00      0.00  579024  37792   0.23  \n```\n\nRSS：常驻内存集，可理解为内存，是我们需要监控的指标。\n\nVSZ：虚拟内存\n\n## top监控内存变化\n\nmac上可以使用htop\n\n```bash\n#安装\nbrew install htop\n\nhtop -p 90194\n```\n\n常用命令：\n\n1. PID：进程标志号，是非零正整数\n2. USER：进程所有者的用户名\n3. PRI：进程的优先级别\n4. NI：进程的优先级别数值\n5. VIRT：进程占用的虚拟内存值\n6. RES：进程占用的物理内存值，单位KB\n7. SHR：进程使用的共享内存值\n8. S：进程的状态，其中S代表休眠，R代表正在运行，Z表示僵死状态，N代表该进程优先级是负数\n9. %CPU：该进程占用的cpu使用率\n10. %MEM：该进程占用的物理内存和总内存的百分比\n11. TIME+：该进程启动后占用的总的CPU时间\n12. COMMAND：进程启动的启动命令名称\n\n[![DS5c6J.png](https://s3.ax1x.com/2020/11/13/DS5c6J.png)](https://imgchr.com/i/DS5c6J)\n\nab命令施加压力，会明显看到内存数据在暴涨\n\n[![DS5zh8.png](https://s3.ax1x.com/2020/11/13/DS5zh8.png)](https://imgchr.com/i/DS5zh8)\n","source":"_posts/node内存监控.md","raw":"---\ntitle: node内存监控\ncatalog: true\ndate: 2020-11-12 18:52:17\nsubtitle:\nheader-img:\ntags: node\ncategories: 前端\n---\n\n我们都知道，当使用Node在生产环境作为服务器语言时，并发量过大或者因为代码问题很容易造成OOM或者CPU满载这些常见问题，此时通过监控CPU、内存，再结合日志和Release就能很容易发现问题。\n\n那么如何知道本地Node服务平时占用内存多少？或者说是如何知道某个进程消耗多少内存？\n\n示例测试代码\n\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) => {\n  ctx.data = new Array(10000).fill(10000).map(x => 10)\n  await next()\n})\n\napp.use(ctx => {\n  ctx.body = 'hello, world'\n})\n\napp.listen(8080, () => console.log('Port: 8080'))\n```\n\n## 如何找到进程的pid\n\n1. 通过多余参数结合ps定位进程；\n2. 通过端口号结合lsof定位进程；\n\n```bash\n$ node index.js test\n\n# 第一种 ps+多余参数\n$ ps -ef | grep test\n\n  501 90194 83348   0  7:02下午 ttys003    0:00.08 node index.js test\n  501 90200 84062   0  7:02下午 ttys004    0:00.00 grep test\n\n# 第二种 lsof+端口号定位\n$ node  lsof -i:8080 | grep node\n\n  node 90194 mac  22u  IPv6 0x49017005e24b683s      0t0  TCP *:http-alt (LISTEN)\n\n```\n\n## 压力测试\n\n利用常用的ab进行测试\n\n```bash\n# -c 客户端数量\n# -n 请求量\nab -c 200 -n 1600 http://127.0.0.1:8080/\n```\n\n## pidstat监控内存变化\n\npidstat 是 sysstat 系列 linux 性能调试工具的一个包，竟然用它来调试 linux 的性能问题，包括内存，网络，IO，CPU 等。\n\n```bash\n# -r: 指输出内存指标\n# -p: 指定 pid\n# 1: 每一秒输出一次\n# 100: 输出100次\n\n$ pidstat -r -p 90194 1 100\n\n               UID    PID   minflt/s  majflt/s     VSZ    RSS    %MEM  Command\n19时20分39秒     0     11401      0.00      0.00  566768  19800   0.12  node\n19时20分40秒     0     11401      0.00      0.00  566768  19800   0.12  node\n19时20分41秒     0     11401   9667.00      0.00  579024  37792   0.23  \n```\n\nRSS：常驻内存集，可理解为内存，是我们需要监控的指标。\n\nVSZ：虚拟内存\n\n## top监控内存变化\n\nmac上可以使用htop\n\n```bash\n#安装\nbrew install htop\n\nhtop -p 90194\n```\n\n常用命令：\n\n1. PID：进程标志号，是非零正整数\n2. USER：进程所有者的用户名\n3. PRI：进程的优先级别\n4. NI：进程的优先级别数值\n5. VIRT：进程占用的虚拟内存值\n6. RES：进程占用的物理内存值，单位KB\n7. SHR：进程使用的共享内存值\n8. S：进程的状态，其中S代表休眠，R代表正在运行，Z表示僵死状态，N代表该进程优先级是负数\n9. %CPU：该进程占用的cpu使用率\n10. %MEM：该进程占用的物理内存和总内存的百分比\n11. TIME+：该进程启动后占用的总的CPU时间\n12. COMMAND：进程启动的启动命令名称\n\n[![DS5c6J.png](https://s3.ax1x.com/2020/11/13/DS5c6J.png)](https://imgchr.com/i/DS5c6J)\n\nab命令施加压力，会明显看到内存数据在暴涨\n\n[![DS5zh8.png](https://s3.ax1x.com/2020/11/13/DS5zh8.png)](https://imgchr.com/i/DS5zh8)\n","slug":"node内存监控","published":1,"updated":"2024-02-20T06:48:45.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijus001zlwxaqopyx2qo","content":"<p>我们都知道，当使用Node在生产环境作为服务器语言时，并发量过大或者因为代码问题很容易造成OOM或者CPU满载这些常见问题，此时通过监控CPU、内存，再结合日志和Release就能很容易发现问题。</p>\n<p>那么如何知道本地Node服务平时占用内存多少？或者说是如何知道某个进程消耗多少内存？</p>\n<p>示例测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.data = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10000</span>).fill(<span class=\"number\">10000</span>).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'hello, world'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Port: 8080'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"如何找到进程的pid\">如何找到进程的pid</span></h2><ol>\n<li>通过多余参数结合ps定位进程；</li>\n<li>通过端口号结合lsof定位进程；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node index.js <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一种 ps+多余参数</span></span><br><span class=\"line\">$ ps -ef | grep <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">  501 90194 83348   0  7:02下午 ttys003    0:00.08 node index.js <span class=\"built_in\">test</span></span><br><span class=\"line\">  501 90200 84062   0  7:02下午 ttys004    0:00.00 grep <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二种 lsof+端口号定位</span></span><br><span class=\"line\">$ node  lsof -i:8080 | grep node</span><br><span class=\"line\"></span><br><span class=\"line\">  node 90194 mac  22u  IPv6 0x49017005e24b683s      0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"压力测试\">压力测试</span></h2><p>利用常用的ab进行测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -c 客户端数量</span></span><br><span class=\"line\"><span class=\"comment\"># -n 请求量</span></span><br><span class=\"line\">ab -c 200 -n 1600 http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"pidstat监控内存变化\">pidstat监控内存变化</span></h2><p>pidstat 是 sysstat 系列 linux 性能调试工具的一个包，竟然用它来调试 linux 的性能问题，包括内存，网络，IO，CPU 等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r: 指输出内存指标</span></span><br><span class=\"line\"><span class=\"comment\"># -p: 指定 pid</span></span><br><span class=\"line\"><span class=\"comment\"># 1: 每一秒输出一次</span></span><br><span class=\"line\"><span class=\"comment\"># 100: 输出100次</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ pidstat -r -p 90194 1 100</span><br><span class=\"line\"></span><br><span class=\"line\">               UID    PID   minflt/s  majflt/s     VSZ    RSS    %MEM  Command</span><br><span class=\"line\">19时20分39秒     0     11401      0.00      0.00  566768  19800   0.12  node</span><br><span class=\"line\">19时20分40秒     0     11401      0.00      0.00  566768  19800   0.12  node</span><br><span class=\"line\">19时20分41秒     0     11401   9667.00      0.00  579024  37792   0.23</span><br></pre></td></tr></table></figure>\n\n<p>RSS：常驻内存集，可理解为内存，是我们需要监控的指标。</p>\n<p>VSZ：虚拟内存</p>\n<h2><span id=\"top监控内存变化\">top监控内存变化</span></h2><p>mac上可以使用htop</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\">brew install htop</span><br><span class=\"line\"></span><br><span class=\"line\">htop -p 90194</span><br></pre></td></tr></table></figure>\n\n<p>常用命令：</p>\n<ol>\n<li>PID：进程标志号，是非零正整数</li>\n<li>USER：进程所有者的用户名</li>\n<li>PRI：进程的优先级别</li>\n<li>NI：进程的优先级别数值</li>\n<li>VIRT：进程占用的虚拟内存值</li>\n<li>RES：进程占用的物理内存值，单位KB</li>\n<li>SHR：进程使用的共享内存值</li>\n<li>S：进程的状态，其中S代表休眠，R代表正在运行，Z表示僵死状态，N代表该进程优先级是负数</li>\n<li>%CPU：该进程占用的cpu使用率</li>\n<li>%MEM：该进程占用的物理内存和总内存的百分比</li>\n<li>TIME+：该进程启动后占用的总的CPU时间</li>\n<li>COMMAND：进程启动的启动命令名称</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/DS5c6J\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/13/DS5c6J.png\" alt=\"DS5c6J.png\"></a></p>\n<p>ab命令施加压力，会明显看到内存数据在暴涨</p>\n<p><a href=\"https://imgchr.com/i/DS5zh8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/13/DS5zh8.png\" alt=\"DS5zh8.png\"></a></p>\n","site":{"data":{}},"length":1423,"excerpt":"","more":"<p>我们都知道，当使用Node在生产环境作为服务器语言时，并发量过大或者因为代码问题很容易造成OOM或者CPU满载这些常见问题，此时通过监控CPU、内存，再结合日志和Release就能很容易发现问题。</p>\n<p>那么如何知道本地Node服务平时占用内存多少？或者说是如何知道某个进程消耗多少内存？</p>\n<p>示例测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.data = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10000</span>).fill(<span class=\"number\">10000</span>).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'hello, world'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Port: 8080'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何找到进程的pid\"><a href=\"#如何找到进程的pid\" class=\"headerlink\" title=\"如何找到进程的pid\"></a>如何找到进程的pid</h2><ol>\n<li>通过多余参数结合ps定位进程；</li>\n<li>通过端口号结合lsof定位进程；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node index.js <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一种 ps+多余参数</span></span><br><span class=\"line\">$ ps -ef | grep <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">  501 90194 83348   0  7:02下午 ttys003    0:00.08 node index.js <span class=\"built_in\">test</span></span><br><span class=\"line\">  501 90200 84062   0  7:02下午 ttys004    0:00.00 grep <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二种 lsof+端口号定位</span></span><br><span class=\"line\">$ node  lsof -i:8080 | grep node</span><br><span class=\"line\"></span><br><span class=\"line\">  node 90194 mac  22u  IPv6 0x49017005e24b683s      0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h2><p>利用常用的ab进行测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -c 客户端数量</span></span><br><span class=\"line\"><span class=\"comment\"># -n 请求量</span></span><br><span class=\"line\">ab -c 200 -n 1600 http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pidstat监控内存变化\"><a href=\"#pidstat监控内存变化\" class=\"headerlink\" title=\"pidstat监控内存变化\"></a>pidstat监控内存变化</h2><p>pidstat 是 sysstat 系列 linux 性能调试工具的一个包，竟然用它来调试 linux 的性能问题，包括内存，网络，IO，CPU 等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -r: 指输出内存指标</span></span><br><span class=\"line\"><span class=\"comment\"># -p: 指定 pid</span></span><br><span class=\"line\"><span class=\"comment\"># 1: 每一秒输出一次</span></span><br><span class=\"line\"><span class=\"comment\"># 100: 输出100次</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ pidstat -r -p 90194 1 100</span><br><span class=\"line\"></span><br><span class=\"line\">               UID    PID   minflt/s  majflt/s     VSZ    RSS    %MEM  Command</span><br><span class=\"line\">19时20分39秒     0     11401      0.00      0.00  566768  19800   0.12  node</span><br><span class=\"line\">19时20分40秒     0     11401      0.00      0.00  566768  19800   0.12  node</span><br><span class=\"line\">19时20分41秒     0     11401   9667.00      0.00  579024  37792   0.23</span><br></pre></td></tr></table></figure>\n\n<p>RSS：常驻内存集，可理解为内存，是我们需要监控的指标。</p>\n<p>VSZ：虚拟内存</p>\n<h2 id=\"top监控内存变化\"><a href=\"#top监控内存变化\" class=\"headerlink\" title=\"top监控内存变化\"></a>top监控内存变化</h2><p>mac上可以使用htop</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\">brew install htop</span><br><span class=\"line\"></span><br><span class=\"line\">htop -p 90194</span><br></pre></td></tr></table></figure>\n\n<p>常用命令：</p>\n<ol>\n<li>PID：进程标志号，是非零正整数</li>\n<li>USER：进程所有者的用户名</li>\n<li>PRI：进程的优先级别</li>\n<li>NI：进程的优先级别数值</li>\n<li>VIRT：进程占用的虚拟内存值</li>\n<li>RES：进程占用的物理内存值，单位KB</li>\n<li>SHR：进程使用的共享内存值</li>\n<li>S：进程的状态，其中S代表休眠，R代表正在运行，Z表示僵死状态，N代表该进程优先级是负数</li>\n<li>%CPU：该进程占用的cpu使用率</li>\n<li>%MEM：该进程占用的物理内存和总内存的百分比</li>\n<li>TIME+：该进程启动后占用的总的CPU时间</li>\n<li>COMMAND：进程启动的启动命令名称</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/DS5c6J\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/13/DS5c6J.png\" alt=\"DS5c6J.png\"></a></p>\n<p>ab命令施加压力，会明显看到内存数据在暴涨</p>\n<p><a href=\"https://imgchr.com/i/DS5zh8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2020/11/13/DS5zh8.png\" alt=\"DS5zh8.png\"></a></p>\n"},{"title":"pm2常用命令整理","catalog":true,"date":"2019-07-25T14:34:15.000Z","subtitle":null,"header-img":null,"_content":"\n- pm2 start\n\n之前一直使用过程中，都是指定一个启动文件（`pm2 start app.js`），后来在用`pm2`部署`nuxt.js`项目时候，发现这样的方式不太能用，查阅文档发现可以使用以 npm 方式执行 script 脚本命令\n\n```shell\n# pm2 start npm --name '进程名称' -- run 脚本命令\n# package.json\n#  script: {\n#    \"start:nuxt\": \"nuxt build\"\n#}\npm2 start npm -- run start:nuxt --name 'nuxt'\n```\n","source":"_posts/pm2常用命令整理.md","raw":"---\ntitle: pm2常用命令整理\ncatalog: true\ndate: 2019-07-25 22:34:15\nsubtitle:\nheader-img:\ntags: node\ncategories: 前端\n---\n\n- pm2 start\n\n之前一直使用过程中，都是指定一个启动文件（`pm2 start app.js`），后来在用`pm2`部署`nuxt.js`项目时候，发现这样的方式不太能用，查阅文档发现可以使用以 npm 方式执行 script 脚本命令\n\n```shell\n# pm2 start npm --name '进程名称' -- run 脚本命令\n# package.json\n#  script: {\n#    \"start:nuxt\": \"nuxt build\"\n#}\npm2 start npm -- run start:nuxt --name 'nuxt'\n```\n","slug":"pm2常用命令整理","published":1,"updated":"2024-02-20T06:48:45.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijut0022lwxat2fmu8vq","content":"<ul>\n<li>pm2 start</li>\n</ul>\n<p>之前一直使用过程中，都是指定一个启动文件（<code>pm2 start app.js</code>），后来在用<code>pm2</code>部署<code>nuxt.js</code>项目时候，发现这样的方式不太能用，查阅文档发现可以使用以 npm 方式执行 script 脚本命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pm2 start npm --name <span class=\"string\">'进程名称'</span> -- run 脚本命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> package.json</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  script: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    <span class=\"string\">\"start:nuxt\"</span>: <span class=\"string\">\"nuxt build\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">&#125;</span></span><br><span class=\"line\">pm2 start npm -- run start:nuxt --name 'nuxt'</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":242,"excerpt":"","more":"<ul>\n<li>pm2 start</li>\n</ul>\n<p>之前一直使用过程中，都是指定一个启动文件（<code>pm2 start app.js</code>），后来在用<code>pm2</code>部署<code>nuxt.js</code>项目时候，发现这样的方式不太能用，查阅文档发现可以使用以 npm 方式执行 script 脚本命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pm2 start npm --name <span class=\"string\">'进程名称'</span> -- run 脚本命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> package.json</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  script: &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    <span class=\"string\">\"start:nuxt\"</span>: <span class=\"string\">\"nuxt build\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">&#125;</span></span><br><span class=\"line\">pm2 start npm -- run start:nuxt --name 'nuxt'</span><br></pre></td></tr></table></figure>\n\n"},{"title":"node性能优化","catalog":true,"date":"2019-12-23T15:14:51.000Z","subtitle":null,"header-img":null,"_content":"\n## 性能测试\n\n### 压力测试工具\n\n1. ab\n2. webBench\n\nab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它web类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n简单介绍下 ab 测试工具使用\n\n```bash\n#  -c 客户端数\n# -n 请求总数\n# -t 测试时长s\nab -c 200 -n 1600 http://127.0.0.1:3000/download/\n```\n\n测试完有个测试报告，主要关心几个数值：\n\n1. qps（request per second）: 并发数\n2. Transfer rate （吞吐量）\n3. Time per request（平均响应时间）\n\n### 找到性能瓶颈所在地\n\n1. top （检查 cpu、内存使用情况）\n2. iostat （检查 io 设备情况）\n3. 后端服务\n\n---\n\n## 性能分析\n\n1. 工具\n\n- Node.js 自带 profile\n\n```js\n// 启用profile模式，生成性能的log文件\nnode --prof 入口文件\n\n// 打开ab进行压测\nab -c200 -t15 http://127.0.0.1:3000/download\n\n// ab测试完之后 分析生成的profile\nnode --prof-process 刚才生成的log文件\n```\n\n- chrome devtool\n\n```js\n// inspect-brk 启动时暂停代码执行 debugger模式\nnode --inspect-brk 入口文件\n\n// 进行压测\n\n// 在chrome devtool的profiler下查看cpu使用情况 地址：chrome://inspect\n\n```\n\n- Clinic.js\n","source":"_posts/node性能优化.md","raw":"---\ntitle: node性能优化\ncatalog: true\ndate: 2019-12-23 23:14:51\nsubtitle:\nheader-img:\ntags: node\ncategories: 前端\n---\n\n## 性能测试\n\n### 压力测试工具\n\n1. ab\n2. webBench\n\nab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它web类型的服务器进行压力测试。比如nginx、tomcat、IIS等。\n\n简单介绍下 ab 测试工具使用\n\n```bash\n#  -c 客户端数\n# -n 请求总数\n# -t 测试时长s\nab -c 200 -n 1600 http://127.0.0.1:3000/download/\n```\n\n测试完有个测试报告，主要关心几个数值：\n\n1. qps（request per second）: 并发数\n2. Transfer rate （吞吐量）\n3. Time per request（平均响应时间）\n\n### 找到性能瓶颈所在地\n\n1. top （检查 cpu、内存使用情况）\n2. iostat （检查 io 设备情况）\n3. 后端服务\n\n---\n\n## 性能分析\n\n1. 工具\n\n- Node.js 自带 profile\n\n```js\n// 启用profile模式，生成性能的log文件\nnode --prof 入口文件\n\n// 打开ab进行压测\nab -c200 -t15 http://127.0.0.1:3000/download\n\n// ab测试完之后 分析生成的profile\nnode --prof-process 刚才生成的log文件\n```\n\n- chrome devtool\n\n```js\n// inspect-brk 启动时暂停代码执行 debugger模式\nnode --inspect-brk 入口文件\n\n// 进行压测\n\n// 在chrome devtool的profiler下查看cpu使用情况 地址：chrome://inspect\n\n```\n\n- Clinic.js\n","slug":"node性能优化","published":1,"updated":"2024-02-20T06:48:45.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuu0025lwxaneqxa5ba","content":"<h2><span id=\"性能测试\">性能测试</span></h2><h3><span id=\"压力测试工具\">压力测试工具</span></h3><ol>\n<li>ab</li>\n<li>webBench</li>\n</ol>\n<p>ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它web类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>简单介绍下 ab 测试工具使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  -c 客户端数</span></span><br><span class=\"line\"><span class=\"comment\"># -n 请求总数</span></span><br><span class=\"line\"><span class=\"comment\"># -t 测试时长s</span></span><br><span class=\"line\">ab -c 200 -n 1600 http://127.0.0.1:3000/download/</span><br></pre></td></tr></table></figure>\n\n<p>测试完有个测试报告，主要关心几个数值：</p>\n<ol>\n<li>qps（request per second）: 并发数</li>\n<li>Transfer rate （吞吐量）</li>\n<li>Time per request（平均响应时间）</li>\n</ol>\n<h3><span id=\"找到性能瓶颈所在地\">找到性能瓶颈所在地</span></h3><ol>\n<li>top （检查 cpu、内存使用情况）</li>\n<li>iostat （检查 io 设备情况）</li>\n<li>后端服务</li>\n</ol>\n<hr>\n<h2><span id=\"性能分析\">性能分析</span></h2><ol>\n<li>工具</li>\n</ol>\n<ul>\n<li>Node.js 自带 profile</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用profile模式，生成性能的log文件</span></span><br><span class=\"line\">node --prof 入口文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打开ab进行压测</span></span><br><span class=\"line\">ab -c200 -t15 http:<span class=\"comment\">//127.0.0.1:3000/download</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ab测试完之后 分析生成的profile</span></span><br><span class=\"line\">node --prof-process 刚才生成的log文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>chrome devtool</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inspect-brk 启动时暂停代码执行 debugger模式</span></span><br><span class=\"line\">node --inspect-brk 入口文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行压测</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在chrome devtool的profiler下查看cpu使用情况 地址：chrome://inspect</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Clinic.js</li>\n</ul>\n","site":{"data":{}},"length":636,"excerpt":"","more":"<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><h3 id=\"压力测试工具\"><a href=\"#压力测试工具\" class=\"headerlink\" title=\"压力测试工具\"></a>压力测试工具</h3><ol>\n<li>ab</li>\n<li>webBench</li>\n</ol>\n<p>ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它web类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>\n<p>简单介绍下 ab 测试工具使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  -c 客户端数</span></span><br><span class=\"line\"><span class=\"comment\"># -n 请求总数</span></span><br><span class=\"line\"><span class=\"comment\"># -t 测试时长s</span></span><br><span class=\"line\">ab -c 200 -n 1600 http://127.0.0.1:3000/download/</span><br></pre></td></tr></table></figure>\n\n<p>测试完有个测试报告，主要关心几个数值：</p>\n<ol>\n<li>qps（request per second）: 并发数</li>\n<li>Transfer rate （吞吐量）</li>\n<li>Time per request（平均响应时间）</li>\n</ol>\n<h3 id=\"找到性能瓶颈所在地\"><a href=\"#找到性能瓶颈所在地\" class=\"headerlink\" title=\"找到性能瓶颈所在地\"></a>找到性能瓶颈所在地</h3><ol>\n<li>top （检查 cpu、内存使用情况）</li>\n<li>iostat （检查 io 设备情况）</li>\n<li>后端服务</li>\n</ol>\n<hr>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><ol>\n<li>工具</li>\n</ol>\n<ul>\n<li>Node.js 自带 profile</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用profile模式，生成性能的log文件</span></span><br><span class=\"line\">node --prof 入口文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打开ab进行压测</span></span><br><span class=\"line\">ab -c200 -t15 http:<span class=\"comment\">//127.0.0.1:3000/download</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ab测试完之后 分析生成的profile</span></span><br><span class=\"line\">node --prof-process 刚才生成的log文件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>chrome devtool</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inspect-brk 启动时暂停代码执行 debugger模式</span></span><br><span class=\"line\">node --inspect-brk 入口文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行压测</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在chrome devtool的profiler下查看cpu使用情况 地址：chrome://inspect</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Clinic.js</li>\n</ul>\n"},{"title":"python爬虫框架scrapy","catalog":true,"date":"2019-06-19T06:07:34.000Z","subtitle":null,"header-img":null,"_content":"\n### 基本用法\n\n1.创建项目\n\n```shell\nscrapy startproject 项目名称\n```\n\n2.创建一个爬虫\n\n```shell\nscrapy genspider XX XX.com\n```\n\n3.启动脚本\n\n```shell\nscrapy crawl XX\n```\n\n也可以新建一个启动文件，比如`start.py`\n\n```python\nfrom scrapy.cmdline import execute\n\nexecute('scrapy crawl stockX'.split())\n```\n\n4.爬虫脚本\n\n必须要有`name`，这个是和启动对应命令对应的的名称\n\n`parse`以及`start_urls`和`allowed_domains`可选\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    start_urls = ['https://www.baidu.com/']\n\n    def parse(self, response):\n        print(response.text)\n```\n\n其中 start_urls 可以接受多个 url 参数，也可以拆分成多个步骤\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    # start_urls = ['https://www.baidu.com/']\n\n    def start_requests(self):\n        yield scrapy.Request('https://www.baidu.com')\n\n    def parse(self, response):\n        print(response.text)\n```\n\n---\n\n1. `Items`相当于定义的需要输出的数据模型，用来存储数据，推送给`pipline`解析处理；\n\n2. 如果要爬取多组数据，最好是建立多个模型，即`Item`；\n\n---\n\n## Pipline\n\n### 1. 介绍\n\n当 item 在 Spider 中被收集之后，会传递到 item pipline 中处理；\n\n作用：\n\n- 清理 html 数据\n- 验证爬取数据\n- 去重并丢弃\n- 数据持久化\n\n### 2. 编写 item pipline\n\n2.1 必须实现的函数\n\n- process_item\n\n  每个`pipline`都是一个 python 类，负责接收到`item`并执行一些行为，内部必须实现`process_item(self, item, spider)`方法，必须返回一个`dict`或者`item`对象。\n\n  `piplines`只能接受字典和`items`，在主程序通过`yield`推送到`piplines`\n\n  2.2 可以选择实现\n\n- `open_spider(self, spider)`表示当 spider 开启的时候调用的方法；\n- `close_spider(self, spider)`标识当 spider 关闭的时候调用的方法；\n\n注意：\n\n- `pipline`写完需要在配置项`settings`的`ITEM_PIPELINES`里写入来启动\n\n```python\nITEM_PIPELINE {\n  demo.pipelines.testDemoPipeline : 300    // 300是优先级 越大优先级越高\n}\n```\n\n- 文件流写入是缓冲一定字节的数据再一次性写入\n\n  强制立刻写入\n\n```python\nself.file.flush()\n```\n\n---\n\n2.3 如果编写多个`pipeline`，则会改成指定大小去依次执行每次推过来的`item`，如果需要丢弃`item`\n\n```python\n from scrapy.exceptions import DropItem\n\n raise DropItem()\n```\n\n2.4 推送过来的`item`并不是一个 list，如果需要存储数据，则需要转成字典\n\n```python\n self.json_file.writelines(json.dumps(dict(item), ensure_ascii=False) + '\\r')\n```\n","source":"_posts/python爬虫框架scrapy.md","raw":"---\ntitle: python爬虫框架scrapy\ncatalog: true\ndate: 2019-06-19 14:07:34\nsubtitle:\nheader-img:\ntags: crawler\ncategories: python\n---\n\n### 基本用法\n\n1.创建项目\n\n```shell\nscrapy startproject 项目名称\n```\n\n2.创建一个爬虫\n\n```shell\nscrapy genspider XX XX.com\n```\n\n3.启动脚本\n\n```shell\nscrapy crawl XX\n```\n\n也可以新建一个启动文件，比如`start.py`\n\n```python\nfrom scrapy.cmdline import execute\n\nexecute('scrapy crawl stockX'.split())\n```\n\n4.爬虫脚本\n\n必须要有`name`，这个是和启动对应命令对应的的名称\n\n`parse`以及`start_urls`和`allowed_domains`可选\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    start_urls = ['https://www.baidu.com/']\n\n    def parse(self, response):\n        print(response.text)\n```\n\n其中 start_urls 可以接受多个 url 参数，也可以拆分成多个步骤\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\n\nclass BaiduSpider(scrapy.Spider):\n    name = 'baidu'\n    allowed_domains = ['baidu.com']\n    # start_urls = ['https://www.baidu.com/']\n\n    def start_requests(self):\n        yield scrapy.Request('https://www.baidu.com')\n\n    def parse(self, response):\n        print(response.text)\n```\n\n---\n\n1. `Items`相当于定义的需要输出的数据模型，用来存储数据，推送给`pipline`解析处理；\n\n2. 如果要爬取多组数据，最好是建立多个模型，即`Item`；\n\n---\n\n## Pipline\n\n### 1. 介绍\n\n当 item 在 Spider 中被收集之后，会传递到 item pipline 中处理；\n\n作用：\n\n- 清理 html 数据\n- 验证爬取数据\n- 去重并丢弃\n- 数据持久化\n\n### 2. 编写 item pipline\n\n2.1 必须实现的函数\n\n- process_item\n\n  每个`pipline`都是一个 python 类，负责接收到`item`并执行一些行为，内部必须实现`process_item(self, item, spider)`方法，必须返回一个`dict`或者`item`对象。\n\n  `piplines`只能接受字典和`items`，在主程序通过`yield`推送到`piplines`\n\n  2.2 可以选择实现\n\n- `open_spider(self, spider)`表示当 spider 开启的时候调用的方法；\n- `close_spider(self, spider)`标识当 spider 关闭的时候调用的方法；\n\n注意：\n\n- `pipline`写完需要在配置项`settings`的`ITEM_PIPELINES`里写入来启动\n\n```python\nITEM_PIPELINE {\n  demo.pipelines.testDemoPipeline : 300    // 300是优先级 越大优先级越高\n}\n```\n\n- 文件流写入是缓冲一定字节的数据再一次性写入\n\n  强制立刻写入\n\n```python\nself.file.flush()\n```\n\n---\n\n2.3 如果编写多个`pipeline`，则会改成指定大小去依次执行每次推过来的`item`，如果需要丢弃`item`\n\n```python\n from scrapy.exceptions import DropItem\n\n raise DropItem()\n```\n\n2.4 推送过来的`item`并不是一个 list，如果需要存储数据，则需要转成字典\n\n```python\n self.json_file.writelines(json.dumps(dict(item), ensure_ascii=False) + '\\r')\n```\n","slug":"python爬虫框架scrapy","published":1,"updated":"2024-02-20T06:48:45.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuv0028lwxap0fc6uwn","content":"<h3><span id=\"基本用法\">基本用法</span></h3><p>1.创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure>\n\n<p>2.创建一个爬虫</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider XX XX.com</span><br></pre></td></tr></table></figure>\n\n<p>3.启动脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl XX</span><br></pre></td></tr></table></figure>\n\n<p>也可以新建一个启动文件，比如<code>start.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.cmdline <span class=\"keyword\">import</span> execute</span><br><span class=\"line\"></span><br><span class=\"line\">execute(<span class=\"string\">'scrapy crawl stockX'</span>.split())</span><br></pre></td></tr></table></figure>\n\n<p>4.爬虫脚本</p>\n<p>必须要有<code>name</code>，这个是和启动对应命令对应的的名称</p>\n<p><code>parse</code>以及<code>start_urls</code>和<code>allowed_domains</code>可选</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'https://www.baidu.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>其中 start_urls 可以接受多个 url 参数，也可以拆分成多个步骤</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># start_urls = ['https://www.baidu.com/']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol>\n<li><p><code>Items</code>相当于定义的需要输出的数据模型，用来存储数据，推送给<code>pipline</code>解析处理；</p>\n</li>\n<li><p>如果要爬取多组数据，最好是建立多个模型，即<code>Item</code>；</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"pipline\">Pipline</span></h2><h3><span id=\"1-介绍\">1. 介绍</span></h3><p>当 item 在 Spider 中被收集之后，会传递到 item pipline 中处理；</p>\n<p>作用：</p>\n<ul>\n<li>清理 html 数据</li>\n<li>验证爬取数据</li>\n<li>去重并丢弃</li>\n<li>数据持久化</li>\n</ul>\n<h3><span id=\"2-编写-item-pipline\">2. 编写 item pipline</span></h3><p>2.1 必须实现的函数</p>\n<ul>\n<li><p>process_item</p>\n<p>每个<code>pipline</code>都是一个 python 类，负责接收到<code>item</code>并执行一些行为，内部必须实现<code>process_item(self, item, spider)</code>方法，必须返回一个<code>dict</code>或者<code>item</code>对象。</p>\n<p><code>piplines</code>只能接受字典和<code>items</code>，在主程序通过<code>yield</code>推送到<code>piplines</code></p>\n<p>2.2 可以选择实现</p>\n</li>\n<li><p><code>open_spider(self, spider)</code>表示当 spider 开启的时候调用的方法；</p>\n</li>\n<li><p><code>close_spider(self, spider)</code>标识当 spider 关闭的时候调用的方法；</p>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><code>pipline</code>写完需要在配置项<code>settings</code>的<code>ITEM_PIPELINES</code>里写入来启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINE &#123;</span><br><span class=\"line\">  demo.pipelines.testDemoPipeline : <span class=\"number\">300</span>    // <span class=\"number\">300</span>是优先级 越大优先级越高</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>文件流写入是缓冲一定字节的数据再一次性写入</p>\n<p>强制立刻写入</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.file.flush()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.3 如果编写多个<code>pipeline</code>，则会改成指定大小去依次执行每次推过来的<code>item</code>，如果需要丢弃<code>item</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> DropItem()</span><br></pre></td></tr></table></figure>\n\n<p>2.4 推送过来的<code>item</code>并不是一个 list，如果需要存储数据，则需要转成字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.json_file.writelines(json.dumps(dict(item), ensure_ascii=<span class=\"literal\">False</span>) + <span class=\"string\">'\\r'</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1551,"excerpt":"","more":"<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>1.创建项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject 项目名称</span><br></pre></td></tr></table></figure>\n\n<p>2.创建一个爬虫</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy genspider XX XX.com</span><br></pre></td></tr></table></figure>\n\n<p>3.启动脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl XX</span><br></pre></td></tr></table></figure>\n\n<p>也可以新建一个启动文件，比如<code>start.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.cmdline <span class=\"keyword\">import</span> execute</span><br><span class=\"line\"></span><br><span class=\"line\">execute(<span class=\"string\">'scrapy crawl stockX'</span>.split())</span><br></pre></td></tr></table></figure>\n\n<p>4.爬虫脚本</p>\n<p>必须要有<code>name</code>，这个是和启动对应命令对应的的名称</p>\n<p><code>parse</code>以及<code>start_urls</code>和<code>allowed_domains</code>可选</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'https://www.baidu.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n\n<p>其中 start_urls 可以接受多个 url 参数，也可以拆分成多个步骤</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'baidu'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'baidu.com'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># start_urls = ['https://www.baidu.com/']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        print(response.text)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol>\n<li><p><code>Items</code>相当于定义的需要输出的数据模型，用来存储数据，推送给<code>pipline</code>解析处理；</p>\n</li>\n<li><p>如果要爬取多组数据，最好是建立多个模型，即<code>Item</code>；</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"Pipline\"><a href=\"#Pipline\" class=\"headerlink\" title=\"Pipline\"></a>Pipline</h2><h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>当 item 在 Spider 中被收集之后，会传递到 item pipline 中处理；</p>\n<p>作用：</p>\n<ul>\n<li>清理 html 数据</li>\n<li>验证爬取数据</li>\n<li>去重并丢弃</li>\n<li>数据持久化</li>\n</ul>\n<h3 id=\"2-编写-item-pipline\"><a href=\"#2-编写-item-pipline\" class=\"headerlink\" title=\"2. 编写 item pipline\"></a>2. 编写 item pipline</h3><p>2.1 必须实现的函数</p>\n<ul>\n<li><p>process_item</p>\n<p>每个<code>pipline</code>都是一个 python 类，负责接收到<code>item</code>并执行一些行为，内部必须实现<code>process_item(self, item, spider)</code>方法，必须返回一个<code>dict</code>或者<code>item</code>对象。</p>\n<p><code>piplines</code>只能接受字典和<code>items</code>，在主程序通过<code>yield</code>推送到<code>piplines</code></p>\n<p>2.2 可以选择实现</p>\n</li>\n<li><p><code>open_spider(self, spider)</code>表示当 spider 开启的时候调用的方法；</p>\n</li>\n<li><p><code>close_spider(self, spider)</code>标识当 spider 关闭的时候调用的方法；</p>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><code>pipline</code>写完需要在配置项<code>settings</code>的<code>ITEM_PIPELINES</code>里写入来启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ITEM_PIPELINE &#123;</span><br><span class=\"line\">  demo.pipelines.testDemoPipeline : <span class=\"number\">300</span>    // <span class=\"number\">300</span>是优先级 越大优先级越高</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>文件流写入是缓冲一定字节的数据再一次性写入</p>\n<p>强制立刻写入</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.file.flush()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>2.3 如果编写多个<code>pipeline</code>，则会改成指定大小去依次执行每次推过来的<code>item</code>，如果需要丢弃<code>item</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">raise</span> DropItem()</span><br></pre></td></tr></table></figure>\n\n<p>2.4 推送过来的<code>item</code>并不是一个 list，如果需要存储数据，则需要转成字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.json_file.writelines(json.dumps(dict(item), ensure_ascii=<span class=\"literal\">False</span>) + <span class=\"string\">'\\r'</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"react/vue中dom-diff简易版实现","catalog":true,"date":"2019-06-20T03:33:40.000Z","subtitle":null,"header-img":null,"_content":"\n## 一、创建虚拟dom\n\n利用 `create-react-app`快速创建一个项目模板；\n\n删掉src下的源文件，替换成 index.js\n\n首先我们先要用一个对象定义一个虚拟DOM的数据结构：\n\n```shell\nElement {\n    type: 'ul',\n    props: {\n        class: 'list'\n    },\n    children: [\n        Element{\n            type: 'li',\n            props: {\n                class: 'item'\n            },\n            children: ['a']\n        }\n    ]\n}\n```\n\n开始码代码实现虚拟dom的方法实现。\n\n!['虚拟DOM结构'](https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739)\n浏览器上查看打印的日志信息，如下：\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781)\n\n既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法`render`\n\n先遍历最外层`ul`的`type`和`props`两个属性\n\n![render](https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171)\n\n注意：`input`标签的`value`属性 还有所有标签的`style`属性\n\n好了，接下来就是继续遍历`children`属性，此时`children`会有两种情况\n\n1. 如果是文本 直接插入；\n2. 如果是子元素，递归遍历直到最终的结果是文本；\n\n![遍历虚拟don元素转换为真实dom结构](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439)\n\n下一步我们将这个实际的DOM元素结构插入到页面中\n\n![append](https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016)\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852)\n\n完成第一部分。\n\n---\n\n## 二、实现dom-diff算法\n\n`dom-diff`算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。\n\n若`type`不一致直接替换当前节点以及当前节点下的子节点；\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。\n\n补丁包的定义规则如下：\n\n1. 属性不同（type: 'ATTRS', attrs）\n2. 新的节点被删除了 （type: 'REMOVE', index: xxxx）\n3. 节点类型不同/\b新增 （type: 'REPLACE', newNode）\n4. 仅仅是文本变化（type: 'TEXT', text）\n\n新建一个`dom-diff.js`，专门处理`diff`算法\n\n手动调用`diff`方法（react中\b调用`diff`算法是在触发`setState`之后）\n\n两个虚拟dom结构如下：\n\n![虚拟dom结构](https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549)\n\n先处理`type`相同，属性不同的情况。\n\n![属性不同](https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893)\n\n发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中\n\n```shell\n// 补丁包 存放两个虚拟dom的差异部分\nlet patchs = {}\n// 放到最外层的大补丁包中\nif (currentPatchs.length > 0) {\n  patchs[index] = currentPatchs\n}\n```\n\n好了 相同类型的父节点一样，在属性比较完成之后，就需要比较`children`的属性是否有变化\n比较`children`属性内部元素是否变化，利用递归去遍历\n\n```shell\nlet globalIndex = 0\n\nfunction diffChildren (oldChildrens, newChildrens) {\n  oldChildrens.forEach((child, idx) => {\n    walk(child, newChildrens[idx], ++globalIndex)\n  })\n}\n```\n\n如果一开始`type`类型不相同不需要再去比较，直接用新节点替换老节点即可；\n\n```shell\n// type不一致\ncurrentPatchs.push({\n  type: TYPES.REPLACE,\n  newNode: newTree\n})\n```\n\n兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；\n\n最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043)\n\n补丁包的`key`就是对应新节点有变化的数据位置。\n\n---\n\n## 三、 打补丁更新视图\n\n最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。\n\n![开始打补丁](https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221)\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704)\n\n根据之前定义的不同补丁对象结构依次处理\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960)\n\n大功告成！\n\n---\n\n这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了`diff`算法的原理。\n\n如有笔误或者其他实现不对的地方，还望大家指出，谢谢！\n\n具体代码可以参考github链接查看：[dom-diff-demo](https://github.com/Megan-TA/dom-diff-demo)\n","source":"_posts/react-vue中dom-diff简易版实现.md","raw":"---\ntitle: react/vue中dom-diff简易版实现\ncatalog: true\ndate: 2019-06-20 11:33:40\nsubtitle:\nheader-img:\ntags: react\ncategories: 前端\n---\n\n## 一、创建虚拟dom\n\n利用 `create-react-app`快速创建一个项目模板；\n\n删掉src下的源文件，替换成 index.js\n\n首先我们先要用一个对象定义一个虚拟DOM的数据结构：\n\n```shell\nElement {\n    type: 'ul',\n    props: {\n        class: 'list'\n    },\n    children: [\n        Element{\n            type: 'li',\n            props: {\n                class: 'item'\n            },\n            children: ['a']\n        }\n    ]\n}\n```\n\n开始码代码实现虚拟dom的方法实现。\n\n!['虚拟DOM结构'](https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739)\n浏览器上查看打印的日志信息，如下：\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781)\n\n既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法`render`\n\n先遍历最外层`ul`的`type`和`props`两个属性\n\n![render](https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171)\n\n注意：`input`标签的`value`属性 还有所有标签的`style`属性\n\n好了，接下来就是继续遍历`children`属性，此时`children`会有两种情况\n\n1. 如果是文本 直接插入；\n2. 如果是子元素，递归遍历直到最终的结果是文本；\n\n![遍历虚拟don元素转换为真实dom结构](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439)\n\n下一步我们将这个实际的DOM元素结构插入到页面中\n\n![append](https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016)\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852)\n\n完成第一部分。\n\n---\n\n## 二、实现dom-diff算法\n\n`dom-diff`算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。\n\n若`type`不一致直接替换当前节点以及当前节点下的子节点；\n如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。\n\n补丁包的定义规则如下：\n\n1. 属性不同（type: 'ATTRS', attrs）\n2. 新的节点被删除了 （type: 'REMOVE', index: xxxx）\n3. 节点类型不同/\b新增 （type: 'REPLACE', newNode）\n4. 仅仅是文本变化（type: 'TEXT', text）\n\n新建一个`dom-diff.js`，专门处理`diff`算法\n\n手动调用`diff`方法（react中\b调用`diff`算法是在触发`setState`之后）\n\n两个虚拟dom结构如下：\n\n![虚拟dom结构](https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549)\n\n先处理`type`相同，属性不同的情况。\n\n![属性不同](https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893)\n\n发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中\n\n```shell\n// 补丁包 存放两个虚拟dom的差异部分\nlet patchs = {}\n// 放到最外层的大补丁包中\nif (currentPatchs.length > 0) {\n  patchs[index] = currentPatchs\n}\n```\n\n好了 相同类型的父节点一样，在属性比较完成之后，就需要比较`children`的属性是否有变化\n比较`children`属性内部元素是否变化，利用递归去遍历\n\n```shell\nlet globalIndex = 0\n\nfunction diffChildren (oldChildrens, newChildrens) {\n  oldChildrens.forEach((child, idx) => {\n    walk(child, newChildrens[idx], ++globalIndex)\n  })\n}\n```\n\n如果一开始`type`类型不相同不需要再去比较，直接用新节点替换老节点即可；\n\n```shell\n// type不一致\ncurrentPatchs.push({\n  type: TYPES.REPLACE,\n  newNode: newTree\n})\n```\n\n兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；\n\n最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043)\n\n补丁包的`key`就是对应新节点有变化的数据位置。\n\n---\n\n## 三、 打补丁更新视图\n\n最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。\n\n![开始打补丁](https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221)\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704)\n\n根据之前定义的不同补丁对象结构依次处理\n\n![补丁步骤](https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351)\n\n![控制台日志](https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960)\n\n大功告成！\n\n---\n\n这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了`diff`算法的原理。\n\n如有笔误或者其他实现不对的地方，还望大家指出，谢谢！\n\n具体代码可以参考github链接查看：[dom-diff-demo](https://github.com/Megan-TA/dom-diff-demo)\n","slug":"react-vue中dom-diff简易版实现","published":1,"updated":"2024-02-20T06:48:45.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuv002blwxa5vnp4niu","content":"<h2><span id=\"一-创建虚拟dom\">一、创建虚拟dom</span></h2><p>利用 <code>create-react-app</code>快速创建一个项目模板；</p>\n<p>删掉src下的源文件，替换成 index.js</p>\n<p>首先我们先要用一个对象定义一个虚拟DOM的数据结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element &#123;</span><br><span class=\"line\">    type: 'ul',</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        class: 'list'</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Element&#123;</span><br><span class=\"line\">            type: 'li',</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                class: 'item'</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            children: ['a']</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开始码代码实现虚拟dom的方法实现。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739\" alt=\"&#39;虚拟DOM结构&#39;\"><br>浏览器上查看打印的日志信息，如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781\" alt=\"控制台日志\"></p>\n<p>既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法<code>render</code></p>\n<p>先遍历最外层<code>ul</code>的<code>type</code>和<code>props</code>两个属性</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336\" alt=\"render\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171\" alt=\"控制台日志\"></p>\n<p>注意：<code>input</code>标签的<code>value</code>属性 还有所有标签的<code>style</code>属性</p>\n<p>好了，接下来就是继续遍历<code>children</code>属性，此时<code>children</code>会有两种情况</p>\n<ol>\n<li>如果是文本 直接插入；</li>\n<li>如果是子元素，递归遍历直到最终的结果是文本；</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541\" alt=\"遍历虚拟don元素转换为真实dom结构\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439\" alt=\"控制台日志\"></p>\n<p>下一步我们将这个实际的DOM元素结构插入到页面中</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016\" alt=\"append\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852\" alt=\"控制台日志\"></p>\n<p>完成第一部分。</p>\n<hr>\n<h2><span id=\"二-实现dom-diff算法\">二、实现dom-diff算法</span></h2><p><code>dom-diff</code>算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。</p>\n<p>若<code>type</code>不一致直接替换当前节点以及当前节点下的子节点；<br>如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。</p>\n<p>补丁包的定义规则如下：</p>\n<ol>\n<li>属性不同（type: ‘ATTRS’, attrs）</li>\n<li>新的节点被删除了 （type: ‘REMOVE’, index: xxxx）</li>\n<li>节点类型不同/\b新增 （type: ‘REPLACE’, newNode）</li>\n<li>仅仅是文本变化（type: ‘TEXT’, text）</li>\n</ol>\n<p>新建一个<code>dom-diff.js</code>，专门处理<code>diff</code>算法</p>\n<p>手动调用<code>diff</code>方法（react中\b调用<code>diff</code>算法是在触发<code>setState</code>之后）</p>\n<p>两个虚拟dom结构如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549\" alt=\"虚拟dom结构\"></p>\n<p>先处理<code>type</code>相同，属性不同的情况。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100\" alt=\"属性不同\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893\" alt=\"控制台日志\"></p>\n<p>发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 补丁包 存放两个虚拟dom的差异部分</span><br><span class=\"line\">let patchs = &#123;&#125;</span><br><span class=\"line\">// 放到最外层的大补丁包中</span><br><span class=\"line\">if (currentPatchs.length &gt; 0) &#123;</span><br><span class=\"line\">  patchs[index] = currentPatchs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了 相同类型的父节点一样，在属性比较完成之后，就需要比较<code>children</code>的属性是否有变化<br>比较<code>children</code>属性内部元素是否变化，利用递归去遍历</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalIndex = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function diffChildren (oldChildrens, newChildrens) &#123;</span><br><span class=\"line\">  oldChildrens.forEach((child, idx) =&gt; &#123;</span><br><span class=\"line\">    walk(child, newChildrens[idx], ++globalIndex)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果一开始<code>type</code>类型不相同不需要再去比较，直接用新节点替换老节点即可；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type不一致</span><br><span class=\"line\">currentPatchs.push(&#123;</span><br><span class=\"line\">  type: TYPES.REPLACE,</span><br><span class=\"line\">  newNode: newTree</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；</p>\n<p>最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043\" alt=\"控制台日志\"></p>\n<p>补丁包的<code>key</code>就是对应新节点有变化的数据位置。</p>\n<hr>\n<h2><span id=\"三-打补丁更新视图\">三、 打补丁更新视图</span></h2><p>最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221\" alt=\"开始打补丁\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704\" alt=\"补丁步骤\"></p>\n<p>根据之前定义的不同补丁对象结构依次处理</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351\" alt=\"补丁步骤\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960\" alt=\"控制台日志\"></p>\n<p>大功告成！</p>\n<hr>\n<p>这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了<code>diff</code>算法的原理。</p>\n<p>如有笔误或者其他实现不对的地方，还望大家指出，谢谢！</p>\n<p>具体代码可以参考github链接查看：<a href=\"https://github.com/Megan-TA/dom-diff-demo\" target=\"_blank\" rel=\"noopener\">dom-diff-demo</a></p>\n","site":{"data":{}},"length":1719,"excerpt":"","more":"<h2 id=\"一、创建虚拟dom\"><a href=\"#一、创建虚拟dom\" class=\"headerlink\" title=\"一、创建虚拟dom\"></a>一、创建虚拟dom</h2><p>利用 <code>create-react-app</code>快速创建一个项目模板；</p>\n<p>删掉src下的源文件，替换成 index.js</p>\n<p>首先我们先要用一个对象定义一个虚拟DOM的数据结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element &#123;</span><br><span class=\"line\">    type: 'ul',</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        class: 'list'</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Element&#123;</span><br><span class=\"line\">            type: 'li',</span><br><span class=\"line\">            props: &#123;</span><br><span class=\"line\">                class: 'item'</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            children: ['a']</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开始码代码实现虚拟dom的方法实现。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7c8c5aa6083b?w=2956&h=992&f=png&s=271739\" alt=\"&#39;虚拟DOM结构&#39;\"><br>浏览器上查看打印的日志信息，如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7ca53ba8fef7?w=1210&h=410&f=png&s=97781\" alt=\"控制台日志\"></p>\n<p>既然虚拟DOM方法已经写好，下一步就要将这个虚拟dom插入到页面中，那我们可以专门写一个渲染真实节点的方法<code>render</code></p>\n<p>先遍历最外层<code>ul</code>的<code>type</code>和<code>props</code>两个属性</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e8001b419a3?w=2568&h=1244&f=png&s=359336\" alt=\"render\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7e9fddde1a34?w=1078&h=128&f=png&s=25171\" alt=\"控制台日志\"></p>\n<p>注意：<code>input</code>标签的<code>value</code>属性 还有所有标签的<code>style</code>属性</p>\n<p>好了，接下来就是继续遍历<code>children</code>属性，此时<code>children</code>会有两种情况</p>\n<ol>\n<li>如果是文本 直接插入；</li>\n<li>如果是子元素，递归遍历直到最终的结果是文本；</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0b58ed9735?w=1036&h=484&f=png&s=95541\" alt=\"遍历虚拟don元素转换为真实dom结构\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d7f0d50748a42?w=676&h=198&f=png&s=31439\" alt=\"控制台日志\"></p>\n<p>下一步我们将这个实际的DOM元素结构插入到页面中</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d8078bce16225?w=2988&h=774&f=png&s=270016\" alt=\"append\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/11/3/166d805dec820f97?w=1120&h=862&f=png&s=112852\" alt=\"控制台日志\"></p>\n<p>完成第一部分。</p>\n<hr>\n<h2 id=\"二、实现dom-diff算法\"><a href=\"#二、实现dom-diff算法\" class=\"headerlink\" title=\"二、实现dom-diff算法\"></a>二、实现dom-diff算法</h2><p><code>dom-diff</code>算法就是在两棵抽象语法树的同一位置采用先序的深度遍历算法做比较，同时用补丁的形式记录需要更新的节点位置。</p>\n<p>若<code>type</code>不一致直接替换当前节点以及当前节点下的子节点；<br>如果两个父节点一致，则从左往后遍历子节点，若子节点一致，遍历子节点下的子节点，依次递归。</p>\n<p>补丁包的定义规则如下：</p>\n<ol>\n<li>属性不同（type: ‘ATTRS’, attrs）</li>\n<li>新的节点被删除了 （type: ‘REMOVE’, index: xxxx）</li>\n<li>节点类型不同/\b新增 （type: ‘REPLACE’, newNode）</li>\n<li>仅仅是文本变化（type: ‘TEXT’, text）</li>\n</ol>\n<p>新建一个<code>dom-diff.js</code>，专门处理<code>diff</code>算法</p>\n<p>手动调用<code>diff</code>方法（react中\b调用<code>diff</code>算法是在触发<code>setState</code>之后）</p>\n<p>两个虚拟dom结构如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf9046719203?w=1272&h=896&f=png&s=189549\" alt=\"虚拟dom结构\"></p>\n<p>先处理<code>type</code>相同，属性不同的情况。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca2da79ddd4a?w=1240&h=1688&f=png&s=288100\" alt=\"属性不同\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dca49d1e2ece5?w=1158&h=420&f=png&s=70893\" alt=\"控制台日志\"></p>\n<p>发现控制台已经打印到属性变化的补丁包，最后我们把属性的小补丁包存放到最外层的大补丁包中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 补丁包 存放两个虚拟dom的差异部分</span><br><span class=\"line\">let patchs = &#123;&#125;</span><br><span class=\"line\">// 放到最外层的大补丁包中</span><br><span class=\"line\">if (currentPatchs.length &gt; 0) &#123;</span><br><span class=\"line\">  patchs[index] = currentPatchs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了 相同类型的父节点一样，在属性比较完成之后，就需要比较<code>children</code>的属性是否有变化<br>比较<code>children</code>属性内部元素是否变化，利用递归去遍历</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalIndex = 0</span><br><span class=\"line\"></span><br><span class=\"line\">function diffChildren (oldChildrens, newChildrens) &#123;</span><br><span class=\"line\">  oldChildrens.forEach((child, idx) =&gt; &#123;</span><br><span class=\"line\">    walk(child, newChildrens[idx], ++globalIndex)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果一开始<code>type</code>类型不相同不需要再去比较，直接用新节点替换老节点即可；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type不一致</span><br><span class=\"line\">currentPatchs.push(&#123;</span><br><span class=\"line\">  type: TYPES.REPLACE,</span><br><span class=\"line\">  newNode: newTree</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>兼容并处理好各种情况，比如：新节点不存在的情况，新节点增加，新节点类型改变，新节点文本改变以及新节点的属性变化等情况；</p>\n<p>最终拿到所有与旧节点有差异的对象放入patchs这样的一个补丁对象中。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166dde85f556609a?w=1432&h=1092&f=png&s=211043\" alt=\"控制台日志\"></p>\n<p>补丁包的<code>key</code>就是对应新节点有变化的数据位置。</p>\n<hr>\n<h2 id=\"三、-打补丁更新视图\"><a href=\"#三、-打补丁更新视图\" class=\"headerlink\" title=\"三、 打补丁更新视图\"></a>三、 打补丁更新视图</h2><p>最后一步将补丁的差异对象与现有虚拟DOM节点遍历进行一一比较与替换。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddee92a1a76de?w=1098&h=426&f=png&s=61221\" alt=\"开始打补丁\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddeed8a40ba8c?w=1096&h=1094&f=png&s=175704\" alt=\"补丁步骤\"></p>\n<p>根据之前定义的不同补丁对象结构依次处理</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf0cc87aaa5d?w=1248&h=1138&f=png&s=192351\" alt=\"补丁步骤\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/4/166ddf097e341aaf?w=1006&h=1032&f=png&s=120960\" alt=\"控制台日志\"></p>\n<p>大功告成！</p>\n<hr>\n<p>这只是diff算法的一个简易实现，还存在一些复杂情况处理的情况以及还有很多算法上面优化的方案，不过已经让我们大概了解了<code>diff</code>算法的原理。</p>\n<p>如有笔误或者其他实现不对的地方，还望大家指出，谢谢！</p>\n<p>具体代码可以参考github链接查看：<a href=\"https://github.com/Megan-TA/dom-diff-demo\" target=\"_blank\" rel=\"noopener\">dom-diff-demo</a></p>\n"},{"title":"vscode使用","catalog":true,"date":"2020-05-11T05:57:25.000Z","subtitle":null,"header-img":null,"_content":"\n## 常用设置配置\n\n```json\n{\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"editor.fontSize\": 14,\n  \"editor.accessibilityPageSize\": 14,\n  \"editor.formatOnSave\": true,\n  \"editor.tabSize\": 4,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true\n  },\n  \"window.zoomLevel\": 1,\n  \"fileheader.Author\": \"knight\",\n  \"fileheader.LastModifiedBy\": \"knight\",\n  \"fileheader.tpl\": \"/*\\r\\n * @Author: {author} \\r\\n * @Title:  \\r\\n * @Date: {createTime} \\r\\n * @Last Modified by:   {lastModifiedBy} \\r\\n * @Last Modified time: {updateTime} \\r\\n */\\r\\n\",\n  \"git.autofetch\": true,\n  \"merge-conflict.diffViewPosition\": \"Beside\",\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ],\n  \"eslint.format.enable\": true,\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n  \"vetur.format.defaultFormatterOptions\": {\n    \"js-beautify-html\": {\n      \"wrap_attributes\": \"force-aligned\"\n    }\n  },\n  \"vetur.format.enable\": true,\n  \"vetur.format.defaultFormatter.ts\": \"prettier\",\n  \"vetur.format.options.tabSize\": 4,\n  \"javascript.preferences.quoteStyle\": \"single\",\n  \"typescript.preferences.quoteStyle\": \"single\",\n  \"pretty-formatter.quoteConvert\": \"single\",\n  \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n  \"path-intellisense.absolutePathToWorkspace\": true,\n  \"path-intellisense.mappings\": {\n    \"@\": \"${workspaceRoot}/src\",\n    \"@public\": \"${workspaceRoot}/src/_public\"\n  }\n}\n```\n\n## 常用包\n\n1. Visual Studio IntelliCode 智能补全\n2. prettier 快速格式化 CMD+Shift+P\n3. Regex Previewer 正则表达式测试\n4. stylelint\n5. vetur # 开发 vue，语法补全、提示助手 （必备插件）\n6. vscode-icons # vscode 图标显示\n7. 小程序助手\n8. vscode-element-helper\n9. SVG Viewer # 预览 SVG\n10. Path Intellisense 路径自动补全\n11. minapp # 小程序开发语法补全、提示助手\n12. markdownlint markdown 语法支持和预览\n13. Live Server\n14. koroFileHeader # 函数注释、文件信息\n15. GitLens # git 辅助工具\n16. javascript code snippets # js 代码提示、补全\n17. Eslint # 代码风格提示\n18. Element UI Snippets\n19. EditorConfig for vs code\n20. Document This\n21. Debugger for Chrome\n22. Color HighLight\n23. CodeIf\n24. Code Runner\n25. Chinese Lanfguage Pack for vs code\n26. Bracket Pair Colorizer 括号以多彩颜色区分\n27. Beautify # 美化代码\n28. Auto Rename Tag # 自动重命名标签\n29. Auto Close Tag # 自动闭合标签\n30. Better Comments\n31. DotENV\n32. Git Graph git可视化工具\n33. Git History Diff\n34. git-commit-lint-vscode commit加上emoji\n35. Import Cost 显示导入模块大小\n36. Open file From Path 直接跳转到指定代码\n37. VS Color Picker 取色工具\n38. vscode-fileheader\n39. image preview 侧边栏图片预览\n\n## 项目配置项\n\n给vscode文件目录设置别名，并在引入时有对应提示，需要在根目录下新增`jsconfig.json`的文件，类似`tsconfig.json`\n\n```json\n{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"commonjs\",\n        \"allowSyntheticDefaultImports\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"@/*\": [\"src/*\"],\n            \"@public/*\": [\"src/_public/*\"],\n        }\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n## launch.json 调试配置说明\n\n```json\n{\n  \"name\": \"调试 Node.js 程序\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"program\": \"${workspaceFolder}/src/index.js\"\n}\n```\n\n- type 指定调试的语言\n- request 有两种类型，launch | attach，前者是 vscode 打开这个程序进入调试，后者是外部打开这个程序，然后接通 Node.js 的内部调试协议来调试\n- program 程序启动入口\n- console 配置终端是使用外部还是内部的集成终端\n\n如果不用 program 启动，还有其他方式启动\n\n- runtimeExecutable 使用什么命令启动，此处是 node，也可以任意启动脚本命令 pm2 等其他第三方的命令（可能要 \\${workspaceFolder}相对路径）\n- args 启动程序的参数\n\n```json\n{\n  \"name\": \"调试 Node.js 程序 - args\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"runtimeExecutable\": \"node\",\n  \"args\": [\"${workspaceFolder}/src/index.js\"]\n}\n```\n\n如果有其他编译前的准备，比如调试 TS 程序，依赖 typescript 和 ts-node 等命令\n\n```json\n{\n  \"name\": \"调试 TS Node 程序 - args\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"runtimeExecutable\": \"node\",\n  \"runtimeArgs\": [\"-r\", \"ts-node/register\"],\n  \"args\": [\"${workspaceFolder}/src/index.ts\"]\n}\n```\n\n- runtimeArgs 这个参数是为 runtimeExecutable 环境提供的配置，args 是为程序提供的配置，翻译为：通过 node 启动/src/index.ts，在启动时为 node 注入 ts-noe/register 模块，以便可以执行 ts 类型的文件，实际执行代码如下\n\n```shell\nnode --inspect-brk=DEBUG_PORT -r ts-node/register ./src/index.ts\n```\n\n当然上述启动调试还有其他方式\n\n```json\n{\n  \"name\": \"调试 TS Node 程序 - preTask\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"program\": \"${workspaceFolder}/out/index.js\",\n  \"preLaunchTask\": \"tsc_build\"\n}\n```\n\n- preLaunchTask 在 launch 调试之前先执行一个任务，这个就设计到.vscode/task.json 文件中配置的名为 tsc_build 的任务了\n\n```json\n{\n  \"label\": \"tsc_build\",\n  \"type\": \"typescript\",\n  \"tsconfig\": \"tsconfig.json\"\n}\n```\n\n如果需要调试已启动的 Node.js 程序，比如先在外部使用 node ./src/index.js 命令启动程序后，此时如果我们想给这个程序断点调试，可以加入如下配置\n\n```json\n{\n  \"name\": \"Attach to node\",\n  \"type\": \"node\",\n  \"request\": \"attach\",\n  \"processId\": \"${command:PickProcess}\"\n}\n```\n\n推荐使用 \\${command:PickProcess} 作为 processId 的值，因为 VSCode 会遍历所有的 Node PID 列出来让你选择，当然如果你写死 processId 也可以这会直接跳过选择步骤\n\nvscode 也能直接调试网页的 js 代码，安装 Debugger for Chrome 插件\n\n```json\n{\n  \"name\": \"调试网页的 JS 文件\",\n  \"request\": \"launch\",\n  \"type\": \"chrome\",\n  \"file\": \"${workspaceFolder}/index.html\"\n}\n```\n\n参考资料：\n\n1. [VSCode launch.json 配置详解](https://juejin.im/post/6844904198702645262)\n","source":"_posts/vscode使用.md","raw":"---\ntitle: vscode使用\ncatalog: true\ndate: 2020-05-11 13:57:25\nsubtitle:\nheader-img:\ntags: IDE\ncategories: 前端\n---\n\n## 常用设置配置\n\n```json\n{\n  \"workbench.iconTheme\": \"vscode-icons\",\n  \"editor.fontSize\": 14,\n  \"editor.accessibilityPageSize\": 14,\n  \"editor.formatOnSave\": true,\n  \"editor.tabSize\": 4,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true\n  },\n  \"window.zoomLevel\": 1,\n  \"fileheader.Author\": \"knight\",\n  \"fileheader.LastModifiedBy\": \"knight\",\n  \"fileheader.tpl\": \"/*\\r\\n * @Author: {author} \\r\\n * @Title:  \\r\\n * @Date: {createTime} \\r\\n * @Last Modified by:   {lastModifiedBy} \\r\\n * @Last Modified time: {updateTime} \\r\\n */\\r\\n\",\n  \"git.autofetch\": true,\n  \"merge-conflict.diffViewPosition\": \"Beside\",\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\"\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ],\n  \"eslint.format.enable\": true,\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n  \"vetur.format.defaultFormatterOptions\": {\n    \"js-beautify-html\": {\n      \"wrap_attributes\": \"force-aligned\"\n    }\n  },\n  \"vetur.format.enable\": true,\n  \"vetur.format.defaultFormatter.ts\": \"prettier\",\n  \"vetur.format.options.tabSize\": 4,\n  \"javascript.preferences.quoteStyle\": \"single\",\n  \"typescript.preferences.quoteStyle\": \"single\",\n  \"pretty-formatter.quoteConvert\": \"single\",\n  \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n  \"path-intellisense.absolutePathToWorkspace\": true,\n  \"path-intellisense.mappings\": {\n    \"@\": \"${workspaceRoot}/src\",\n    \"@public\": \"${workspaceRoot}/src/_public\"\n  }\n}\n```\n\n## 常用包\n\n1. Visual Studio IntelliCode 智能补全\n2. prettier 快速格式化 CMD+Shift+P\n3. Regex Previewer 正则表达式测试\n4. stylelint\n5. vetur # 开发 vue，语法补全、提示助手 （必备插件）\n6. vscode-icons # vscode 图标显示\n7. 小程序助手\n8. vscode-element-helper\n9. SVG Viewer # 预览 SVG\n10. Path Intellisense 路径自动补全\n11. minapp # 小程序开发语法补全、提示助手\n12. markdownlint markdown 语法支持和预览\n13. Live Server\n14. koroFileHeader # 函数注释、文件信息\n15. GitLens # git 辅助工具\n16. javascript code snippets # js 代码提示、补全\n17. Eslint # 代码风格提示\n18. Element UI Snippets\n19. EditorConfig for vs code\n20. Document This\n21. Debugger for Chrome\n22. Color HighLight\n23. CodeIf\n24. Code Runner\n25. Chinese Lanfguage Pack for vs code\n26. Bracket Pair Colorizer 括号以多彩颜色区分\n27. Beautify # 美化代码\n28. Auto Rename Tag # 自动重命名标签\n29. Auto Close Tag # 自动闭合标签\n30. Better Comments\n31. DotENV\n32. Git Graph git可视化工具\n33. Git History Diff\n34. git-commit-lint-vscode commit加上emoji\n35. Import Cost 显示导入模块大小\n36. Open file From Path 直接跳转到指定代码\n37. VS Color Picker 取色工具\n38. vscode-fileheader\n39. image preview 侧边栏图片预览\n\n## 项目配置项\n\n给vscode文件目录设置别名，并在引入时有对应提示，需要在根目录下新增`jsconfig.json`的文件，类似`tsconfig.json`\n\n```json\n{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"commonjs\",\n        \"allowSyntheticDefaultImports\": true,\n        \"baseUrl\": \"./\",\n        \"paths\": {\n            \"@/*\": [\"src/*\"],\n            \"@public/*\": [\"src/_public/*\"],\n        }\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n```\n\n## launch.json 调试配置说明\n\n```json\n{\n  \"name\": \"调试 Node.js 程序\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"program\": \"${workspaceFolder}/src/index.js\"\n}\n```\n\n- type 指定调试的语言\n- request 有两种类型，launch | attach，前者是 vscode 打开这个程序进入调试，后者是外部打开这个程序，然后接通 Node.js 的内部调试协议来调试\n- program 程序启动入口\n- console 配置终端是使用外部还是内部的集成终端\n\n如果不用 program 启动，还有其他方式启动\n\n- runtimeExecutable 使用什么命令启动，此处是 node，也可以任意启动脚本命令 pm2 等其他第三方的命令（可能要 \\${workspaceFolder}相对路径）\n- args 启动程序的参数\n\n```json\n{\n  \"name\": \"调试 Node.js 程序 - args\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"runtimeExecutable\": \"node\",\n  \"args\": [\"${workspaceFolder}/src/index.js\"]\n}\n```\n\n如果有其他编译前的准备，比如调试 TS 程序，依赖 typescript 和 ts-node 等命令\n\n```json\n{\n  \"name\": \"调试 TS Node 程序 - args\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"runtimeExecutable\": \"node\",\n  \"runtimeArgs\": [\"-r\", \"ts-node/register\"],\n  \"args\": [\"${workspaceFolder}/src/index.ts\"]\n}\n```\n\n- runtimeArgs 这个参数是为 runtimeExecutable 环境提供的配置，args 是为程序提供的配置，翻译为：通过 node 启动/src/index.ts，在启动时为 node 注入 ts-noe/register 模块，以便可以执行 ts 类型的文件，实际执行代码如下\n\n```shell\nnode --inspect-brk=DEBUG_PORT -r ts-node/register ./src/index.ts\n```\n\n当然上述启动调试还有其他方式\n\n```json\n{\n  \"name\": \"调试 TS Node 程序 - preTask\",\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"program\": \"${workspaceFolder}/out/index.js\",\n  \"preLaunchTask\": \"tsc_build\"\n}\n```\n\n- preLaunchTask 在 launch 调试之前先执行一个任务，这个就设计到.vscode/task.json 文件中配置的名为 tsc_build 的任务了\n\n```json\n{\n  \"label\": \"tsc_build\",\n  \"type\": \"typescript\",\n  \"tsconfig\": \"tsconfig.json\"\n}\n```\n\n如果需要调试已启动的 Node.js 程序，比如先在外部使用 node ./src/index.js 命令启动程序后，此时如果我们想给这个程序断点调试，可以加入如下配置\n\n```json\n{\n  \"name\": \"Attach to node\",\n  \"type\": \"node\",\n  \"request\": \"attach\",\n  \"processId\": \"${command:PickProcess}\"\n}\n```\n\n推荐使用 \\${command:PickProcess} 作为 processId 的值，因为 VSCode 会遍历所有的 Node PID 列出来让你选择，当然如果你写死 processId 也可以这会直接跳过选择步骤\n\nvscode 也能直接调试网页的 js 代码，安装 Debugger for Chrome 插件\n\n```json\n{\n  \"name\": \"调试网页的 JS 文件\",\n  \"request\": \"launch\",\n  \"type\": \"chrome\",\n  \"file\": \"${workspaceFolder}/index.html\"\n}\n```\n\n参考资料：\n\n1. [VSCode launch.json 配置详解](https://juejin.im/post/6844904198702645262)\n","slug":"vscode使用","published":1,"updated":"2024-02-20T06:48:45.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuw002flwxavpg7ix3u","content":"<h2><span id=\"常用设置配置\">常用设置配置</span></h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"vscode-icons\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.accessibilityPageSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.codeActionsOnSave\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"source.fixAll\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.Author\"</span>: <span class=\"string\">\"knight\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.LastModifiedBy\"</span>: <span class=\"string\">\"knight\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.tpl\"</span>: <span class=\"string\">\"/*\\r\\n * @Author: &#123;author&#125; \\r\\n * @Title:  \\r\\n * @Date: &#123;createTime&#125; \\r\\n * @Last Modified by:   &#123;lastModifiedBy&#125; \\r\\n * @Last Modified time: &#123;updateTime&#125; \\r\\n */\\r\\n\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"git.autofetch\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"merge-conflict.diffViewPosition\"</span>: <span class=\"string\">\"Beside\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"[vue]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"editor.defaultFormatter\"</span>: <span class=\"string\">\"octref.vetur\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.ts\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"javascript.preferences.quoteStyle\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typescript.preferences.quoteStyle\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"pretty-formatter.quoteConvert\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path-intellisense.absolutePathToWorkspace\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path-intellisense.mappings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"@public\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/src/_public\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"常用包\">常用包</span></h2><ol>\n<li>Visual Studio IntelliCode 智能补全</li>\n<li>prettier 快速格式化 CMD+Shift+P</li>\n<li>Regex Previewer 正则表达式测试</li>\n<li>stylelint</li>\n<li>vetur # 开发 vue，语法补全、提示助手 （必备插件）</li>\n<li>vscode-icons # vscode 图标显示</li>\n<li>小程序助手</li>\n<li>vscode-element-helper</li>\n<li>SVG Viewer # 预览 SVG</li>\n<li>Path Intellisense 路径自动补全</li>\n<li>minapp # 小程序开发语法补全、提示助手</li>\n<li>markdownlint markdown 语法支持和预览</li>\n<li>Live Server</li>\n<li>koroFileHeader # 函数注释、文件信息</li>\n<li>GitLens # git 辅助工具</li>\n<li>javascript code snippets # js 代码提示、补全</li>\n<li>Eslint # 代码风格提示</li>\n<li>Element UI Snippets</li>\n<li>EditorConfig for vs code</li>\n<li>Document This</li>\n<li>Debugger for Chrome</li>\n<li>Color HighLight</li>\n<li>CodeIf</li>\n<li>Code Runner</li>\n<li>Chinese Lanfguage Pack for vs code</li>\n<li>Bracket Pair Colorizer 括号以多彩颜色区分</li>\n<li>Beautify # 美化代码</li>\n<li>Auto Rename Tag # 自动重命名标签</li>\n<li>Auto Close Tag # 自动闭合标签</li>\n<li>Better Comments</li>\n<li>DotENV</li>\n<li>Git Graph git可视化工具</li>\n<li>Git History Diff</li>\n<li>git-commit-lint-vscode commit加上emoji</li>\n<li>Import Cost 显示导入模块大小</li>\n<li>Open file From Path 直接跳转到指定代码</li>\n<li>VS Color Picker 取色工具</li>\n<li>vscode-fileheader</li>\n<li>image preview 侧边栏图片预览</li>\n</ol>\n<h2><span id=\"项目配置项\">项目配置项</span></h2><p>给vscode文件目录设置别名，并在引入时有对应提示，需要在根目录下新增<code>jsconfig.json</code>的文件，类似<code>tsconfig.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"./\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"paths\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"@/*\"</span>: [<span class=\"string\">\"src/*\"</span>],</span><br><span class=\"line\">            <span class=\"attr\">\"@public/*\"</span>: [<span class=\"string\">\"src/_public/*\"</span>],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"exclude\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"launchjson-调试配置说明\">launch.json 调试配置说明</span></h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 Node.js 程序\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>type 指定调试的语言</li>\n<li>request 有两种类型，launch | attach，前者是 vscode 打开这个程序进入调试，后者是外部打开这个程序，然后接通 Node.js 的内部调试协议来调试</li>\n<li>program 程序启动入口</li>\n<li>console 配置终端是使用外部还是内部的集成终端</li>\n</ul>\n<p>如果不用 program 启动，还有其他方式启动</p>\n<ul>\n<li>runtimeExecutable 使用什么命令启动，此处是 node，也可以任意启动脚本命令 pm2 等其他第三方的命令（可能要 ${workspaceFolder}相对路径）</li>\n<li>args 启动程序的参数</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 Node.js 程序 - args\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeExecutable\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.js\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果有其他编译前的准备，比如调试 TS 程序，依赖 typescript 和 ts-node 等命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 TS Node 程序 - args\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeExecutable\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeArgs\"</span>: [<span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.ts\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runtimeArgs 这个参数是为 runtimeExecutable 环境提供的配置，args 是为程序提供的配置，翻译为：通过 node 启动/src/index.ts，在启动时为 node 注入 ts-noe/register 模块，以便可以执行 ts 类型的文件，实际执行代码如下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect-brk=DEBUG_PORT -r ts-node/register ./src/index.ts</span><br></pre></td></tr></table></figure>\n\n<p>当然上述启动调试还有其他方式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 TS Node 程序 - preTask\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/out/index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"preLaunchTask\"</span>: <span class=\"string\">\"tsc_build\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>preLaunchTask 在 launch 调试之前先执行一个任务，这个就设计到.vscode/task.json 文件中配置的名为 tsc_build 的任务了</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"label\"</span>: <span class=\"string\">\"tsc_build\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"typescript\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tsconfig\"</span>: <span class=\"string\">\"tsconfig.json\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果需要调试已启动的 Node.js 程序，比如先在外部使用 node ./src/index.js 命令启动程序后，此时如果我们想给这个程序断点调试，可以加入如下配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Attach to node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"processId\"</span>: <span class=\"string\">\"$&#123;command:PickProcess&#125;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用 ${command:PickProcess} 作为 processId 的值，因为 VSCode 会遍历所有的 Node PID 列出来让你选择，当然如果你写死 processId 也可以这会直接跳过选择步骤</p>\n<p>vscode 也能直接调试网页的 js 代码，安装 Debugger for Chrome 插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试网页的 JS 文件\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"chrome\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/index.html\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/6844904198702645262\" target=\"_blank\" rel=\"noopener\">VSCode launch.json 配置详解</a></li>\n</ol>\n","site":{"data":{}},"length":4401,"excerpt":"","more":"<h2 id=\"常用设置配置\"><a href=\"#常用设置配置\" class=\"headerlink\" title=\"常用设置配置\"></a>常用设置配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"vscode-icons\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.accessibilityPageSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"editor.codeActionsOnSave\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"source.fixAll\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.Author\"</span>: <span class=\"string\">\"knight\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.LastModifiedBy\"</span>: <span class=\"string\">\"knight\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fileheader.tpl\"</span>: <span class=\"string\">\"/*\\r\\n * @Author: &#123;author&#125; \\r\\n * @Title:  \\r\\n * @Date: &#123;createTime&#125; \\r\\n * @Last Modified by:   &#123;lastModifiedBy&#125; \\r\\n * @Last Modified time: &#123;updateTime&#125; \\r\\n */\\r\\n\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"git.autofetch\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"merge-conflict.diffViewPosition\"</span>: <span class=\"string\">\"Beside\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"[vue]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"editor.defaultFormatter\"</span>: <span class=\"string\">\"octref.vetur\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"eslint.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.ts\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"javascript.preferences.quoteStyle\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typescript.preferences.quoteStyle\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"pretty-formatter.quoteConvert\"</span>: <span class=\"string\">\"single\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path-intellisense.absolutePathToWorkspace\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"path-intellisense.mappings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/src\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"@public\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/src/_public\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用包\"><a href=\"#常用包\" class=\"headerlink\" title=\"常用包\"></a>常用包</h2><ol>\n<li>Visual Studio IntelliCode 智能补全</li>\n<li>prettier 快速格式化 CMD+Shift+P</li>\n<li>Regex Previewer 正则表达式测试</li>\n<li>stylelint</li>\n<li>vetur # 开发 vue，语法补全、提示助手 （必备插件）</li>\n<li>vscode-icons # vscode 图标显示</li>\n<li>小程序助手</li>\n<li>vscode-element-helper</li>\n<li>SVG Viewer # 预览 SVG</li>\n<li>Path Intellisense 路径自动补全</li>\n<li>minapp # 小程序开发语法补全、提示助手</li>\n<li>markdownlint markdown 语法支持和预览</li>\n<li>Live Server</li>\n<li>koroFileHeader # 函数注释、文件信息</li>\n<li>GitLens # git 辅助工具</li>\n<li>javascript code snippets # js 代码提示、补全</li>\n<li>Eslint # 代码风格提示</li>\n<li>Element UI Snippets</li>\n<li>EditorConfig for vs code</li>\n<li>Document This</li>\n<li>Debugger for Chrome</li>\n<li>Color HighLight</li>\n<li>CodeIf</li>\n<li>Code Runner</li>\n<li>Chinese Lanfguage Pack for vs code</li>\n<li>Bracket Pair Colorizer 括号以多彩颜色区分</li>\n<li>Beautify # 美化代码</li>\n<li>Auto Rename Tag # 自动重命名标签</li>\n<li>Auto Close Tag # 自动闭合标签</li>\n<li>Better Comments</li>\n<li>DotENV</li>\n<li>Git Graph git可视化工具</li>\n<li>Git History Diff</li>\n<li>git-commit-lint-vscode commit加上emoji</li>\n<li>Import Cost 显示导入模块大小</li>\n<li>Open file From Path 直接跳转到指定代码</li>\n<li>VS Color Picker 取色工具</li>\n<li>vscode-fileheader</li>\n<li>image preview 侧边栏图片预览</li>\n</ol>\n<h2 id=\"项目配置项\"><a href=\"#项目配置项\" class=\"headerlink\" title=\"项目配置项\"></a>项目配置项</h2><p>给vscode文件目录设置别名，并在引入时有对应提示，需要在根目录下新增<code>jsconfig.json</code>的文件，类似<code>tsconfig.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"baseUrl\"</span>: <span class=\"string\">\"./\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"paths\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"@/*\"</span>: [<span class=\"string\">\"src/*\"</span>],</span><br><span class=\"line\">            <span class=\"attr\">\"@public/*\"</span>: [<span class=\"string\">\"src/_public/*\"</span>],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"exclude\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"launch-json-调试配置说明\"><a href=\"#launch-json-调试配置说明\" class=\"headerlink\" title=\"launch.json 调试配置说明\"></a>launch.json 调试配置说明</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 Node.js 程序\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>type 指定调试的语言</li>\n<li>request 有两种类型，launch | attach，前者是 vscode 打开这个程序进入调试，后者是外部打开这个程序，然后接通 Node.js 的内部调试协议来调试</li>\n<li>program 程序启动入口</li>\n<li>console 配置终端是使用外部还是内部的集成终端</li>\n</ul>\n<p>如果不用 program 启动，还有其他方式启动</p>\n<ul>\n<li>runtimeExecutable 使用什么命令启动，此处是 node，也可以任意启动脚本命令 pm2 等其他第三方的命令（可能要 ${workspaceFolder}相对路径）</li>\n<li>args 启动程序的参数</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 Node.js 程序 - args\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeExecutable\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.js\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果有其他编译前的准备，比如调试 TS 程序，依赖 typescript 和 ts-node 等命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 TS Node 程序 - args\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeExecutable\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"runtimeArgs\"</span>: [<span class=\"string\">\"-r\"</span>, <span class=\"string\">\"ts-node/register\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"args\"</span>: [<span class=\"string\">\"$&#123;workspaceFolder&#125;/src/index.ts\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runtimeArgs 这个参数是为 runtimeExecutable 环境提供的配置，args 是为程序提供的配置，翻译为：通过 node 启动/src/index.ts，在启动时为 node 注入 ts-noe/register 模块，以便可以执行 ts 类型的文件，实际执行代码如下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect-brk=DEBUG_PORT -r ts-node/register ./src/index.ts</span><br></pre></td></tr></table></figure>\n\n<p>当然上述启动调试还有其他方式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试 TS Node 程序 - preTask\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/out/index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"preLaunchTask\"</span>: <span class=\"string\">\"tsc_build\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>preLaunchTask 在 launch 调试之前先执行一个任务，这个就设计到.vscode/task.json 文件中配置的名为 tsc_build 的任务了</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"label\"</span>: <span class=\"string\">\"tsc_build\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"typescript\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tsconfig\"</span>: <span class=\"string\">\"tsconfig.json\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果需要调试已启动的 Node.js 程序，比如先在外部使用 node ./src/index.js 命令启动程序后，此时如果我们想给这个程序断点调试，可以加入如下配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Attach to node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"processId\"</span>: <span class=\"string\">\"$&#123;command:PickProcess&#125;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用 ${command:PickProcess} 作为 processId 的值，因为 VSCode 会遍历所有的 Node PID 列出来让你选择，当然如果你写死 processId 也可以这会直接跳过选择步骤</p>\n<p>vscode 也能直接调试网页的 js 代码，安装 Debugger for Chrome 插件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"调试网页的 JS 文件\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"chrome\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"file\"</span>: <span class=\"string\">\"$&#123;workspaceFolder&#125;/index.html\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/6844904198702645262\" target=\"_blank\" rel=\"noopener\">VSCode launch.json 配置详解</a></li>\n</ol>\n"},{"title":"vue项目接入sentry","catalog":true,"date":"2019-10-11T07:51:00.000Z","subtitle":null,"header-img":null,"_content":"\n首先需要下载官方提供的 sdk，在项目入口处加入进去。\n\n```shell\nyarn add @sentry/browser\nyarn add @sentry/integrations\n```\n\n在应用的入口文件，比如 app.js，加入如下配置：\n\n```javascript\nimport Vue from 'vue'\nimport * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\n\nSentry.init({\n dsn: 'https://xxxx@sentry.io/1772852',\n integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n})\n```\n\n其中 dsn 是在 sentry 创建的项目的设置中，找到 dsn 的选项 tab，找到项目的默认 dsn\n\n当然如果 application 打包的时候，觉得入口文件体积很大，或者是出于打包速度优化的考虑，可以将 sentry 相关插件通过 cdn 方式引用\n\n```html\n<!-- <script src=\"https://browser.sentry-cdn.com/5.7.1/bundle.es6.min.js\" integrity=\"sha384-h+FyW7fMq0eyUQeRnmnwiWXMxycy0z8n5sOtIH3NJx5GfqxdletL62letiWALtKy\" crossorigin=\"anonymous\"></script> -->\n<script\n src=\"https://browser.sentry-cdn.com/5.7.1/bundle.min.js\"\n integrity=\"sha384-KMv6bBTABABhv0NI+rVWly6PIRvdippFEgjpKyxUcpEmDWZTkDOiueL5xW+cztZZ\"\n crossorigin=\"anonymous\"\n></script>\n\n<!-- If you include the integration it will be available under Sentry.Integrations.Vue -->\n<script\n src=\"https://browser.sentry-cdn.com/5.7.1/vue.min.js\"\n crossorigin=\"anonymous\"\n></script>\n```\n\n做完第一步骤之后，此时项目已经具备有异常错误向 sentry 上报日志的功能，如果我们有更精确知道某些异常错误是哪个发布版本带上的，导致相关异常的开发者是谁，还有想要统计某个版本相对于之前的发布版本，错误情况如何等需求，此时需要使用 sentry 提供的 release 功能。\n\n默认接入 release 官方有几种方式，由于我们发布版本并没有走 gitlab、github 等的 ci 流程，我们采用`sentry-cli`提供的全局命令编写脚本去集成到项目发布流程中。\n\n简单的 release 脚本如下：\n\n```shell\n#!/bin/sh\nexport SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\nexport SENTRY_ORG=poizon\n\nPROJECT=\"ticket-platform\"\n\nVERSION=`sentry-cli releases propose-version`\n\n\n# Create a release\nsentry-cli releases -p PROJECT new $VERSION\n\n# upload sourcemap\n# upload-sourcemaps 指定打包后的js文件在项目的路径\n# --url-prefix 外部通过url访问到js静态资源的路径\nsentry-cli releases -p $PROJECT files $VERSION upload-sourcemaps ./dist/js/ --url-prefix ~/js/\n\n```\n\n同时需要在初始化 sentry 的入口出加上版本号（commitid），和后台看到的版本名称要一致，比如当前 git 的 commitid 前 6 为是 123456，需要改成如下设置：\n\n```javascript\nSentry.init({\n release: '123456',\n dsn: 'https://xxxx@sentry.io/1772852',\n integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n})\n```\n\n这时候我们在 sentry 后台系统下查看当前项目的的 release 的 tab 下，能看到已经将 sourcemap 文件都上传到 sentry 服务器。默认`sentry-cli`提供的 release 版本号是根据最后一次 git 提交的 commitid，这样会导致我们在查看版本的时候，面对一连串的 commitid，并不能很简单明了的看到当前版本号，所以需要我们手动指定版本号。\n\n1. 通过手动指定版本号\n\n```shell\n#!/bin/sh\nexport SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\nexport SENTRY_ORG=poizon\n\nTAG=\"ticket-platform@2.10.1\"\n\nPROJECT=\"ticket-platform\"\n\nsentry-cli releases -p $PROJECT new $TAG\n\nsentry-cli releases -p $PROJECT files $TAG upload-sourcemaps ./dist/js/ --url-prefix ~/js/\n\n```\n\n初始化的入口处传入的 release 也设置为`ticket-platform@2.10.1`，可以看到这样的方式很繁琐。\n\n2. 通过官方提供的 webpack 插件`@sentry/webpack-plugin`\n\n前提：项目下新建一个`.sentryclirc`文件，写好 sentry 配置项\n\n```\n[defaults]\nurl=https://xxx.xxxx.com\norg=xxx\nproject=ticket-platform\n\n[auth]\ntoken=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\n```\n\n修改项目本身的 webpack 配置\n\n```javascript\nconst SentryCliPlugin = require('@sentry/webpack-plugin');\n\nconst config = {\n  plugins: [\n    new SentryCliPlugin({\n      include: './dist/js',\n      ignore: ['node_modules']\n      urlPrefix: '~/js/'\n    }),\n  ],\n};\n```\n\n可以看到默认提供的插件也是按照 commitid，在我们项目中在构建的过程时流程大概如下：\n\n- 标准的 git coommit（commitizen/cz-cli）\n- 发版前 standard-version 生成本次的版本号\n- 打包时 获取`package.json`的 version 传入`SentryCliPlugin`的配置项`release`\n\n至此 vue 项目完美接入 sentry\n\n参考资料：\n\n1. [sentry 文档接入 vue](https://docs.sentry.io/platforms/javascript/vue/)\n2. [@sentry/webpack-plugin](https://www.npmjs.com/package/@sentry/webpack-plugin)\n3. [Sentry 前端部署拓展篇（sourcemap 关联、issue 关联、release 控制）](https://segmentfault.com/a/1190000014683598#articleHeader5)\n4. [前端日志监控平台 sentry 使用 @sentry/browser @sentry/webpack-plugin](https://juejin.im/post/5bfe0d5be51d4562587b40b9)\n","source":"_posts/vue项目接入sentry.md","raw":"---\ntitle: vue项目接入sentry\ncatalog: true\ndate: 2019-10-11 15:51:00\nsubtitle:\nheader-img:\ntags: sentry\ncategories: 前端\n---\n\n首先需要下载官方提供的 sdk，在项目入口处加入进去。\n\n```shell\nyarn add @sentry/browser\nyarn add @sentry/integrations\n```\n\n在应用的入口文件，比如 app.js，加入如下配置：\n\n```javascript\nimport Vue from 'vue'\nimport * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\n\nSentry.init({\n dsn: 'https://xxxx@sentry.io/1772852',\n integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n})\n```\n\n其中 dsn 是在 sentry 创建的项目的设置中，找到 dsn 的选项 tab，找到项目的默认 dsn\n\n当然如果 application 打包的时候，觉得入口文件体积很大，或者是出于打包速度优化的考虑，可以将 sentry 相关插件通过 cdn 方式引用\n\n```html\n<!-- <script src=\"https://browser.sentry-cdn.com/5.7.1/bundle.es6.min.js\" integrity=\"sha384-h+FyW7fMq0eyUQeRnmnwiWXMxycy0z8n5sOtIH3NJx5GfqxdletL62letiWALtKy\" crossorigin=\"anonymous\"></script> -->\n<script\n src=\"https://browser.sentry-cdn.com/5.7.1/bundle.min.js\"\n integrity=\"sha384-KMv6bBTABABhv0NI+rVWly6PIRvdippFEgjpKyxUcpEmDWZTkDOiueL5xW+cztZZ\"\n crossorigin=\"anonymous\"\n></script>\n\n<!-- If you include the integration it will be available under Sentry.Integrations.Vue -->\n<script\n src=\"https://browser.sentry-cdn.com/5.7.1/vue.min.js\"\n crossorigin=\"anonymous\"\n></script>\n```\n\n做完第一步骤之后，此时项目已经具备有异常错误向 sentry 上报日志的功能，如果我们有更精确知道某些异常错误是哪个发布版本带上的，导致相关异常的开发者是谁，还有想要统计某个版本相对于之前的发布版本，错误情况如何等需求，此时需要使用 sentry 提供的 release 功能。\n\n默认接入 release 官方有几种方式，由于我们发布版本并没有走 gitlab、github 等的 ci 流程，我们采用`sentry-cli`提供的全局命令编写脚本去集成到项目发布流程中。\n\n简单的 release 脚本如下：\n\n```shell\n#!/bin/sh\nexport SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\nexport SENTRY_ORG=poizon\n\nPROJECT=\"ticket-platform\"\n\nVERSION=`sentry-cli releases propose-version`\n\n\n# Create a release\nsentry-cli releases -p PROJECT new $VERSION\n\n# upload sourcemap\n# upload-sourcemaps 指定打包后的js文件在项目的路径\n# --url-prefix 外部通过url访问到js静态资源的路径\nsentry-cli releases -p $PROJECT files $VERSION upload-sourcemaps ./dist/js/ --url-prefix ~/js/\n\n```\n\n同时需要在初始化 sentry 的入口出加上版本号（commitid），和后台看到的版本名称要一致，比如当前 git 的 commitid 前 6 为是 123456，需要改成如下设置：\n\n```javascript\nSentry.init({\n release: '123456',\n dsn: 'https://xxxx@sentry.io/1772852',\n integrations: [new Integrations.Vue({ Vue, attachProps: true })]\n})\n```\n\n这时候我们在 sentry 后台系统下查看当前项目的的 release 的 tab 下，能看到已经将 sourcemap 文件都上传到 sentry 服务器。默认`sentry-cli`提供的 release 版本号是根据最后一次 git 提交的 commitid，这样会导致我们在查看版本的时候，面对一连串的 commitid，并不能很简单明了的看到当前版本号，所以需要我们手动指定版本号。\n\n1. 通过手动指定版本号\n\n```shell\n#!/bin/sh\nexport SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\nexport SENTRY_ORG=poizon\n\nTAG=\"ticket-platform@2.10.1\"\n\nPROJECT=\"ticket-platform\"\n\nsentry-cli releases -p $PROJECT new $TAG\n\nsentry-cli releases -p $PROJECT files $TAG upload-sourcemaps ./dist/js/ --url-prefix ~/js/\n\n```\n\n初始化的入口处传入的 release 也设置为`ticket-platform@2.10.1`，可以看到这样的方式很繁琐。\n\n2. 通过官方提供的 webpack 插件`@sentry/webpack-plugin`\n\n前提：项目下新建一个`.sentryclirc`文件，写好 sentry 配置项\n\n```\n[defaults]\nurl=https://xxx.xxxx.com\norg=xxx\nproject=ticket-platform\n\n[auth]\ntoken=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33\n```\n\n修改项目本身的 webpack 配置\n\n```javascript\nconst SentryCliPlugin = require('@sentry/webpack-plugin');\n\nconst config = {\n  plugins: [\n    new SentryCliPlugin({\n      include: './dist/js',\n      ignore: ['node_modules']\n      urlPrefix: '~/js/'\n    }),\n  ],\n};\n```\n\n可以看到默认提供的插件也是按照 commitid，在我们项目中在构建的过程时流程大概如下：\n\n- 标准的 git coommit（commitizen/cz-cli）\n- 发版前 standard-version 生成本次的版本号\n- 打包时 获取`package.json`的 version 传入`SentryCliPlugin`的配置项`release`\n\n至此 vue 项目完美接入 sentry\n\n参考资料：\n\n1. [sentry 文档接入 vue](https://docs.sentry.io/platforms/javascript/vue/)\n2. [@sentry/webpack-plugin](https://www.npmjs.com/package/@sentry/webpack-plugin)\n3. [Sentry 前端部署拓展篇（sourcemap 关联、issue 关联、release 控制）](https://segmentfault.com/a/1190000014683598#articleHeader5)\n4. [前端日志监控平台 sentry 使用 @sentry/browser @sentry/webpack-plugin](https://juejin.im/post/5bfe0d5be51d4562587b40b9)\n","slug":"vue项目接入sentry","published":1,"updated":"2024-02-20T06:48:45.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijux002hlwxax2xfnq00","content":"<p>首先需要下载官方提供的 sdk，在项目入口处加入进去。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @sentry/browser</span><br><span class=\"line\">yarn add @sentry/integrations</span><br></pre></td></tr></table></figure>\n\n<p>在应用的入口文件，比如 app.js，加入如下配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\"> dsn: <span class=\"string\">'https://xxxx@sentry.io/1772852'</span>,</span><br><span class=\"line\"> integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中 dsn 是在 sentry 创建的项目的设置中，找到 dsn 的选项 tab，找到项目的默认 dsn</p>\n<p>当然如果 application 打包的时候，觉得入口文件体积很大，或者是出于打包速度优化的考虑，可以将 sentry 相关插件通过 cdn 方式引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;script src=\"https://browser.sentry-cdn.com/5.7.1/bundle.es6.min.js\" integrity=\"sha384-h+FyW7fMq0eyUQeRnmnwiWXMxycy0z8n5sOtIH3NJx5GfqxdletL62letiWALtKy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">src</span>=<span class=\"string\">\"https://browser.sentry-cdn.com/5.7.1/bundle.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KMv6bBTABABhv0NI+rVWly6PIRvdippFEgjpKyxUcpEmDWZTkDOiueL5xW+cztZZ\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- If you include the integration it will be available under Sentry.Integrations.Vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">src</span>=<span class=\"string\">\"https://browser.sentry-cdn.com/5.7.1/vue.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>做完第一步骤之后，此时项目已经具备有异常错误向 sentry 上报日志的功能，如果我们有更精确知道某些异常错误是哪个发布版本带上的，导致相关异常的开发者是谁，还有想要统计某个版本相对于之前的发布版本，错误情况如何等需求，此时需要使用 sentry 提供的 release 功能。</p>\n<p>默认接入 release 官方有几种方式，由于我们发布版本并没有走 gitlab、github 等的 ci 流程，我们采用<code>sentry-cli</code>提供的全局命令编写脚本去集成到项目发布流程中。</p>\n<p>简单的 release 脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">export SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br><span class=\"line\">export SENTRY_ORG=poizon</span><br><span class=\"line\"></span><br><span class=\"line\">PROJECT=\"ticket-platform\"</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION=`sentry-cli releases propose-version`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Create a release</span></span><br><span class=\"line\">sentry-cli releases -p PROJECT new $VERSION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> upload sourcemap</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> upload-sourcemaps 指定打包后的js文件在项目的路径</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --url-prefix 外部通过url访问到js静态资源的路径</span></span><br><span class=\"line\">sentry-cli releases -p $PROJECT files $VERSION upload-sourcemaps ./dist/js/ --url-prefix ~/js/</span><br></pre></td></tr></table></figure>\n\n<p>同时需要在初始化 sentry 的入口出加上版本号（commitid），和后台看到的版本名称要一致，比如当前 git 的 commitid 前 6 为是 123456，需要改成如下设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\"> release: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\"> dsn: <span class=\"string\">'https://xxxx@sentry.io/1772852'</span>,</span><br><span class=\"line\"> integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们在 sentry 后台系统下查看当前项目的的 release 的 tab 下，能看到已经将 sourcemap 文件都上传到 sentry 服务器。默认<code>sentry-cli</code>提供的 release 版本号是根据最后一次 git 提交的 commitid，这样会导致我们在查看版本的时候，面对一连串的 commitid，并不能很简单明了的看到当前版本号，所以需要我们手动指定版本号。</p>\n<ol>\n<li>通过手动指定版本号</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">export SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br><span class=\"line\">export SENTRY_ORG=poizon</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=\"ticket-platform@2.10.1\"</span><br><span class=\"line\"></span><br><span class=\"line\">PROJECT=\"ticket-platform\"</span><br><span class=\"line\"></span><br><span class=\"line\">sentry-cli releases -p $PROJECT new $TAG</span><br><span class=\"line\"></span><br><span class=\"line\">sentry-cli releases -p $PROJECT files $TAG upload-sourcemaps ./dist/js/ --url-prefix ~/js/</span><br></pre></td></tr></table></figure>\n\n<p>初始化的入口处传入的 release 也设置为<code>ticket-platform@2.10.1</code>，可以看到这样的方式很繁琐。</p>\n<ol start=\"2\">\n<li>通过官方提供的 webpack 插件<code>@sentry/webpack-plugin</code></li>\n</ol>\n<p>前提：项目下新建一个<code>.sentryclirc</code>文件，写好 sentry 配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[defaults]</span><br><span class=\"line\">url=https://xxx.xxxx.com</span><br><span class=\"line\">org=xxx</span><br><span class=\"line\">project=ticket-platform</span><br><span class=\"line\"></span><br><span class=\"line\">[auth]</span><br><span class=\"line\">token=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br></pre></td></tr></table></figure>\n\n<p>修改项目本身的 webpack 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SentryCliPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'@sentry/webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> SentryCliPlugin(&#123;</span><br><span class=\"line\">      include: <span class=\"string\">'./dist/js'</span>,</span><br><span class=\"line\">      ignore: [<span class=\"string\">'node_modules'</span>]</span><br><span class=\"line\">      urlPrefix: <span class=\"string\">'~/js/'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到默认提供的插件也是按照 commitid，在我们项目中在构建的过程时流程大概如下：</p>\n<ul>\n<li>标准的 git coommit（commitizen/cz-cli）</li>\n<li>发版前 standard-version 生成本次的版本号</li>\n<li>打包时 获取<code>package.json</code>的 version 传入<code>SentryCliPlugin</code>的配置项<code>release</code></li>\n</ul>\n<p>至此 vue 项目完美接入 sentry</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://docs.sentry.io/platforms/javascript/vue/\" target=\"_blank\" rel=\"noopener\">sentry 文档接入 vue</a></li>\n<li><a href=\"https://www.npmjs.com/package/@sentry/webpack-plugin\" target=\"_blank\" rel=\"noopener\">@sentry/webpack-plugin</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000014683598#articleHeader5\" target=\"_blank\" rel=\"noopener\">Sentry 前端部署拓展篇（sourcemap 关联、issue 关联、release 控制）</a></li>\n<li><a href=\"https://juejin.im/post/5bfe0d5be51d4562587b40b9\" target=\"_blank\" rel=\"noopener\">前端日志监控平台 sentry 使用 @sentry/browser @sentry/webpack-plugin</a></li>\n</ol>\n","site":{"data":{}},"length":3251,"excerpt":"","more":"<p>首先需要下载官方提供的 sdk，在项目入口处加入进去。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @sentry/browser</span><br><span class=\"line\">yarn add @sentry/integrations</span><br></pre></td></tr></table></figure>\n\n<p>在应用的入口文件，比如 app.js，加入如下配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/browser'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Integrations <span class=\"keyword\">from</span> <span class=\"string\">'@sentry/integrations'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\"> dsn: <span class=\"string\">'https://xxxx@sentry.io/1772852'</span>,</span><br><span class=\"line\"> integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中 dsn 是在 sentry 创建的项目的设置中，找到 dsn 的选项 tab，找到项目的默认 dsn</p>\n<p>当然如果 application 打包的时候，觉得入口文件体积很大，或者是出于打包速度优化的考虑，可以将 sentry 相关插件通过 cdn 方式引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;script src=\"https://browser.sentry-cdn.com/5.7.1/bundle.es6.min.js\" integrity=\"sha384-h+FyW7fMq0eyUQeRnmnwiWXMxycy0z8n5sOtIH3NJx5GfqxdletL62letiWALtKy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">src</span>=<span class=\"string\">\"https://browser.sentry-cdn.com/5.7.1/bundle.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-KMv6bBTABABhv0NI+rVWly6PIRvdippFEgjpKyxUcpEmDWZTkDOiueL5xW+cztZZ\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- If you include the integration it will be available under Sentry.Integrations.Vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">src</span>=<span class=\"string\">\"https://browser.sentry-cdn.com/5.7.1/vue.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>做完第一步骤之后，此时项目已经具备有异常错误向 sentry 上报日志的功能，如果我们有更精确知道某些异常错误是哪个发布版本带上的，导致相关异常的开发者是谁，还有想要统计某个版本相对于之前的发布版本，错误情况如何等需求，此时需要使用 sentry 提供的 release 功能。</p>\n<p>默认接入 release 官方有几种方式，由于我们发布版本并没有走 gitlab、github 等的 ci 流程，我们采用<code>sentry-cli</code>提供的全局命令编写脚本去集成到项目发布流程中。</p>\n<p>简单的 release 脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">export SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br><span class=\"line\">export SENTRY_ORG=poizon</span><br><span class=\"line\"></span><br><span class=\"line\">PROJECT=\"ticket-platform\"</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION=`sentry-cli releases propose-version`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Create a release</span></span><br><span class=\"line\">sentry-cli releases -p PROJECT new $VERSION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> upload sourcemap</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> upload-sourcemaps 指定打包后的js文件在项目的路径</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --url-prefix 外部通过url访问到js静态资源的路径</span></span><br><span class=\"line\">sentry-cli releases -p $PROJECT files $VERSION upload-sourcemaps ./dist/js/ --url-prefix ~/js/</span><br></pre></td></tr></table></figure>\n\n<p>同时需要在初始化 sentry 的入口出加上版本号（commitid），和后台看到的版本名称要一致，比如当前 git 的 commitid 前 6 为是 123456，需要改成如下设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\"> release: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\"> dsn: <span class=\"string\">'https://xxxx@sentry.io/1772852'</span>,</span><br><span class=\"line\"> integrations: [<span class=\"keyword\">new</span> Integrations.Vue(&#123; Vue, <span class=\"attr\">attachProps</span>: <span class=\"literal\">true</span> &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们在 sentry 后台系统下查看当前项目的的 release 的 tab 下，能看到已经将 sourcemap 文件都上传到 sentry 服务器。默认<code>sentry-cli</code>提供的 release 版本号是根据最后一次 git 提交的 commitid，这样会导致我们在查看版本的时候，面对一连串的 commitid，并不能很简单明了的看到当前版本号，所以需要我们手动指定版本号。</p>\n<ol>\n<li>通过手动指定版本号</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">export SENTRY_AUTH_TOKEN=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br><span class=\"line\">export SENTRY_ORG=poizon</span><br><span class=\"line\"></span><br><span class=\"line\">TAG=\"ticket-platform@2.10.1\"</span><br><span class=\"line\"></span><br><span class=\"line\">PROJECT=\"ticket-platform\"</span><br><span class=\"line\"></span><br><span class=\"line\">sentry-cli releases -p $PROJECT new $TAG</span><br><span class=\"line\"></span><br><span class=\"line\">sentry-cli releases -p $PROJECT files $TAG upload-sourcemaps ./dist/js/ --url-prefix ~/js/</span><br></pre></td></tr></table></figure>\n\n<p>初始化的入口处传入的 release 也设置为<code>ticket-platform@2.10.1</code>，可以看到这样的方式很繁琐。</p>\n<ol start=\"2\">\n<li>通过官方提供的 webpack 插件<code>@sentry/webpack-plugin</code></li>\n</ol>\n<p>前提：项目下新建一个<code>.sentryclirc</code>文件，写好 sentry 配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[defaults]</span><br><span class=\"line\">url=https://xxx.xxxx.com</span><br><span class=\"line\">org=xxx</span><br><span class=\"line\">project=ticket-platform</span><br><span class=\"line\"></span><br><span class=\"line\">[auth]</span><br><span class=\"line\">token=9b4f6bf1c75e478cab30bb714e0f8e83d712c02a920640e7b7fbf4dc307c1b33</span><br></pre></td></tr></table></figure>\n\n<p>修改项目本身的 webpack 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SentryCliPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'@sentry/webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> SentryCliPlugin(&#123;</span><br><span class=\"line\">      include: <span class=\"string\">'./dist/js'</span>,</span><br><span class=\"line\">      ignore: [<span class=\"string\">'node_modules'</span>]</span><br><span class=\"line\">      urlPrefix: <span class=\"string\">'~/js/'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到默认提供的插件也是按照 commitid，在我们项目中在构建的过程时流程大概如下：</p>\n<ul>\n<li>标准的 git coommit（commitizen/cz-cli）</li>\n<li>发版前 standard-version 生成本次的版本号</li>\n<li>打包时 获取<code>package.json</code>的 version 传入<code>SentryCliPlugin</code>的配置项<code>release</code></li>\n</ul>\n<p>至此 vue 项目完美接入 sentry</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://docs.sentry.io/platforms/javascript/vue/\" target=\"_blank\" rel=\"noopener\">sentry 文档接入 vue</a></li>\n<li><a href=\"https://www.npmjs.com/package/@sentry/webpack-plugin\" target=\"_blank\" rel=\"noopener\">@sentry/webpack-plugin</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000014683598#articleHeader5\" target=\"_blank\" rel=\"noopener\">Sentry 前端部署拓展篇（sourcemap 关联、issue 关联、release 控制）</a></li>\n<li><a href=\"https://juejin.im/post/5bfe0d5be51d4562587b40b9\" target=\"_blank\" rel=\"noopener\">前端日志监控平台 sentry 使用 @sentry/browser @sentry/webpack-plugin</a></li>\n</ol>\n"},{"title":"windows下安装node-gyp失败","catalog":true,"date":"2020-07-31T07:40:58.000Z","subtitle":null,"header-img":null,"_content":"\n- 用作为当前目录的以上路径启动了 CMD.EXE。UNC 路径不受支持。默认值设为 Windows 目录。\n\n处理：\n\ncmd下运行如下命令\n\n```shell\n reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\" /v \"DisableUNCCheck\" /t \"REG_DWORD\" /d \"1\" /f\n```\n\n- Could not find any Visual Studio installation to use\n\n处理：\n\n下载`windows-build-tools`\n\n管理员权限打开`powershell`，输入如下命令\n\n```shell\nnpm install --global --production windows-build-tools\n```\n\n安装完毕，使用如下方式安装\n\n```shell\nnpm install --msvs_version=2013\n\n```\n\n若报错，检查报错提示，一般表示vscode版本不对\n\n```shell\ngyp ERR! find VS msvs_version was set from command line or npm config\ngyp ERR! find VS - looking for Visual Studio version 2013\ngyp ERR! find VS VCINSTALLDIR not set, not running in VS Command Prompt\ngyp ERR! find VS checking VS2017 (15.9.28307.1216) found at:\ngyp ERR! find VS \"C:\\Program Files\\Microsoft Visual Studio\\2017\\BuildTools\"\ngyp ERR! find VS - found \"Visual Studio C++ core features\"\ngyp ERR! find VS - found VC++ toolset: v141\ngyp ERR! find VS - found Windows SDK: 10.0.17763.0\ngyp ERR! find VS - msvs_version does not match this version\n\n```\n\n提示`VS2017`版本存在，换用2017\n\n```shell\nnpm install --msvs_version=2017\n\n```\n\n下载成功\n","source":"_posts/windows下安装node-gyp失败.md","raw":"---\ntitle: windows下安装node-gyp失败\ncatalog: true\ndate: 2020-07-31 15:40:58\nsubtitle:\nheader-img:\ntags: npm\ncategories: 前端\n---\n\n- 用作为当前目录的以上路径启动了 CMD.EXE。UNC 路径不受支持。默认值设为 Windows 目录。\n\n处理：\n\ncmd下运行如下命令\n\n```shell\n reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\" /v \"DisableUNCCheck\" /t \"REG_DWORD\" /d \"1\" /f\n```\n\n- Could not find any Visual Studio installation to use\n\n处理：\n\n下载`windows-build-tools`\n\n管理员权限打开`powershell`，输入如下命令\n\n```shell\nnpm install --global --production windows-build-tools\n```\n\n安装完毕，使用如下方式安装\n\n```shell\nnpm install --msvs_version=2013\n\n```\n\n若报错，检查报错提示，一般表示vscode版本不对\n\n```shell\ngyp ERR! find VS msvs_version was set from command line or npm config\ngyp ERR! find VS - looking for Visual Studio version 2013\ngyp ERR! find VS VCINSTALLDIR not set, not running in VS Command Prompt\ngyp ERR! find VS checking VS2017 (15.9.28307.1216) found at:\ngyp ERR! find VS \"C:\\Program Files\\Microsoft Visual Studio\\2017\\BuildTools\"\ngyp ERR! find VS - found \"Visual Studio C++ core features\"\ngyp ERR! find VS - found VC++ toolset: v141\ngyp ERR! find VS - found Windows SDK: 10.0.17763.0\ngyp ERR! find VS - msvs_version does not match this version\n\n```\n\n提示`VS2017`版本存在，换用2017\n\n```shell\nnpm install --msvs_version=2017\n\n```\n\n下载成功\n","slug":"windows下安装node-gyp失败","published":1,"updated":"2024-02-20T06:48:45.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuy002llwxaw2dd227u","content":"<ul>\n<li>用作为当前目录的以上路径启动了 CMD.EXE。UNC 路径不受支持。默认值设为 Windows 目录。</li>\n</ul>\n<p>处理：</p>\n<p>cmd下运行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\" /v \"DisableUNCCheck\" /t \"REG_DWORD\" /d \"1\" /f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Could not find any Visual Studio installation to use</li>\n</ul>\n<p>处理：</p>\n<p>下载<code>windows-build-tools</code></p>\n<p>管理员权限打开<code>powershell</code>，输入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕，使用如下方式安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --msvs_version=2013</span><br></pre></td></tr></table></figure>\n\n<p>若报错，检查报错提示，一般表示vscode版本不对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp ERR! find VS msvs_version was set from command line or npm config</span><br><span class=\"line\">gyp ERR! find VS - looking for Visual Studio version 2013</span><br><span class=\"line\">gyp ERR! find VS VCINSTALLDIR not set, not running in VS Command Prompt</span><br><span class=\"line\">gyp ERR! find VS checking VS2017 (15.9.28307.1216) found at:</span><br><span class=\"line\">gyp ERR! find VS \"C:\\Program Files\\Microsoft Visual Studio\\2017\\BuildTools\"</span><br><span class=\"line\">gyp ERR! find VS - found \"Visual Studio C++ core features\"</span><br><span class=\"line\">gyp ERR! find VS - found VC++ toolset: v141</span><br><span class=\"line\">gyp ERR! find VS - found Windows SDK: 10.0.17763.0</span><br><span class=\"line\">gyp ERR! find VS - msvs_version does not match this version</span><br></pre></td></tr></table></figure>\n\n<p>提示<code>VS2017</code>版本存在，换用2017</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --msvs_version=2017</span><br></pre></td></tr></table></figure>\n\n<p>下载成功</p>\n","site":{"data":{}},"length":891,"excerpt":"","more":"<ul>\n<li>用作为当前目录的以上路径启动了 CMD.EXE。UNC 路径不受支持。默认值设为 Windows 目录。</li>\n</ul>\n<p>处理：</p>\n<p>cmd下运行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\" /v \"DisableUNCCheck\" /t \"REG_DWORD\" /d \"1\" /f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Could not find any Visual Studio installation to use</li>\n</ul>\n<p>处理：</p>\n<p>下载<code>windows-build-tools</code></p>\n<p>管理员权限打开<code>powershell</code>，输入如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕，使用如下方式安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --msvs_version=2013</span><br></pre></td></tr></table></figure>\n\n<p>若报错，检查报错提示，一般表示vscode版本不对</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp ERR! find VS msvs_version was set from command line or npm config</span><br><span class=\"line\">gyp ERR! find VS - looking for Visual Studio version 2013</span><br><span class=\"line\">gyp ERR! find VS VCINSTALLDIR not set, not running in VS Command Prompt</span><br><span class=\"line\">gyp ERR! find VS checking VS2017 (15.9.28307.1216) found at:</span><br><span class=\"line\">gyp ERR! find VS \"C:\\Program Files\\Microsoft Visual Studio\\2017\\BuildTools\"</span><br><span class=\"line\">gyp ERR! find VS - found \"Visual Studio C++ core features\"</span><br><span class=\"line\">gyp ERR! find VS - found VC++ toolset: v141</span><br><span class=\"line\">gyp ERR! find VS - found Windows SDK: 10.0.17763.0</span><br><span class=\"line\">gyp ERR! find VS - msvs_version does not match this version</span><br></pre></td></tr></table></figure>\n\n<p>提示<code>VS2017</code>版本存在，换用2017</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --msvs_version=2017</span><br></pre></td></tr></table></figure>\n\n<p>下载成功</p>\n"},{"title":"react-hooks入门","catalog":true,"date":"2020-01-08T08:50:48.000Z","subtitle":null,"header-img":null,"_content":"\nreact hooks 发布于 React16.8.0 版本，这样的一个新的特性的作用是什么呢？\n\n众所周知，react 默认使用组件类的语法，当我们在编写和维护这些组件类的时候，往往会遇到如下一些问题：\n\n1. 组件之间复用状态逻辑比较困难\n\nReact 本身没有提供将可复用性行为添加到组件的方式，当然针对这些问题有一些方案，比如 render props 和高阶组件；但是在使用这些方案时，往往会需要重新组织当前组件的结构，这会比较麻烦。另外由 providers、consumers、高阶组件组成的抽象组件会形成`嵌套地狱`。基于这样的问题需要 React 本身为共享状态逻辑提供更高的原生途径。\n\nhooks 可以在无需更改组件结构的情况下，提取状态逻辑，单独测试并复用。\n\n2. 复杂组件很难拆分、重构、测试\n\n我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。比如生命周期常常包含不相关逻辑，如果状态逻辑之间有关联更容易产生问题，多数情况下，因为状态逻辑无处不在，导致不能将组件拆分为更小粒度。\n\nhooks 可以将组件相关的部分拆分成更小的函数，而非强制按照生命周期划分。\n\n## Hook 含义\n\nHook 就是加强版本的函数组件，如果需要外部功能（react 其他功能）和副作用，就用钩子把外部代码\"钩\"进来。\n\n参考文档：\n\n1. [React Hooks 入门教程](http://www.ruanyifeng.com/blog/2019/09/react-hooks.html)\n2. [React 官方文档 Hook 简介](https://react.docschina.org/docs/hooks-intro.html)\n","source":"_posts/react-hooks入门.md","raw":"---\ntitle: react-hooks入门\ncatalog: true\ndate: 2020-01-08 16:50:48\nsubtitle:\nheader-img:\ntags: react\ncategories: 前端\n---\n\nreact hooks 发布于 React16.8.0 版本，这样的一个新的特性的作用是什么呢？\n\n众所周知，react 默认使用组件类的语法，当我们在编写和维护这些组件类的时候，往往会遇到如下一些问题：\n\n1. 组件之间复用状态逻辑比较困难\n\nReact 本身没有提供将可复用性行为添加到组件的方式，当然针对这些问题有一些方案，比如 render props 和高阶组件；但是在使用这些方案时，往往会需要重新组织当前组件的结构，这会比较麻烦。另外由 providers、consumers、高阶组件组成的抽象组件会形成`嵌套地狱`。基于这样的问题需要 React 本身为共享状态逻辑提供更高的原生途径。\n\nhooks 可以在无需更改组件结构的情况下，提取状态逻辑，单独测试并复用。\n\n2. 复杂组件很难拆分、重构、测试\n\n我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。比如生命周期常常包含不相关逻辑，如果状态逻辑之间有关联更容易产生问题，多数情况下，因为状态逻辑无处不在，导致不能将组件拆分为更小粒度。\n\nhooks 可以将组件相关的部分拆分成更小的函数，而非强制按照生命周期划分。\n\n## Hook 含义\n\nHook 就是加强版本的函数组件，如果需要外部功能（react 其他功能）和副作用，就用钩子把外部代码\"钩\"进来。\n\n参考文档：\n\n1. [React Hooks 入门教程](http://www.ruanyifeng.com/blog/2019/09/react-hooks.html)\n2. [React 官方文档 Hook 简介](https://react.docschina.org/docs/hooks-intro.html)\n","slug":"react-hooks入门","published":1,"updated":"2024-02-20T06:48:45.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijuz002nlwxaujn8wr36","content":"<p>react hooks 发布于 React16.8.0 版本，这样的一个新的特性的作用是什么呢？</p>\n<p>众所周知，react 默认使用组件类的语法，当我们在编写和维护这些组件类的时候，往往会遇到如下一些问题：</p>\n<ol>\n<li>组件之间复用状态逻辑比较困难</li>\n</ol>\n<p>React 本身没有提供将可复用性行为添加到组件的方式，当然针对这些问题有一些方案，比如 render props 和高阶组件；但是在使用这些方案时，往往会需要重新组织当前组件的结构，这会比较麻烦。另外由 providers、consumers、高阶组件组成的抽象组件会形成<code>嵌套地狱</code>。基于这样的问题需要 React 本身为共享状态逻辑提供更高的原生途径。</p>\n<p>hooks 可以在无需更改组件结构的情况下，提取状态逻辑，单独测试并复用。</p>\n<ol start=\"2\">\n<li>复杂组件很难拆分、重构、测试</li>\n</ol>\n<p>我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。比如生命周期常常包含不相关逻辑，如果状态逻辑之间有关联更容易产生问题，多数情况下，因为状态逻辑无处不在，导致不能将组件拆分为更小粒度。</p>\n<p>hooks 可以将组件相关的部分拆分成更小的函数，而非强制按照生命周期划分。</p>\n<h2><span id=\"hook-含义\">Hook 含义</span></h2><p>Hook 就是加强版本的函数组件，如果需要外部功能（react 其他功能）和副作用，就用钩子把外部代码”钩”进来。</p>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/09/react-hooks.html\" target=\"_blank\" rel=\"noopener\">React Hooks 入门教程</a></li>\n<li><a href=\"https://react.docschina.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">React 官方文档 Hook 简介</a></li>\n</ol>\n","site":{"data":{}},"length":564,"excerpt":"","more":"<p>react hooks 发布于 React16.8.0 版本，这样的一个新的特性的作用是什么呢？</p>\n<p>众所周知，react 默认使用组件类的语法，当我们在编写和维护这些组件类的时候，往往会遇到如下一些问题：</p>\n<ol>\n<li>组件之间复用状态逻辑比较困难</li>\n</ol>\n<p>React 本身没有提供将可复用性行为添加到组件的方式，当然针对这些问题有一些方案，比如 render props 和高阶组件；但是在使用这些方案时，往往会需要重新组织当前组件的结构，这会比较麻烦。另外由 providers、consumers、高阶组件组成的抽象组件会形成<code>嵌套地狱</code>。基于这样的问题需要 React 本身为共享状态逻辑提供更高的原生途径。</p>\n<p>hooks 可以在无需更改组件结构的情况下，提取状态逻辑，单独测试并复用。</p>\n<ol start=\"2\">\n<li>复杂组件很难拆分、重构、测试</li>\n</ol>\n<p>我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。比如生命周期常常包含不相关逻辑，如果状态逻辑之间有关联更容易产生问题，多数情况下，因为状态逻辑无处不在，导致不能将组件拆分为更小粒度。</p>\n<p>hooks 可以将组件相关的部分拆分成更小的函数，而非强制按照生命周期划分。</p>\n<h2 id=\"Hook-含义\"><a href=\"#Hook-含义\" class=\"headerlink\" title=\"Hook 含义\"></a>Hook 含义</h2><p>Hook 就是加强版本的函数组件，如果需要外部功能（react 其他功能）和副作用，就用钩子把外部代码”钩”进来。</p>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/09/react-hooks.html\" target=\"_blank\" rel=\"noopener\">React Hooks 入门教程</a></li>\n<li><a href=\"https://react.docschina.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">React 官方文档 Hook 简介</a></li>\n</ol>\n"},{"title":"一些新的api","catalog":true,"date":"2019-07-22T15:00:47.000Z","subtitle":null,"header-img":null,"_content":"\n1. IntersectionObserver\n\n懒加载实现的一种 api，兼容性\n\n参考资料： [谈谈 IntersectionObserver 懒加载](https://www.jianshu.com/p/84a86e41eb2b)\n2. css 一个属性`object-fit`实现图片的拉伸、裁剪等\n3. css 动画结束有个事件可以被 js 监听处理\n","source":"_posts/一些新的api.md","raw":"---\ntitle: 一些新的api\ncatalog: true\ndate: 2019-07-22 23:00:47\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n1. IntersectionObserver\n\n懒加载实现的一种 api，兼容性\n\n参考资料： [谈谈 IntersectionObserver 懒加载](https://www.jianshu.com/p/84a86e41eb2b)\n2. css 一个属性`object-fit`实现图片的拉伸、裁剪等\n3. css 动画结束有个事件可以被 js 监听处理\n","slug":"一些新的api","published":1,"updated":"2024-02-20T06:48:45.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv0002qlwxagzb5m8bi","content":"<ol>\n<li>IntersectionObserver</li>\n</ol>\n<p>懒加载实现的一种 api，兼容性</p>\n<p>参考资料： <a href=\"https://www.jianshu.com/p/84a86e41eb2b\" target=\"_blank\" rel=\"noopener\">谈谈 IntersectionObserver 懒加载</a><br>2. css 一个属性<code>object-fit</code>实现图片的拉伸、裁剪等<br>3. css 动画结束有个事件可以被 js 监听处理</p>\n","site":{"data":{}},"length":117,"excerpt":"","more":"<ol>\n<li>IntersectionObserver</li>\n</ol>\n<p>懒加载实现的一种 api，兼容性</p>\n<p>参考资料： <a href=\"https://www.jianshu.com/p/84a86e41eb2b\" target=\"_blank\" rel=\"noopener\">谈谈 IntersectionObserver 懒加载</a><br>2. css 一个属性<code>object-fit</code>实现图片的拉伸、裁剪等<br>3. css 动画结束有个事件可以被 js 监听处理</p>\n"},{"title":"利用verdaccio搭建私有npm仓库","catalog":true,"date":"2019-06-16T00:25:18.000Z","subtitle":null,"header-img":null,"_content":"\n随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。\n\n[verdaccio]([https://github.com/verdaccio/verdaccio](https://github.com/verdaccio/verdaccio)\n)是一个部署简易的可以实现github仓储私有化的npm组件，fork于`sinopia`项目，由于`sinopia`项目现在不太维护，存在一些bug，不建议使用。\n\n使用verdaccio的优势\n\n- 配置简单，开箱即用；\n- 不需要数据库,verdaccio内置一个数据库了；\n- 当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；\n\n## 1. 安装verdaccio\n\n```javascript\nnpm i verdaccio -g\n```\n\n## 2. 启动verdaccio\n\n- 默认开启方式\n\n ```shell\nverdaccio\n```\n\n启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中`config.yaml`是配置文件，相关配置文件说明如下\n\n```shell\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to \"+inf\".\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源\n\npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"\n    access: $all  // 所有人都能下载\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: verdaccio.log, level: info}\n\n# you can specify listen address (or simply a port)\nlisten: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。\n```\n\n若在服务端部署，需要以守护进程的方式，推荐使用`pm2`去开启\n\n```shell\npm2 start `which verdaccio`\n```\n\npm2启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n## 如何使用\n\n 打开浏览器输入对应的暴露的地址，比如`192.168.0.1:4873`，\n\n截图如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照截图提示，注册一个用户\n\n```shell\nnpm adduser --registry http://192.168.0.1:4873\n```\n\n安装提示输入账号，密码\n\n## 更改下载源\n\n在每一个客户端中需要更改下载源为verdaccio，这里推荐使用`nrm`，这是一个包下载源管理器。\n\n```shell\nnpm install -g nrm\n\nnrm add verdaccio http://x.x.x.x:4873/\n\nnrm use verdaccio\n```\n\n## 维护\n\n如果需要发布一个包，需要先进行登录\n\n```shell\nnpm login\n```\n\n登录成功之后，在对应的包文件夹下，改好`package.json`版本号，再执行创建发布命令\n\n```shell\nnpm publish\n```\n","source":"_posts/利用verdaccio搭建私有npm仓库.md","raw":"---\ntitle: 利用verdaccio搭建私有npm仓库\ncatalog: true\ndate: 2019-06-16 08:25:18\nsubtitle: \nheader-img:\ntags: npm\ncategories: 前端\n---\n\n随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。\n\n[verdaccio]([https://github.com/verdaccio/verdaccio](https://github.com/verdaccio/verdaccio)\n)是一个部署简易的可以实现github仓储私有化的npm组件，fork于`sinopia`项目，由于`sinopia`项目现在不太维护，存在一些bug，不建议使用。\n\n使用verdaccio的优势\n\n- 配置简单，开箱即用；\n- 不需要数据库,verdaccio内置一个数据库了；\n- 当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；\n\n## 1. 安装verdaccio\n\n```javascript\nnpm i verdaccio -g\n```\n\n## 2. 启动verdaccio\n\n- 默认开启方式\n\n ```shell\nverdaccio\n```\n\n启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中`config.yaml`是配置文件，相关配置文件说明如下\n\n```shell\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to \"+inf\".\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源\n\npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"\n    access: $all  // 所有人都能下载\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: verdaccio.log, level: info}\n\n# you can specify listen address (or simply a port)\nlisten: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。\n```\n\n若在服务端部署，需要以守护进程的方式，推荐使用`pm2`去开启\n\n```shell\npm2 start `which verdaccio`\n```\n\npm2启动成功截图\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n## 如何使用\n\n 打开浏览器输入对应的暴露的地址，比如`192.168.0.1:4873`，\n\n截图如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按照截图提示，注册一个用户\n\n```shell\nnpm adduser --registry http://192.168.0.1:4873\n```\n\n安装提示输入账号，密码\n\n## 更改下载源\n\n在每一个客户端中需要更改下载源为verdaccio，这里推荐使用`nrm`，这是一个包下载源管理器。\n\n```shell\nnpm install -g nrm\n\nnrm add verdaccio http://x.x.x.x:4873/\n\nnrm use verdaccio\n```\n\n## 维护\n\n如果需要发布一个包，需要先进行登录\n\n```shell\nnpm login\n```\n\n登录成功之后，在对应的包文件夹下，改好`package.json`版本号，再执行创建发布命令\n\n```shell\nnpm publish\n```\n","slug":"利用verdaccio搭建私有npm仓库","published":1,"updated":"2024-02-20T06:48:45.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv0002tlwxaf6cvo8ip","content":"<p>随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。</p>\n<p><a href=\"%5Bhttps://github.com/verdaccio/verdaccio%5D(https://github.com/verdaccio/verdaccio)\">verdaccio</a>是一个部署简易的可以实现github仓储私有化的npm组件，fork于<code>sinopia</code>项目，由于<code>sinopia</code>项目现在不太维护，存在一些bug，不建议使用。</p>\n<p>使用verdaccio的优势</p>\n<ul>\n<li>配置简单，开箱即用；</li>\n<li>不需要数据库,verdaccio内置一个数据库了；</li>\n<li>当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；</li>\n</ul>\n<h2><span id=\"1-安装verdaccio\">1. 安装verdaccio</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"2-启动verdaccio\">2. 启动verdaccio</span></h2><ul>\n<li><p>默认开启方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中<code>config.yaml</code>是配置文件，相关配置文件说明如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage: ./storage  //npm包存放的路径</span><br><span class=\"line\"></span><br><span class=\"line\">auth:</span><br><span class=\"line\">  htpasswd:</span><br><span class=\"line\">    file: ./htpasswd   //保存用户的账号密码等信息</span><br><span class=\"line\">    # Maximum amount of users allowed to register, defaults to \"+inf\".</span><br><span class=\"line\">    # You can set this to -1 to disable registration.</span><br><span class=\"line\">    max_users: -1  //默认为1000，改为-1，禁止注册</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> a list of other known repositories we can talk to</span></span><br><span class=\"line\">uplinks:</span><br><span class=\"line\">  npmjs:</span><br><span class=\"line\">    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源</span><br><span class=\"line\"></span><br><span class=\"line\">packages:  //配置权限管理</span><br><span class=\"line\">  '@*/*':</span><br><span class=\"line\">    # scoped packages</span><br><span class=\"line\">    access: $all</span><br><span class=\"line\">    publish: $authenticated</span><br><span class=\"line\"></span><br><span class=\"line\">  '*':</span><br><span class=\"line\">    # allow all users (including non-authenticated users) to read and</span><br><span class=\"line\">    # publish all packages</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # you can specify usernames/groupnames (depending on your auth plugin)</span><br><span class=\"line\">    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"</span><br><span class=\"line\">    access: $all  // 所有人都能下载</span><br><span class=\"line\"></span><br><span class=\"line\">    # allow all known users to publish packages</span><br><span class=\"line\">    # (anyone can register by default, remember?)</span><br><span class=\"line\">    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字</span><br><span class=\"line\"></span><br><span class=\"line\">    # if package is not available locally, proxy requests to 'npmjs' registry</span><br><span class=\"line\">    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">log</span> settings</span></span><br><span class=\"line\">logs:</span><br><span class=\"line\">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">- &#123;<span class=\"built_in\">type</span>: file, path: verdaccio.log, level: info&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you can specify listen address (or simply a port)</span></span><br><span class=\"line\">listen: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。</span><br></pre></td></tr></table></figure>\n\n<p>若在服务端部署，需要以守护进程的方式，推荐使用<code>pm2</code>去开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `which verdaccio`</span><br></pre></td></tr></table></figure>\n\n<p>pm2启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<h2><span id=\"如何使用\">如何使用</span></h2><p> 打开浏览器输入对应的暴露的地址，比如<code>192.168.0.1:4873</code>，</p>\n<p>截图如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>按照截图提示，注册一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://192.168.0.1:4873</span><br></pre></td></tr></table></figure>\n\n<p>安装提示输入账号，密码</p>\n<h2><span id=\"更改下载源\">更改下载源</span></h2><p>在每一个客户端中需要更改下载源为verdaccio，这里推荐使用<code>nrm</code>，这是一个包下载源管理器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\"></span><br><span class=\"line\">nrm add verdaccio http://x.x.x.x:4873/</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use verdaccio</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"维护\">维护</span></h2><p>如果需要发布一个包，需要先进行登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<p>登录成功之后，在对应的包文件夹下，改好<code>package.json</code>版本号，再执行创建发布命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1879,"excerpt":"","more":"<p>随着时间的推移，前端的工程日益庞大，越来越复杂的依赖包需要包管理器来维护。相比搭建没有优势bower仓储，更好的方式是在局域网搭建NPM仓储，维护项目中package.json中的各个插件的版本即可维护项目依赖。</p>\n<p><a href=\"%5Bhttps://github.com/verdaccio/verdaccio%5D(https://github.com/verdaccio/verdaccio)\">verdaccio</a>是一个部署简易的可以实现github仓储私有化的npm组件，fork于<code>sinopia</code>项目，由于<code>sinopia</code>项目现在不太维护，存在一些bug，不建议使用。</p>\n<p>使用verdaccio的优势</p>\n<ul>\n<li>配置简单，开箱即用；</li>\n<li>不需要数据库,verdaccio内置一个数据库了；</li>\n<li>当源为verdaccio时, verdaccio不存在要安装的包时,会自动去设置的远程npm把包缓存到本地；</li>\n</ul>\n<h2 id=\"1-安装verdaccio\"><a href=\"#1-安装verdaccio\" class=\"headerlink\" title=\"1. 安装verdaccio\"></a>1. 安装verdaccio</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i verdaccio -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-启动verdaccio\"><a href=\"#2-启动verdaccio\" class=\"headerlink\" title=\"2. 启动verdaccio\"></a>2. 启动verdaccio</h2><ul>\n<li><p>默认开启方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">verdaccio</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-ec7bd2397fb9d6bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中<code>config.yaml</code>是配置文件，相关配置文件说明如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage: ./storage  //npm包存放的路径</span><br><span class=\"line\"></span><br><span class=\"line\">auth:</span><br><span class=\"line\">  htpasswd:</span><br><span class=\"line\">    file: ./htpasswd   //保存用户的账号密码等信息</span><br><span class=\"line\">    # Maximum amount of users allowed to register, defaults to \"+inf\".</span><br><span class=\"line\">    # You can set this to -1 to disable registration.</span><br><span class=\"line\">    max_users: -1  //默认为1000，改为-1，禁止注册</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> a list of other known repositories we can talk to</span></span><br><span class=\"line\">uplinks:</span><br><span class=\"line\">  npmjs:</span><br><span class=\"line\">    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，改为淘宝源</span><br><span class=\"line\"></span><br><span class=\"line\">packages:  //配置权限管理</span><br><span class=\"line\">  '@*/*':</span><br><span class=\"line\">    # scoped packages</span><br><span class=\"line\">    access: $all</span><br><span class=\"line\">    publish: $authenticated</span><br><span class=\"line\"></span><br><span class=\"line\">  '*':</span><br><span class=\"line\">    # allow all users (including non-authenticated users) to read and</span><br><span class=\"line\">    # publish all packages</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # you can specify usernames/groupnames (depending on your auth plugin)</span><br><span class=\"line\">    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"</span><br><span class=\"line\">    access: $all  // 所有人都能下载</span><br><span class=\"line\"></span><br><span class=\"line\">    # allow all known users to publish packages</span><br><span class=\"line\">    # (anyone can register by default, remember?)</span><br><span class=\"line\">    publish: $authenticated // 所有人都有发布包的权限，若想指定默认发布改成对应人的名字</span><br><span class=\"line\"></span><br><span class=\"line\">    # if package is not available locally, proxy requests to 'npmjs' registry</span><br><span class=\"line\">    proxy: npmjs  // 若安装的报在simopia没有，会去配置的npmjs地址去下载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">log</span> settings</span></span><br><span class=\"line\">logs:</span><br><span class=\"line\">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">- &#123;<span class=\"built_in\">type</span>: file, path: verdaccio.log, level: info&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you can specify listen address (or simply a port)</span></span><br><span class=\"line\">listen: 0.0.0.0:4873  // 默认没有，只能在本机访问，添加后可以通过外网访问。</span><br></pre></td></tr></table></figure>\n\n<p>若在服务端部署，需要以守护进程的方式，推荐使用<code>pm2</code>去开启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start `which verdaccio`</span><br></pre></td></tr></table></figure>\n\n<p>pm2启动成功截图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-dcf94831d7b96096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p> 打开浏览器输入对应的暴露的地址，比如<code>192.168.0.1:4873</code>，</p>\n<p>截图如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6655013-d6ae317646b0afc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>按照截图提示，注册一个用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser --registry http://192.168.0.1:4873</span><br></pre></td></tr></table></figure>\n\n<p>安装提示输入账号，密码</p>\n<h2 id=\"更改下载源\"><a href=\"#更改下载源\" class=\"headerlink\" title=\"更改下载源\"></a>更改下载源</h2><p>在每一个客户端中需要更改下载源为verdaccio，这里推荐使用<code>nrm</code>，这是一个包下载源管理器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\"></span><br><span class=\"line\">nrm add verdaccio http://x.x.x.x:4873/</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use verdaccio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"维护\"><a href=\"#维护\" class=\"headerlink\" title=\"维护\"></a>维护</h2><p>如果需要发布一个包，需要先进行登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<p>登录成功之后，在对应的包文件夹下，改好<code>package.json</code>版本号，再执行创建发布命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二叉树","catalog":true,"date":"2020-03-15T14:22:18.000Z","subtitle":null,"header-img":null,"_content":"\n二叉树遍历主要分为深度遍历和广度遍历，一共有6种遍历方式。\n\n其中深度遍历分为：\n\n- 前序遍历： 访问根–>遍历左子树–>遍历右子树;\n- 中序遍历： 遍历左子树–>访问根–>遍历右子树\n- 后序遍历： 遍历左子树–>遍历右子树–>访问根\n\n主要看中间的`根结点`位置在哪，就对应哪一种遍历\n\n[![8cvQSI.png](https://s1.ax1x.com/2020/03/20/8cvQSI.png)](https://imgchr.com/i/8cvQSI)\n\n- 前序遍历： - + a \\* b c / d e\n- 中序遍历： a + b \\* c - d / e\n- 后续遍历： a b c \\* + d e / -\n- 层次遍历： - + / a \\* d e b c\n\n数据结构表示如下：\n\n```javascript\nvar treeNode = {\n  value: \"-\",\n  left: {\n    value: \"+\",\n    left: {\n      value: \"a\"\n    },\n    right: {\n      value: \"*\",\n      left: {\n        value: \"b\"\n      },\n      right: {\n        value: \"c\"\n      }\n    }\n  },\n  right: {\n    value: \"/\",\n    left: {\n      value: \"d\"\n    },\n    right: {\n      value: \"e\"\n    }\n  }\n};\n```\n\n## 前序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    finalTreeNodeArr.push(treeNode.value);\n    popNode(treeNode.left);\n    popNode(treeNode.right);\n  }\n}\n```\n\n- 非递归\n\n1. 依次遍历数组，每次取数组最后一个值；\n2. 一次遍历中，每次先判断是否有右节点，有的话插入到数组末尾，再判断左节点，有的话再插入到数组末尾；\n3. 依次循环；\n\n整体流程如下：\n\n1. [{left, right }];\n2. [right, left]\n3. [right, right, left]\n\n```javascript\nfunction firstPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.push(root.value);\n\n    // 注意顺序 先要取右节点\n    if (root.right) stack.push(root.right);\n    if (root.left) stack.push(root.left);\n\n    root = stack.pop();\n  }\n  console.log(\"先序遍历：\", result);\n  return result;\n}\n```\n\n## 中序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    popNode(treeNode.left);\n    finalTreeNodeArr.push(treeNode.value);\n    popNode(treeNode.right);\n  }\n}\n```\n\n- 非递归\n\n```javascript\nfunction middlePop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    // 一直遍历是否有左节点 入栈\n    while (root) {\n      stack.push(root);\n      root = root.left;\n    }\n\n    root = stack.pop();\n\n    result.push(root.value);\n\n    root = root.right;\n  }\n  console.log(\"中序遍历：\", result);\n  return result;\n}\n```\n\n## 后序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    popNode(treeNode.left);\n    popNode(treeNode.right);\n    finalTreeNodeArr.push(treeNode.value);\n  }\n}\n```\n\n- 非递归\n\n```javascript\nfunction endPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.unshift(root.value);\n\n    if (root.left) stack.push(root.left);\n    if (root.right) stack.push(root.right);\n\n    root = stack.pop();\n  }\n  console.log(\"后序遍历：\", result);\n  return result;\n}\n```\n\n## 广度遍历\n\n```javascript\nfunction deepPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.push(root.value);\n\n    if (root.left) stack.push(root.left);\n    if (root.right) stack.push(root.right);\n\n    root = stack.shift();\n  }\n  console.log(\"广度遍历：\", result);\n  return result;\n}\n```\n\n总结：\n\n1. 先序非递归 要先存右节点 后存左节点；\n2. 后序非递归 unshift 插值；\n\n---\n\n## 判断对称二叉树\n\n对称二叉树就是镜像二叉树\n\n比如：\n\n![对称二叉树](https://img-blog.csdnimg.cn/20190625104849486.png)\n\n代码模拟一个对称和非对称二叉树如下：\n\n```javascript\n//对称二叉树\nconst symmetricalTree = {\n  val: 8,\n  left: {\n    val: 6,\n    left: { val: 5, left: null, right: null },\n    right: { val: 7, left: null, right: null }\n  },\n  right: {\n    val: 6,\n    left: { val: 7, left: null, right: null },\n    right: { val: 5, left: null, right: null }\n  }\n};\n\nconst noSymmetricalTree = {\n  val: 8,\n  left: {\n    val: 6,\n    left: { val: 5, left: null, right: null },\n    right: { val: 7, left: null, right: null }\n  },\n  right: {\n    val: 6,\n    left: { val: 7, left: null, right: null },\n    right: { val: 9, left: null, right: null }\n  }\n};\n```\n\n递归判断\n\n```javascript\nfunction isMirrorTreeNodes(treeNodes) {\n  return isMirrorNode(treeNodes.left, treeNodes.right);\n}\n\nfunction isMirrorNode(leftNode, rightNode) {\n  // 左右节点都不存在\n  if (!leftNode && !rightNode) return true;\n\n  // 左右节点只有一个存在\n  if (!leftNode || !rightNode) return false;\n\n  if (leftNode.val !== rightNode.val) return false;\n\n  return (\n    isMirrorNode(leftNode.left, rightNode.right) &&\n    isMirrorNode(leftNode.right, rightNode.left)\n  );\n}\n```\n\n参考资料：\n\n[二叉树与 JavaScript](https://juejin.im/entry/5847c17a128fe10058bcf2c5)\n\n\n其他一些example\n\n```javascript\n// 二叉树遍历\n\n/**\n *      10 \n *    /    \\\n *   9      17\n *  / \\    /  \\\n * 6  11  16  19\n *   /  \\\n *  8   44 \n * \n * 主要看中间的根结点位置在哪 就对应哪一种遍历\n * \n * 先序  中左右   10、9、6、11、8、44、17、16、19\n * 中序  左中右   6、9、8、11、44、10、16、17、19\n * 后序  左右中   6、8、44、11、9、16、19、17、10\n *  \n */\n\nconst nodes = {\n    value: 10,\n    left: {\n        value: 9,\n        left: {\n            value: 6,\n        },\n        right: {\n            value: 11,\n            left: {\n                value: 8\n            },\n            right: {\n                value: 44\n            }\n        }\n    },\n    right: {\n        value: 17,\n        left: {\n            value: 16\n        },\n        right: {\n            value: 19\n        }\n    }\n}\n\n\n/**\n * @description 递归实现深度遍历\n * @author knight\n * @date 2020-12-21\n * @param {*} [nodes={}]\n */\nfunction eachTrees(nodes = {}) {\n    const arr = []\n    function getTrees(nodes) {\n        // 先序\n        // arr.push(nodes.value)\n        if (nodes.left) { getTrees(nodes.left) }\n\n        // 中序\n        // arr.push(nodes.value)\n        if (nodes.right) { getTrees(nodes.right) }\n\n        // 后序\n        arr.push(nodes.value)\n\n        return arr\n    }\n\n    const result = getTrees(nodes)\n    console.log(result)\n}\n\nconst a = eachTrees(nodes)\n```","source":"_posts/二叉树.md","raw":"---\ntitle: 二叉树\ncatalog: true\ndate: 2020-03-15 22:22:18\nsubtitle:\nheader-img:\ntags: algorithm\ncategories: 前端\n---\n\n二叉树遍历主要分为深度遍历和广度遍历，一共有6种遍历方式。\n\n其中深度遍历分为：\n\n- 前序遍历： 访问根–>遍历左子树–>遍历右子树;\n- 中序遍历： 遍历左子树–>访问根–>遍历右子树\n- 后序遍历： 遍历左子树–>遍历右子树–>访问根\n\n主要看中间的`根结点`位置在哪，就对应哪一种遍历\n\n[![8cvQSI.png](https://s1.ax1x.com/2020/03/20/8cvQSI.png)](https://imgchr.com/i/8cvQSI)\n\n- 前序遍历： - + a \\* b c / d e\n- 中序遍历： a + b \\* c - d / e\n- 后续遍历： a b c \\* + d e / -\n- 层次遍历： - + / a \\* d e b c\n\n数据结构表示如下：\n\n```javascript\nvar treeNode = {\n  value: \"-\",\n  left: {\n    value: \"+\",\n    left: {\n      value: \"a\"\n    },\n    right: {\n      value: \"*\",\n      left: {\n        value: \"b\"\n      },\n      right: {\n        value: \"c\"\n      }\n    }\n  },\n  right: {\n    value: \"/\",\n    left: {\n      value: \"d\"\n    },\n    right: {\n      value: \"e\"\n    }\n  }\n};\n```\n\n## 前序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    finalTreeNodeArr.push(treeNode.value);\n    popNode(treeNode.left);\n    popNode(treeNode.right);\n  }\n}\n```\n\n- 非递归\n\n1. 依次遍历数组，每次取数组最后一个值；\n2. 一次遍历中，每次先判断是否有右节点，有的话插入到数组末尾，再判断左节点，有的话再插入到数组末尾；\n3. 依次循环；\n\n整体流程如下：\n\n1. [{left, right }];\n2. [right, left]\n3. [right, right, left]\n\n```javascript\nfunction firstPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.push(root.value);\n\n    // 注意顺序 先要取右节点\n    if (root.right) stack.push(root.right);\n    if (root.left) stack.push(root.left);\n\n    root = stack.pop();\n  }\n  console.log(\"先序遍历：\", result);\n  return result;\n}\n```\n\n## 中序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    popNode(treeNode.left);\n    finalTreeNodeArr.push(treeNode.value);\n    popNode(treeNode.right);\n  }\n}\n```\n\n- 非递归\n\n```javascript\nfunction middlePop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    // 一直遍历是否有左节点 入栈\n    while (root) {\n      stack.push(root);\n      root = root.left;\n    }\n\n    root = stack.pop();\n\n    result.push(root.value);\n\n    root = root.right;\n  }\n  console.log(\"中序遍历：\", result);\n  return result;\n}\n```\n\n## 后序遍历\n\n- 递归\n\n```javascript\nlet finalTreeNodeArr = [];\n\nfunction popNode(treeNode) {\n  if (treeNode) {\n    popNode(treeNode.left);\n    popNode(treeNode.right);\n    finalTreeNodeArr.push(treeNode.value);\n  }\n}\n```\n\n- 非递归\n\n```javascript\nfunction endPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.unshift(root.value);\n\n    if (root.left) stack.push(root.left);\n    if (root.right) stack.push(root.right);\n\n    root = stack.pop();\n  }\n  console.log(\"后序遍历：\", result);\n  return result;\n}\n```\n\n## 广度遍历\n\n```javascript\nfunction deepPop(root) {\n  const stack = [];\n  const result = [];\n\n  while (root || stack.length) {\n    result.push(root.value);\n\n    if (root.left) stack.push(root.left);\n    if (root.right) stack.push(root.right);\n\n    root = stack.shift();\n  }\n  console.log(\"广度遍历：\", result);\n  return result;\n}\n```\n\n总结：\n\n1. 先序非递归 要先存右节点 后存左节点；\n2. 后序非递归 unshift 插值；\n\n---\n\n## 判断对称二叉树\n\n对称二叉树就是镜像二叉树\n\n比如：\n\n![对称二叉树](https://img-blog.csdnimg.cn/20190625104849486.png)\n\n代码模拟一个对称和非对称二叉树如下：\n\n```javascript\n//对称二叉树\nconst symmetricalTree = {\n  val: 8,\n  left: {\n    val: 6,\n    left: { val: 5, left: null, right: null },\n    right: { val: 7, left: null, right: null }\n  },\n  right: {\n    val: 6,\n    left: { val: 7, left: null, right: null },\n    right: { val: 5, left: null, right: null }\n  }\n};\n\nconst noSymmetricalTree = {\n  val: 8,\n  left: {\n    val: 6,\n    left: { val: 5, left: null, right: null },\n    right: { val: 7, left: null, right: null }\n  },\n  right: {\n    val: 6,\n    left: { val: 7, left: null, right: null },\n    right: { val: 9, left: null, right: null }\n  }\n};\n```\n\n递归判断\n\n```javascript\nfunction isMirrorTreeNodes(treeNodes) {\n  return isMirrorNode(treeNodes.left, treeNodes.right);\n}\n\nfunction isMirrorNode(leftNode, rightNode) {\n  // 左右节点都不存在\n  if (!leftNode && !rightNode) return true;\n\n  // 左右节点只有一个存在\n  if (!leftNode || !rightNode) return false;\n\n  if (leftNode.val !== rightNode.val) return false;\n\n  return (\n    isMirrorNode(leftNode.left, rightNode.right) &&\n    isMirrorNode(leftNode.right, rightNode.left)\n  );\n}\n```\n\n参考资料：\n\n[二叉树与 JavaScript](https://juejin.im/entry/5847c17a128fe10058bcf2c5)\n\n\n其他一些example\n\n```javascript\n// 二叉树遍历\n\n/**\n *      10 \n *    /    \\\n *   9      17\n *  / \\    /  \\\n * 6  11  16  19\n *   /  \\\n *  8   44 \n * \n * 主要看中间的根结点位置在哪 就对应哪一种遍历\n * \n * 先序  中左右   10、9、6、11、8、44、17、16、19\n * 中序  左中右   6、9、8、11、44、10、16、17、19\n * 后序  左右中   6、8、44、11、9、16、19、17、10\n *  \n */\n\nconst nodes = {\n    value: 10,\n    left: {\n        value: 9,\n        left: {\n            value: 6,\n        },\n        right: {\n            value: 11,\n            left: {\n                value: 8\n            },\n            right: {\n                value: 44\n            }\n        }\n    },\n    right: {\n        value: 17,\n        left: {\n            value: 16\n        },\n        right: {\n            value: 19\n        }\n    }\n}\n\n\n/**\n * @description 递归实现深度遍历\n * @author knight\n * @date 2020-12-21\n * @param {*} [nodes={}]\n */\nfunction eachTrees(nodes = {}) {\n    const arr = []\n    function getTrees(nodes) {\n        // 先序\n        // arr.push(nodes.value)\n        if (nodes.left) { getTrees(nodes.left) }\n\n        // 中序\n        // arr.push(nodes.value)\n        if (nodes.right) { getTrees(nodes.right) }\n\n        // 后序\n        arr.push(nodes.value)\n\n        return arr\n    }\n\n    const result = getTrees(nodes)\n    console.log(result)\n}\n\nconst a = eachTrees(nodes)\n```","slug":"二叉树","published":1,"updated":"2024-02-20T06:48:45.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv2002xlwxadjja6la5","content":"<p>二叉树遍历主要分为深度遍历和广度遍历，一共有6种遍历方式。</p>\n<p>其中深度遍历分为：</p>\n<ul>\n<li>前序遍历： 访问根–&gt;遍历左子树–&gt;遍历右子树;</li>\n<li>中序遍历： 遍历左子树–&gt;访问根–&gt;遍历右子树</li>\n<li>后序遍历： 遍历左子树–&gt;遍历右子树–&gt;访问根</li>\n</ul>\n<p>主要看中间的<code>根结点</code>位置在哪，就对应哪一种遍历</p>\n<p><a href=\"https://imgchr.com/i/8cvQSI\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/20/8cvQSI.png\" alt=\"8cvQSI.png\"></a></p>\n<ul>\n<li>前序遍历： - + a * b c / d e</li>\n<li>中序遍历： a + b * c - d / e</li>\n<li>后续遍历： a b c * + d e / -</li>\n<li>层次遍历： - + / a * d e b c</li>\n</ul>\n<p>数据结构表示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> treeNode = &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"-\"</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"+\"</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">      left: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">\"b\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      right: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">\"c\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"d\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"e\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"前序遍历\">前序遍历</span></h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<ol>\n<li>依次遍历数组，每次取数组最后一个值；</li>\n<li>一次遍历中，每次先判断是否有右节点，有的话插入到数组末尾，再判断左节点，有的话再插入到数组末尾；</li>\n<li>依次循环；</li>\n</ol>\n<p>整体流程如下：</p>\n<ol>\n<li>[{left, right }];</li>\n<li>[right, left]</li>\n<li>[right, right, left]</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意顺序 先要取右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"先序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"中序遍历\">中序遍历</span></h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">middlePop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一直遍历是否有左节点 入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root) &#123;</span><br><span class=\"line\">      stack.push(root);</span><br><span class=\"line\">      root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = root.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"中序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"后序遍历\">后序遍历</span></h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.unshift(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"后序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"广度遍历\">广度遍历</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"广度遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>先序非递归 要先存右节点 后存左节点；</li>\n<li>后序非递归 unshift 插值；</li>\n</ol>\n<hr>\n<h2><span id=\"判断对称二叉树\">判断对称二叉树</span></h2><p>对称二叉树就是镜像二叉树</p>\n<p>比如：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190625104849486.png\" alt=\"对称二叉树\"></p>\n<p>代码模拟一个对称和非对称二叉树如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对称二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symmetricalTree = &#123;</span><br><span class=\"line\">  val: <span class=\"number\">8</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> noSymmetricalTree = &#123;</span><br><span class=\"line\">  val: <span class=\"number\">8</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">9</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>递归判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMirrorTreeNodes</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isMirrorNode(treeNodes.left, treeNodes.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMirrorNode</span>(<span class=\"params\">leftNode, rightNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 左右节点都不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!leftNode &amp;&amp; !rightNode) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左右节点只有一个存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!leftNode || !rightNode) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftNode.val !== rightNode.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    isMirrorNode(leftNode.left, rightNode.right) &amp;&amp;</span><br><span class=\"line\">    isMirrorNode(leftNode.right, rightNode.left)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<p><a href=\"https://juejin.im/entry/5847c17a128fe10058bcf2c5\" target=\"_blank\" rel=\"noopener\">二叉树与 JavaScript</a></p>\n<p>其他一些example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二叉树遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *      10 </span></span><br><span class=\"line\"><span class=\"comment\"> *    /    \\</span></span><br><span class=\"line\"><span class=\"comment\"> *   9      17</span></span><br><span class=\"line\"><span class=\"comment\"> *  / \\    /  \\</span></span><br><span class=\"line\"><span class=\"comment\"> * 6  11  16  19</span></span><br><span class=\"line\"><span class=\"comment\"> *   /  \\</span></span><br><span class=\"line\"><span class=\"comment\"> *  8   44 </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 主要看中间的根结点位置在哪 就对应哪一种遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 先序  中左右   10、9、6、11、8、44、17、16、19</span></span><br><span class=\"line\"><span class=\"comment\"> * 中序  左中右   6、9、8、11、44、10、16、17、19</span></span><br><span class=\"line\"><span class=\"comment\"> * 后序  左右中   6、8、44、11、9、16、19、17、10</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodes = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">10</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">9</span>,</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">6</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">11</span>,</span><br><span class=\"line\">            left: &#123;</span><br><span class=\"line\">                value: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            right: &#123;</span><br><span class=\"line\">                value: <span class=\"number\">44</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">17</span>,</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">16</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">19</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>递归实现深度遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">knight</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2020-12-21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>[nodes=&#123;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eachTrees</span>(<span class=\"params\">nodes = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTrees</span>(<span class=\"params\">nodes</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先序</span></span><br><span class=\"line\">        <span class=\"comment\">// arr.push(nodes.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes.left) &#123; getTrees(nodes.left) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 中序</span></span><br><span class=\"line\">        <span class=\"comment\">// arr.push(nodes.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes.right) &#123; getTrees(nodes.right) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 后序</span></span><br><span class=\"line\">        arr.push(nodes.value)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = getTrees(nodes)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = eachTrees(nodes)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":4440,"excerpt":"","more":"<p>二叉树遍历主要分为深度遍历和广度遍历，一共有6种遍历方式。</p>\n<p>其中深度遍历分为：</p>\n<ul>\n<li>前序遍历： 访问根–&gt;遍历左子树–&gt;遍历右子树;</li>\n<li>中序遍历： 遍历左子树–&gt;访问根–&gt;遍历右子树</li>\n<li>后序遍历： 遍历左子树–&gt;遍历右子树–&gt;访问根</li>\n</ul>\n<p>主要看中间的<code>根结点</code>位置在哪，就对应哪一种遍历</p>\n<p><a href=\"https://imgchr.com/i/8cvQSI\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/20/8cvQSI.png\" alt=\"8cvQSI.png\"></a></p>\n<ul>\n<li>前序遍历： - + a * b c / d e</li>\n<li>中序遍历： a + b * c - d / e</li>\n<li>后续遍历： a b c * + d e / -</li>\n<li>层次遍历： - + / a * d e b c</li>\n</ul>\n<p>数据结构表示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> treeNode = &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"-\"</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"+\"</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"a\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">      left: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">\"b\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      right: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">\"c\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"d\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">      value: <span class=\"string\">\"e\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<ol>\n<li>依次遍历数组，每次取数组最后一个值；</li>\n<li>一次遍历中，每次先判断是否有右节点，有的话插入到数组末尾，再判断左节点，有的话再插入到数组末尾；</li>\n<li>依次循环；</li>\n</ol>\n<p>整体流程如下：</p>\n<ol>\n<li>[{left, right }];</li>\n<li>[right, left]</li>\n<li>[right, right, left]</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意顺序 先要取右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"先序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">middlePop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一直遍历是否有左节点 入栈</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root) &#123;</span><br><span class=\"line\">      stack.push(root);</span><br><span class=\"line\">      root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = root.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"中序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalTreeNodeArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popNode</span>(<span class=\"params\">treeNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (treeNode) &#123;</span><br><span class=\"line\">    popNode(treeNode.left);</span><br><span class=\"line\">    popNode(treeNode.right);</span><br><span class=\"line\">    finalTreeNodeArr.push(treeNode.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非递归</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.unshift(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"后序遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"广度遍历\"><a href=\"#广度遍历\" class=\"headerlink\" title=\"广度遍历\"></a>广度遍历</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepPop</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root || stack.length) &#123;</span><br><span class=\"line\">    result.push(root.value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left) stack.push(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right) stack.push(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    root = stack.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"广度遍历：\"</span>, result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>先序非递归 要先存右节点 后存左节点；</li>\n<li>后序非递归 unshift 插值；</li>\n</ol>\n<hr>\n<h2 id=\"判断对称二叉树\"><a href=\"#判断对称二叉树\" class=\"headerlink\" title=\"判断对称二叉树\"></a>判断对称二叉树</h2><p>对称二叉树就是镜像二叉树</p>\n<p>比如：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190625104849486.png\" alt=\"对称二叉树\"></p>\n<p>代码模拟一个对称和非对称二叉树如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对称二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> symmetricalTree = &#123;</span><br><span class=\"line\">  val: <span class=\"number\">8</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> noSymmetricalTree = &#123;</span><br><span class=\"line\">  val: <span class=\"number\">8</span>,</span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">5</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    val: <span class=\"number\">6</span>,</span><br><span class=\"line\">    left: &#123; <span class=\"attr\">val</span>: <span class=\"number\">7</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;,</span><br><span class=\"line\">    right: &#123; <span class=\"attr\">val</span>: <span class=\"number\">9</span>, <span class=\"attr\">left</span>: <span class=\"literal\">null</span>, <span class=\"attr\">right</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>递归判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMirrorTreeNodes</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isMirrorNode(treeNodes.left, treeNodes.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isMirrorNode</span>(<span class=\"params\">leftNode, rightNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 左右节点都不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!leftNode &amp;&amp; !rightNode) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 左右节点只有一个存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!leftNode || !rightNode) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftNode.val !== rightNode.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    isMirrorNode(leftNode.left, rightNode.right) &amp;&amp;</span><br><span class=\"line\">    isMirrorNode(leftNode.right, rightNode.left)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<p><a href=\"https://juejin.im/entry/5847c17a128fe10058bcf2c5\" target=\"_blank\" rel=\"noopener\">二叉树与 JavaScript</a></p>\n<p>其他一些example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二叉树遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *      10 </span></span><br><span class=\"line\"><span class=\"comment\"> *    /    \\</span></span><br><span class=\"line\"><span class=\"comment\"> *   9      17</span></span><br><span class=\"line\"><span class=\"comment\"> *  / \\    /  \\</span></span><br><span class=\"line\"><span class=\"comment\"> * 6  11  16  19</span></span><br><span class=\"line\"><span class=\"comment\"> *   /  \\</span></span><br><span class=\"line\"><span class=\"comment\"> *  8   44 </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 主要看中间的根结点位置在哪 就对应哪一种遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 先序  中左右   10、9、6、11、8、44、17、16、19</span></span><br><span class=\"line\"><span class=\"comment\"> * 中序  左中右   6、9、8、11、44、10、16、17、19</span></span><br><span class=\"line\"><span class=\"comment\"> * 后序  左右中   6、8、44、11、9、16、19、17、10</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nodes = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">10</span>,</span><br><span class=\"line\">    left: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">9</span>,</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">6</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">11</span>,</span><br><span class=\"line\">            left: &#123;</span><br><span class=\"line\">                value: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            right: &#123;</span><br><span class=\"line\">                value: <span class=\"number\">44</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right: &#123;</span><br><span class=\"line\">        value: <span class=\"number\">17</span>,</span><br><span class=\"line\">        left: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">16</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        right: &#123;</span><br><span class=\"line\">            value: <span class=\"number\">19</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>递归实现深度遍历</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author <span class=\"variable\">knight</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date </span>2020-12-21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>[nodes=&#123;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eachTrees</span>(<span class=\"params\">nodes = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTrees</span>(<span class=\"params\">nodes</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先序</span></span><br><span class=\"line\">        <span class=\"comment\">// arr.push(nodes.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes.left) &#123; getTrees(nodes.left) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 中序</span></span><br><span class=\"line\">        <span class=\"comment\">// arr.push(nodes.value)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes.right) &#123; getTrees(nodes.right) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 后序</span></span><br><span class=\"line\">        arr.push(nodes.value)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = getTrees(nodes)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = eachTrees(nodes)</span><br></pre></td></tr></table></figure>"},{"title":"前端http与https问题整理","catalog":true,"date":"2020-03-17T02:37:17.000Z","subtitle":null,"header-img":null,"_content":"\n## TCP 特性\n\n- 单工通信\n- 并非 100%可靠协议，仅保证尽可能会把数据传送给接收方\n- 使用校验和，确认和重传机制来保证可靠传输\n- 通过滑动窗口来实现流量控制，通过动态改变窗口大小进行阻塞控制。\n\n## TCP滑动窗口协议的意义\n\n1. 可靠性，滑动窗口只有在队列前部被确认之后才会往后移动，保证数据包被接收方确认并接收；\n2. 传输效率，假如没有窗口，服务端是杂乱无章的进行发包，因为TCP的队首效应，如果有前面的包没有发送成功，就会不停重试，反而造成更差的传输效率；\n3. 稳定性，TCP滑动窗口大小，是整个复杂网络商榷的结果，会进行动态调整，可以尽量的避免网络拥塞，更加稳定。\n\n## TCP 三次握手和四次挥手的理解\n\n![示意图](https://user-images.githubusercontent.com/34148615/53062591-3d846300-34fc-11e9-8d0f-4063d9ff3398.png)\n\nTCP 三次握手：\n\n三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。\n\n其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的 ACK 都会对这个 seq 进行加一来进行确认\n\n三次握手之所以是三次是保证 client 和 server 均让对方知道自己的接收和发送能力没问题而保证的最小次数，三次是最少的安全次数，两次不安全，四次浪费资源。\n\n完整流程如下：\n\n- 第一次握手(SYN=1, seq=x):\n\n客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。\n\n发送完毕后，客户端进入 SYN_SEND 状态。\n\n- 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):\n\n服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。\n\n- 第三次握手(ACK=1，ACKnum=y+1)\n\n客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写 ISN 的+1\n\n发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束\n\n[![8NAjB9.md.jpg](https://s1.ax1x.com/2020/03/17/8NAjB9.md.jpg)](https://imgchr.com/i/8NAjB9)\n\n四次挥手：\n\n两个通道可以同时工作：客户端向服务端发送信号的同时服务端也可以向客户端发送信号。所以关闭双通道的时候就是这样：\n\n客户端：我要关闭输入通道了。 服务端：好的，但还没有准备好关闭连接。\n\n服务端：已准备关闭输入通道了。 客户端：好的你关闭吧，我也把这个通道关闭，等待两个最大段生命周期（2MSL）完全关闭。\n\n[![8NAXnJ.md.jpg](https://s1.ax1x.com/2020/03/17/8NAXnJ.md.jpg)](https://imgchr.com/i/8NAXnJ)\n\n## 为什么需要等待 2MSL 关闭就是安全的\n\n因为在 client 发送出 ACK 之后，会遇到如下情况\n\n- Clinet 到 Server 一次过程最多 1MSL\n- Server 未收到 ACK，超过时间 Server 会自动重发 FIN；\n\n两种情况加在一起最大时长为 2MSL\n\n## rpc 协议和 tcp 协议的区别\n\n| 协议 |                    特点                    |\n| ---- | :----------------------------------------: |\n| tcp  |               需要 DNS 寻址                |\n|      |                  单工通信                  |\n| rpc  | 二进制数据传输，更小的体积，更快编解码速率 |\n|      |   不一定是 DNS 寻址，可能是内部服务寻址    |\n|      |        单工/半双工/双工通信方式支持        |\n| UDP  |                   不可靠                   |\n|      |               支持广播和多播               |\n|      |        无连接的，不需要握手会和挥手        |\n\n## http 1.0 1.1 2.0 协议特性与区别\n\nhttp 1.0\n\n1. 无状态\n需要 cookie/session 做身份认证和登录\n2. 无连接\n\na. 每次连接结束都会关闭连接，再重新创建连接 tcp 三次连接与四次挥手，效率很低；\n\nb. 在上一个请求到达结束之前无法发送下一个请求；\n\nhttp 1.1\n\n1. 长连接 keep-alive\n2. 管道机制 不必等待上一个请求返回就能发送下一个请求，返回的结果还是按照顺序，但是为了保持响应顺序，还是存在队头阻塞问题；\n3. 缓存 cache-control；\n4. 断点传输\n\nhttp 2.0\n\n1. 二进制分帧；\n2. 多路复用 在共享 TCP 链接的基础上同时发送请求和响应；\n3. 头部压缩；\n4. 服务器推送；\n\n## 简单讲解一下 http2 的多路复用\n\nhttp1.0 一个请求建立一个链接，请求结束就关闭，依次往复，可开启'keep-alive'，让链接不关闭复用\n\nhttp1.1 默认允许一个连接发送多个请求，浏览器为了控制资源一般控制在 6 个左右，虽然建立多个连接，但需要等待前一个请求结束，服务器才会响应后面的请求；\n\nhttp2 采用二进制传输数据，更高效，有两个非常重要的概念，帧和流，帧是最小数据单位，帧会标识属于哪个流，可以在一个连接中发送并行发送多个请求，避免了 1.1 中队头阻塞的问题，极大提高性能。\n\n## https\n\n特点\n\n- http + ssl/tls\n- 对称加密传输数据，非对称加密进行身份验证\n- 443\n- 需要ca证书\n- RSA加密方式\n\nhttps TLS/SSL握手过程\n\n1. ClientHello 客户端发送请求，给出协议版本、随机数A 和 客户端支持的加密算法；\n2. SeverHello 服务端返回数据证书（包括公钥、域名、证书），加密算法 和 随机数B；\n3. 客户端校验证书，通过使用服务端证书中的公钥进行加密，生成随机数C 返回给服务端；\n4. 服务端用私钥解密，得到随机数C，使用加密方法将三个随机数（A、B、C）生成的对称密钥来通讯；\n","source":"_posts/前端http与https问题整理.md","raw":"---\ntitle: 前端http与https问题整理\ncatalog: true\ndate: 2020-03-17 10:37:17\nsubtitle:\nheader-img:\ntags: httpa\ncategories: 前端\n---\n\n## TCP 特性\n\n- 单工通信\n- 并非 100%可靠协议，仅保证尽可能会把数据传送给接收方\n- 使用校验和，确认和重传机制来保证可靠传输\n- 通过滑动窗口来实现流量控制，通过动态改变窗口大小进行阻塞控制。\n\n## TCP滑动窗口协议的意义\n\n1. 可靠性，滑动窗口只有在队列前部被确认之后才会往后移动，保证数据包被接收方确认并接收；\n2. 传输效率，假如没有窗口，服务端是杂乱无章的进行发包，因为TCP的队首效应，如果有前面的包没有发送成功，就会不停重试，反而造成更差的传输效率；\n3. 稳定性，TCP滑动窗口大小，是整个复杂网络商榷的结果，会进行动态调整，可以尽量的避免网络拥塞，更加稳定。\n\n## TCP 三次握手和四次挥手的理解\n\n![示意图](https://user-images.githubusercontent.com/34148615/53062591-3d846300-34fc-11e9-8d0f-4063d9ff3398.png)\n\nTCP 三次握手：\n\n三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。\n\n其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的 ACK 都会对这个 seq 进行加一来进行确认\n\n三次握手之所以是三次是保证 client 和 server 均让对方知道自己的接收和发送能力没问题而保证的最小次数，三次是最少的安全次数，两次不安全，四次浪费资源。\n\n完整流程如下：\n\n- 第一次握手(SYN=1, seq=x):\n\n客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。\n\n发送完毕后，客户端进入 SYN_SEND 状态。\n\n- 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):\n\n服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。\n\n- 第三次握手(ACK=1，ACKnum=y+1)\n\n客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写 ISN 的+1\n\n发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束\n\n[![8NAjB9.md.jpg](https://s1.ax1x.com/2020/03/17/8NAjB9.md.jpg)](https://imgchr.com/i/8NAjB9)\n\n四次挥手：\n\n两个通道可以同时工作：客户端向服务端发送信号的同时服务端也可以向客户端发送信号。所以关闭双通道的时候就是这样：\n\n客户端：我要关闭输入通道了。 服务端：好的，但还没有准备好关闭连接。\n\n服务端：已准备关闭输入通道了。 客户端：好的你关闭吧，我也把这个通道关闭，等待两个最大段生命周期（2MSL）完全关闭。\n\n[![8NAXnJ.md.jpg](https://s1.ax1x.com/2020/03/17/8NAXnJ.md.jpg)](https://imgchr.com/i/8NAXnJ)\n\n## 为什么需要等待 2MSL 关闭就是安全的\n\n因为在 client 发送出 ACK 之后，会遇到如下情况\n\n- Clinet 到 Server 一次过程最多 1MSL\n- Server 未收到 ACK，超过时间 Server 会自动重发 FIN；\n\n两种情况加在一起最大时长为 2MSL\n\n## rpc 协议和 tcp 协议的区别\n\n| 协议 |                    特点                    |\n| ---- | :----------------------------------------: |\n| tcp  |               需要 DNS 寻址                |\n|      |                  单工通信                  |\n| rpc  | 二进制数据传输，更小的体积，更快编解码速率 |\n|      |   不一定是 DNS 寻址，可能是内部服务寻址    |\n|      |        单工/半双工/双工通信方式支持        |\n| UDP  |                   不可靠                   |\n|      |               支持广播和多播               |\n|      |        无连接的，不需要握手会和挥手        |\n\n## http 1.0 1.1 2.0 协议特性与区别\n\nhttp 1.0\n\n1. 无状态\n需要 cookie/session 做身份认证和登录\n2. 无连接\n\na. 每次连接结束都会关闭连接，再重新创建连接 tcp 三次连接与四次挥手，效率很低；\n\nb. 在上一个请求到达结束之前无法发送下一个请求；\n\nhttp 1.1\n\n1. 长连接 keep-alive\n2. 管道机制 不必等待上一个请求返回就能发送下一个请求，返回的结果还是按照顺序，但是为了保持响应顺序，还是存在队头阻塞问题；\n3. 缓存 cache-control；\n4. 断点传输\n\nhttp 2.0\n\n1. 二进制分帧；\n2. 多路复用 在共享 TCP 链接的基础上同时发送请求和响应；\n3. 头部压缩；\n4. 服务器推送；\n\n## 简单讲解一下 http2 的多路复用\n\nhttp1.0 一个请求建立一个链接，请求结束就关闭，依次往复，可开启'keep-alive'，让链接不关闭复用\n\nhttp1.1 默认允许一个连接发送多个请求，浏览器为了控制资源一般控制在 6 个左右，虽然建立多个连接，但需要等待前一个请求结束，服务器才会响应后面的请求；\n\nhttp2 采用二进制传输数据，更高效，有两个非常重要的概念，帧和流，帧是最小数据单位，帧会标识属于哪个流，可以在一个连接中发送并行发送多个请求，避免了 1.1 中队头阻塞的问题，极大提高性能。\n\n## https\n\n特点\n\n- http + ssl/tls\n- 对称加密传输数据，非对称加密进行身份验证\n- 443\n- 需要ca证书\n- RSA加密方式\n\nhttps TLS/SSL握手过程\n\n1. ClientHello 客户端发送请求，给出协议版本、随机数A 和 客户端支持的加密算法；\n2. SeverHello 服务端返回数据证书（包括公钥、域名、证书），加密算法 和 随机数B；\n3. 客户端校验证书，通过使用服务端证书中的公钥进行加密，生成随机数C 返回给服务端；\n4. 服务端用私钥解密，得到随机数C，使用加密方法将三个随机数（A、B、C）生成的对称密钥来通讯；\n","slug":"前端http与https问题整理","published":1,"updated":"2024-02-20T06:48:45.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv30030lwxa4mb9dmqd","content":"<h2><span id=\"tcp-特性\">TCP 特性</span></h2><ul>\n<li>单工通信</li>\n<li>并非 100%可靠协议，仅保证尽可能会把数据传送给接收方</li>\n<li>使用校验和，确认和重传机制来保证可靠传输</li>\n<li>通过滑动窗口来实现流量控制，通过动态改变窗口大小进行阻塞控制。</li>\n</ul>\n<h2><span id=\"tcp滑动窗口协议的意义\">TCP滑动窗口协议的意义</span></h2><ol>\n<li>可靠性，滑动窗口只有在队列前部被确认之后才会往后移动，保证数据包被接收方确认并接收；</li>\n<li>传输效率，假如没有窗口，服务端是杂乱无章的进行发包，因为TCP的队首效应，如果有前面的包没有发送成功，就会不停重试，反而造成更差的传输效率；</li>\n<li>稳定性，TCP滑动窗口大小，是整个复杂网络商榷的结果，会进行动态调整，可以尽量的避免网络拥塞，更加稳定。</li>\n</ol>\n<h2><span id=\"tcp-三次握手和四次挥手的理解\">TCP 三次握手和四次挥手的理解</span></h2><p><img src=\"https://user-images.githubusercontent.com/34148615/53062591-3d846300-34fc-11e9-8d0f-4063d9ff3398.png\" alt=\"示意图\"></p>\n<p>TCP 三次握手：</p>\n<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p>\n<p>其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的 ACK 都会对这个 seq 进行加一来进行确认</p>\n<p>三次握手之所以是三次是保证 client 和 server 均让对方知道自己的接收和发送能力没问题而保证的最小次数，三次是最少的安全次数，两次不安全，四次浪费资源。</p>\n<p>完整流程如下：</p>\n<ul>\n<li>第一次握手(SYN=1, seq=x):</li>\n</ul>\n<p>客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p>\n<p>发送完毕后，客户端进入 SYN_SEND 状态。</p>\n<ul>\n<li>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</li>\n</ul>\n<p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</p>\n<ul>\n<li>第三次握手(ACK=1，ACKnum=y+1)</li>\n</ul>\n<p>客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写 ISN 的+1</p>\n<p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束</p>\n<p><a href=\"https://imgchr.com/i/8NAjB9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/17/8NAjB9.md.jpg\" alt=\"8NAjB9.md.jpg\"></a></p>\n<p>四次挥手：</p>\n<p>两个通道可以同时工作：客户端向服务端发送信号的同时服务端也可以向客户端发送信号。所以关闭双通道的时候就是这样：</p>\n<p>客户端：我要关闭输入通道了。 服务端：好的，但还没有准备好关闭连接。</p>\n<p>服务端：已准备关闭输入通道了。 客户端：好的你关闭吧，我也把这个通道关闭，等待两个最大段生命周期（2MSL）完全关闭。</p>\n<p><a href=\"https://imgchr.com/i/8NAXnJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/17/8NAXnJ.md.jpg\" alt=\"8NAXnJ.md.jpg\"></a></p>\n<h2><span id=\"为什么需要等待-2msl-关闭就是安全的\">为什么需要等待 2MSL 关闭就是安全的</span></h2><p>因为在 client 发送出 ACK 之后，会遇到如下情况</p>\n<ul>\n<li>Clinet 到 Server 一次过程最多 1MSL</li>\n<li>Server 未收到 ACK，超过时间 Server 会自动重发 FIN；</li>\n</ul>\n<p>两种情况加在一起最大时长为 2MSL</p>\n<h2><span id=\"rpc-协议和-tcp-协议的区别\">rpc 协议和 tcp 协议的区别</span></h2><table>\n<thead>\n<tr>\n<th>协议</th>\n<th align=\"center\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp</td>\n<td align=\"center\">需要 DNS 寻址</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">单工通信</td>\n</tr>\n<tr>\n<td>rpc</td>\n<td align=\"center\">二进制数据传输，更小的体积，更快编解码速率</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">不一定是 DNS 寻址，可能是内部服务寻址</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">单工/半双工/双工通信方式支持</td>\n</tr>\n<tr>\n<td>UDP</td>\n<td align=\"center\">不可靠</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">支持广播和多播</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">无连接的，不需要握手会和挥手</td>\n</tr>\n</tbody></table>\n<h2><span id=\"http-10-11-20-协议特性与区别\">http 1.0 1.1 2.0 协议特性与区别</span></h2><p>http 1.0</p>\n<ol>\n<li>无状态<br>需要 cookie/session 做身份认证和登录</li>\n<li>无连接</li>\n</ol>\n<p>a. 每次连接结束都会关闭连接，再重新创建连接 tcp 三次连接与四次挥手，效率很低；</p>\n<p>b. 在上一个请求到达结束之前无法发送下一个请求；</p>\n<p>http 1.1</p>\n<ol>\n<li>长连接 keep-alive</li>\n<li>管道机制 不必等待上一个请求返回就能发送下一个请求，返回的结果还是按照顺序，但是为了保持响应顺序，还是存在队头阻塞问题；</li>\n<li>缓存 cache-control；</li>\n<li>断点传输</li>\n</ol>\n<p>http 2.0</p>\n<ol>\n<li>二进制分帧；</li>\n<li>多路复用 在共享 TCP 链接的基础上同时发送请求和响应；</li>\n<li>头部压缩；</li>\n<li>服务器推送；</li>\n</ol>\n<h2><span id=\"简单讲解一下-http2-的多路复用\">简单讲解一下 http2 的多路复用</span></h2><p>http1.0 一个请求建立一个链接，请求结束就关闭，依次往复，可开启’keep-alive’，让链接不关闭复用</p>\n<p>http1.1 默认允许一个连接发送多个请求，浏览器为了控制资源一般控制在 6 个左右，虽然建立多个连接，但需要等待前一个请求结束，服务器才会响应后面的请求；</p>\n<p>http2 采用二进制传输数据，更高效，有两个非常重要的概念，帧和流，帧是最小数据单位，帧会标识属于哪个流，可以在一个连接中发送并行发送多个请求，避免了 1.1 中队头阻塞的问题，极大提高性能。</p>\n<h2><span id=\"https\">https</span></h2><p>特点</p>\n<ul>\n<li>http + ssl/tls</li>\n<li>对称加密传输数据，非对称加密进行身份验证</li>\n<li>443</li>\n<li>需要ca证书</li>\n<li>RSA加密方式</li>\n</ul>\n<p>https TLS/SSL握手过程</p>\n<ol>\n<li>ClientHello 客户端发送请求，给出协议版本、随机数A 和 客户端支持的加密算法；</li>\n<li>SeverHello 服务端返回数据证书（包括公钥、域名、证书），加密算法 和 随机数B；</li>\n<li>客户端校验证书，通过使用服务端证书中的公钥进行加密，生成随机数C 返回给服务端；</li>\n<li>服务端用私钥解密，得到随机数C，使用加密方法将三个随机数（A、B、C）生成的对称密钥来通讯；</li>\n</ol>\n","site":{"data":{}},"length":2065,"excerpt":"","more":"<h2 id=\"TCP-特性\"><a href=\"#TCP-特性\" class=\"headerlink\" title=\"TCP 特性\"></a>TCP 特性</h2><ul>\n<li>单工通信</li>\n<li>并非 100%可靠协议，仅保证尽可能会把数据传送给接收方</li>\n<li>使用校验和，确认和重传机制来保证可靠传输</li>\n<li>通过滑动窗口来实现流量控制，通过动态改变窗口大小进行阻塞控制。</li>\n</ul>\n<h2 id=\"TCP滑动窗口协议的意义\"><a href=\"#TCP滑动窗口协议的意义\" class=\"headerlink\" title=\"TCP滑动窗口协议的意义\"></a>TCP滑动窗口协议的意义</h2><ol>\n<li>可靠性，滑动窗口只有在队列前部被确认之后才会往后移动，保证数据包被接收方确认并接收；</li>\n<li>传输效率，假如没有窗口，服务端是杂乱无章的进行发包，因为TCP的队首效应，如果有前面的包没有发送成功，就会不停重试，反而造成更差的传输效率；</li>\n<li>稳定性，TCP滑动窗口大小，是整个复杂网络商榷的结果，会进行动态调整，可以尽量的避免网络拥塞，更加稳定。</li>\n</ol>\n<h2 id=\"TCP-三次握手和四次挥手的理解\"><a href=\"#TCP-三次握手和四次挥手的理解\" class=\"headerlink\" title=\"TCP 三次握手和四次挥手的理解\"></a>TCP 三次握手和四次挥手的理解</h2><p><img src=\"https://user-images.githubusercontent.com/34148615/53062591-3d846300-34fc-11e9-8d0f-4063d9ff3398.png\" alt=\"示意图\"></p>\n<p>TCP 三次握手：</p>\n<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p>\n<p>其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的 ACK 都会对这个 seq 进行加一来进行确认</p>\n<p>三次握手之所以是三次是保证 client 和 server 均让对方知道自己的接收和发送能力没问题而保证的最小次数，三次是最少的安全次数，两次不安全，四次浪费资源。</p>\n<p>完整流程如下：</p>\n<ul>\n<li>第一次握手(SYN=1, seq=x):</li>\n</ul>\n<p>客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p>\n<p>发送完毕后，客户端进入 SYN_SEND 状态。</p>\n<ul>\n<li>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</li>\n</ul>\n<p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</p>\n<ul>\n<li>第三次握手(ACK=1，ACKnum=y+1)</li>\n</ul>\n<p>客户端再次发送确认包(ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写 ISN 的+1</p>\n<p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束</p>\n<p><a href=\"https://imgchr.com/i/8NAjB9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/17/8NAjB9.md.jpg\" alt=\"8NAjB9.md.jpg\"></a></p>\n<p>四次挥手：</p>\n<p>两个通道可以同时工作：客户端向服务端发送信号的同时服务端也可以向客户端发送信号。所以关闭双通道的时候就是这样：</p>\n<p>客户端：我要关闭输入通道了。 服务端：好的，但还没有准备好关闭连接。</p>\n<p>服务端：已准备关闭输入通道了。 客户端：好的你关闭吧，我也把这个通道关闭，等待两个最大段生命周期（2MSL）完全关闭。</p>\n<p><a href=\"https://imgchr.com/i/8NAXnJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/17/8NAXnJ.md.jpg\" alt=\"8NAXnJ.md.jpg\"></a></p>\n<h2 id=\"为什么需要等待-2MSL-关闭就是安全的\"><a href=\"#为什么需要等待-2MSL-关闭就是安全的\" class=\"headerlink\" title=\"为什么需要等待 2MSL 关闭就是安全的\"></a>为什么需要等待 2MSL 关闭就是安全的</h2><p>因为在 client 发送出 ACK 之后，会遇到如下情况</p>\n<ul>\n<li>Clinet 到 Server 一次过程最多 1MSL</li>\n<li>Server 未收到 ACK，超过时间 Server 会自动重发 FIN；</li>\n</ul>\n<p>两种情况加在一起最大时长为 2MSL</p>\n<h2 id=\"rpc-协议和-tcp-协议的区别\"><a href=\"#rpc-协议和-tcp-协议的区别\" class=\"headerlink\" title=\"rpc 协议和 tcp 协议的区别\"></a>rpc 协议和 tcp 协议的区别</h2><table>\n<thead>\n<tr>\n<th>协议</th>\n<th align=\"center\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp</td>\n<td align=\"center\">需要 DNS 寻址</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">单工通信</td>\n</tr>\n<tr>\n<td>rpc</td>\n<td align=\"center\">二进制数据传输，更小的体积，更快编解码速率</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">不一定是 DNS 寻址，可能是内部服务寻址</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">单工/半双工/双工通信方式支持</td>\n</tr>\n<tr>\n<td>UDP</td>\n<td align=\"center\">不可靠</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">支持广播和多播</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">无连接的，不需要握手会和挥手</td>\n</tr>\n</tbody></table>\n<h2 id=\"http-1-0-1-1-2-0-协议特性与区别\"><a href=\"#http-1-0-1-1-2-0-协议特性与区别\" class=\"headerlink\" title=\"http 1.0 1.1 2.0 协议特性与区别\"></a>http 1.0 1.1 2.0 协议特性与区别</h2><p>http 1.0</p>\n<ol>\n<li>无状态<br>需要 cookie/session 做身份认证和登录</li>\n<li>无连接</li>\n</ol>\n<p>a. 每次连接结束都会关闭连接，再重新创建连接 tcp 三次连接与四次挥手，效率很低；</p>\n<p>b. 在上一个请求到达结束之前无法发送下一个请求；</p>\n<p>http 1.1</p>\n<ol>\n<li>长连接 keep-alive</li>\n<li>管道机制 不必等待上一个请求返回就能发送下一个请求，返回的结果还是按照顺序，但是为了保持响应顺序，还是存在队头阻塞问题；</li>\n<li>缓存 cache-control；</li>\n<li>断点传输</li>\n</ol>\n<p>http 2.0</p>\n<ol>\n<li>二进制分帧；</li>\n<li>多路复用 在共享 TCP 链接的基础上同时发送请求和响应；</li>\n<li>头部压缩；</li>\n<li>服务器推送；</li>\n</ol>\n<h2 id=\"简单讲解一下-http2-的多路复用\"><a href=\"#简单讲解一下-http2-的多路复用\" class=\"headerlink\" title=\"简单讲解一下 http2 的多路复用\"></a>简单讲解一下 http2 的多路复用</h2><p>http1.0 一个请求建立一个链接，请求结束就关闭，依次往复，可开启’keep-alive’，让链接不关闭复用</p>\n<p>http1.1 默认允许一个连接发送多个请求，浏览器为了控制资源一般控制在 6 个左右，虽然建立多个连接，但需要等待前一个请求结束，服务器才会响应后面的请求；</p>\n<p>http2 采用二进制传输数据，更高效，有两个非常重要的概念，帧和流，帧是最小数据单位，帧会标识属于哪个流，可以在一个连接中发送并行发送多个请求，避免了 1.1 中队头阻塞的问题，极大提高性能。</p>\n<h2 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h2><p>特点</p>\n<ul>\n<li>http + ssl/tls</li>\n<li>对称加密传输数据，非对称加密进行身份验证</li>\n<li>443</li>\n<li>需要ca证书</li>\n<li>RSA加密方式</li>\n</ul>\n<p>https TLS/SSL握手过程</p>\n<ol>\n<li>ClientHello 客户端发送请求，给出协议版本、随机数A 和 客户端支持的加密算法；</li>\n<li>SeverHello 服务端返回数据证书（包括公钥、域名、证书），加密算法 和 随机数B；</li>\n<li>客户端校验证书，通过使用服务端证书中的公钥进行加密，生成随机数C 返回给服务端；</li>\n<li>服务端用私钥解密，得到随机数C，使用加密方法将三个随机数（A、B、C）生成的对称密钥来通讯；</li>\n</ol>\n"},{"title":"前端基础面试题整理","catalog":true,"date":"2019-11-12T02:15:59.000Z","subtitle":null,"header-img":null,"_content":"\n## js 基础\n\n- 闭包\n\n一个函数内部返回一个能访问外部变量的函数\n\n- 作用域\n- 原型链\n- 变量提升\n- 函数参数值传递\n- this 指向问题\n- 函数提升以及优先级问题\n- new 操作符做了什么？\n\n1. 创建一个空对象，作为将要返回的对象实例；\n2. 将这个空对象的原型对象指向构造函数的 prototype 属性对象；\n3. 调用构造器， 将这个实例对象的值赋值给函数内部的 this 对象；\n4. 执行构造函数内的逻辑；\n5. 如果构造函数返回值是对象则返回这个对象，如果不是对象则返回新的实例对象；\n\n```javascript\nfunction A(id) {\n  this.id = id;\n}\n\nA.prototype.showId = function() {\n  console.log(this.id);\n};\n\n// new内部实现\nfunction myNew() {\n  var o = new Object();\n\n  var Constructor = Array.prototype.shift.call(arguments);\n  // 实现继承，实例可以访问构造器的属性\n  o.__proto__ = Constructor.prototype;\n  // 调用构造器，并改变其 this 指向到实例\n  var ret = Constructor.call(o, arguments);\n\n  return typeof ret === \"object\" && ret !== null ? ret : o;\n}\n\nvar a = myNew(A, 10);\n```\n\n- 用 ES5 实现一个继承（有哪些方式）\n\n1. 类继承\n2. 原型继承\n3. 组合继承\n4. 寄生继承\n\n- 0.2+0.1 不等于 0.3 问题（浮点数精度）\n- 堆、栈、队列是什么？都有什么区别？有什么应用？\n- 深拷贝、浅拷贝问题（immutable 是怎么实现的？）\n- typed array 问题\n- es6 箭头函数问题\n- let var const 区别与原理\n\n1. var 存在变量提升，执行时已经完成声明与初始化，全局作用域|函数作用域；\n2. let const 不能重复定义，存在暂时性死区，没有变量提升，块作用域；\n3. var 在栈内存预分配空间，等执行时候再将变量值存在空间里，let const 不会\n\n- 什么是 iterator？for of 用过吗？\n- call、apply、bind 区别，bind 怎么实现的？\n\n参考链接：\n\n1. [JavaScript 深入之 bind 的模拟实现](https://juejin.im/post/59093b1fa0bb9f006517b906)\n\n- promise 实现，Promise.all 实现， Promise.race，Promise.finally 实现\n\n```javascript\nfunction _Promise(handle) {\n  this.status = \"pending\";\n  // 存放成功的值\n  this.value = undefined;\n  // 存放失败的值\n  this.reason = undefined;\n\n  this.successStore = []\n  this.failStore = []\n\n  const resolve = (value) => {\n    if (this.status === \"pending\") {\n      this.value = value;\n      this.status = \"resolved\";\n\n      this.successStore.forEach(fnc => fnc())\n    }\n  }\n\n  const reject = (reason) => {\n    if (this.status === \"pending\") {\n      this.reason = reason;\n      this.status = \"rejected\";\n\n      this.failStore.forEach(fnc => fnc())\n    }\n  }\n\n  try {\n    handle(resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n}\n\n_Promise.prototype.then = function (onFulfilled, onRejected) {\n  // 处理异步的情况（如setTimeout）\n  if (this.status === 'pending') {\n    this.successStore.push(() => onFulfilled(this.value))\n\n    this.failStore.push(() => onRejected(this.value))\n  }\n\n  if (this.status === \"resolved\") {\n    return onFulfilled(this.value);\n  }\n  if (this.status === \"rejected\") {\n    return onRejected(this.reason);\n  }\n};\n\n\n// TODO  then链式调用\n\n\n\n\n_Promise.prototype.all = arr => {\n  let len = arr.length - 1\n  let resultArr = []\n  // 记录成功的数量\n  let count = 0;\n\n  return new Promise(resolve => {\n   let i = 0\n\n   for (let i = 0; i < arr.length; i++) {\n      arr[i].then(res => {\n       resultArr[i] = res\n\n        if (count == len) {\n         resolve(resultArr)\n        }\n        count++\n      })\n    }\n  })\n};\n\n_Promise.prototype.race = = function(iterable) {\n  return new Promise(function(resolve, reject) {\n    for (const i in iterable) {\n      const v = iterable[i];\n      if (typeof v === \"object\" && typeof v.then === \"function\") {\n        v.then(resolve, reject);\n      } else {\n        resolve(v);\n      }\n    }\n  });\n};\n\n_Promise.prototype.finally = function(callback) {\n  const P = this.constructor; // 获取当前实例构造函数的引用\n  return this.then(\n    value => P.resolve(callback()).then(() => value),\n    reason =>\n      P.resolve(callback()).then(() => {\n        throw reason;\n      })\n  );\n};\n\nconst p1 = new Promise(function(resolve) {\n  setTimeout(resolve, 200, 1);\n});\nconst p2 = new Promise(function(resolve) {\n  setTimeout(resolve, 100, 2);\n});\nrace([p1, p2]).then(function(res) {\n  console.log(res);\n});\n```\n\n参考资料：\n[前端工程师必知之 Promise 的实现](https://juejin.im/post/5afd2ff26fb9a07aaa11786c)\n\n- caller、callee 了解吗？什么时候会用到？建议用吗？\n\n```javascript\nfunction factorial(x) {\n  return x <= 1 ? 1 : x * factorial(x - 1);\n}\n\n// callee\n// callee是arguments对象的一个属性，指向 arguments 对象的函数\n// 利用callee\nfunction factorial(x) {\n  return x <= 1 ? 1 : x * arguments.callee(x - 1);\n}\n\n// caller\n// 函数对象的一个属性，指向调用当前函数的函数。比如 A() 调用 B()， 则在B()中 B.caller 指向A()\n\n// 1 这个属性只有当函数在执行时才有用\n\n// 2 如果在JavaScript程序中，函数是由顶层调用的，则返回null\n\nfunction B() {\n  console.log(B.caller); // B\n}\n\n(function A() {\n  B(); // A\n})();\n```\n\n- async await 知识点（await 的作用，async 返回的是什么）\n\n很多人以为 await 会一直等待之后的表达式执行完之后才会继续执行后面的代码，实际上 await 是一个让出线程的标志。await 后面的表达式会先执行一遍，将 await 后面的代码加入到 microtask 中，然后就会跳出整个 async 函数来执行后面的代码。\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\n// 等价于\n\nasync function async1() {\n  console.log(\"async1 start\");\n  Promise.resolve(async2()).then(() => {\n    console.log(\"async1 end\");\n  });\n}\n```\n\n- Async/Await 如何通过同步的方式实现异步?\n\nAsync/Await 就是一个自执行的 generate 函数。利用 generate 函数的特性把异步的代码写成“同步”的形式，generate 函数本身实现思想来源于单向链表。\n\n- generator 又是什么？\n\n生成器 generator 函数执行时返回这个生成器的迭代对象，当这个迭代对象的 next 方法被调用时，遇到 yield 的位置停止，yield 后返回的值就是迭代器要返回的值。如果用的是 yield \\*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行），调用 next() （再启动）方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值，例如：\n\n```javascript\nfunction* another() {\n  yield \"人月神话\";\n}\nfunction* gen() {\n  yield* another(); // 移交执行权\n  const a = yield \"hello\";\n  const b = yield a; // a='world' 是 next('world') 传参赋值给了上一个 yidle 'hello' 的左值\n  yield b; // b=！ 是 next('！') 传参赋值给了上一个 yidle a 的左值\n}\nconst g = gen();\ng.next(); // {value: \"人月神话\", done: false}\ng.next(); // {value: \"hello\", done: false}\ng.next(\"world\"); // {value: \"world\", done: false} 将 'world' 赋给上一条 yield 'hello' 的左值，即执行 a='world'，\ng.next(\"!\"); // {value: \"!\", done: false} 将 '!' 赋给上一条 yield a 的左值，即执行 b='!'，返回 b\ng.next(); // {value: undefined, done: false}\n```\n\n- v8 线程模型、event loop（async、promise、nextTick、setTimeout、- setImmediate 经典问题变着花样考）\n- 进程和线程是什么？有什么区别？\n- v8 垃圾回收机制\n- 输入 URL，浏览器的执行过程又是怎么样的？（浏览器解析方式、顺序，async、- defer 等）\n\n- 了解前端模块化吗？有几种规范？（commonjs 和 es module 都是怎么实现- 的？有啥区别？）\n\n* 按需加载实现\n\n* ['1', '2', '3'].map(parseInt) parseInt(100, 2) = 4\n* 防抖节流\n\n1. 防抖\n   > 高频事件 n 秒内执行一次，如果 n 秒内再次触发，重新计时，即最后一次触发\n\n```javascript\nfunction debonce(fn, time) {\n  let timeout = null;\n  return function() {\n    clearTimeout(timeout);\n    timeout = setTimeout(function() {\n      fn.apply(this, arguments);\n    }, time);\n  };\n}\n```\n\n2. 节流\n   > 高频事件 n 秒内执行一次\n\n```javascript\nfunction debonce(fn, time) {\n  let startTime = 0;\n  return function() {\n    let nowTime = Date.now();\n    if (nowTime - startTime >= time) {\n      fn.apply(this, arguments);\n      startTime = Date.now();\n    }\n  };\n}\n```\n\n- Set WeaksSet 和 Map WeakMap 各自区别\n\n  Set 无序类似数组的数据结构\n\n  WeakSet\n\n  1. 只能是对象引用；\n  2. 未使用会被 GC 收集\n\n  Map 字典结构，以`value:value`形式存储\n\n  WeakMap\n\n  1. 建的对象引用只能是对象引用；\n  2. 未使用的建对象会被 GC 收集\n\n- es5 和 es6 类的区别\n\n  1. class 会提升，但不会赋值，会进入暂时性死区（TDZ）；\n  2. class 内部默认启用严格模式；\n  3. class 的所有方法、属性不能枚举；\n  4. class 所有方法没有 prototype，也没有[[constructor]]，不能实例化；\n  5. 必须使用`new`来实例化；\n  6. class 无法重写类名；\n\n- es5 和 es6 的继承区别\n\n  1. es5 的继承是先实例化子类，再通过父类构造函数修饰子类实例，而 es6 的继承是通过`super`方法先实例化父类，再通过子类构造函数修饰父类实例；\n  2. es6 的子类可以通过`__proto__`找到父类，而 es5 中通过`__proto__`只能找到`Function.prototype`\n\n- 箭头函数和普通函数区别\n\n1. 箭头函数本身没有 this，需要通过原型向上级对象查找，即 this 对象是指向定义是所在作用域的 this 对象（因此无法使用 call、apply、bind 绑定 this 值），普通函数指向调用时的对象；\n2. 箭头函数没有 arguments，可以用 rest 参数代替；\n3. 箭头函数不能使用 new 命令，\n\n- 因为没有 this，无法调用 call；\n- 没有 prototype\n\n4. 箭头函数没有原型 prototype；\n\n---\n\n## 浏览器\n\n1. 说说浏览器和 Node 事件循环的区别\n\n微任务和宏任务在 Node 的执行顺序\n\nNode 10 及以前：\n\n执行完一个阶段（timers、I/O、poll 等）的宏任务\n才会去执行 nextTick 队列里面的内容\n然后再执行完微任务队列的内容\n\nNode 11 以后： 和浏览器的行为统一了，都是每执行完一个宏任务就会执行微任务队列。\n\n![Node的Event Loop](https://user-gold-cdn.xitu.io/2019/1/12/16841bad1cda741f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```javascript\nfunction test() {\n  console.log(\"start\");\n  setTimeout(() => {\n    console.log(\"children2\");\n    Promise.resolve().then(() => {\n      console.log(\"children2-1\");\n    });\n  }, 0);\n  setTimeout(() => {\n    console.log(\"children3\");\n    Promise.resolve().then(() => {\n      console.log(\"children3-1\");\n    });\n  }, 0);\n  Promise.resolve().then(() => {\n    console.log(\"children1\");\n  });\n  console.log(\"end\");\n}\n\ntest();\n\n// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)\n// start\n// end\n// children1\n// children2\n// children3\n// children2-1\n// children3-1\n\n// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)\n// start\n// end\n// children1\n// children2\n// children2-1\n// children3\n// children3-1\n```\n\n---\n\n### 前端内功\n\n1. 模块化理解；\n\n> 模块化是为了处理全局污染、隔离作用域、抽离公共代码等问题\n\n| 名称         | 特点                                                             |\n| ------------ | ---------------------------------------------------------------- |\n| `iife`       | 自执行 函数作用域                                                |\n| `amd`        | 浏览器端（requirejs） 依赖前置                                   |\n| `cmd`        | 浏览器端（seajs） 运行时加载依赖 后面也支持依赖前置              |\n| `commonjs`   | 浏览器、服务器通用 运行时加载 第一次运行加载，缓存值，值的浅拷贝 |\n| `es6 module` | 浏览器、服务器通用 静态编译，编译时输出接口 值的引用             |\n\n2. 工程化理解；\n   web业务日益复杂化和多元化，后端直出的模式转变为前后分离，多页应用想spa、ssr发展。前端工程复杂产生很多问题。\n   - 如何高效多人协作？\n   - 如何保证项目可维护性？\n   - 如何提高项目开发质量？\n   - 如何降低项目生产风险？\n\n  主要目的是为了 提高效率和降低成本。\n  前端工程化主要包括 模块化、组件化、规范化、自动化四个角度。\n\n  模块化\n    - js模块化\n    - css模块化 （BEM、css in js）\n    - 资源模块化 （webpack）\n  组件化\n    - html+js+css功能完备的结构单元就是组件\n    - 模块复用、扩展、继承、嵌套等\n    - 手动操作dom => 数据驱动（vue、react）\n  规范化\n    - 项目结构 （cli）\n    - 编码规范（eslint）\n    - 文档规划\n    - 组件管理\n    - Git分支管理、commit描述管理\n  自动化\n    - 持续集成（jinkens）\n    - 自动化构建（webhooks）\n    - 自动化部署\n    - 自动化测试\n\n\n3. 组件化理解;\n4. 性能优化\n  - 图片\n    - 雪碧图\n    - 图片懒加载、oss动态裁剪、webP格式、减少80%流量\n  - 网络层\n    - 页面跳转前接口预请求；快200ms；\n    - http2\n    - GZIP\n  - 缓存\n    - 核心页面部分非关键数据放缓存，缓存优先；\n  - 编译\n    - tree-shaking\n  - 动画\n    - RAF\n  - 其他\n    - 页面、组件懒加载\n    - 分包\n    - 滚动加载\n    - PWA\n    - 骨架屏\n  \n\n---\n\n### 框架\n\n1. React 中的 setState 何时是同步的，何时是异步的？\n\n在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理，生命周期函数等），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步执行 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。\n\n**原因：** 在 React 的 setState 函数实现中，会根据一个变量`isBatchingUpdate`·判断是直接更新 this.state 还是放到队列中回头再说，而`isBatchingUpdates`默认是`false`，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。\n\n2. vue 父组件和子组件创建的生命周期顺序\n\n- 加载渲染过程 父 beforeCreate->父 created->父 beforeMount->子 beforeCreate->子 created->子 beforeMount->子 mounted->父 mounted\n\n- 子组件更新过程 父 beforeUpdate->子 beforeUpdate->子 updated->父 updated\n\n- 父组件更新过程 父 beforeUpdate->父 updated\n\n- 销毁过程 父 beforeDestroy->子 beforeDestroy->子 destroyed->父 destroyed\n\n---\n\n## CSS\n\n### 介绍下 BFC 及其应用\n\nBFC 块级格式上下文， 是指一个独立的渲染区域或者说是一个隔离的独立容器。\n\n形成条件：\n\n1、float浮动；\n\n2、绝对定位；\n\n3、display 为以下其中之一的值 inline-block，table-cell，table-caption；\n\n4、overflow 除了 visible 以外的值（hidden，auto，scroll）；\n\n特点：\n\n1.内部的 Box 会在垂直方向上一个接一个的放置。\n\n2.垂直方向上的距离由 margin 决定，垂直外边距会重叠即两个盒子中间距离以 margin 最大的值决定；\n\n3.bfc 的区域不会与 float 的元素区域重叠。\n\n4.计算 bfc 的高度时，浮动元素也参与计算\n\n5.bfc 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。\n\n参考：[CSS 中的 BFC 详解](https://www.cnblogs.com/chen-cong/p/7862832.html)\n\n### position 几种属性\n\n- relative 相对定位\n\n不脱离文档流\n设置定位\n层级\n\n- absolute 绝对定位\n\n脱离文档流\n设置定位\n层级\n\n- fixed 浏览器窗口定位\n\n- sticky\n\n页面滑动距离未超过指定距离为相对定位，超过为 fixed 定位\n\n- static 默认定位\n\n- inherit 继承定位\n\n从父元素继承 position 属性的值\n\n### 相邻的两个 inline-block 节点为什么会出现间隔，该如何解决\n\n元素被当成行内元素排版的时候，原来 HTML 代码中的回车换行被转成一个空白符，在字体不为 0 的情况下，空白符占据一定宽度，所以 inline-block 的元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素 font-size:16px 时，间距为 8px。\n\n解决办法如下：\n\n- font-size\n- html 不换行\n- word-spacing\n\n\n## Vue\n\n### input v-model 是什么简写；\n\n<input :value=\"value\" :input=\"$emit('input', value)\">\n\n### 将原生事件绑定到组件\n\nv-on配合.native修饰符不生效，利用$listeners对象，包含在这个组件上所有的监听器\n\n### 插槽作用域；\n\n<slot v-slot=\"scope\">\n\n### 指令；\n\n```javascript\nVue.directive('focus', {\n  // 只调用一次 ， 指定第一次绑定到元素时调用。\n  // { name, value, oldValue, expression, arg, modifiers }\n  bind(el, binding, vnode, oldVnode) {},\n  inserted(el) {},\n  // 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。 可判断忽略更新\n  update() {},\n  // 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n  componentUpdated() {},\n  // 指令与元素解绑\n  unbind() {}\n})\n```\n\n\n### .sync；\n\n限制：\n  - 不能和表达式一起使用；\n  - 不接受字面量对象；\n\nthis.$emit('update:title', '张三')\n\n<Text-Document\n  :title=\"name\"\n  :update:title=\"name = $event\"\n/>\n\n\n### 生命周期\n\nbeforeCreated                     init Events & lifecycle\ncreated                           init Injections & reactivity\nbeforeMount                       template\nmounted                           vm.$el   el\nbeforeUpdate\nupdate\nbeforeDestory\ndestory\n\n\n\n## React\n  \n### 生命周期\n\n> 16之前\n\nconstructor\ncomponentWillReceivePorps（废弃）\ncomponentWillMount（废弃）\nrender\ncomponentDidMount\n\ncomponentWillUpdate（废弃）\n\n> 16以后\n\nconstructor\ngetDrivedStateFromProps（新增）\nrender\ncomponentDidMount\n\ngetSnapshotBeforeUpdate（新增）\n\n\n### fiber架构\n\nreact16版本之前，递归渲染vdom，然后diff下来做patch渲染。渲染和diff是递归进行的。\n\nfiber是讲vdom先转成fiber，这个过程就是reconcile。fiber是链表，可用schedule来空闲调度（requestIdleCallback），\n最后一次性render，这个过程称为commit。","source":"_posts/前端基础面试题整理.md","raw":"---\ntitle: 前端基础面试题整理\ncatalog: true\ndate: 2019-11-12 10:15:59\nsubtitle:\nheader-img:\ntags: interview\ncategories: 前端\n---\n\n## js 基础\n\n- 闭包\n\n一个函数内部返回一个能访问外部变量的函数\n\n- 作用域\n- 原型链\n- 变量提升\n- 函数参数值传递\n- this 指向问题\n- 函数提升以及优先级问题\n- new 操作符做了什么？\n\n1. 创建一个空对象，作为将要返回的对象实例；\n2. 将这个空对象的原型对象指向构造函数的 prototype 属性对象；\n3. 调用构造器， 将这个实例对象的值赋值给函数内部的 this 对象；\n4. 执行构造函数内的逻辑；\n5. 如果构造函数返回值是对象则返回这个对象，如果不是对象则返回新的实例对象；\n\n```javascript\nfunction A(id) {\n  this.id = id;\n}\n\nA.prototype.showId = function() {\n  console.log(this.id);\n};\n\n// new内部实现\nfunction myNew() {\n  var o = new Object();\n\n  var Constructor = Array.prototype.shift.call(arguments);\n  // 实现继承，实例可以访问构造器的属性\n  o.__proto__ = Constructor.prototype;\n  // 调用构造器，并改变其 this 指向到实例\n  var ret = Constructor.call(o, arguments);\n\n  return typeof ret === \"object\" && ret !== null ? ret : o;\n}\n\nvar a = myNew(A, 10);\n```\n\n- 用 ES5 实现一个继承（有哪些方式）\n\n1. 类继承\n2. 原型继承\n3. 组合继承\n4. 寄生继承\n\n- 0.2+0.1 不等于 0.3 问题（浮点数精度）\n- 堆、栈、队列是什么？都有什么区别？有什么应用？\n- 深拷贝、浅拷贝问题（immutable 是怎么实现的？）\n- typed array 问题\n- es6 箭头函数问题\n- let var const 区别与原理\n\n1. var 存在变量提升，执行时已经完成声明与初始化，全局作用域|函数作用域；\n2. let const 不能重复定义，存在暂时性死区，没有变量提升，块作用域；\n3. var 在栈内存预分配空间，等执行时候再将变量值存在空间里，let const 不会\n\n- 什么是 iterator？for of 用过吗？\n- call、apply、bind 区别，bind 怎么实现的？\n\n参考链接：\n\n1. [JavaScript 深入之 bind 的模拟实现](https://juejin.im/post/59093b1fa0bb9f006517b906)\n\n- promise 实现，Promise.all 实现， Promise.race，Promise.finally 实现\n\n```javascript\nfunction _Promise(handle) {\n  this.status = \"pending\";\n  // 存放成功的值\n  this.value = undefined;\n  // 存放失败的值\n  this.reason = undefined;\n\n  this.successStore = []\n  this.failStore = []\n\n  const resolve = (value) => {\n    if (this.status === \"pending\") {\n      this.value = value;\n      this.status = \"resolved\";\n\n      this.successStore.forEach(fnc => fnc())\n    }\n  }\n\n  const reject = (reason) => {\n    if (this.status === \"pending\") {\n      this.reason = reason;\n      this.status = \"rejected\";\n\n      this.failStore.forEach(fnc => fnc())\n    }\n  }\n\n  try {\n    handle(resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n}\n\n_Promise.prototype.then = function (onFulfilled, onRejected) {\n  // 处理异步的情况（如setTimeout）\n  if (this.status === 'pending') {\n    this.successStore.push(() => onFulfilled(this.value))\n\n    this.failStore.push(() => onRejected(this.value))\n  }\n\n  if (this.status === \"resolved\") {\n    return onFulfilled(this.value);\n  }\n  if (this.status === \"rejected\") {\n    return onRejected(this.reason);\n  }\n};\n\n\n// TODO  then链式调用\n\n\n\n\n_Promise.prototype.all = arr => {\n  let len = arr.length - 1\n  let resultArr = []\n  // 记录成功的数量\n  let count = 0;\n\n  return new Promise(resolve => {\n   let i = 0\n\n   for (let i = 0; i < arr.length; i++) {\n      arr[i].then(res => {\n       resultArr[i] = res\n\n        if (count == len) {\n         resolve(resultArr)\n        }\n        count++\n      })\n    }\n  })\n};\n\n_Promise.prototype.race = = function(iterable) {\n  return new Promise(function(resolve, reject) {\n    for (const i in iterable) {\n      const v = iterable[i];\n      if (typeof v === \"object\" && typeof v.then === \"function\") {\n        v.then(resolve, reject);\n      } else {\n        resolve(v);\n      }\n    }\n  });\n};\n\n_Promise.prototype.finally = function(callback) {\n  const P = this.constructor; // 获取当前实例构造函数的引用\n  return this.then(\n    value => P.resolve(callback()).then(() => value),\n    reason =>\n      P.resolve(callback()).then(() => {\n        throw reason;\n      })\n  );\n};\n\nconst p1 = new Promise(function(resolve) {\n  setTimeout(resolve, 200, 1);\n});\nconst p2 = new Promise(function(resolve) {\n  setTimeout(resolve, 100, 2);\n});\nrace([p1, p2]).then(function(res) {\n  console.log(res);\n});\n```\n\n参考资料：\n[前端工程师必知之 Promise 的实现](https://juejin.im/post/5afd2ff26fb9a07aaa11786c)\n\n- caller、callee 了解吗？什么时候会用到？建议用吗？\n\n```javascript\nfunction factorial(x) {\n  return x <= 1 ? 1 : x * factorial(x - 1);\n}\n\n// callee\n// callee是arguments对象的一个属性，指向 arguments 对象的函数\n// 利用callee\nfunction factorial(x) {\n  return x <= 1 ? 1 : x * arguments.callee(x - 1);\n}\n\n// caller\n// 函数对象的一个属性，指向调用当前函数的函数。比如 A() 调用 B()， 则在B()中 B.caller 指向A()\n\n// 1 这个属性只有当函数在执行时才有用\n\n// 2 如果在JavaScript程序中，函数是由顶层调用的，则返回null\n\nfunction B() {\n  console.log(B.caller); // B\n}\n\n(function A() {\n  B(); // A\n})();\n```\n\n- async await 知识点（await 的作用，async 返回的是什么）\n\n很多人以为 await 会一直等待之后的表达式执行完之后才会继续执行后面的代码，实际上 await 是一个让出线程的标志。await 后面的表达式会先执行一遍，将 await 后面的代码加入到 microtask 中，然后就会跳出整个 async 函数来执行后面的代码。\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\n// 等价于\n\nasync function async1() {\n  console.log(\"async1 start\");\n  Promise.resolve(async2()).then(() => {\n    console.log(\"async1 end\");\n  });\n}\n```\n\n- Async/Await 如何通过同步的方式实现异步?\n\nAsync/Await 就是一个自执行的 generate 函数。利用 generate 函数的特性把异步的代码写成“同步”的形式，generate 函数本身实现思想来源于单向链表。\n\n- generator 又是什么？\n\n生成器 generator 函数执行时返回这个生成器的迭代对象，当这个迭代对象的 next 方法被调用时，遇到 yield 的位置停止，yield 后返回的值就是迭代器要返回的值。如果用的是 yield \\*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行），调用 next() （再启动）方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值，例如：\n\n```javascript\nfunction* another() {\n  yield \"人月神话\";\n}\nfunction* gen() {\n  yield* another(); // 移交执行权\n  const a = yield \"hello\";\n  const b = yield a; // a='world' 是 next('world') 传参赋值给了上一个 yidle 'hello' 的左值\n  yield b; // b=！ 是 next('！') 传参赋值给了上一个 yidle a 的左值\n}\nconst g = gen();\ng.next(); // {value: \"人月神话\", done: false}\ng.next(); // {value: \"hello\", done: false}\ng.next(\"world\"); // {value: \"world\", done: false} 将 'world' 赋给上一条 yield 'hello' 的左值，即执行 a='world'，\ng.next(\"!\"); // {value: \"!\", done: false} 将 '!' 赋给上一条 yield a 的左值，即执行 b='!'，返回 b\ng.next(); // {value: undefined, done: false}\n```\n\n- v8 线程模型、event loop（async、promise、nextTick、setTimeout、- setImmediate 经典问题变着花样考）\n- 进程和线程是什么？有什么区别？\n- v8 垃圾回收机制\n- 输入 URL，浏览器的执行过程又是怎么样的？（浏览器解析方式、顺序，async、- defer 等）\n\n- 了解前端模块化吗？有几种规范？（commonjs 和 es module 都是怎么实现- 的？有啥区别？）\n\n* 按需加载实现\n\n* ['1', '2', '3'].map(parseInt) parseInt(100, 2) = 4\n* 防抖节流\n\n1. 防抖\n   > 高频事件 n 秒内执行一次，如果 n 秒内再次触发，重新计时，即最后一次触发\n\n```javascript\nfunction debonce(fn, time) {\n  let timeout = null;\n  return function() {\n    clearTimeout(timeout);\n    timeout = setTimeout(function() {\n      fn.apply(this, arguments);\n    }, time);\n  };\n}\n```\n\n2. 节流\n   > 高频事件 n 秒内执行一次\n\n```javascript\nfunction debonce(fn, time) {\n  let startTime = 0;\n  return function() {\n    let nowTime = Date.now();\n    if (nowTime - startTime >= time) {\n      fn.apply(this, arguments);\n      startTime = Date.now();\n    }\n  };\n}\n```\n\n- Set WeaksSet 和 Map WeakMap 各自区别\n\n  Set 无序类似数组的数据结构\n\n  WeakSet\n\n  1. 只能是对象引用；\n  2. 未使用会被 GC 收集\n\n  Map 字典结构，以`value:value`形式存储\n\n  WeakMap\n\n  1. 建的对象引用只能是对象引用；\n  2. 未使用的建对象会被 GC 收集\n\n- es5 和 es6 类的区别\n\n  1. class 会提升，但不会赋值，会进入暂时性死区（TDZ）；\n  2. class 内部默认启用严格模式；\n  3. class 的所有方法、属性不能枚举；\n  4. class 所有方法没有 prototype，也没有[[constructor]]，不能实例化；\n  5. 必须使用`new`来实例化；\n  6. class 无法重写类名；\n\n- es5 和 es6 的继承区别\n\n  1. es5 的继承是先实例化子类，再通过父类构造函数修饰子类实例，而 es6 的继承是通过`super`方法先实例化父类，再通过子类构造函数修饰父类实例；\n  2. es6 的子类可以通过`__proto__`找到父类，而 es5 中通过`__proto__`只能找到`Function.prototype`\n\n- 箭头函数和普通函数区别\n\n1. 箭头函数本身没有 this，需要通过原型向上级对象查找，即 this 对象是指向定义是所在作用域的 this 对象（因此无法使用 call、apply、bind 绑定 this 值），普通函数指向调用时的对象；\n2. 箭头函数没有 arguments，可以用 rest 参数代替；\n3. 箭头函数不能使用 new 命令，\n\n- 因为没有 this，无法调用 call；\n- 没有 prototype\n\n4. 箭头函数没有原型 prototype；\n\n---\n\n## 浏览器\n\n1. 说说浏览器和 Node 事件循环的区别\n\n微任务和宏任务在 Node 的执行顺序\n\nNode 10 及以前：\n\n执行完一个阶段（timers、I/O、poll 等）的宏任务\n才会去执行 nextTick 队列里面的内容\n然后再执行完微任务队列的内容\n\nNode 11 以后： 和浏览器的行为统一了，都是每执行完一个宏任务就会执行微任务队列。\n\n![Node的Event Loop](https://user-gold-cdn.xitu.io/2019/1/12/16841bad1cda741f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```javascript\nfunction test() {\n  console.log(\"start\");\n  setTimeout(() => {\n    console.log(\"children2\");\n    Promise.resolve().then(() => {\n      console.log(\"children2-1\");\n    });\n  }, 0);\n  setTimeout(() => {\n    console.log(\"children3\");\n    Promise.resolve().then(() => {\n      console.log(\"children3-1\");\n    });\n  }, 0);\n  Promise.resolve().then(() => {\n    console.log(\"children1\");\n  });\n  console.log(\"end\");\n}\n\ntest();\n\n// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)\n// start\n// end\n// children1\n// children2\n// children3\n// children2-1\n// children3-1\n\n// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)\n// start\n// end\n// children1\n// children2\n// children2-1\n// children3\n// children3-1\n```\n\n---\n\n### 前端内功\n\n1. 模块化理解；\n\n> 模块化是为了处理全局污染、隔离作用域、抽离公共代码等问题\n\n| 名称         | 特点                                                             |\n| ------------ | ---------------------------------------------------------------- |\n| `iife`       | 自执行 函数作用域                                                |\n| `amd`        | 浏览器端（requirejs） 依赖前置                                   |\n| `cmd`        | 浏览器端（seajs） 运行时加载依赖 后面也支持依赖前置              |\n| `commonjs`   | 浏览器、服务器通用 运行时加载 第一次运行加载，缓存值，值的浅拷贝 |\n| `es6 module` | 浏览器、服务器通用 静态编译，编译时输出接口 值的引用             |\n\n2. 工程化理解；\n   web业务日益复杂化和多元化，后端直出的模式转变为前后分离，多页应用想spa、ssr发展。前端工程复杂产生很多问题。\n   - 如何高效多人协作？\n   - 如何保证项目可维护性？\n   - 如何提高项目开发质量？\n   - 如何降低项目生产风险？\n\n  主要目的是为了 提高效率和降低成本。\n  前端工程化主要包括 模块化、组件化、规范化、自动化四个角度。\n\n  模块化\n    - js模块化\n    - css模块化 （BEM、css in js）\n    - 资源模块化 （webpack）\n  组件化\n    - html+js+css功能完备的结构单元就是组件\n    - 模块复用、扩展、继承、嵌套等\n    - 手动操作dom => 数据驱动（vue、react）\n  规范化\n    - 项目结构 （cli）\n    - 编码规范（eslint）\n    - 文档规划\n    - 组件管理\n    - Git分支管理、commit描述管理\n  自动化\n    - 持续集成（jinkens）\n    - 自动化构建（webhooks）\n    - 自动化部署\n    - 自动化测试\n\n\n3. 组件化理解;\n4. 性能优化\n  - 图片\n    - 雪碧图\n    - 图片懒加载、oss动态裁剪、webP格式、减少80%流量\n  - 网络层\n    - 页面跳转前接口预请求；快200ms；\n    - http2\n    - GZIP\n  - 缓存\n    - 核心页面部分非关键数据放缓存，缓存优先；\n  - 编译\n    - tree-shaking\n  - 动画\n    - RAF\n  - 其他\n    - 页面、组件懒加载\n    - 分包\n    - 滚动加载\n    - PWA\n    - 骨架屏\n  \n\n---\n\n### 框架\n\n1. React 中的 setState 何时是同步的，何时是异步的？\n\n在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理，生命周期函数等），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步执行 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。\n\n**原因：** 在 React 的 setState 函数实现中，会根据一个变量`isBatchingUpdate`·判断是直接更新 this.state 还是放到队列中回头再说，而`isBatchingUpdates`默认是`false`，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。\n\n2. vue 父组件和子组件创建的生命周期顺序\n\n- 加载渲染过程 父 beforeCreate->父 created->父 beforeMount->子 beforeCreate->子 created->子 beforeMount->子 mounted->父 mounted\n\n- 子组件更新过程 父 beforeUpdate->子 beforeUpdate->子 updated->父 updated\n\n- 父组件更新过程 父 beforeUpdate->父 updated\n\n- 销毁过程 父 beforeDestroy->子 beforeDestroy->子 destroyed->父 destroyed\n\n---\n\n## CSS\n\n### 介绍下 BFC 及其应用\n\nBFC 块级格式上下文， 是指一个独立的渲染区域或者说是一个隔离的独立容器。\n\n形成条件：\n\n1、float浮动；\n\n2、绝对定位；\n\n3、display 为以下其中之一的值 inline-block，table-cell，table-caption；\n\n4、overflow 除了 visible 以外的值（hidden，auto，scroll）；\n\n特点：\n\n1.内部的 Box 会在垂直方向上一个接一个的放置。\n\n2.垂直方向上的距离由 margin 决定，垂直外边距会重叠即两个盒子中间距离以 margin 最大的值决定；\n\n3.bfc 的区域不会与 float 的元素区域重叠。\n\n4.计算 bfc 的高度时，浮动元素也参与计算\n\n5.bfc 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。\n\n参考：[CSS 中的 BFC 详解](https://www.cnblogs.com/chen-cong/p/7862832.html)\n\n### position 几种属性\n\n- relative 相对定位\n\n不脱离文档流\n设置定位\n层级\n\n- absolute 绝对定位\n\n脱离文档流\n设置定位\n层级\n\n- fixed 浏览器窗口定位\n\n- sticky\n\n页面滑动距离未超过指定距离为相对定位，超过为 fixed 定位\n\n- static 默认定位\n\n- inherit 继承定位\n\n从父元素继承 position 属性的值\n\n### 相邻的两个 inline-block 节点为什么会出现间隔，该如何解决\n\n元素被当成行内元素排版的时候，原来 HTML 代码中的回车换行被转成一个空白符，在字体不为 0 的情况下，空白符占据一定宽度，所以 inline-block 的元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素 font-size:16px 时，间距为 8px。\n\n解决办法如下：\n\n- font-size\n- html 不换行\n- word-spacing\n\n\n## Vue\n\n### input v-model 是什么简写；\n\n<input :value=\"value\" :input=\"$emit('input', value)\">\n\n### 将原生事件绑定到组件\n\nv-on配合.native修饰符不生效，利用$listeners对象，包含在这个组件上所有的监听器\n\n### 插槽作用域；\n\n<slot v-slot=\"scope\">\n\n### 指令；\n\n```javascript\nVue.directive('focus', {\n  // 只调用一次 ， 指定第一次绑定到元素时调用。\n  // { name, value, oldValue, expression, arg, modifiers }\n  bind(el, binding, vnode, oldVnode) {},\n  inserted(el) {},\n  // 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。 可判断忽略更新\n  update() {},\n  // 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n  componentUpdated() {},\n  // 指令与元素解绑\n  unbind() {}\n})\n```\n\n\n### .sync；\n\n限制：\n  - 不能和表达式一起使用；\n  - 不接受字面量对象；\n\nthis.$emit('update:title', '张三')\n\n<Text-Document\n  :title=\"name\"\n  :update:title=\"name = $event\"\n/>\n\n\n### 生命周期\n\nbeforeCreated                     init Events & lifecycle\ncreated                           init Injections & reactivity\nbeforeMount                       template\nmounted                           vm.$el   el\nbeforeUpdate\nupdate\nbeforeDestory\ndestory\n\n\n\n## React\n  \n### 生命周期\n\n> 16之前\n\nconstructor\ncomponentWillReceivePorps（废弃）\ncomponentWillMount（废弃）\nrender\ncomponentDidMount\n\ncomponentWillUpdate（废弃）\n\n> 16以后\n\nconstructor\ngetDrivedStateFromProps（新增）\nrender\ncomponentDidMount\n\ngetSnapshotBeforeUpdate（新增）\n\n\n### fiber架构\n\nreact16版本之前，递归渲染vdom，然后diff下来做patch渲染。渲染和diff是递归进行的。\n\nfiber是讲vdom先转成fiber，这个过程就是reconcile。fiber是链表，可用schedule来空闲调度（requestIdleCallback），\n最后一次性render，这个过程称为commit。","slug":"前端基础面试题整理","published":1,"updated":"2024-02-20T06:48:45.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv40033lwxa7h2fag6v","content":"<h2><span id=\"js-基础\">js 基础</span></h2><ul>\n<li>闭包</li>\n</ul>\n<p>一个函数内部返回一个能访问外部变量的函数</p>\n<ul>\n<li>作用域</li>\n<li>原型链</li>\n<li>变量提升</li>\n<li>函数参数值传递</li>\n<li>this 指向问题</li>\n<li>函数提升以及优先级问题</li>\n<li>new 操作符做了什么？</li>\n</ul>\n<ol>\n<li>创建一个空对象，作为将要返回的对象实例；</li>\n<li>将这个空对象的原型对象指向构造函数的 prototype 属性对象；</li>\n<li>调用构造器， 将这个实例对象的值赋值给函数内部的 this 对象；</li>\n<li>执行构造函数内的逻辑；</li>\n<li>如果构造函数返回值是对象则返回这个对象，如果不是对象则返回新的实例对象；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.prototype.showId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new内部实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Constructor = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实现继承，实例可以访问构造器的属性</span></span><br><span class=\"line\">  o.__proto__ = Constructor.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 调用构造器，并改变其 this 指向到实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = Constructor.call(o, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">\"object\"</span> &amp;&amp; ret !== <span class=\"literal\">null</span> ? ret : o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = myNew(A, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 ES5 实现一个继承（有哪些方式）</li>\n</ul>\n<ol>\n<li>类继承</li>\n<li>原型继承</li>\n<li>组合继承</li>\n<li>寄生继承</li>\n</ol>\n<ul>\n<li>0.2+0.1 不等于 0.3 问题（浮点数精度）</li>\n<li>堆、栈、队列是什么？都有什么区别？有什么应用？</li>\n<li>深拷贝、浅拷贝问题（immutable 是怎么实现的？）</li>\n<li>typed array 问题</li>\n<li>es6 箭头函数问题</li>\n<li>let var const 区别与原理</li>\n</ul>\n<ol>\n<li>var 存在变量提升，执行时已经完成声明与初始化，全局作用域|函数作用域；</li>\n<li>let const 不能重复定义，存在暂时性死区，没有变量提升，块作用域；</li>\n<li>var 在栈内存预分配空间，等执行时候再将变量值存在空间里，let const 不会</li>\n</ol>\n<ul>\n<li>什么是 iterator？for of 用过吗？</li>\n<li>call、apply、bind 区别，bind 怎么实现的？</li>\n</ul>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/59093b1fa0bb9f006517b906\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之 bind 的模拟实现</a></li>\n</ol>\n<ul>\n<li>promise 实现，Promise.all 实现， Promise.race，Promise.finally 实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_Promise</span>(<span class=\"params\">handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.status = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放成功的值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放失败的值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.successStore = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.failStore = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"pending\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = <span class=\"string\">\"resolved\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.successStore.forEach(<span class=\"function\"><span class=\"params\">fnc</span> =&gt;</span> fnc())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"pending\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.failStore.forEach(<span class=\"function\"><span class=\"params\">fnc</span> =&gt;</span> fnc())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    handle(resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理异步的情况（如setTimeout）</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.successStore.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> onFulfilled(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.failStore.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> onRejected(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"resolved\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"rejected\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO  then链式调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.all = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resultArr = []</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">      arr[i].then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resultArr[i] = res</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == len) &#123;</span><br><span class=\"line\">         resolve(resultArr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.race = = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> iterable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> v = iterable[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> v === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> v.then === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">        v.then(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = <span class=\"keyword\">this</span>.constructor; <span class=\"comment\">// 获取当前实例构造函数的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">    value =&gt; P.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> value),</span><br><span class=\"line\">    reason =&gt;</span><br><span class=\"line\">      P.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<br><a href=\"https://juejin.im/post/5afd2ff26fb9a07aaa11786c\" target=\"_blank\" rel=\"noopener\">前端工程师必知之 Promise 的实现</a></p>\n<ul>\n<li>caller、callee 了解吗？什么时候会用到？建议用吗？</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : x * factorial(x - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// callee</span></span><br><span class=\"line\"><span class=\"comment\">// callee是arguments对象的一个属性，指向 arguments 对象的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 利用callee</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : x * <span class=\"built_in\">arguments</span>.callee(x - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// caller</span></span><br><span class=\"line\"><span class=\"comment\">// 函数对象的一个属性，指向调用当前函数的函数。比如 A() 调用 B()， 则在B()中 B.caller 指向A()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 这个属性只有当函数在执行时才有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 如果在JavaScript程序中，函数是由顶层调用的，则返回null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(B.caller); <span class=\"comment\">// B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  B(); <span class=\"comment\">// A</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>async await 知识点（await 的作用，async 返回的是什么）</li>\n</ul>\n<p>很多人以为 await 会一直等待之后的表达式执行完之后才会继续执行后面的代码，实际上 await 是一个让出线程的标志。await 后面的表达式会先执行一遍，将 await 后面的代码加入到 microtask 中，然后就会跳出整个 async 函数来执行后面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve(async2()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Async/Await 如何通过同步的方式实现异步?</li>\n</ul>\n<p>Async/Await 就是一个自执行的 generate 函数。利用 generate 函数的特性把异步的代码写成“同步”的形式，generate 函数本身实现思想来源于单向链表。</p>\n<ul>\n<li>generator 又是什么？</li>\n</ul>\n<p>生成器 generator 函数执行时返回这个生成器的迭代对象，当这个迭代对象的 next 方法被调用时，遇到 yield 的位置停止，yield 后返回的值就是迭代器要返回的值。如果用的是 yield *（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行），调用 next() （再启动）方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">another</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"人月神话\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* another(); <span class=\"comment\">// 移交执行权</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"keyword\">yield</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"keyword\">yield</span> a; <span class=\"comment\">// a='world' 是 next('world') 传参赋值给了上一个 yidle 'hello' 的左值</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> b; <span class=\"comment\">// b=！ 是 next('！') 传参赋值给了上一个 yidle a 的左值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: \"人月神话\", done: false&#125;</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: \"hello\", done: false&#125;</span></span><br><span class=\"line\">g.next(<span class=\"string\">\"world\"</span>); <span class=\"comment\">// &#123;value: \"world\", done: false&#125; 将 'world' 赋给上一条 yield 'hello' 的左值，即执行 a='world'，</span></span><br><span class=\"line\">g.next(<span class=\"string\">\"!\"</span>); <span class=\"comment\">// &#123;value: \"!\", done: false&#125; 将 '!' 赋给上一条 yield a 的左值，即执行 b='!'，返回 b</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>v8 线程模型、event loop（async、promise、nextTick、setTimeout、- setImmediate 经典问题变着花样考）</p>\n</li>\n<li><p>进程和线程是什么？有什么区别？</p>\n</li>\n<li><p>v8 垃圾回收机制</p>\n</li>\n<li><p>输入 URL，浏览器的执行过程又是怎么样的？（浏览器解析方式、顺序，async、- defer 等）</p>\n</li>\n<li><p>了解前端模块化吗？有几种规范？（commonjs 和 es module 都是怎么实现- 的？有啥区别？）</p>\n</li>\n</ul>\n<ul>\n<li><p>按需加载实现</p>\n</li>\n<li><p>[‘1’, ‘2’, ‘3’].map(parseInt) parseInt(100, 2) = 4</p>\n</li>\n<li><p>防抖节流</p>\n</li>\n</ul>\n<ol>\n<li>防抖<blockquote>\n<p>高频事件 n 秒内执行一次，如果 n 秒内再次触发，重新计时，即最后一次触发</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debonce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节流<blockquote>\n<p>高频事件 n 秒内执行一次</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debonce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - startTime &gt;= time) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Set WeaksSet 和 Map WeakMap 各自区别</p>\n<p>Set 无序类似数组的数据结构</p>\n<p>WeakSet</p>\n<ol>\n<li>只能是对象引用；</li>\n<li>未使用会被 GC 收集</li>\n</ol>\n<p>Map 字典结构，以<code>value:value</code>形式存储</p>\n<p>WeakMap</p>\n<ol>\n<li>建的对象引用只能是对象引用；</li>\n<li>未使用的建对象会被 GC 收集</li>\n</ol>\n</li>\n<li><p>es5 和 es6 类的区别</p>\n<ol>\n<li>class 会提升，但不会赋值，会进入暂时性死区（TDZ）；</li>\n<li>class 内部默认启用严格模式；</li>\n<li>class 的所有方法、属性不能枚举；</li>\n<li>class 所有方法没有 prototype，也没有[[constructor]]，不能实例化；</li>\n<li>必须使用<code>new</code>来实例化；</li>\n<li>class 无法重写类名；</li>\n</ol>\n</li>\n<li><p>es5 和 es6 的继承区别</p>\n<ol>\n<li>es5 的继承是先实例化子类，再通过父类构造函数修饰子类实例，而 es6 的继承是通过<code>super</code>方法先实例化父类，再通过子类构造函数修饰父类实例；</li>\n<li>es6 的子类可以通过<code>__proto__</code>找到父类，而 es5 中通过<code>__proto__</code>只能找到<code>Function.prototype</code></li>\n</ol>\n</li>\n<li><p>箭头函数和普通函数区别</p>\n</li>\n</ul>\n<ol>\n<li>箭头函数本身没有 this，需要通过原型向上级对象查找，即 this 对象是指向定义是所在作用域的 this 对象（因此无法使用 call、apply、bind 绑定 this 值），普通函数指向调用时的对象；</li>\n<li>箭头函数没有 arguments，可以用 rest 参数代替；</li>\n<li>箭头函数不能使用 new 命令，</li>\n</ol>\n<ul>\n<li>因为没有 this，无法调用 call；</li>\n<li>没有 prototype</li>\n</ul>\n<ol start=\"4\">\n<li>箭头函数没有原型 prototype；</li>\n</ol>\n<hr>\n<h2><span id=\"浏览器\">浏览器</span></h2><ol>\n<li>说说浏览器和 Node 事件循环的区别</li>\n</ol>\n<p>微任务和宏任务在 Node 的执行顺序</p>\n<p>Node 10 及以前：</p>\n<p>执行完一个阶段（timers、I/O、poll 等）的宏任务<br>才会去执行 nextTick 队列里面的内容<br>然后再执行完微任务队列的内容</p>\n<p>Node 11 以后： 和浏览器的行为统一了，都是每执行完一个宏任务就会执行微任务队列。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/1/12/16841bad1cda741f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node的Event Loop\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children2\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children2-1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children3\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children3-1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children1\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3><span id=\"前端内功\">前端内功</span></h3><ol>\n<li>模块化理解；</li>\n</ol>\n<blockquote>\n<p>模块化是为了处理全局污染、隔离作用域、抽离公共代码等问题</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>iife</code></td>\n<td>自执行 函数作用域</td>\n</tr>\n<tr>\n<td><code>amd</code></td>\n<td>浏览器端（requirejs） 依赖前置</td>\n</tr>\n<tr>\n<td><code>cmd</code></td>\n<td>浏览器端（seajs） 运行时加载依赖 后面也支持依赖前置</td>\n</tr>\n<tr>\n<td><code>commonjs</code></td>\n<td>浏览器、服务器通用 运行时加载 第一次运行加载，缓存值，值的浅拷贝</td>\n</tr>\n<tr>\n<td><code>es6 module</code></td>\n<td>浏览器、服务器通用 静态编译，编译时输出接口 值的引用</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>工程化理解；<br>web业务日益复杂化和多元化，后端直出的模式转变为前后分离，多页应用想spa、ssr发展。前端工程复杂产生很多问题。</p>\n<ul>\n<li>如何高效多人协作？</li>\n<li>如何保证项目可维护性？</li>\n<li>如何提高项目开发质量？</li>\n<li>如何降低项目生产风险？</li>\n</ul>\n<p>主要目的是为了 提高效率和降低成本。<br>前端工程化主要包括 模块化、组件化、规范化、自动化四个角度。</p>\n<p>模块化</p>\n<ul>\n<li>js模块化</li>\n<li>css模块化 （BEM、css in js）</li>\n<li>资源模块化 （webpack）<br>组件化</li>\n<li>html+js+css功能完备的结构单元就是组件</li>\n<li>模块复用、扩展、继承、嵌套等</li>\n<li>手动操作dom =&gt; 数据驱动（vue、react）<br>规范化</li>\n<li>项目结构 （cli）</li>\n<li>编码规范（eslint）</li>\n<li>文档规划</li>\n<li>组件管理</li>\n<li>Git分支管理、commit描述管理<br>自动化</li>\n<li>持续集成（jinkens）</li>\n<li>自动化构建（webhooks）</li>\n<li>自动化部署</li>\n<li>自动化测试</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>组件化理解;</li>\n<li>性能优化</li>\n</ol>\n<ul>\n<li>图片<ul>\n<li>雪碧图</li>\n<li>图片懒加载、oss动态裁剪、webP格式、减少80%流量</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>页面跳转前接口预请求；快200ms；</li>\n<li>http2</li>\n<li>GZIP</li>\n</ul>\n</li>\n<li>缓存<ul>\n<li>核心页面部分非关键数据放缓存，缓存优先；</li>\n</ul>\n</li>\n<li>编译<ul>\n<li>tree-shaking</li>\n</ul>\n</li>\n<li>动画<ul>\n<li>RAF</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>页面、组件懒加载</li>\n<li>分包</li>\n<li>滚动加载</li>\n<li>PWA</li>\n<li>骨架屏</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3><span id=\"框架\">框架</span></h3><ol>\n<li>React 中的 setState 何时是同步的，何时是异步的？</li>\n</ol>\n<p>在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理，生命周期函数等），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步执行 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。</p>\n<p><strong>原因：</strong> 在 React 的 setState 函数实现中，会根据一个变量<code>isBatchingUpdate</code>·判断是直接更新 this.state 还是放到队列中回头再说，而<code>isBatchingUpdates</code>默认是<code>false</code>，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。</p>\n<ol start=\"2\">\n<li>vue 父组件和子组件创建的生命周期顺序</li>\n</ol>\n<ul>\n<li><p>加载渲染过程 父 beforeCreate-&gt;父 created-&gt;父 beforeMount-&gt;子 beforeCreate-&gt;子 created-&gt;子 beforeMount-&gt;子 mounted-&gt;父 mounted</p>\n</li>\n<li><p>子组件更新过程 父 beforeUpdate-&gt;子 beforeUpdate-&gt;子 updated-&gt;父 updated</p>\n</li>\n<li><p>父组件更新过程 父 beforeUpdate-&gt;父 updated</p>\n</li>\n<li><p>销毁过程 父 beforeDestroy-&gt;子 beforeDestroy-&gt;子 destroyed-&gt;父 destroyed</p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"css\">CSS</span></h2><h3><span id=\"介绍下-bfc-及其应用\">介绍下 BFC 及其应用</span></h3><p>BFC 块级格式上下文， 是指一个独立的渲染区域或者说是一个隔离的独立容器。</p>\n<p>形成条件：</p>\n<p>1、float浮动；</p>\n<p>2、绝对定位；</p>\n<p>3、display 为以下其中之一的值 inline-block，table-cell，table-caption；</p>\n<p>4、overflow 除了 visible 以外的值（hidden，auto，scroll）；</p>\n<p>特点：</p>\n<p>1.内部的 Box 会在垂直方向上一个接一个的放置。</p>\n<p>2.垂直方向上的距离由 margin 决定，垂直外边距会重叠即两个盒子中间距离以 margin 最大的值决定；</p>\n<p>3.bfc 的区域不会与 float 的元素区域重叠。</p>\n<p>4.计算 bfc 的高度时，浮动元素也参与计算</p>\n<p>5.bfc 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/chen-cong/p/7862832.html\" target=\"_blank\" rel=\"noopener\">CSS 中的 BFC 详解</a></p>\n<h3><span id=\"position-几种属性\">position 几种属性</span></h3><ul>\n<li>relative 相对定位</li>\n</ul>\n<p>不脱离文档流<br>设置定位<br>层级</p>\n<ul>\n<li>absolute 绝对定位</li>\n</ul>\n<p>脱离文档流<br>设置定位<br>层级</p>\n<ul>\n<li><p>fixed 浏览器窗口定位</p>\n</li>\n<li><p>sticky</p>\n</li>\n</ul>\n<p>页面滑动距离未超过指定距离为相对定位，超过为 fixed 定位</p>\n<ul>\n<li><p>static 默认定位</p>\n</li>\n<li><p>inherit 继承定位</p>\n</li>\n</ul>\n<p>从父元素继承 position 属性的值</p>\n<h3><span id=\"相邻的两个-inline-block-节点为什么会出现间隔该如何解决\">相邻的两个 inline-block 节点为什么会出现间隔，该如何解决</span></h3><p>元素被当成行内元素排版的时候，原来 HTML 代码中的回车换行被转成一个空白符，在字体不为 0 的情况下，空白符占据一定宽度，所以 inline-block 的元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素 font-size:16px 时，间距为 8px。</p>\n<p>解决办法如下：</p>\n<ul>\n<li>font-size</li>\n<li>html 不换行</li>\n<li>word-spacing</li>\n</ul>\n<h2><span id=\"vue\">Vue</span></h2><h3><span id=\"input-v-model-是什么简写\">input v-model 是什么简写；</span></h3><input :value=\"value\" :input=\"$emit('input', value)\">\n\n<h3><span id=\"将原生事件绑定到组件\">将原生事件绑定到组件</span></h3><p>v-on配合.native修饰符不生效，利用$listeners对象，包含在这个组件上所有的监听器</p>\n<h3><span id=\"插槽作用域\">插槽作用域；</span></h3><slot v-slot=\"scope\">\n\n<h3><span id=\"指令\">指令；</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只调用一次 ， 指定第一次绑定到元素时调用。</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; name, value, oldValue, expression, arg, modifiers &#125;</span></span><br><span class=\"line\">  bind(el, binding, vnode, oldVnode) &#123;&#125;,</span><br><span class=\"line\">  inserted(el) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。 可判断忽略更新</span></span><br><span class=\"line\">  update() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</span></span><br><span class=\"line\">  componentUpdated() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指令与元素解绑</span></span><br><span class=\"line\">  unbind() &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"sync\">.sync；</span></h3><p>限制：</p>\n<ul>\n<li>不能和表达式一起使用；</li>\n<li>不接受字面量对象；</li>\n</ul>\n<p>this.$emit(‘update:title’, ‘张三’)</p>\n<p><text-document :title=\"name\" :update:title=\"name = $event\"></text-document></p>\n<h3><span id=\"生命周期\">生命周期</span></h3><p>beforeCreated                     init Events &amp; lifecycle<br>created                           init Injections &amp; reactivity<br>beforeMount                       template<br>mounted                           vm.$el   el<br>beforeUpdate<br>update<br>beforeDestory<br>destory</p>\n<h2><span id=\"react\">React</span></h2><h3><span id=\"生命周期\">生命周期</span></h3><blockquote>\n<p>16之前</p>\n</blockquote>\n<p>constructor<br>componentWillReceivePorps（废弃）<br>componentWillMount（废弃）<br>render<br>componentDidMount</p>\n<p>componentWillUpdate（废弃）</p>\n<blockquote>\n<p>16以后</p>\n</blockquote>\n<p>constructor<br>getDrivedStateFromProps（新增）<br>render<br>componentDidMount</p>\n<p>getSnapshotBeforeUpdate（新增）</p>\n<h3><span id=\"fiber架构\">fiber架构</span></h3><p>react16版本之前，递归渲染vdom，然后diff下来做patch渲染。渲染和diff是递归进行的。</p>\n<p>fiber是讲vdom先转成fiber，这个过程就是reconcile。fiber是链表，可用schedule来空闲调度（requestIdleCallback），<br>最后一次性render，这个过程称为commit。</p>\n</slot>","site":{"data":{}},"length":10277,"excerpt":"","more":"<h2 id=\"js-基础\"><a href=\"#js-基础\" class=\"headerlink\" title=\"js 基础\"></a>js 基础</h2><ul>\n<li>闭包</li>\n</ul>\n<p>一个函数内部返回一个能访问外部变量的函数</p>\n<ul>\n<li>作用域</li>\n<li>原型链</li>\n<li>变量提升</li>\n<li>函数参数值传递</li>\n<li>this 指向问题</li>\n<li>函数提升以及优先级问题</li>\n<li>new 操作符做了什么？</li>\n</ul>\n<ol>\n<li>创建一个空对象，作为将要返回的对象实例；</li>\n<li>将这个空对象的原型对象指向构造函数的 prototype 属性对象；</li>\n<li>调用构造器， 将这个实例对象的值赋值给函数内部的 this 对象；</li>\n<li>执行构造函数内的逻辑；</li>\n<li>如果构造函数返回值是对象则返回这个对象，如果不是对象则返回新的实例对象；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.prototype.showId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new内部实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Constructor = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实现继承，实例可以访问构造器的属性</span></span><br><span class=\"line\">  o.__proto__ = Constructor.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 调用构造器，并改变其 this 指向到实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = Constructor.call(o, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">\"object\"</span> &amp;&amp; ret !== <span class=\"literal\">null</span> ? ret : o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = myNew(A, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 ES5 实现一个继承（有哪些方式）</li>\n</ul>\n<ol>\n<li>类继承</li>\n<li>原型继承</li>\n<li>组合继承</li>\n<li>寄生继承</li>\n</ol>\n<ul>\n<li>0.2+0.1 不等于 0.3 问题（浮点数精度）</li>\n<li>堆、栈、队列是什么？都有什么区别？有什么应用？</li>\n<li>深拷贝、浅拷贝问题（immutable 是怎么实现的？）</li>\n<li>typed array 问题</li>\n<li>es6 箭头函数问题</li>\n<li>let var const 区别与原理</li>\n</ul>\n<ol>\n<li>var 存在变量提升，执行时已经完成声明与初始化，全局作用域|函数作用域；</li>\n<li>let const 不能重复定义，存在暂时性死区，没有变量提升，块作用域；</li>\n<li>var 在栈内存预分配空间，等执行时候再将变量值存在空间里，let const 不会</li>\n</ol>\n<ul>\n<li>什么是 iterator？for of 用过吗？</li>\n<li>call、apply、bind 区别，bind 怎么实现的？</li>\n</ul>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/59093b1fa0bb9f006517b906\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之 bind 的模拟实现</a></li>\n</ol>\n<ul>\n<li>promise 实现，Promise.all 实现， Promise.race，Promise.finally 实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_Promise</span>(<span class=\"params\">handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.status = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放成功的值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放失败的值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.successStore = []</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.failStore = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"pending\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = <span class=\"string\">\"resolved\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.successStore.forEach(<span class=\"function\"><span class=\"params\">fnc</span> =&gt;</span> fnc())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"pending\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.failStore.forEach(<span class=\"function\"><span class=\"params\">fnc</span> =&gt;</span> fnc())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    handle(resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理异步的情况（如setTimeout）</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.successStore.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> onFulfilled(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.failStore.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> onRejected(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"resolved\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">\"rejected\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO  then链式调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.all = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resultArr = []</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">      arr[i].then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resultArr[i] = res</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == len) &#123;</span><br><span class=\"line\">         resolve(resultArr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.race = = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> iterable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> v = iterable[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> v === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> v.then === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">        v.then(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_Promise.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = <span class=\"keyword\">this</span>.constructor; <span class=\"comment\">// 获取当前实例构造函数的引用</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(</span><br><span class=\"line\">    value =&gt; P.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> value),</span><br><span class=\"line\">    reason =&gt;</span><br><span class=\"line\">      P.resolve(callback()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<br><a href=\"https://juejin.im/post/5afd2ff26fb9a07aaa11786c\" target=\"_blank\" rel=\"noopener\">前端工程师必知之 Promise 的实现</a></p>\n<ul>\n<li>caller、callee 了解吗？什么时候会用到？建议用吗？</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : x * factorial(x - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// callee</span></span><br><span class=\"line\"><span class=\"comment\">// callee是arguments对象的一个属性，指向 arguments 对象的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 利用callee</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt;= <span class=\"number\">1</span> ? <span class=\"number\">1</span> : x * <span class=\"built_in\">arguments</span>.callee(x - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// caller</span></span><br><span class=\"line\"><span class=\"comment\">// 函数对象的一个属性，指向调用当前函数的函数。比如 A() 调用 B()， 则在B()中 B.caller 指向A()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 这个属性只有当函数在执行时才有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 如果在JavaScript程序中，函数是由顶层调用的，则返回null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(B.caller); <span class=\"comment\">// B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  B(); <span class=\"comment\">// A</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>async await 知识点（await 的作用，async 返回的是什么）</li>\n</ul>\n<p>很多人以为 await 会一直等待之后的表达式执行完之后才会继续执行后面的代码，实际上 await 是一个让出线程的标志。await 后面的表达式会先执行一遍，将 await 后面的代码加入到 microtask 中，然后就会跳出整个 async 函数来执行后面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> async2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 start\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve(async2()).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"async1 end\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Async/Await 如何通过同步的方式实现异步?</li>\n</ul>\n<p>Async/Await 就是一个自执行的 generate 函数。利用 generate 函数的特性把异步的代码写成“同步”的形式，generate 函数本身实现思想来源于单向链表。</p>\n<ul>\n<li>generator 又是什么？</li>\n</ul>\n<p>生成器 generator 函数执行时返回这个生成器的迭代对象，当这个迭代对象的 next 方法被调用时，遇到 yield 的位置停止，yield 后返回的值就是迭代器要返回的值。如果用的是 yield *（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行），调用 next() （再启动）方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">another</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"人月神话\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* another(); <span class=\"comment\">// 移交执行权</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"keyword\">yield</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"keyword\">yield</span> a; <span class=\"comment\">// a='world' 是 next('world') 传参赋值给了上一个 yidle 'hello' 的左值</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> b; <span class=\"comment\">// b=！ 是 next('！') 传参赋值给了上一个 yidle a 的左值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = gen();</span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: \"人月神话\", done: false&#125;</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: \"hello\", done: false&#125;</span></span><br><span class=\"line\">g.next(<span class=\"string\">\"world\"</span>); <span class=\"comment\">// &#123;value: \"world\", done: false&#125; 将 'world' 赋给上一条 yield 'hello' 的左值，即执行 a='world'，</span></span><br><span class=\"line\">g.next(<span class=\"string\">\"!\"</span>); <span class=\"comment\">// &#123;value: \"!\", done: false&#125; 将 '!' 赋给上一条 yield a 的左值，即执行 b='!'，返回 b</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>v8 线程模型、event loop（async、promise、nextTick、setTimeout、- setImmediate 经典问题变着花样考）</p>\n</li>\n<li><p>进程和线程是什么？有什么区别？</p>\n</li>\n<li><p>v8 垃圾回收机制</p>\n</li>\n<li><p>输入 URL，浏览器的执行过程又是怎么样的？（浏览器解析方式、顺序，async、- defer 等）</p>\n</li>\n<li><p>了解前端模块化吗？有几种规范？（commonjs 和 es module 都是怎么实现- 的？有啥区别？）</p>\n</li>\n</ul>\n<ul>\n<li><p>按需加载实现</p>\n</li>\n<li><p>[‘1’, ‘2’, ‘3’].map(parseInt) parseInt(100, 2) = 4</p>\n</li>\n<li><p>防抖节流</p>\n</li>\n</ul>\n<ol>\n<li>防抖<blockquote>\n<p>高频事件 n 秒内执行一次，如果 n 秒内再次触发，重新计时，即最后一次触发</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debonce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>节流<blockquote>\n<p>高频事件 n 秒内执行一次</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debonce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - startTime &gt;= time) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Set WeaksSet 和 Map WeakMap 各自区别</p>\n<p>Set 无序类似数组的数据结构</p>\n<p>WeakSet</p>\n<ol>\n<li>只能是对象引用；</li>\n<li>未使用会被 GC 收集</li>\n</ol>\n<p>Map 字典结构，以<code>value:value</code>形式存储</p>\n<p>WeakMap</p>\n<ol>\n<li>建的对象引用只能是对象引用；</li>\n<li>未使用的建对象会被 GC 收集</li>\n</ol>\n</li>\n<li><p>es5 和 es6 类的区别</p>\n<ol>\n<li>class 会提升，但不会赋值，会进入暂时性死区（TDZ）；</li>\n<li>class 内部默认启用严格模式；</li>\n<li>class 的所有方法、属性不能枚举；</li>\n<li>class 所有方法没有 prototype，也没有[[constructor]]，不能实例化；</li>\n<li>必须使用<code>new</code>来实例化；</li>\n<li>class 无法重写类名；</li>\n</ol>\n</li>\n<li><p>es5 和 es6 的继承区别</p>\n<ol>\n<li>es5 的继承是先实例化子类，再通过父类构造函数修饰子类实例，而 es6 的继承是通过<code>super</code>方法先实例化父类，再通过子类构造函数修饰父类实例；</li>\n<li>es6 的子类可以通过<code>__proto__</code>找到父类，而 es5 中通过<code>__proto__</code>只能找到<code>Function.prototype</code></li>\n</ol>\n</li>\n<li><p>箭头函数和普通函数区别</p>\n</li>\n</ul>\n<ol>\n<li>箭头函数本身没有 this，需要通过原型向上级对象查找，即 this 对象是指向定义是所在作用域的 this 对象（因此无法使用 call、apply、bind 绑定 this 值），普通函数指向调用时的对象；</li>\n<li>箭头函数没有 arguments，可以用 rest 参数代替；</li>\n<li>箭头函数不能使用 new 命令，</li>\n</ol>\n<ul>\n<li>因为没有 this，无法调用 call；</li>\n<li>没有 prototype</li>\n</ul>\n<ol start=\"4\">\n<li>箭头函数没有原型 prototype；</li>\n</ol>\n<hr>\n<h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><ol>\n<li>说说浏览器和 Node 事件循环的区别</li>\n</ol>\n<p>微任务和宏任务在 Node 的执行顺序</p>\n<p>Node 10 及以前：</p>\n<p>执行完一个阶段（timers、I/O、poll 等）的宏任务<br>才会去执行 nextTick 队列里面的内容<br>然后再执行完微任务队列的内容</p>\n<p>Node 11 以后： 和浏览器的行为统一了，都是每执行完一个宏任务就会执行微任务队列。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/1/12/16841bad1cda741f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node的Event Loop\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"start\"</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children2\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children2-1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children3\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children3-1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"children1\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span></span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// children1</span></span><br><span class=\"line\"><span class=\"comment\">// children2</span></span><br><span class=\"line\"><span class=\"comment\">// children2-1</span></span><br><span class=\"line\"><span class=\"comment\">// children3</span></span><br><span class=\"line\"><span class=\"comment\">// children3-1</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"前端内功\"><a href=\"#前端内功\" class=\"headerlink\" title=\"前端内功\"></a>前端内功</h3><ol>\n<li>模块化理解；</li>\n</ol>\n<blockquote>\n<p>模块化是为了处理全局污染、隔离作用域、抽离公共代码等问题</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>iife</code></td>\n<td>自执行 函数作用域</td>\n</tr>\n<tr>\n<td><code>amd</code></td>\n<td>浏览器端（requirejs） 依赖前置</td>\n</tr>\n<tr>\n<td><code>cmd</code></td>\n<td>浏览器端（seajs） 运行时加载依赖 后面也支持依赖前置</td>\n</tr>\n<tr>\n<td><code>commonjs</code></td>\n<td>浏览器、服务器通用 运行时加载 第一次运行加载，缓存值，值的浅拷贝</td>\n</tr>\n<tr>\n<td><code>es6 module</code></td>\n<td>浏览器、服务器通用 静态编译，编译时输出接口 值的引用</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p>工程化理解；<br>web业务日益复杂化和多元化，后端直出的模式转变为前后分离，多页应用想spa、ssr发展。前端工程复杂产生很多问题。</p>\n<ul>\n<li>如何高效多人协作？</li>\n<li>如何保证项目可维护性？</li>\n<li>如何提高项目开发质量？</li>\n<li>如何降低项目生产风险？</li>\n</ul>\n<p>主要目的是为了 提高效率和降低成本。<br>前端工程化主要包括 模块化、组件化、规范化、自动化四个角度。</p>\n<p>模块化</p>\n<ul>\n<li>js模块化</li>\n<li>css模块化 （BEM、css in js）</li>\n<li>资源模块化 （webpack）<br>组件化</li>\n<li>html+js+css功能完备的结构单元就是组件</li>\n<li>模块复用、扩展、继承、嵌套等</li>\n<li>手动操作dom =&gt; 数据驱动（vue、react）<br>规范化</li>\n<li>项目结构 （cli）</li>\n<li>编码规范（eslint）</li>\n<li>文档规划</li>\n<li>组件管理</li>\n<li>Git分支管理、commit描述管理<br>自动化</li>\n<li>持续集成（jinkens）</li>\n<li>自动化构建（webhooks）</li>\n<li>自动化部署</li>\n<li>自动化测试</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>组件化理解;</li>\n<li>性能优化</li>\n</ol>\n<ul>\n<li>图片<ul>\n<li>雪碧图</li>\n<li>图片懒加载、oss动态裁剪、webP格式、减少80%流量</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>页面跳转前接口预请求；快200ms；</li>\n<li>http2</li>\n<li>GZIP</li>\n</ul>\n</li>\n<li>缓存<ul>\n<li>核心页面部分非关键数据放缓存，缓存优先；</li>\n</ul>\n</li>\n<li>编译<ul>\n<li>tree-shaking</li>\n</ul>\n</li>\n<li>动画<ul>\n<li>RAF</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>页面、组件懒加载</li>\n<li>分包</li>\n<li>滚动加载</li>\n<li>PWA</li>\n<li>骨架屏</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ol>\n<li>React 中的 setState 何时是同步的，何时是异步的？</li>\n</ol>\n<p>在 React 中，如果是由 React 引发的事件处理（比如通过 onClick 引发的事件处理，生命周期函数等），调用 setState 不会同步更新 this.state，除此之外的 setState 调用会同步执行 this.state。所谓“除此之外”，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。</p>\n<p><strong>原因：</strong> 在 React 的 setState 函数实现中，会根据一个变量<code>isBatchingUpdate</code>·判断是直接更新 this.state 还是放到队列中回头再说，而<code>isBatchingUpdates</code>默认是<code>false</code>，也就表示 setState 会同步更新 this.state，但是，有一个函数 batchedUpdates，这个函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会调用这个 batchedUpdates，造成的后果，就是由 React 控制的事件处理过程 setState 不会同步更新 this.state。</p>\n<ol start=\"2\">\n<li>vue 父组件和子组件创建的生命周期顺序</li>\n</ol>\n<ul>\n<li><p>加载渲染过程 父 beforeCreate-&gt;父 created-&gt;父 beforeMount-&gt;子 beforeCreate-&gt;子 created-&gt;子 beforeMount-&gt;子 mounted-&gt;父 mounted</p>\n</li>\n<li><p>子组件更新过程 父 beforeUpdate-&gt;子 beforeUpdate-&gt;子 updated-&gt;父 updated</p>\n</li>\n<li><p>父组件更新过程 父 beforeUpdate-&gt;父 updated</p>\n</li>\n<li><p>销毁过程 父 beforeDestroy-&gt;子 beforeDestroy-&gt;子 destroyed-&gt;父 destroyed</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"介绍下-BFC-及其应用\"><a href=\"#介绍下-BFC-及其应用\" class=\"headerlink\" title=\"介绍下 BFC 及其应用\"></a>介绍下 BFC 及其应用</h3><p>BFC 块级格式上下文， 是指一个独立的渲染区域或者说是一个隔离的独立容器。</p>\n<p>形成条件：</p>\n<p>1、float浮动；</p>\n<p>2、绝对定位；</p>\n<p>3、display 为以下其中之一的值 inline-block，table-cell，table-caption；</p>\n<p>4、overflow 除了 visible 以外的值（hidden，auto，scroll）；</p>\n<p>特点：</p>\n<p>1.内部的 Box 会在垂直方向上一个接一个的放置。</p>\n<p>2.垂直方向上的距离由 margin 决定，垂直外边距会重叠即两个盒子中间距离以 margin 最大的值决定；</p>\n<p>3.bfc 的区域不会与 float 的元素区域重叠。</p>\n<p>4.计算 bfc 的高度时，浮动元素也参与计算</p>\n<p>5.bfc 就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/chen-cong/p/7862832.html\" target=\"_blank\" rel=\"noopener\">CSS 中的 BFC 详解</a></p>\n<h3 id=\"position-几种属性\"><a href=\"#position-几种属性\" class=\"headerlink\" title=\"position 几种属性\"></a>position 几种属性</h3><ul>\n<li>relative 相对定位</li>\n</ul>\n<p>不脱离文档流<br>设置定位<br>层级</p>\n<ul>\n<li>absolute 绝对定位</li>\n</ul>\n<p>脱离文档流<br>设置定位<br>层级</p>\n<ul>\n<li><p>fixed 浏览器窗口定位</p>\n</li>\n<li><p>sticky</p>\n</li>\n</ul>\n<p>页面滑动距离未超过指定距离为相对定位，超过为 fixed 定位</p>\n<ul>\n<li><p>static 默认定位</p>\n</li>\n<li><p>inherit 继承定位</p>\n</li>\n</ul>\n<p>从父元素继承 position 属性的值</p>\n<h3 id=\"相邻的两个-inline-block-节点为什么会出现间隔，该如何解决\"><a href=\"#相邻的两个-inline-block-节点为什么会出现间隔，该如何解决\" class=\"headerlink\" title=\"相邻的两个 inline-block 节点为什么会出现间隔，该如何解决\"></a>相邻的两个 inline-block 节点为什么会出现间隔，该如何解决</h3><p>元素被当成行内元素排版的时候，原来 HTML 代码中的回车换行被转成一个空白符，在字体不为 0 的情况下，空白符占据一定宽度，所以 inline-block 的元素之间就出现了空隙。这些元素之间的间距会随着字体的大小而变化，当行内元素 font-size:16px 时，间距为 8px。</p>\n<p>解决办法如下：</p>\n<ul>\n<li>font-size</li>\n<li>html 不换行</li>\n<li>word-spacing</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"input-v-model-是什么简写；\"><a href=\"#input-v-model-是什么简写；\" class=\"headerlink\" title=\"input v-model 是什么简写；\"></a>input v-model 是什么简写；</h3><input :value=\"value\" :input=\"$emit('input', value)\">\n\n<h3 id=\"将原生事件绑定到组件\"><a href=\"#将原生事件绑定到组件\" class=\"headerlink\" title=\"将原生事件绑定到组件\"></a>将原生事件绑定到组件</h3><p>v-on配合.native修饰符不生效，利用$listeners对象，包含在这个组件上所有的监听器</p>\n<h3 id=\"插槽作用域；\"><a href=\"#插槽作用域；\" class=\"headerlink\" title=\"插槽作用域；\"></a>插槽作用域；</h3><slot v-slot=\"scope\">\n\n<h3 id=\"指令；\"><a href=\"#指令；\" class=\"headerlink\" title=\"指令；\"></a>指令；</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只调用一次 ， 指定第一次绑定到元素时调用。</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; name, value, oldValue, expression, arg, modifiers &#125;</span></span><br><span class=\"line\">  bind(el, binding, vnode, oldVnode) &#123;&#125;,</span><br><span class=\"line\">  inserted(el) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。 可判断忽略更新</span></span><br><span class=\"line\">  update() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</span></span><br><span class=\"line\">  componentUpdated() &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指令与元素解绑</span></span><br><span class=\"line\">  unbind() &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sync；\"><a href=\"#sync；\" class=\"headerlink\" title=\".sync；\"></a>.sync；</h3><p>限制：</p>\n<ul>\n<li>不能和表达式一起使用；</li>\n<li>不接受字面量对象；</li>\n</ul>\n<p>this.$emit(‘update:title’, ‘张三’)</p>\n<p><text-document :title=\"name\" :update:title=\"name = $event\"></text-document></p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p>beforeCreated                     init Events &amp; lifecycle<br>created                           init Injections &amp; reactivity<br>beforeMount                       template<br>mounted                           vm.$el   el<br>beforeUpdate<br>update<br>beforeDestory<br>destory</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><h3 id=\"生命周期-1\"><a href=\"#生命周期-1\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><blockquote>\n<p>16之前</p>\n</blockquote>\n<p>constructor<br>componentWillReceivePorps（废弃）<br>componentWillMount（废弃）<br>render<br>componentDidMount</p>\n<p>componentWillUpdate（废弃）</p>\n<blockquote>\n<p>16以后</p>\n</blockquote>\n<p>constructor<br>getDrivedStateFromProps（新增）<br>render<br>componentDidMount</p>\n<p>getSnapshotBeforeUpdate（新增）</p>\n<h3 id=\"fiber架构\"><a href=\"#fiber架构\" class=\"headerlink\" title=\"fiber架构\"></a>fiber架构</h3><p>react16版本之前，递归渲染vdom，然后diff下来做patch渲染。渲染和diff是递归进行的。</p>\n<p>fiber是讲vdom先转成fiber，这个过程就是reconcile。fiber是链表，可用schedule来空闲调度（requestIdleCallback），<br>最后一次性render，这个过程称为commit。</p>\n</slot>"},{"title":"前端算法题整理","catalog":true,"date":"2019-12-16T10:52:54.000Z","subtitle":null,"header-img":null,"_content":"\n## 两个有序数组合并成一个有序数组\n\n```javascript\nvar a = [1, 7, 10];\nvar b = [2, 4, 12, 16];\n\nfunction merge(arg1, arg2) {\n  var m = arg1.length;\n  var n = arg2.length;\n\n  while (n > 0) {\n    // 原数组的数比插入的数组数大 则将最大的数往后移动到 n+m-1位置\n    // 对应的数组索引减一，继续和两一个数组的值比较\n    // 一定是要用插入的数组的值和待插入的值去做判断\n    if (arg1[m - 1] > arg2[n - 1]) {\n      arg1[n + m - 1] = arg1[m - 1];\n      m--;\n    } else {\n      arg1[n + m - 1] = arg2[n - 1];\n      n--;\n    }\n  }\n\n  return arg1;\n}\n```\n\n## 斐波那契数列\n\n斐波那契数列指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N\\*）\n\n```javascript\n// 第一版本 非递归 数值过大存在栈溢出问题 fib(30) => 0.36ms\nfunction fib(nMonth) {\n  return nMonth <= 2\n    ? 1\n    : arguments.callee(nMonth - 1) + arguments.callee(nMonth - 2);\n}\n\n// 第二版本\n\n// 严格模式下 利用尾递归优化 即只会有一个调用帧 永远不会存在栈溢出问题  // fib(30) => 0.02ms\nfunction fib(n, ac1 = 0, ac2 = 1) {\n  if (nMonth <= 1) return ac2;\n\n  return fib(n - 1, ac2, ac1 + ac2);\n}\n\n// 正常模式 借助蹦床函数\nfunction trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n\nfunction fib(n, ac1 = 0, ac2 = 1) {\n  if (n <= 1) return ac2;\n  // bind 不让函数立刻执行\n  return fib.bind(null, n - 1, ac2, ac1 + ac2);\n}\n\ntrampoline(fib(5));\n\n参考资料：\n\n[es6尾调用优化](https://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96)\n\n```\n\n## 冒泡排序\n\n1、比较相邻的两个元素，如果前一个比后一个大，则交换位置。\n2、比较完第一轮的时候，最后一个元素是最大的元素。\n3、这时候最后一个元素是最大的，所以最后一个元素就不需要参与比较大小。\n\n```javascript\nfunction pop(arr) {\n  for (let i = 0; i <= arr.length - 1; i++) {\n    for (let j = 0; j <= arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n## 快速排序\n\n```javascript\n// 递归版本实现\nfunction quick(arr) {\n  if (arr.length === 0) return arr;\n  let p = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  for (let i = 1; i <= arr.length - 2; i++) {\n    if (arr[i] > p) {\n      rightArr.push(arr[i]);\n    } else {\n      leftArr.push(arr[i]);\n    }\n  }\n\n  return quick(leftArr).concat(p, quick(rightArr));\n}\n\n/**\n * 非递归\n * 默认选取第一个为基数\n * 从起点往后寻找比基数大的，记录为下标 i；再从终点往前寻找比基数小的，记录为下标 j，当 i <= j时，原地交换数值\n */\n\nfunction quickSort(num) {\n  _quickSort(num, 0, num.length - 1);\n}\n/**\n * 快速排序(递归)\n * @param num 待排序数组\n * @param left 左指针\n * @param right 右指针\n */\nfunction _quickSort(num, left, right) {\n  if (left >= right) return; // 若左右指针相遇，待排序数组长度小宇1，即递归的终点，return(注意不能写成left==right，这里left是有可能大于right的)。\n  var i = left,\n    j = right,\n    flag = left;\n  while (i < j) {\n    // 在i<j时不断循环，i一旦与j碰头，则跳出循环。\n    while (num[j] >= num[flag] && j > flag) j--; // j不断左移，找到在num[flag]右侧且比它大的数。\n    if (i >= j) {\n      break; // 由于j可能已被改变，需再次判断i与j是否碰头。\n    }\n    while (num[i] <= num[flag] && i < j) i++; // i不断右移，找到且比基数小的数，且i不能与j碰头。(由于两次交换已合并，此处不需要使得i在flag左侧)\n    // num[flag] num[j] num[i]三者换位，可用ES6语法糖[num[flag],num[j],num[i]] = [num[j],num[i],num[flag]];\n    let temp = num[flag];\n    num[flag] = num[j];\n    num[j] = num[i];\n    num[i] = temp;\n    flag = i; // 基数已经在原num[i]的位置，flag同时也要赋值成i。\n  }\n  _quickSort(num, left, flag - 1);\n  _quickSort(num, flag + 1, right);\n}\n\n/**\n *\n * 网上版本\n */\n\nvar quickSort_New = function(ary, left, right) {\n  if (left >= right) {\n    return ary;\n  }\n\n  let i = left;\n  let j = right;\n  let base = ary[left]; // 基数\n\n  while (i < j) {\n    while (i < j && ary[j] >= base) {\n      j--;\n    }\n\n    while (i < j && ary[i] <= base) {\n      i++;\n    }\n\n    if (i < j) {\n      var temp = ary[i];\n      ary[i] = ary[j];\n      ary[j] = temp;\n    }\n  }\n\n  ary[left] = ary[i];\n  ary[i] = base;\n\n  quickSort_New(ary, left, i - 1);\n  quickSort_New(ary, i + 1, right);\n\n  return ary;\n};\n\nconst arr = [1, 5, 7, 2, 7, 9, 2, 7, 10];\nquickSort_New(arr, 0, arr.length - 1);\n```\n\n## 二叉树查找\n\n```javascript\n// 二叉树数据源\nvar treeNodes = [\n  {\n    id: 1,\n    name: \"1\",\n    children: [\n      {\n        id: 11,\n        name: \"11\",\n        children: [\n          {\n            id: 111,\n            name: \"111\",\n            children: []\n          },\n          {\n            id: 112,\n            name: \"112\"\n          }\n        ]\n      },\n      {\n        id: 12,\n        name: \"12\",\n        children: []\n      }\n    ],\n    users: []\n  },\n  {\n    id: 2,\n    name: \"2\",\n    children: [\n      {\n        id: 22,\n        name: \"22\",\n        children: []\n      }\n    ]\n  }\n];\n```\n\n要求：算出所有 id\n\n- 深度优先\n\n```javascript\n// 递归 => 深度优先\nfunction deepCalleen(treeNodes) {\n  treeNodes.forEach((treeNode, index) => {\n    console.log(treeNode.id);\n    if (treeNode.children && treeNode.children.length) {\n      deepCalleen(treeNode.children);\n    }\n  });\n}\n```\n\n```javascript\n// 非递归 => 深度优先\n// 数据结构拍平 遍历有children加到数组之前\nfunction deep(treeNodes) {\n  let stack = treeNodes.map(treeNode => treeNode);\n\n  while (stack.length) {\n    const stackItem = stack.shift();\n    console.log(stackItem.id);\n    if (stackItem.children && stackItem.children.length) {\n      stack = stackItem.children.concat(stack);\n    }\n  }\n}\n```\n\n- 广度优先\n\n```javascript\n// 非递归 => 广度优先\n// 数据结构拍平 遍历有children加到数组之前\nfunction spans(treeNodes) {\n  let stack = treeNodes.map(treeNode => treeNode);\n\n  while (stack.length) {\n    const stackItem = stack.shift();\n    console.log(stackItem.id);\n    if (stackItem.children && stackItem.children.length) {\n      stack = stack.concat(stackItem.children);\n    }\n  }\n}\n\nspans(treeNodes);\n```\n\n## 查看无限大数组中第 k 个大的元素\n\n```javascript\n// 无限大排除sort之后取倒数k个索引方法\n// [1,5,4,7,2]\n// k = 2\n// 结果：5\n\n// 解法1 冒泡排序\nfunction searchK(arr = [], k) {\n  let temp;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n    return arr[arr.length - k];\n  }\n}\n\n// 解法2 堆排序\n```\n\n## 抽奖、发牌等随机随机数算法\n\n```javascript\nfunction start() {\n  let list = [1, 2, 3, 4]\n  for (let i = 0; i <= 3; i++) {\n    const random = Math.floor(Math.random() * list.length)\n    console.log(list[random])\n\n    // list.splice(random, 1)  // 性能比较差 使用下面方式\n\n    list[random] = list[list.length - 1]\n    list.length--\n  }\n}\n```\n\n## 链表\n### 反转链表\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n\n/**\n  * 双指针\n  * 需要定义 prev 、 cur 等几个节点变量，默认cur就是当前链表，和next节点配合；\n*/\nfunction reverseList(head) {\n  let prev = null\n  let cur = head\n\n  while(cur) {\n    const next = cur.next\n\n    cur.next = prev\n    prev = cur\n\n    cur = next\n  }\n\n  return prev\n\n}\n\n/**\n* 递归\n*/\nvar reverseList2 = function (head) {\n  return reverseListDeep(null, head)\n}\n\nvar reverseListDeep = function (prevNode, curNode) {\n  if (!curNode) return prevNode\n  \n  const nextNode = curNode.next\n  curNode.next = prevNode\n  return reverseListDeep(curNode, nextNode)\n}\n```\n\n\n## 堆排序    （复杂度nlogn）\n\n```javascript\n/**\n* 一般需要第K大的元素，不一定要全部排序好，只针对部分元素进行排序。\n*/\n\n```\n\n\n\n\n参考资料：\n\n[十大经典排序算法总结（JavaScript 描述）](https://juejin.im/post/57dcd394a22b9d00610c5ec8#heading-30)\n\n[前端该如何准备数据结构和算法？](https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-42)\n","source":"_posts/前端算法题整理.md","raw":"---\ntitle: 前端算法题整理\ncatalog: true\ndate: 2019-12-16 18:52:54\nsubtitle:\nheader-img:\ntags: algorithm\ncategories: 前端\n---\n\n## 两个有序数组合并成一个有序数组\n\n```javascript\nvar a = [1, 7, 10];\nvar b = [2, 4, 12, 16];\n\nfunction merge(arg1, arg2) {\n  var m = arg1.length;\n  var n = arg2.length;\n\n  while (n > 0) {\n    // 原数组的数比插入的数组数大 则将最大的数往后移动到 n+m-1位置\n    // 对应的数组索引减一，继续和两一个数组的值比较\n    // 一定是要用插入的数组的值和待插入的值去做判断\n    if (arg1[m - 1] > arg2[n - 1]) {\n      arg1[n + m - 1] = arg1[m - 1];\n      m--;\n    } else {\n      arg1[n + m - 1] = arg2[n - 1];\n      n--;\n    }\n  }\n\n  return arg1;\n}\n```\n\n## 斐波那契数列\n\n斐波那契数列指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N\\*）\n\n```javascript\n// 第一版本 非递归 数值过大存在栈溢出问题 fib(30) => 0.36ms\nfunction fib(nMonth) {\n  return nMonth <= 2\n    ? 1\n    : arguments.callee(nMonth - 1) + arguments.callee(nMonth - 2);\n}\n\n// 第二版本\n\n// 严格模式下 利用尾递归优化 即只会有一个调用帧 永远不会存在栈溢出问题  // fib(30) => 0.02ms\nfunction fib(n, ac1 = 0, ac2 = 1) {\n  if (nMonth <= 1) return ac2;\n\n  return fib(n - 1, ac2, ac1 + ac2);\n}\n\n// 正常模式 借助蹦床函数\nfunction trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n\nfunction fib(n, ac1 = 0, ac2 = 1) {\n  if (n <= 1) return ac2;\n  // bind 不让函数立刻执行\n  return fib.bind(null, n - 1, ac2, ac1 + ac2);\n}\n\ntrampoline(fib(5));\n\n参考资料：\n\n[es6尾调用优化](https://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96)\n\n```\n\n## 冒泡排序\n\n1、比较相邻的两个元素，如果前一个比后一个大，则交换位置。\n2、比较完第一轮的时候，最后一个元素是最大的元素。\n3、这时候最后一个元素是最大的，所以最后一个元素就不需要参与比较大小。\n\n```javascript\nfunction pop(arr) {\n  for (let i = 0; i <= arr.length - 1; i++) {\n    for (let j = 0; j <= arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n## 快速排序\n\n```javascript\n// 递归版本实现\nfunction quick(arr) {\n  if (arr.length === 0) return arr;\n  let p = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  for (let i = 1; i <= arr.length - 2; i++) {\n    if (arr[i] > p) {\n      rightArr.push(arr[i]);\n    } else {\n      leftArr.push(arr[i]);\n    }\n  }\n\n  return quick(leftArr).concat(p, quick(rightArr));\n}\n\n/**\n * 非递归\n * 默认选取第一个为基数\n * 从起点往后寻找比基数大的，记录为下标 i；再从终点往前寻找比基数小的，记录为下标 j，当 i <= j时，原地交换数值\n */\n\nfunction quickSort(num) {\n  _quickSort(num, 0, num.length - 1);\n}\n/**\n * 快速排序(递归)\n * @param num 待排序数组\n * @param left 左指针\n * @param right 右指针\n */\nfunction _quickSort(num, left, right) {\n  if (left >= right) return; // 若左右指针相遇，待排序数组长度小宇1，即递归的终点，return(注意不能写成left==right，这里left是有可能大于right的)。\n  var i = left,\n    j = right,\n    flag = left;\n  while (i < j) {\n    // 在i<j时不断循环，i一旦与j碰头，则跳出循环。\n    while (num[j] >= num[flag] && j > flag) j--; // j不断左移，找到在num[flag]右侧且比它大的数。\n    if (i >= j) {\n      break; // 由于j可能已被改变，需再次判断i与j是否碰头。\n    }\n    while (num[i] <= num[flag] && i < j) i++; // i不断右移，找到且比基数小的数，且i不能与j碰头。(由于两次交换已合并，此处不需要使得i在flag左侧)\n    // num[flag] num[j] num[i]三者换位，可用ES6语法糖[num[flag],num[j],num[i]] = [num[j],num[i],num[flag]];\n    let temp = num[flag];\n    num[flag] = num[j];\n    num[j] = num[i];\n    num[i] = temp;\n    flag = i; // 基数已经在原num[i]的位置，flag同时也要赋值成i。\n  }\n  _quickSort(num, left, flag - 1);\n  _quickSort(num, flag + 1, right);\n}\n\n/**\n *\n * 网上版本\n */\n\nvar quickSort_New = function(ary, left, right) {\n  if (left >= right) {\n    return ary;\n  }\n\n  let i = left;\n  let j = right;\n  let base = ary[left]; // 基数\n\n  while (i < j) {\n    while (i < j && ary[j] >= base) {\n      j--;\n    }\n\n    while (i < j && ary[i] <= base) {\n      i++;\n    }\n\n    if (i < j) {\n      var temp = ary[i];\n      ary[i] = ary[j];\n      ary[j] = temp;\n    }\n  }\n\n  ary[left] = ary[i];\n  ary[i] = base;\n\n  quickSort_New(ary, left, i - 1);\n  quickSort_New(ary, i + 1, right);\n\n  return ary;\n};\n\nconst arr = [1, 5, 7, 2, 7, 9, 2, 7, 10];\nquickSort_New(arr, 0, arr.length - 1);\n```\n\n## 二叉树查找\n\n```javascript\n// 二叉树数据源\nvar treeNodes = [\n  {\n    id: 1,\n    name: \"1\",\n    children: [\n      {\n        id: 11,\n        name: \"11\",\n        children: [\n          {\n            id: 111,\n            name: \"111\",\n            children: []\n          },\n          {\n            id: 112,\n            name: \"112\"\n          }\n        ]\n      },\n      {\n        id: 12,\n        name: \"12\",\n        children: []\n      }\n    ],\n    users: []\n  },\n  {\n    id: 2,\n    name: \"2\",\n    children: [\n      {\n        id: 22,\n        name: \"22\",\n        children: []\n      }\n    ]\n  }\n];\n```\n\n要求：算出所有 id\n\n- 深度优先\n\n```javascript\n// 递归 => 深度优先\nfunction deepCalleen(treeNodes) {\n  treeNodes.forEach((treeNode, index) => {\n    console.log(treeNode.id);\n    if (treeNode.children && treeNode.children.length) {\n      deepCalleen(treeNode.children);\n    }\n  });\n}\n```\n\n```javascript\n// 非递归 => 深度优先\n// 数据结构拍平 遍历有children加到数组之前\nfunction deep(treeNodes) {\n  let stack = treeNodes.map(treeNode => treeNode);\n\n  while (stack.length) {\n    const stackItem = stack.shift();\n    console.log(stackItem.id);\n    if (stackItem.children && stackItem.children.length) {\n      stack = stackItem.children.concat(stack);\n    }\n  }\n}\n```\n\n- 广度优先\n\n```javascript\n// 非递归 => 广度优先\n// 数据结构拍平 遍历有children加到数组之前\nfunction spans(treeNodes) {\n  let stack = treeNodes.map(treeNode => treeNode);\n\n  while (stack.length) {\n    const stackItem = stack.shift();\n    console.log(stackItem.id);\n    if (stackItem.children && stackItem.children.length) {\n      stack = stack.concat(stackItem.children);\n    }\n  }\n}\n\nspans(treeNodes);\n```\n\n## 查看无限大数组中第 k 个大的元素\n\n```javascript\n// 无限大排除sort之后取倒数k个索引方法\n// [1,5,4,7,2]\n// k = 2\n// 结果：5\n\n// 解法1 冒泡排序\nfunction searchK(arr = [], k) {\n  let temp;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n    return arr[arr.length - k];\n  }\n}\n\n// 解法2 堆排序\n```\n\n## 抽奖、发牌等随机随机数算法\n\n```javascript\nfunction start() {\n  let list = [1, 2, 3, 4]\n  for (let i = 0; i <= 3; i++) {\n    const random = Math.floor(Math.random() * list.length)\n    console.log(list[random])\n\n    // list.splice(random, 1)  // 性能比较差 使用下面方式\n\n    list[random] = list[list.length - 1]\n    list.length--\n  }\n}\n```\n\n## 链表\n### 反转链表\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n\n/**\n  * 双指针\n  * 需要定义 prev 、 cur 等几个节点变量，默认cur就是当前链表，和next节点配合；\n*/\nfunction reverseList(head) {\n  let prev = null\n  let cur = head\n\n  while(cur) {\n    const next = cur.next\n\n    cur.next = prev\n    prev = cur\n\n    cur = next\n  }\n\n  return prev\n\n}\n\n/**\n* 递归\n*/\nvar reverseList2 = function (head) {\n  return reverseListDeep(null, head)\n}\n\nvar reverseListDeep = function (prevNode, curNode) {\n  if (!curNode) return prevNode\n  \n  const nextNode = curNode.next\n  curNode.next = prevNode\n  return reverseListDeep(curNode, nextNode)\n}\n```\n\n\n## 堆排序    （复杂度nlogn）\n\n```javascript\n/**\n* 一般需要第K大的元素，不一定要全部排序好，只针对部分元素进行排序。\n*/\n\n```\n\n\n\n\n参考资料：\n\n[十大经典排序算法总结（JavaScript 描述）](https://juejin.im/post/57dcd394a22b9d00610c5ec8#heading-30)\n\n[前端该如何准备数据结构和算法？](https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-42)\n","slug":"前端算法题整理","published":1,"updated":"2024-02-20T06:48:45.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv50036lwxac5ya8vep","content":"<h2><span id=\"两个有序数组合并成一个有序数组\">两个有序数组合并成一个有序数组</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m = arg1.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = arg2.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原数组的数比插入的数组数大 则将最大的数往后移动到 n+m-1位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 对应的数组索引减一，继续和两一个数组的值比较</span></span><br><span class=\"line\">    <span class=\"comment\">// 一定是要用插入的数组的值和待插入的值去做判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arg1[m - <span class=\"number\">1</span>] &gt; arg2[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      arg1[n + m - <span class=\"number\">1</span>] = arg1[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">      m--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      arg1[n + m - <span class=\"number\">1</span>] = arg2[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">      n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"斐波那契数列\">斐波那契数列</span></h2><p>斐波那契数列指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一版本 非递归 数值过大存在栈溢出问题 fib(30) =&gt; 0.36ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">nMonth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nMonth &lt;= <span class=\"number\">2</span></span><br><span class=\"line\">    ? <span class=\"number\">1</span></span><br><span class=\"line\">    : <span class=\"built_in\">arguments</span>.callee(nMonth - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(nMonth - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 严格模式下 利用尾递归优化 即只会有一个调用帧 永远不会存在栈溢出问题  // fib(30) =&gt; 0.02ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n, ac1 = <span class=\"number\">0</span>, ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nMonth &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ac2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fib(n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正常模式 借助蹦床函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    f = f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n, ac1 = <span class=\"number\">0</span>, ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ac2;</span><br><span class=\"line\">  <span class=\"comment\">// bind 不让函数立刻执行</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fib.bind(<span class=\"literal\">null</span>, n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">trampoline(fib(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">参考资料：</span><br><span class=\"line\"></span><br><span class=\"line\">[es6尾调用优化](https:<span class=\"comment\">//es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96)</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"冒泡排序\">冒泡排序</span></h2><p>1、比较相邻的两个元素，如果前一个比后一个大，则交换位置。<br>2、比较完第一轮的时候，最后一个元素是最大的元素。<br>3、这时候最后一个元素是最大的，所以最后一个元素就不需要参与比较大小。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt;= arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"快速排序\">快速排序</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归版本实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= arr.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; p) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quick(leftArr).concat(p, quick(rightArr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 非递归</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认选取第一个为基数</span></span><br><span class=\"line\"><span class=\"comment\"> * 从起点往后寻找比基数大的，记录为下标 i；再从终点往前寻找比基数小的，记录为下标 j，当 i &lt;= j时，原地交换数值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  _quickSort(num, <span class=\"number\">0</span>, num.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序(递归)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>num 待排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>left 左指针</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>right 右指针</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_quickSort</span>(<span class=\"params\">num, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>; <span class=\"comment\">// 若左右指针相遇，待排序数组长度小宇1，即递归的终点，return(注意不能写成left==right，这里left是有可能大于right的)。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = left,</span><br><span class=\"line\">    j = right,</span><br><span class=\"line\">    flag = left;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在i&lt;j时不断循环，i一旦与j碰头，则跳出循环。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num[j] &gt;= num[flag] &amp;&amp; j &gt; flag) j--; <span class=\"comment\">// j不断左移，找到在num[flag]右侧且比它大的数。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 由于j可能已被改变，需再次判断i与j是否碰头。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num[i] &lt;= num[flag] &amp;&amp; i &lt; j) i++; <span class=\"comment\">// i不断右移，找到且比基数小的数，且i不能与j碰头。(由于两次交换已合并，此处不需要使得i在flag左侧)</span></span><br><span class=\"line\">    <span class=\"comment\">// num[flag] num[j] num[i]三者换位，可用ES6语法糖[num[flag],num[j],num[i]] = [num[j],num[i],num[flag]];</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = num[flag];</span><br><span class=\"line\">    num[flag] = num[j];</span><br><span class=\"line\">    num[j] = num[i];</span><br><span class=\"line\">    num[i] = temp;</span><br><span class=\"line\">    flag = i; <span class=\"comment\">// 基数已经在原num[i]的位置，flag同时也要赋值成i。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _quickSort(num, left, flag - <span class=\"number\">1</span>);</span><br><span class=\"line\">  _quickSort(num, flag + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 网上版本</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> quickSort_New = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = left;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = right;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> base = ary[left]; <span class=\"comment\">// 基数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; ary[j] &gt;= base) &#123;</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; ary[i] &lt;= base) &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = ary[i];</span><br><span class=\"line\">      ary[i] = ary[j];</span><br><span class=\"line\">      ary[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ary[left] = ary[i];</span><br><span class=\"line\">  ary[i] = base;</span><br><span class=\"line\"></span><br><span class=\"line\">  quickSort_New(ary, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">  quickSort_New(ary, i + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">quickSort_New(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"二叉树查找\">二叉树查找</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二叉树数据源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> treeNodes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">11</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"11\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            id: <span class=\"number\">111</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"111\"</span>,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            id: <span class=\"number\">112</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"112\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">12</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"12\"</span>,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    users: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">22</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>要求：算出所有 id</p>\n<ul>\n<li>深度优先</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归 =&gt; 深度优先</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCalleen</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  treeNodes.forEach(<span class=\"function\">(<span class=\"params\">treeNode, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(treeNode.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode.children &amp;&amp; treeNode.children.length) &#123;</span><br><span class=\"line\">      deepCalleen(treeNode.children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归 =&gt; 深度优先</span></span><br><span class=\"line\"><span class=\"comment\">// 数据结构拍平 遍历有children加到数组之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deep</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = treeNodes.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> treeNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stackItem = stack.shift();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stackItem.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stackItem.children &amp;&amp; stackItem.children.length) &#123;</span><br><span class=\"line\">      stack = stackItem.children.concat(stack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>广度优先</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归 =&gt; 广度优先</span></span><br><span class=\"line\"><span class=\"comment\">// 数据结构拍平 遍历有children加到数组之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spans</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = treeNodes.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> treeNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stackItem = stack.shift();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stackItem.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stackItem.children &amp;&amp; stackItem.children.length) &#123;</span><br><span class=\"line\">      stack = stack.concat(stackItem.children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spans(treeNodes);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看无限大数组中第-k-个大的元素\">查看无限大数组中第 k 个大的元素</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无限大排除sort之后取倒数k个索引方法</span></span><br><span class=\"line\"><span class=\"comment\">// [1,5,4,7,2]</span></span><br><span class=\"line\"><span class=\"comment\">// k = 2</span></span><br><span class=\"line\"><span class=\"comment\">// 结果：5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法1 冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchK</span>(<span class=\"params\">arr = [], k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[arr.length - k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法2 堆排序</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"抽奖-发牌等随机随机数算法\">抽奖、发牌等随机随机数算法</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * list.length)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list[random])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// list.splice(random, 1)  // 性能比较差 使用下面方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    list[random] = list[list.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    list.length--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"链表\">链表</span></h2><h3><span id=\"反转链表\">反转链表</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 双指针</span></span><br><span class=\"line\"><span class=\"comment\">  * 需要定义 prev 、 cur 等几个节点变量，默认cur就是当前链表，和next节点配合；</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = cur.next</span><br><span class=\"line\"></span><br><span class=\"line\">    cur.next = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\"></span><br><span class=\"line\">    cur = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 递归</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseListDeep(<span class=\"literal\">null</span>, head)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseListDeep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">prevNode, curNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!curNode) <span class=\"keyword\">return</span> prevNode</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextNode = curNode.next</span><br><span class=\"line\">  curNode.next = prevNode</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseListDeep(curNode, nextNode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"堆排序-复杂度nlogn\">堆排序    （复杂度nlogn）</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 一般需要第K大的元素，不一定要全部排序好，只针对部分元素进行排序。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<p><a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8#heading-30\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述）</a></p>\n<p><a href=\"https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-42\" target=\"_blank\" rel=\"noopener\">前端该如何准备数据结构和算法？</a></p>\n","site":{"data":{}},"length":6075,"excerpt":"","more":"<h2 id=\"两个有序数组合并成一个有序数组\"><a href=\"#两个有序数组合并成一个有序数组\" class=\"headerlink\" title=\"两个有序数组合并成一个有序数组\"></a>两个有序数组合并成一个有序数组</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m = arg1.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = arg2.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原数组的数比插入的数组数大 则将最大的数往后移动到 n+m-1位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 对应的数组索引减一，继续和两一个数组的值比较</span></span><br><span class=\"line\">    <span class=\"comment\">// 一定是要用插入的数组的值和待插入的值去做判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arg1[m - <span class=\"number\">1</span>] &gt; arg2[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      arg1[n + m - <span class=\"number\">1</span>] = arg1[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">      m--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      arg1[n + m - <span class=\"number\">1</span>] = arg2[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">      n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>斐波那契数列指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一版本 非递归 数值过大存在栈溢出问题 fib(30) =&gt; 0.36ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">nMonth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nMonth &lt;= <span class=\"number\">2</span></span><br><span class=\"line\">    ? <span class=\"number\">1</span></span><br><span class=\"line\">    : <span class=\"built_in\">arguments</span>.callee(nMonth - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(nMonth - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 严格模式下 利用尾递归优化 即只会有一个调用帧 永远不会存在栈溢出问题  // fib(30) =&gt; 0.02ms</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n, ac1 = <span class=\"number\">0</span>, ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nMonth &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ac2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fib(n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正常模式 借助蹦床函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    f = f();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n, ac1 = <span class=\"number\">0</span>, ac2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ac2;</span><br><span class=\"line\">  <span class=\"comment\">// bind 不让函数立刻执行</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fib.bind(<span class=\"literal\">null</span>, n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">trampoline(fib(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">参考资料：</span><br><span class=\"line\"></span><br><span class=\"line\">[es6尾调用优化](https:<span class=\"comment\">//es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>1、比较相邻的两个元素，如果前一个比后一个大，则交换位置。<br>2、比较完第一轮的时候，最后一个元素是最大的元素。<br>3、这时候最后一个元素是最大的，所以最后一个元素就不需要参与比较大小。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pop</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt;= arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归版本实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= arr.length - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; p) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quick(leftArr).concat(p, quick(rightArr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 非递归</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认选取第一个为基数</span></span><br><span class=\"line\"><span class=\"comment\"> * 从起点往后寻找比基数大的，记录为下标 i；再从终点往前寻找比基数小的，记录为下标 j，当 i &lt;= j时，原地交换数值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  _quickSort(num, <span class=\"number\">0</span>, num.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序(递归)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>num 待排序数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>left 左指针</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>right 右指针</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_quickSort</span>(<span class=\"params\">num, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>; <span class=\"comment\">// 若左右指针相遇，待排序数组长度小宇1，即递归的终点，return(注意不能写成left==right，这里left是有可能大于right的)。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = left,</span><br><span class=\"line\">    j = right,</span><br><span class=\"line\">    flag = left;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在i&lt;j时不断循环，i一旦与j碰头，则跳出循环。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num[j] &gt;= num[flag] &amp;&amp; j &gt; flag) j--; <span class=\"comment\">// j不断左移，找到在num[flag]右侧且比它大的数。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>; <span class=\"comment\">// 由于j可能已被改变，需再次判断i与j是否碰头。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num[i] &lt;= num[flag] &amp;&amp; i &lt; j) i++; <span class=\"comment\">// i不断右移，找到且比基数小的数，且i不能与j碰头。(由于两次交换已合并，此处不需要使得i在flag左侧)</span></span><br><span class=\"line\">    <span class=\"comment\">// num[flag] num[j] num[i]三者换位，可用ES6语法糖[num[flag],num[j],num[i]] = [num[j],num[i],num[flag]];</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = num[flag];</span><br><span class=\"line\">    num[flag] = num[j];</span><br><span class=\"line\">    num[j] = num[i];</span><br><span class=\"line\">    num[i] = temp;</span><br><span class=\"line\">    flag = i; <span class=\"comment\">// 基数已经在原num[i]的位置，flag同时也要赋值成i。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _quickSort(num, left, flag - <span class=\"number\">1</span>);</span><br><span class=\"line\">  _quickSort(num, flag + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 网上版本</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> quickSort_New = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = left;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = right;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> base = ary[left]; <span class=\"comment\">// 基数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; ary[j] &gt;= base) &#123;</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; ary[i] &lt;= base) &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = ary[i];</span><br><span class=\"line\">      ary[i] = ary[j];</span><br><span class=\"line\">      ary[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ary[left] = ary[i];</span><br><span class=\"line\">  ary[i] = base;</span><br><span class=\"line\"></span><br><span class=\"line\">  quickSort_New(ary, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">  quickSort_New(ary, i + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\">quickSort_New(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树查找\"><a href=\"#二叉树查找\" class=\"headerlink\" title=\"二叉树查找\"></a>二叉树查找</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二叉树数据源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> treeNodes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">11</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"11\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            id: <span class=\"number\">111</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"111\"</span>,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            id: <span class=\"number\">112</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"112\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">12</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"12\"</span>,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    users: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">2</span>,</span><br><span class=\"line\">    name: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">22</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"22\"</span>,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>要求：算出所有 id</p>\n<ul>\n<li>深度优先</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归 =&gt; 深度优先</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCalleen</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  treeNodes.forEach(<span class=\"function\">(<span class=\"params\">treeNode, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(treeNode.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode.children &amp;&amp; treeNode.children.length) &#123;</span><br><span class=\"line\">      deepCalleen(treeNode.children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归 =&gt; 深度优先</span></span><br><span class=\"line\"><span class=\"comment\">// 数据结构拍平 遍历有children加到数组之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deep</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = treeNodes.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> treeNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stackItem = stack.shift();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stackItem.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stackItem.children &amp;&amp; stackItem.children.length) &#123;</span><br><span class=\"line\">      stack = stackItem.children.concat(stack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>广度优先</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归 =&gt; 广度优先</span></span><br><span class=\"line\"><span class=\"comment\">// 数据结构拍平 遍历有children加到数组之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spans</span>(<span class=\"params\">treeNodes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = treeNodes.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> treeNode);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stackItem = stack.shift();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stackItem.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stackItem.children &amp;&amp; stackItem.children.length) &#123;</span><br><span class=\"line\">      stack = stack.concat(stackItem.children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spans(treeNodes);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看无限大数组中第-k-个大的元素\"><a href=\"#查看无限大数组中第-k-个大的元素\" class=\"headerlink\" title=\"查看无限大数组中第 k 个大的元素\"></a>查看无限大数组中第 k 个大的元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无限大排除sort之后取倒数k个索引方法</span></span><br><span class=\"line\"><span class=\"comment\">// [1,5,4,7,2]</span></span><br><span class=\"line\"><span class=\"comment\">// k = 2</span></span><br><span class=\"line\"><span class=\"comment\">// 结果：5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法1 冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchK</span>(<span class=\"params\">arr = [], k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[arr.length - k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法2 堆排序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽奖、发牌等随机随机数算法\"><a href=\"#抽奖、发牌等随机随机数算法\" class=\"headerlink\" title=\"抽奖、发牌等随机随机数算法\"></a>抽奖、发牌等随机随机数算法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * list.length)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list[random])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// list.splice(random, 1)  // 性能比较差 使用下面方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    list[random] = list[list.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    list.length--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 双指针</span></span><br><span class=\"line\"><span class=\"comment\">  * 需要定义 prev 、 cur 等几个节点变量，默认cur就是当前链表，和next节点配合；</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = cur.next</span><br><span class=\"line\"></span><br><span class=\"line\">    cur.next = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\"></span><br><span class=\"line\">    cur = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 递归</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseListDeep(<span class=\"literal\">null</span>, head)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseListDeep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">prevNode, curNode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!curNode) <span class=\"keyword\">return</span> prevNode</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextNode = curNode.next</span><br><span class=\"line\">  curNode.next = prevNode</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseListDeep(curNode, nextNode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆排序-（复杂度nlogn）\"><a href=\"#堆排序-（复杂度nlogn）\" class=\"headerlink\" title=\"堆排序    （复杂度nlogn）\"></a>堆排序    （复杂度nlogn）</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 一般需要第K大的元素，不一定要全部排序好，只针对部分元素进行排序。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<p><a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8#heading-30\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述）</a></p>\n<p><a href=\"https://juejin.im/post/5d5b307b5188253da24d3cd1#heading-42\" target=\"_blank\" rel=\"noopener\">前端该如何准备数据结构和算法？</a></p>\n"},{"title":"动态换肤","catalog":true,"date":"2020-06-12T10:19:58.000Z","subtitle":null,"header-img":null,"_content":"\n## 背景\n\n说起前端换肤，一般分为两种：\n\n1. 一种是几种可供选择的颜色/主题样式，进行选择切换，这种可供选择的主题切换不会很多，适合绝大多数项目实际情况；\n2. 另一种是需要自定义色值，或者通过取色板取色，可供选择的范围就很大了，参考Element-ui主题色定义；\n\n我们具体讲一讲第一种情况，这也是适合绝大多数项目实际情况，比较有代表性。第二种实现可以参考Element-ui实现思路\n\n## 如何实现\n\n一般是通过控制给全局加一个样式，通过这个顶级样式去覆盖具体类的颜色；\n\n这种方式使用和维护起来就很麻烦，并且很容易遗漏样式覆盖，并不是很推荐。\n\n通过js控制改变加载不同主题色的link文件\n\n这种实现对于，颜色和主题多了的时候，维护起来就很麻烦，需要同时维护 n 个样式文件，并且使用JS改变href属性会带来加载延迟，样式切换不流畅，体验也不好。\n\n目前在不考虑兼容IE低版本的情况下，比较推荐的通用方案是使用CSS变量\n\n![CSS Variables](https://s1.ax1x.com/2020/06/12/tXFaxH.png)\n\n[点这里查看更详细兼容性](https://caniuse.com/#search=CSS%20Variables)\n\n可见目前主流移动端浏览器支持率还是不错的，而且操作起来够简便。\n\n用法举例\n\n定义全局变量\n\n```css\nbody {\n    --color-ff: red;\n    --color-f7: blue;\n}\n```\n\n使用 第二个参数可以设置默认颜色\n\n```css\n.color_test {\n    color: var(--color-ff, #fff);\n    background: var(--color-f7, blue);\n}\n```\n\n- 可以通过js修改\n\n```javascript\ndocument.body.style.setProperty('--color-ff', '#ff0000');\ndocument.body.style.setProperty('--color-f7', '#ff0000');\n```\n\n- 可以将换肤样式定义在html头部 或 写在css文件内再去引用\n\n```css\nbody.dark {\n    --color-ff: #ff0000;\n    --color-f7: #ff0000;\n}\n```\n\n监听系统样式变化，动态加入换肤样式（.dark）\n\n```javascript\nconst darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)');\n      // 判断是否匹配深色模式\n      if (darkMode && darkMode.matches) {\n        document.body.classList.add('dark');\n      }\n      // 监听主题切换事件\n      darkMode && darkMode.addEventListener('change', e => {\n        if (e.matches) {\n          document.body.classList.add('dark');\n        } else {\n          document.body.classList.remove('dark');  \n        }\n      });\n\n```\n\n参考资料：\n\n1. [关于 CSS 变量，你需要了解的一切](https://juejin.im/post/5ab835225188255572085af4)\n2. [CODE PEN全局背景色替换](https://codepen.io/ohansemmanuel/pen/xYKgwE)\n","source":"_posts/动态换肤.md","raw":"---\ntitle: 动态换肤\ncatalog: true\ndate: 2020-06-12 18:19:58\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n## 背景\n\n说起前端换肤，一般分为两种：\n\n1. 一种是几种可供选择的颜色/主题样式，进行选择切换，这种可供选择的主题切换不会很多，适合绝大多数项目实际情况；\n2. 另一种是需要自定义色值，或者通过取色板取色，可供选择的范围就很大了，参考Element-ui主题色定义；\n\n我们具体讲一讲第一种情况，这也是适合绝大多数项目实际情况，比较有代表性。第二种实现可以参考Element-ui实现思路\n\n## 如何实现\n\n一般是通过控制给全局加一个样式，通过这个顶级样式去覆盖具体类的颜色；\n\n这种方式使用和维护起来就很麻烦，并且很容易遗漏样式覆盖，并不是很推荐。\n\n通过js控制改变加载不同主题色的link文件\n\n这种实现对于，颜色和主题多了的时候，维护起来就很麻烦，需要同时维护 n 个样式文件，并且使用JS改变href属性会带来加载延迟，样式切换不流畅，体验也不好。\n\n目前在不考虑兼容IE低版本的情况下，比较推荐的通用方案是使用CSS变量\n\n![CSS Variables](https://s1.ax1x.com/2020/06/12/tXFaxH.png)\n\n[点这里查看更详细兼容性](https://caniuse.com/#search=CSS%20Variables)\n\n可见目前主流移动端浏览器支持率还是不错的，而且操作起来够简便。\n\n用法举例\n\n定义全局变量\n\n```css\nbody {\n    --color-ff: red;\n    --color-f7: blue;\n}\n```\n\n使用 第二个参数可以设置默认颜色\n\n```css\n.color_test {\n    color: var(--color-ff, #fff);\n    background: var(--color-f7, blue);\n}\n```\n\n- 可以通过js修改\n\n```javascript\ndocument.body.style.setProperty('--color-ff', '#ff0000');\ndocument.body.style.setProperty('--color-f7', '#ff0000');\n```\n\n- 可以将换肤样式定义在html头部 或 写在css文件内再去引用\n\n```css\nbody.dark {\n    --color-ff: #ff0000;\n    --color-f7: #ff0000;\n}\n```\n\n监听系统样式变化，动态加入换肤样式（.dark）\n\n```javascript\nconst darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)');\n      // 判断是否匹配深色模式\n      if (darkMode && darkMode.matches) {\n        document.body.classList.add('dark');\n      }\n      // 监听主题切换事件\n      darkMode && darkMode.addEventListener('change', e => {\n        if (e.matches) {\n          document.body.classList.add('dark');\n        } else {\n          document.body.classList.remove('dark');  \n        }\n      });\n\n```\n\n参考资料：\n\n1. [关于 CSS 变量，你需要了解的一切](https://juejin.im/post/5ab835225188255572085af4)\n2. [CODE PEN全局背景色替换](https://codepen.io/ohansemmanuel/pen/xYKgwE)\n","slug":"动态换肤","published":1,"updated":"2024-02-20T06:48:45.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv60039lwxazv2j76ql","content":"<h2><span id=\"背景\">背景</span></h2><p>说起前端换肤，一般分为两种：</p>\n<ol>\n<li>一种是几种可供选择的颜色/主题样式，进行选择切换，这种可供选择的主题切换不会很多，适合绝大多数项目实际情况；</li>\n<li>另一种是需要自定义色值，或者通过取色板取色，可供选择的范围就很大了，参考Element-ui主题色定义；</li>\n</ol>\n<p>我们具体讲一讲第一种情况，这也是适合绝大多数项目实际情况，比较有代表性。第二种实现可以参考Element-ui实现思路</p>\n<h2><span id=\"如何实现\">如何实现</span></h2><p>一般是通过控制给全局加一个样式，通过这个顶级样式去覆盖具体类的颜色；</p>\n<p>这种方式使用和维护起来就很麻烦，并且很容易遗漏样式覆盖，并不是很推荐。</p>\n<p>通过js控制改变加载不同主题色的link文件</p>\n<p>这种实现对于，颜色和主题多了的时候，维护起来就很麻烦，需要同时维护 n 个样式文件，并且使用JS改变href属性会带来加载延迟，样式切换不流畅，体验也不好。</p>\n<p>目前在不考虑兼容IE低版本的情况下，比较推荐的通用方案是使用CSS变量</p>\n<p><img src=\"https://s1.ax1x.com/2020/06/12/tXFaxH.png\" alt=\"CSS Variables\"></p>\n<p><a href=\"https://caniuse.com/#search=CSS%20Variables\" target=\"_blank\" rel=\"noopener\">点这里查看更详细兼容性</a></p>\n<p>可见目前主流移动端浏览器支持率还是不错的，而且操作起来够简便。</p>\n<p>用法举例</p>\n<p>定义全局变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">--color-ff</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">--color-f7</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 第二个参数可以设置默认颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.color_test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-ff, #fff);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--color-f7, blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以通过js修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.style.setProperty(<span class=\"string\">'--color-ff'</span>, <span class=\"string\">'#ff0000'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.style.setProperty(<span class=\"string\">'--color-f7'</span>, <span class=\"string\">'#ff0000'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以将换肤样式定义在html头部 或 写在css文件内再去引用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">--color-ff</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">--color-f7</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>监听系统样式变化，动态加入换肤样式（.dark）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> darkMode = <span class=\"built_in\">window</span>.matchMedia &amp;&amp; <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(prefers-color-scheme: dark)'</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否匹配深色模式</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (darkMode &amp;&amp; darkMode.matches) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'dark'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 监听主题切换事件</span></span><br><span class=\"line\">      darkMode &amp;&amp; darkMode.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'dark'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.classList.remove(<span class=\"string\">'dark'</span>);  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/5ab835225188255572085af4\" target=\"_blank\" rel=\"noopener\">关于 CSS 变量，你需要了解的一切</a></li>\n<li><a href=\"https://codepen.io/ohansemmanuel/pen/xYKgwE\" target=\"_blank\" rel=\"noopener\">CODE PEN全局背景色替换</a></li>\n</ol>\n","site":{"data":{}},"length":1268,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>说起前端换肤，一般分为两种：</p>\n<ol>\n<li>一种是几种可供选择的颜色/主题样式，进行选择切换，这种可供选择的主题切换不会很多，适合绝大多数项目实际情况；</li>\n<li>另一种是需要自定义色值，或者通过取色板取色，可供选择的范围就很大了，参考Element-ui主题色定义；</li>\n</ol>\n<p>我们具体讲一讲第一种情况，这也是适合绝大多数项目实际情况，比较有代表性。第二种实现可以参考Element-ui实现思路</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>一般是通过控制给全局加一个样式，通过这个顶级样式去覆盖具体类的颜色；</p>\n<p>这种方式使用和维护起来就很麻烦，并且很容易遗漏样式覆盖，并不是很推荐。</p>\n<p>通过js控制改变加载不同主题色的link文件</p>\n<p>这种实现对于，颜色和主题多了的时候，维护起来就很麻烦，需要同时维护 n 个样式文件，并且使用JS改变href属性会带来加载延迟，样式切换不流畅，体验也不好。</p>\n<p>目前在不考虑兼容IE低版本的情况下，比较推荐的通用方案是使用CSS变量</p>\n<p><img src=\"https://s1.ax1x.com/2020/06/12/tXFaxH.png\" alt=\"CSS Variables\"></p>\n<p><a href=\"https://caniuse.com/#search=CSS%20Variables\" target=\"_blank\" rel=\"noopener\">点这里查看更详细兼容性</a></p>\n<p>可见目前主流移动端浏览器支持率还是不错的，而且操作起来够简便。</p>\n<p>用法举例</p>\n<p>定义全局变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">--color-ff</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">--color-f7</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 第二个参数可以设置默认颜色</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.color_test</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-ff, #fff);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--color-f7, blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以通过js修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.style.setProperty(<span class=\"string\">'--color-ff'</span>, <span class=\"string\">'#ff0000'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.style.setProperty(<span class=\"string\">'--color-f7'</span>, <span class=\"string\">'#ff0000'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以将换肤样式定义在html头部 或 写在css文件内再去引用</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">--color-ff</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">--color-f7</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>监听系统样式变化，动态加入换肤样式（.dark）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> darkMode = <span class=\"built_in\">window</span>.matchMedia &amp;&amp; <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(prefers-color-scheme: dark)'</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 判断是否匹配深色模式</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (darkMode &amp;&amp; darkMode.matches) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'dark'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 监听主题切换事件</span></span><br><span class=\"line\">      darkMode &amp;&amp; darkMode.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.classList.add(<span class=\"string\">'dark'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.body.classList.remove(<span class=\"string\">'dark'</span>);  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/5ab835225188255572085af4\" target=\"_blank\" rel=\"noopener\">关于 CSS 变量，你需要了解的一切</a></li>\n<li><a href=\"https://codepen.io/ohansemmanuel/pen/xYKgwE\" target=\"_blank\" rel=\"noopener\">CODE PEN全局背景色替换</a></li>\n</ol>\n"},{"title":"动态规划入门","catalog":true,"date":"2020-08-27T03:18:54.000Z","subtitle":null,"header-img":null,"_content":"\n假设有数字1，5， 11，那么凑出数字n最少需要多少个数字？\n\n函数f(n) 表明凑出n需要的数字个数\n\n说明：\n\n- 假设最后一个数字是1, 那么凑出n-1最少需要多少个数字？  min = f(n-1) + 1\n- 假设最后一个数字是5, 那么凑出n-5最少需要多少个数字？  min = f(n-5) + 1\n- 假设最后一个数字是11, 那么凑出n-11最少需要多少个数字？ min = f(n - 11) + 1\n\n所以最小需要的数字就是上述三种情况下的最小值 min{f(n - 1), f(n-5), f(n-11)}，再加上固定的最后一位1\n\n公式：\nf(n) = min{f(n - 1), f(n-5), f(n-11)} + 1\n\n代码实现：\n\n## 递归\n\n```javascript\n\nfunction f(n) {\n  if (n <= 0) return 0\n  let min = Infinity\n\n  if (n >= 1) {\n    min = Math.min(f(n - 1) + 1, min)\n  }\n\n  if (n >= 5) {\n    min = Math.min(f(n - 5) + 1, min)\n  }\n\n  if (n >= 11) {\n    min = Math.min(f(n - 11) + 1, min)\n  }\n\n  return min\n}\n\nf(70)\n\n// 比如凑出数字15\nf(15) => 3\nf(14) => 4\nf(12) => 2\n\n```\n\n## 递归的弊端\n\n1、数字大的一定量的时候耗时越来越长；\n\n2、数字过大时候会爆栈；\n\n比如f(70)这情况\n\n![递归](https://user-gold-cdn.xitu.io/2020/4/3/1713e9f158144d68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n计算f(70)分为三种情况，三种情况下的递归又依次分为三种情况，以此类推算法复杂度O(3^n)\n\n其中上图红色部分代表重复计算的数字，一般原则就是利用空间换时间的原则，维护一份备忘录，备忘录中有对应值直接取，不用再次计算\n\n处理问题1相关代码实现：\n\n```javascript\nfunction f(amount) {\n    function start(n) {\n        if (n <= 0) return 0\n        if (cache[n]) return cache[n]\n        let min = Infinity\n\n        if (n >= 1) {\n            min = Math.min(start(n - 1) + 1, min)\n        }\n\n        if (n >= 5) {\n            min = Math.min(start(n - 5) + 1, min)\n        }\n\n        if (n >= 11) {\n            min = Math.min(start(n - 11) + 1, min)\n        }\n\n        cache[n] = min\n        return min\n    }\n\n    let cache = []\n\n    return start(amount)\n}\n```\n\n## 动态规划\n\n上述递归的实现是`从上到下`的计算思路，即f(70)f(69)...f(1)逐步分解，这个思路这里并不完全适用，我们需要一种`从下到上`的计算思路，即f(1)f(2)...f(70)的方式来解决大规模问题，动态规划通常是用`迭代`取代递归来解决问题。\n\n除此之外，递归+备忘录 的另一个缺陷就是再没有优化空间了，因为在最坏的情况下，递归的最大深度为O(n)，换成迭代之后根本不需要如此多的存储空间。\n\n## 动态转移方程\n\n分析上述备忘录缓存的节点形式如下\n\namount | n\n-- | --|\n0  | 0\n1 | 1\n2 |  2\n3 |  3\n4 |  4\n5 |  1\n6 |    2\n7 |  3\n8 |  4\n9 |  5\n10 |  2\n11 |  1\n12 |  2\n13 |  3\n\nf[1] = min(f[0], f[-5], f[-11]) + 1 = 1\nf[5] = min(f[0], f[4], f[-6]) + 1 = 1\n\n得出公式为：\n\n> f[n] = min(f[n - 1], f[n- 5], f[n - 11]) + 1\n\n代码实现：\n\n```javascript\nfunction makeChange(coins = [], amount = 0) {\n  // 初始化备忘录 Infinity填充 位数根据传入的数值动态决定位数 第0位默认0占位\n  const dp = new Array(amount + 1).fill(Infinity)\n\n  dp[0] = 0\n\n  for (let i = 1; i <= amount; i++) {\n    for(let coin of coins) {\n      if (coin < i) {\n        dp[i] = Math.min(dp[i - coin] + 1, dp[i])\n      }\n    }\n  }\n\n  // dp[amount] === Infinity 说明没有最优解返回-1\n  return dp[amount] === Infinity ? -1 : dp[amount]\n}\n```\n","source":"_posts/动态规划入门.md","raw":"---\ntitle: 动态规划入门\ncatalog: true\ndate: 2020-08-27 11:18:54\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n假设有数字1，5， 11，那么凑出数字n最少需要多少个数字？\n\n函数f(n) 表明凑出n需要的数字个数\n\n说明：\n\n- 假设最后一个数字是1, 那么凑出n-1最少需要多少个数字？  min = f(n-1) + 1\n- 假设最后一个数字是5, 那么凑出n-5最少需要多少个数字？  min = f(n-5) + 1\n- 假设最后一个数字是11, 那么凑出n-11最少需要多少个数字？ min = f(n - 11) + 1\n\n所以最小需要的数字就是上述三种情况下的最小值 min{f(n - 1), f(n-5), f(n-11)}，再加上固定的最后一位1\n\n公式：\nf(n) = min{f(n - 1), f(n-5), f(n-11)} + 1\n\n代码实现：\n\n## 递归\n\n```javascript\n\nfunction f(n) {\n  if (n <= 0) return 0\n  let min = Infinity\n\n  if (n >= 1) {\n    min = Math.min(f(n - 1) + 1, min)\n  }\n\n  if (n >= 5) {\n    min = Math.min(f(n - 5) + 1, min)\n  }\n\n  if (n >= 11) {\n    min = Math.min(f(n - 11) + 1, min)\n  }\n\n  return min\n}\n\nf(70)\n\n// 比如凑出数字15\nf(15) => 3\nf(14) => 4\nf(12) => 2\n\n```\n\n## 递归的弊端\n\n1、数字大的一定量的时候耗时越来越长；\n\n2、数字过大时候会爆栈；\n\n比如f(70)这情况\n\n![递归](https://user-gold-cdn.xitu.io/2020/4/3/1713e9f158144d68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n计算f(70)分为三种情况，三种情况下的递归又依次分为三种情况，以此类推算法复杂度O(3^n)\n\n其中上图红色部分代表重复计算的数字，一般原则就是利用空间换时间的原则，维护一份备忘录，备忘录中有对应值直接取，不用再次计算\n\n处理问题1相关代码实现：\n\n```javascript\nfunction f(amount) {\n    function start(n) {\n        if (n <= 0) return 0\n        if (cache[n]) return cache[n]\n        let min = Infinity\n\n        if (n >= 1) {\n            min = Math.min(start(n - 1) + 1, min)\n        }\n\n        if (n >= 5) {\n            min = Math.min(start(n - 5) + 1, min)\n        }\n\n        if (n >= 11) {\n            min = Math.min(start(n - 11) + 1, min)\n        }\n\n        cache[n] = min\n        return min\n    }\n\n    let cache = []\n\n    return start(amount)\n}\n```\n\n## 动态规划\n\n上述递归的实现是`从上到下`的计算思路，即f(70)f(69)...f(1)逐步分解，这个思路这里并不完全适用，我们需要一种`从下到上`的计算思路，即f(1)f(2)...f(70)的方式来解决大规模问题，动态规划通常是用`迭代`取代递归来解决问题。\n\n除此之外，递归+备忘录 的另一个缺陷就是再没有优化空间了，因为在最坏的情况下，递归的最大深度为O(n)，换成迭代之后根本不需要如此多的存储空间。\n\n## 动态转移方程\n\n分析上述备忘录缓存的节点形式如下\n\namount | n\n-- | --|\n0  | 0\n1 | 1\n2 |  2\n3 |  3\n4 |  4\n5 |  1\n6 |    2\n7 |  3\n8 |  4\n9 |  5\n10 |  2\n11 |  1\n12 |  2\n13 |  3\n\nf[1] = min(f[0], f[-5], f[-11]) + 1 = 1\nf[5] = min(f[0], f[4], f[-6]) + 1 = 1\n\n得出公式为：\n\n> f[n] = min(f[n - 1], f[n- 5], f[n - 11]) + 1\n\n代码实现：\n\n```javascript\nfunction makeChange(coins = [], amount = 0) {\n  // 初始化备忘录 Infinity填充 位数根据传入的数值动态决定位数 第0位默认0占位\n  const dp = new Array(amount + 1).fill(Infinity)\n\n  dp[0] = 0\n\n  for (let i = 1; i <= amount; i++) {\n    for(let coin of coins) {\n      if (coin < i) {\n        dp[i] = Math.min(dp[i - coin] + 1, dp[i])\n      }\n    }\n  }\n\n  // dp[amount] === Infinity 说明没有最优解返回-1\n  return dp[amount] === Infinity ? -1 : dp[amount]\n}\n```\n","slug":"动态规划入门","published":1,"updated":"2024-02-20T06:48:45.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv6003clwxaj3tyfadg","content":"<p>假设有数字1，5， 11，那么凑出数字n最少需要多少个数字？</p>\n<p>函数f(n) 表明凑出n需要的数字个数</p>\n<p>说明：</p>\n<ul>\n<li>假设最后一个数字是1, 那么凑出n-1最少需要多少个数字？  min = f(n-1) + 1</li>\n<li>假设最后一个数字是5, 那么凑出n-5最少需要多少个数字？  min = f(n-5) + 1</li>\n<li>假设最后一个数字是11, 那么凑出n-11最少需要多少个数字？ min = f(n - 11) + 1</li>\n</ul>\n<p>所以最小需要的数字就是上述三种情况下的最小值 min{f(n - 1), f(n-5), f(n-11)}，再加上固定的最后一位1</p>\n<p>公式：<br>f(n) = min{f(n - 1), f(n-5), f(n-11)} + 1</p>\n<p>代码实现：</p>\n<h2><span id=\"递归\">递归</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"literal\">Infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">5</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">11</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比如凑出数字15</span></span><br><span class=\"line\">f(<span class=\"number\">15</span>) =&gt; <span class=\"number\">3</span></span><br><span class=\"line\">f(<span class=\"number\">14</span>) =&gt; <span class=\"number\">4</span></span><br><span class=\"line\">f(<span class=\"number\">12</span>) =&gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"递归的弊端\">递归的弊端</span></h2><p>1、数字大的一定量的时候耗时越来越长；</p>\n<p>2、数字过大时候会爆栈；</p>\n<p>比如f(70)这情况</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/3/1713e9f158144d68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"递归\"></p>\n<p>计算f(70)分为三种情况，三种情况下的递归又依次分为三种情况，以此类推算法复杂度O(3^n)</p>\n<p>其中上图红色部分代表重复计算的数字，一般原则就是利用空间换时间的原则，维护一份备忘录，备忘录中有对应值直接取，不用再次计算</p>\n<p>处理问题1相关代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">amount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[n]) <span class=\"keyword\">return</span> cache[n]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> min = <span class=\"literal\">Infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">5</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">11</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cache[n] = min</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(amount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"动态规划\">动态规划</span></h2><p>上述递归的实现是<code>从上到下</code>的计算思路，即f(70)f(69)…f(1)逐步分解，这个思路这里并不完全适用，我们需要一种<code>从下到上</code>的计算思路，即f(1)f(2)…f(70)的方式来解决大规模问题，动态规划通常是用<code>迭代</code>取代递归来解决问题。</p>\n<p>除此之外，递归+备忘录 的另一个缺陷就是再没有优化空间了，因为在最坏的情况下，递归的最大深度为O(n)，换成迭代之后根本不需要如此多的存储空间。</p>\n<h2><span id=\"动态转移方程\">动态转移方程</span></h2><p>分析上述备忘录缓存的节点形式如下</p>\n<table>\n<thead>\n<tr>\n<th>amount</th>\n<th>n</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5</td>\n</tr>\n<tr>\n<td>10</td>\n<td>2</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1</td>\n</tr>\n<tr>\n<td>12</td>\n<td>2</td>\n</tr>\n<tr>\n<td>13</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<p>f[1] = min(f[0], f[-5], f[-11]) + 1 = 1<br>f[5] = min(f[0], f[4], f[-6]) + 1 = 1</p>\n<p>得出公式为：</p>\n<blockquote>\n<p>f[n] = min(f[n - 1], f[n- 5], f[n - 11]) + 1</p>\n</blockquote>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeChange</span>(<span class=\"params\">coins = [], amount = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化备忘录 Infinity填充 位数根据传入的数值动态决定位数 第0位默认0占位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(amount + <span class=\"number\">1</span>).fill(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> coin <span class=\"keyword\">of</span> coins) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (coin &lt; i) &#123;</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">Math</span>.min(dp[i - coin] + <span class=\"number\">1</span>, dp[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// dp[amount] === Infinity 说明没有最优解返回-1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[amount] === <span class=\"literal\">Infinity</span> ? <span class=\"number\">-1</span> : dp[amount]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1842,"excerpt":"","more":"<p>假设有数字1，5， 11，那么凑出数字n最少需要多少个数字？</p>\n<p>函数f(n) 表明凑出n需要的数字个数</p>\n<p>说明：</p>\n<ul>\n<li>假设最后一个数字是1, 那么凑出n-1最少需要多少个数字？  min = f(n-1) + 1</li>\n<li>假设最后一个数字是5, 那么凑出n-5最少需要多少个数字？  min = f(n-5) + 1</li>\n<li>假设最后一个数字是11, 那么凑出n-11最少需要多少个数字？ min = f(n - 11) + 1</li>\n</ul>\n<p>所以最小需要的数字就是上述三种情况下的最小值 min{f(n - 1), f(n-5), f(n-11)}，再加上固定的最后一位1</p>\n<p>公式：<br>f(n) = min{f(n - 1), f(n-5), f(n-11)} + 1</p>\n<p>代码实现：</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"literal\">Infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">5</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    min = <span class=\"built_in\">Math</span>.min(f(n - <span class=\"number\">11</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比如凑出数字15</span></span><br><span class=\"line\">f(<span class=\"number\">15</span>) =&gt; <span class=\"number\">3</span></span><br><span class=\"line\">f(<span class=\"number\">14</span>) =&gt; <span class=\"number\">4</span></span><br><span class=\"line\">f(<span class=\"number\">12</span>) =&gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"递归的弊端\"><a href=\"#递归的弊端\" class=\"headerlink\" title=\"递归的弊端\"></a>递归的弊端</h2><p>1、数字大的一定量的时候耗时越来越长；</p>\n<p>2、数字过大时候会爆栈；</p>\n<p>比如f(70)这情况</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/3/1713e9f158144d68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"递归\"></p>\n<p>计算f(70)分为三种情况，三种情况下的递归又依次分为三种情况，以此类推算法复杂度O(3^n)</p>\n<p>其中上图红色部分代表重复计算的数字，一般原则就是利用空间换时间的原则，维护一份备忘录，备忘录中有对应值直接取，不用再次计算</p>\n<p>处理问题1相关代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">amount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[n]) <span class=\"keyword\">return</span> cache[n]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> min = <span class=\"literal\">Infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">5</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">            min = <span class=\"built_in\">Math</span>.min(start(n - <span class=\"number\">11</span>) + <span class=\"number\">1</span>, min)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cache[n] = min</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> start(amount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>上述递归的实现是<code>从上到下</code>的计算思路，即f(70)f(69)…f(1)逐步分解，这个思路这里并不完全适用，我们需要一种<code>从下到上</code>的计算思路，即f(1)f(2)…f(70)的方式来解决大规模问题，动态规划通常是用<code>迭代</code>取代递归来解决问题。</p>\n<p>除此之外，递归+备忘录 的另一个缺陷就是再没有优化空间了，因为在最坏的情况下，递归的最大深度为O(n)，换成迭代之后根本不需要如此多的存储空间。</p>\n<h2 id=\"动态转移方程\"><a href=\"#动态转移方程\" class=\"headerlink\" title=\"动态转移方程\"></a>动态转移方程</h2><p>分析上述备忘录缓存的节点形式如下</p>\n<table>\n<thead>\n<tr>\n<th>amount</th>\n<th>n</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>8</td>\n<td>4</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5</td>\n</tr>\n<tr>\n<td>10</td>\n<td>2</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1</td>\n</tr>\n<tr>\n<td>12</td>\n<td>2</td>\n</tr>\n<tr>\n<td>13</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<p>f[1] = min(f[0], f[-5], f[-11]) + 1 = 1<br>f[5] = min(f[0], f[4], f[-6]) + 1 = 1</p>\n<p>得出公式为：</p>\n<blockquote>\n<p>f[n] = min(f[n - 1], f[n- 5], f[n - 11]) + 1</p>\n</blockquote>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeChange</span>(<span class=\"params\">coins = [], amount = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化备忘录 Infinity填充 位数根据传入的数值动态决定位数 第0位默认0占位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(amount + <span class=\"number\">1</span>).fill(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> coin <span class=\"keyword\">of</span> coins) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (coin &lt; i) &#123;</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">Math</span>.min(dp[i - coin] + <span class=\"number\">1</span>, dp[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// dp[amount] === Infinity 说明没有最优解返回-1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[amount] === <span class=\"literal\">Infinity</span> ? <span class=\"number\">-1</span> : dp[amount]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于sentry的异常捕获平台","catalog":true,"date":"2019-11-05T06:53:56.000Z","subtitle":null,"header-img":null,"_content":"\n## sentry 介绍\n\nsentry 是一个开源的实时错误追踪系统，可以帮助开发者实时监控和统计异常信息。比如客户端和 h5 的 crash 的信息，有了 sentry 以后我们就可以第一时间来处理和解决系统的问题，就不需要过度地依赖用户反馈来定位问题了。sentry 主要包括服务端和客户端 SDK,对于系统集成这一块，sentry 提供了主流语言和框架的支持，包括 java、android、ios、javascript 等都提供官方了 SDK,同时 sentry 提供了一些比较流行的服务的集成插件，比如 jira、github、gitlab、pagerduty、dingding 等。\n\n## sentry 架构\n\nsentry 的架构分位客户端和服务端，而且 sentry 官方提供不同语言和框架的集成 SDK。我们选择相应的 SDK 后就可以将错误信息实时上报到 sentry 的服务端。而 sentry 的服务端分为 web、cron、worker 这几个部分，主要工作流程为，应用程序或者客户端发生错误后将错误信息上报给 web 模块，web 模块处理后放入消息队列(rocketmq)或 redis 内存队列，worker 从队列中消费数据进行处理并存储 postgresql 中，如果配置相应报警规则根据配置报警工具进行报警。下图为 sentry 工作示意图：\n\n<img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 283px;\">\n\n## sentry 安装\n\nSentry 本身是基于 Django 开发的，而且也依赖到其他的如 Postgresql、 Redis 等组件，所以一般有两种途径进行安装：通过 Docker 或用 Python 搭建。官网下分别有以下的两个介绍：\nDocker 安装 <https://docs.sentry.io/server/installation/docker/>\nPython 安装 <https://docs.sentry.io/server/installation/python/>\n我们采用的是 docker 安装方式，如果是采用 docker 安装的方式，那么还有一种更加便捷的方式，那么就是采用 docker-compose 了，具体安装步骤如下：\n\n注意，通过 Docker 本地搭建 Sentry 的时候，需要 docker 版本为 1.10.0 以上，docker-compose 版本为 1.17.0 以上，同时要求最低有 3GB 的可用内存。\n\n1. 安装 docker、docker-compose\n\n这里采用 yum 安装，具体安装步骤如下：\n\n```shell\n#安装一些必要的系统工具\nyum install -y yum-utils device-mapper-persistent-data lvm2\n#添加软件源信息\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n#更新 yum 缓存\nyum makecache fast\n#安装 Docker-ce\nyum -y install docker-ce\n#启动 Docker 后台服务\nsystemctl start docker\n#下载docket-compose\ncurl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n#修改权限\nchmod +x /usr/local/bin/docker-compose\n```\n\n2. 安装 sentry\n\n其实 sentry 社区了提供一个基于 docker-composed 的开源项目，通过它我们可以一键部署 sentry。首先我克隆该项目：\n\n```shell\ngit clone https://github.com/getsentry/onpremise.git\ncd onpremise\n-rw-r--r-- 1 root root  2017 Oct 15 22:27 config.yml\n-rw-r--r-- 1 root root  1427 Oct 16 16:27 docker-compose.yml\n-rw-r--r-- 1 root root    43 Oct 15 18:05 Dockerfile\n-rwxr-xr-x 1 root root  2766 Oct 15 18:05 install.sh\n-rw-r--r-- 1 root root 11356 Oct 15 18:05 LICENSE\n-rw-r--r-- 1 root root   548 Oct 15 18:05 Makefile\n-rw-r--r-- 1 root root  2167 Oct 15 18:05 README.md\n-rw-r--r-- 1 root root    42 Oct 16 17:24 requirements.txt\n-rw-r--r-- 1 root root 11493 Oct 15 18:05 sentry.conf.py\n-rwxr-xr-x 1 root root  1020 Oct 15 18:05 test.sh\n```\n\n如果并没有特殊要求或者额外的组件配置的话，可以直接运行 ./install.sh 将 sentry 及其依赖都通过 docker 安装。由于我们 redis 和 postgresql 是采用阿里云托管的，所以我们不能采用这种方式进行安装。具体步骤如下：\n\n2.1 创建环境变量文件\n\n```shell\n#新建环境变量文件.env,根据.env.example拷贝一份即可\ncp .env.example .env\n```\n\n2.2 修改 docker-compose.xml 文件\n\n删除 redis、postgresql 等镜像依赖，并配置容器的时区，具体配置内容如下：\n\n```shell\nversion: '3.4'\n\nx-defaults: &defaults\n  restart: unless-stopped\n  build:\n    context: .\n#  depends_on:\n#    - redis\n#    - postgres\n#    - memcached\n#    - smtp\n  env_file: .env\n# 时区配置\n  environment:\n    - TZ=Asia/Shanghai\n#    SENTRY_MEMCACHED_HOST: memcached\n#    SENTRY_REDIS_HOST: redis\n#    SENTRY_POSTGRES_HOST: postgres\n#    SENTRY_EMAIL_HOST: smtp\n  volumes:\n    - sentry-data:/var/lib/sentry/files\n    # 时区配置\n    - /etc/localtime:/etc/localtime:ro\n    - /etc/timezone:/etc/timezone:ro\n\nservices:\n#  smtp:\n#    restart: unless-stopped\n#    image: tianon/exim4\n\n\"docker-compose.yml\" [readonly] 72L, 1432C                                                                                                         1,1           Top\n#  memcached:\n#    restart: unless-stopped\n#    image: memcached:1.5-alpine\n\n#  redis:\n#    restart: unless-stopped\n#    image: redis:3.2-alpine\n\n#  postgres:\n#    restart: unless-stopped\n#    image: postgres:9.5\n#    volumes:\n#      - sentry-postgres:/var/lib/postgresql/data\n\n  web:\n    <<: *defaults\n    #web端口号，默认为9000\n    ports:\n      - '9000:9000'\n\n  cron:\n    <<: *defaults\n    command: run cron\n\n# work为了保证高可用，起了两个节点\n  worker1:\n    <<: *defaults\n    command: run worker\n\n  worker2:\n    <<: *defaults\n    command: run worker\n\nvolumes:\n    sentry-data:\n      external: true\n    sentry-postgres:\n      external: true\n```\n\n2.3 构建 docker-compose 镜像\n\n```shell\ndocker-compose build --pull\n```\n\n2.4 生成 sentry 密钥\n\nsentry 是用于 sentry 容器内部免密通信，并把这个值配置到 .env 的 SENTRY_SECRET_KEY key 中\n\n```shell\ndocker-compose run --rm web config generate-secret-key\n```\n\n2.5 配置 redis 和 postgresql 连接信息\n\n在.env 文件中添加以下配置：\n\n```shell\n#秘钥，由于容器内部免密通信\nSENTRY_SECRET_KEY=\n#pg host\nSENTRY_POSTGRES_HOST=\n#pg port\nSENTRY_POSTGRES_PORT=\n#pg 数据库名称\nSENTRY_DB_NAME=\n#pg 用户\nSENTRY_DB_USER=\n#pg 用户密码\nSENTRY_DB_PASSWORD=\n#redis host\nSENTRY_REDIS_HOST=\n#redis passowrd\nSENTRY_REDIS_PASSWORD=\n#redis 端口号\nSENTRY_REDIS_PORT=\n#redis 数据名\nSENTRY_REDIS_DB=\n```\n\n注意：这里 postgresql 官方建议采用 9.5 和 9.6，由于阿里云没有这两个版本，所以我们采用 10 的版本。目前运行没有发现任何问题。redis 需要 3.2 以上版本，并且 sentry 不支持集群版的 redis。我们采用的 4.0 单机主从版。进行 Web 服务迁移\n\n2.6 进行 Web 服务迁移\n\n主要是初始化表结构和建用户等操作。具体操作执行以下命令：\n\n```shell\ndocker-compose run --rm web upgrade\n```\n\n注意：注意在这个过程中命令行会提示你是否创建超级用户，如果确定，则输入邮箱和密码。如果没有创建用户，可以在升级结束后可以手动创建一个用户，具体执行以下命令：\n\n```shell\ndocker-compose run --rm web createuser\n```\n\n2.7 运行 sentry\n\n```shell\n#启动容器\ndocker-compose up -d\n\n```\n\n3. 配置邮件信息\n\n当 sentry 采集到了异常信息就可以通过邮件的方式，发送给指定的处理人。而且这些配置信息是无法在 web console 中修改的，具体操作是在.env 环境变量文件，添加以下配置项：\n\n```shell\n#邮件的发送地址\nENTRY_SERVER_EMAIL=\n#smtp服务器主机地址\nSENTRY_EMAIL_HOST=\n#smtp 服务器用户\nSENTRY_EMAIL_USER=\n#smtp服务器密码\nSENTRY_EMAIL_PASSWORD=\n# smtp服务器端口,注意如果采用qq的企业邮箱，这里不是foxmail中配置的465，而是25（巨坑）。\nSENTRY_EMAIL_PORT=\n#是否使用TLS，默认为false\nSENTRY_EMAIL_USE_TLS=\n```\n\n重启 sentry 服务\n\n```shell\ndocker-compose build\ndocker-compose run --rm web upgrade\ndocker-compose up -d\n```\n\n4. 集成钉钉及时通讯工具\n\n我们公司使用钉钉作为内部通讯和工作辅助工作，平时工作中大家都可以通过 pc 端和 app 端第一时间查看到消息，并且报警对即时性要求比较高，所以集成钉钉很有必要，下面介绍一下 sentry 集成钉钉的步骤。\n\n1. 安装 sentry-dingding 插件，sentry 的强大和可扩展是它很受欢迎的原因。目前开源社区相关 sentry 的插件也是很丰富的,sentry 钉钉插件 github 地址：<https://github.com/anshengme/sentry-dingding>。\n   sentry 为了方便我们安装插件，提供了一个 requirements.txt 文件。我们只需要将我们现需要安装的插件配置进去，重新构建镜像就可以完成安装和集成。修改 requirements.txt：\n\n```shell\n#添加钉钉插件\nsentry-dingding~=0.0.3\n```\n\n2. 重启 sentry 服务\n\n```shell\ndocker-compose build\ndocker-compose run --rm web upgrade\ndocker-compose up -d\n```\n\n5. 集成 LDAP\n\n跟集成钉钉一样，sentry 社区也提供了集成插件，sentry ldap 插件地址：<https://github.com/Banno/getsentry-ldap-auth>。 1.安装 ldap 插件，这里跟安装钉钉插件有一定区别，钉钉是直接配置在 requirements.txt 中就可以了。而 ldap 插件如果采用这样的方式可能会报错，原因是 ldap 插件需要依赖 python-ldap 相关环节，所以我们需要在先安装这些依赖。具体安装步骤如下：\n\n1. 安装 sentry ldap 插件\n   修改 DokerFile 文件，在文件添加以下内容：\n\n```shell\n#切换成国内的源，提高下载速度。但是貌似没啥用，下载还是很慢，后面在看看是什么原因\nRUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list\nRUN apt-get clean\n#更新源，这一步很重要不能省略，否则后面会下载失败\nRUN apt-get update\n#安装python-ldap相关依赖\nRUN apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev\n#安装sentry-ldap插件\nRUN pip install sentry-ldap-auth\n```\n\n2. 配置 ldap 插件\n   在 sentry.conf.py 文件添加以下配置项:\n\n```python\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch, GroupOfUniqueNamesType\n#设置ldap服务器地址\nAUTH_LDAP_SERVER_URI = 'ldap://secad.poizon.com:3489'\n#ldap管理员账号\nAUTH_LDAP_BIND_DN = 'xxx'\n#ldap管理员密码\nAUTH_LDAP_BIND_PASSWORD = 'xxxxx'\n#ldap搜索路径，这里配置成技术部，需要注意如果有中文需要转成unicode的格式\nOU=unicode('OU=技术部,OU=识装,DC=sz,DC=du', 'utf8')\n\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    OU,\n    ldap.SCOPE_SUBTREE,\n    '(mail=%(user)s)',\n)\n\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\n    '',\n    ldap.SCOPE_SUBTREE,\n    '(objectClass=groupOfUniqueNames)'\n)\n\nAUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()\nAUTH_LDAP_REQUIRE_GROUP = None\nAUTH_LDAP_DENY_GROUP = None\n\nAUTH_LDAP_USER_ATTR_MAP = {\n    'name': 'cn',\n    'email': 'mail'\n}\n\nAUTH_LDAP_FIND_GROUP_PERMS = False\nAUTH_LDAP_CACHE_GROUPS = True\nAUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600\n\n#如果ldap认证成功，默认给用户加入poizon组织中\nAUTH_LDAP_DEFAULT_SENTRY_ORGANIZATION = u'poizon'\n#默认的用户的角色是member\nAUTH_LDAP_SENTRY_ORGANIZATION_ROLE_TYPE = 'member'\n#开通相应的操作权限\nAUTH_LDAP_SENTRY_ORGANIZATION_GLOBAL_ACCESS = True\n#指定sentry的username字段名称\nAUTH_LDAP_SENTRY_USERNAME_FIELD = 'uid'\n#指定sentry的角色和ldap的角色的绑定关系，这里我们暂时不设置\nAUTH_LDAP_SENTRY_GROUP_ROLE_MAPPING = {}\n#扩展登录方式，采用Ldap的方式进行认证\nAUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (\n    'sentry_ldap_auth.backend.SentryLdapBackend',\n)\n\n#LOG配置\nimport logging\nlogger = logging.getLogger('django_auth_ldap')\nlogger.addHandler(logging.StreamHandler())\nlogger.setLevel('DEBUG')\n```\n","source":"_posts/基于sentry的异常捕获平台.md","raw":"---\ntitle: 基于sentry的异常捕获平台\ncatalog: true\ndate: 2019-11-05 14:53:56\nsubtitle:\nheader-img:\ntags: sentry\ncategories: 前端\n---\n\n## sentry 介绍\n\nsentry 是一个开源的实时错误追踪系统，可以帮助开发者实时监控和统计异常信息。比如客户端和 h5 的 crash 的信息，有了 sentry 以后我们就可以第一时间来处理和解决系统的问题，就不需要过度地依赖用户反馈来定位问题了。sentry 主要包括服务端和客户端 SDK,对于系统集成这一块，sentry 提供了主流语言和框架的支持，包括 java、android、ios、javascript 等都提供官方了 SDK,同时 sentry 提供了一些比较流行的服务的集成插件，比如 jira、github、gitlab、pagerduty、dingding 等。\n\n## sentry 架构\n\nsentry 的架构分位客户端和服务端，而且 sentry 官方提供不同语言和框架的集成 SDK。我们选择相应的 SDK 后就可以将错误信息实时上报到 sentry 的服务端。而 sentry 的服务端分为 web、cron、worker 这几个部分，主要工作流程为，应用程序或者客户端发生错误后将错误信息上报给 web 模块，web 模块处理后放入消息队列(rocketmq)或 redis 内存队列，worker 从队列中消费数据进行处理并存储 postgresql 中，如果配置相应报警规则根据配置报警工具进行报警。下图为 sentry 工作示意图：\n\n<img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 283px;\">\n\n## sentry 安装\n\nSentry 本身是基于 Django 开发的，而且也依赖到其他的如 Postgresql、 Redis 等组件，所以一般有两种途径进行安装：通过 Docker 或用 Python 搭建。官网下分别有以下的两个介绍：\nDocker 安装 <https://docs.sentry.io/server/installation/docker/>\nPython 安装 <https://docs.sentry.io/server/installation/python/>\n我们采用的是 docker 安装方式，如果是采用 docker 安装的方式，那么还有一种更加便捷的方式，那么就是采用 docker-compose 了，具体安装步骤如下：\n\n注意，通过 Docker 本地搭建 Sentry 的时候，需要 docker 版本为 1.10.0 以上，docker-compose 版本为 1.17.0 以上，同时要求最低有 3GB 的可用内存。\n\n1. 安装 docker、docker-compose\n\n这里采用 yum 安装，具体安装步骤如下：\n\n```shell\n#安装一些必要的系统工具\nyum install -y yum-utils device-mapper-persistent-data lvm2\n#添加软件源信息\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n#更新 yum 缓存\nyum makecache fast\n#安装 Docker-ce\nyum -y install docker-ce\n#启动 Docker 后台服务\nsystemctl start docker\n#下载docket-compose\ncurl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n#修改权限\nchmod +x /usr/local/bin/docker-compose\n```\n\n2. 安装 sentry\n\n其实 sentry 社区了提供一个基于 docker-composed 的开源项目，通过它我们可以一键部署 sentry。首先我克隆该项目：\n\n```shell\ngit clone https://github.com/getsentry/onpremise.git\ncd onpremise\n-rw-r--r-- 1 root root  2017 Oct 15 22:27 config.yml\n-rw-r--r-- 1 root root  1427 Oct 16 16:27 docker-compose.yml\n-rw-r--r-- 1 root root    43 Oct 15 18:05 Dockerfile\n-rwxr-xr-x 1 root root  2766 Oct 15 18:05 install.sh\n-rw-r--r-- 1 root root 11356 Oct 15 18:05 LICENSE\n-rw-r--r-- 1 root root   548 Oct 15 18:05 Makefile\n-rw-r--r-- 1 root root  2167 Oct 15 18:05 README.md\n-rw-r--r-- 1 root root    42 Oct 16 17:24 requirements.txt\n-rw-r--r-- 1 root root 11493 Oct 15 18:05 sentry.conf.py\n-rwxr-xr-x 1 root root  1020 Oct 15 18:05 test.sh\n```\n\n如果并没有特殊要求或者额外的组件配置的话，可以直接运行 ./install.sh 将 sentry 及其依赖都通过 docker 安装。由于我们 redis 和 postgresql 是采用阿里云托管的，所以我们不能采用这种方式进行安装。具体步骤如下：\n\n2.1 创建环境变量文件\n\n```shell\n#新建环境变量文件.env,根据.env.example拷贝一份即可\ncp .env.example .env\n```\n\n2.2 修改 docker-compose.xml 文件\n\n删除 redis、postgresql 等镜像依赖，并配置容器的时区，具体配置内容如下：\n\n```shell\nversion: '3.4'\n\nx-defaults: &defaults\n  restart: unless-stopped\n  build:\n    context: .\n#  depends_on:\n#    - redis\n#    - postgres\n#    - memcached\n#    - smtp\n  env_file: .env\n# 时区配置\n  environment:\n    - TZ=Asia/Shanghai\n#    SENTRY_MEMCACHED_HOST: memcached\n#    SENTRY_REDIS_HOST: redis\n#    SENTRY_POSTGRES_HOST: postgres\n#    SENTRY_EMAIL_HOST: smtp\n  volumes:\n    - sentry-data:/var/lib/sentry/files\n    # 时区配置\n    - /etc/localtime:/etc/localtime:ro\n    - /etc/timezone:/etc/timezone:ro\n\nservices:\n#  smtp:\n#    restart: unless-stopped\n#    image: tianon/exim4\n\n\"docker-compose.yml\" [readonly] 72L, 1432C                                                                                                         1,1           Top\n#  memcached:\n#    restart: unless-stopped\n#    image: memcached:1.5-alpine\n\n#  redis:\n#    restart: unless-stopped\n#    image: redis:3.2-alpine\n\n#  postgres:\n#    restart: unless-stopped\n#    image: postgres:9.5\n#    volumes:\n#      - sentry-postgres:/var/lib/postgresql/data\n\n  web:\n    <<: *defaults\n    #web端口号，默认为9000\n    ports:\n      - '9000:9000'\n\n  cron:\n    <<: *defaults\n    command: run cron\n\n# work为了保证高可用，起了两个节点\n  worker1:\n    <<: *defaults\n    command: run worker\n\n  worker2:\n    <<: *defaults\n    command: run worker\n\nvolumes:\n    sentry-data:\n      external: true\n    sentry-postgres:\n      external: true\n```\n\n2.3 构建 docker-compose 镜像\n\n```shell\ndocker-compose build --pull\n```\n\n2.4 生成 sentry 密钥\n\nsentry 是用于 sentry 容器内部免密通信，并把这个值配置到 .env 的 SENTRY_SECRET_KEY key 中\n\n```shell\ndocker-compose run --rm web config generate-secret-key\n```\n\n2.5 配置 redis 和 postgresql 连接信息\n\n在.env 文件中添加以下配置：\n\n```shell\n#秘钥，由于容器内部免密通信\nSENTRY_SECRET_KEY=\n#pg host\nSENTRY_POSTGRES_HOST=\n#pg port\nSENTRY_POSTGRES_PORT=\n#pg 数据库名称\nSENTRY_DB_NAME=\n#pg 用户\nSENTRY_DB_USER=\n#pg 用户密码\nSENTRY_DB_PASSWORD=\n#redis host\nSENTRY_REDIS_HOST=\n#redis passowrd\nSENTRY_REDIS_PASSWORD=\n#redis 端口号\nSENTRY_REDIS_PORT=\n#redis 数据名\nSENTRY_REDIS_DB=\n```\n\n注意：这里 postgresql 官方建议采用 9.5 和 9.6，由于阿里云没有这两个版本，所以我们采用 10 的版本。目前运行没有发现任何问题。redis 需要 3.2 以上版本，并且 sentry 不支持集群版的 redis。我们采用的 4.0 单机主从版。进行 Web 服务迁移\n\n2.6 进行 Web 服务迁移\n\n主要是初始化表结构和建用户等操作。具体操作执行以下命令：\n\n```shell\ndocker-compose run --rm web upgrade\n```\n\n注意：注意在这个过程中命令行会提示你是否创建超级用户，如果确定，则输入邮箱和密码。如果没有创建用户，可以在升级结束后可以手动创建一个用户，具体执行以下命令：\n\n```shell\ndocker-compose run --rm web createuser\n```\n\n2.7 运行 sentry\n\n```shell\n#启动容器\ndocker-compose up -d\n\n```\n\n3. 配置邮件信息\n\n当 sentry 采集到了异常信息就可以通过邮件的方式，发送给指定的处理人。而且这些配置信息是无法在 web console 中修改的，具体操作是在.env 环境变量文件，添加以下配置项：\n\n```shell\n#邮件的发送地址\nENTRY_SERVER_EMAIL=\n#smtp服务器主机地址\nSENTRY_EMAIL_HOST=\n#smtp 服务器用户\nSENTRY_EMAIL_USER=\n#smtp服务器密码\nSENTRY_EMAIL_PASSWORD=\n# smtp服务器端口,注意如果采用qq的企业邮箱，这里不是foxmail中配置的465，而是25（巨坑）。\nSENTRY_EMAIL_PORT=\n#是否使用TLS，默认为false\nSENTRY_EMAIL_USE_TLS=\n```\n\n重启 sentry 服务\n\n```shell\ndocker-compose build\ndocker-compose run --rm web upgrade\ndocker-compose up -d\n```\n\n4. 集成钉钉及时通讯工具\n\n我们公司使用钉钉作为内部通讯和工作辅助工作，平时工作中大家都可以通过 pc 端和 app 端第一时间查看到消息，并且报警对即时性要求比较高，所以集成钉钉很有必要，下面介绍一下 sentry 集成钉钉的步骤。\n\n1. 安装 sentry-dingding 插件，sentry 的强大和可扩展是它很受欢迎的原因。目前开源社区相关 sentry 的插件也是很丰富的,sentry 钉钉插件 github 地址：<https://github.com/anshengme/sentry-dingding>。\n   sentry 为了方便我们安装插件，提供了一个 requirements.txt 文件。我们只需要将我们现需要安装的插件配置进去，重新构建镜像就可以完成安装和集成。修改 requirements.txt：\n\n```shell\n#添加钉钉插件\nsentry-dingding~=0.0.3\n```\n\n2. 重启 sentry 服务\n\n```shell\ndocker-compose build\ndocker-compose run --rm web upgrade\ndocker-compose up -d\n```\n\n5. 集成 LDAP\n\n跟集成钉钉一样，sentry 社区也提供了集成插件，sentry ldap 插件地址：<https://github.com/Banno/getsentry-ldap-auth>。 1.安装 ldap 插件，这里跟安装钉钉插件有一定区别，钉钉是直接配置在 requirements.txt 中就可以了。而 ldap 插件如果采用这样的方式可能会报错，原因是 ldap 插件需要依赖 python-ldap 相关环节，所以我们需要在先安装这些依赖。具体安装步骤如下：\n\n1. 安装 sentry ldap 插件\n   修改 DokerFile 文件，在文件添加以下内容：\n\n```shell\n#切换成国内的源，提高下载速度。但是貌似没啥用，下载还是很慢，后面在看看是什么原因\nRUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list\nRUN apt-get clean\n#更新源，这一步很重要不能省略，否则后面会下载失败\nRUN apt-get update\n#安装python-ldap相关依赖\nRUN apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev\n#安装sentry-ldap插件\nRUN pip install sentry-ldap-auth\n```\n\n2. 配置 ldap 插件\n   在 sentry.conf.py 文件添加以下配置项:\n\n```python\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch, GroupOfUniqueNamesType\n#设置ldap服务器地址\nAUTH_LDAP_SERVER_URI = 'ldap://secad.poizon.com:3489'\n#ldap管理员账号\nAUTH_LDAP_BIND_DN = 'xxx'\n#ldap管理员密码\nAUTH_LDAP_BIND_PASSWORD = 'xxxxx'\n#ldap搜索路径，这里配置成技术部，需要注意如果有中文需要转成unicode的格式\nOU=unicode('OU=技术部,OU=识装,DC=sz,DC=du', 'utf8')\n\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    OU,\n    ldap.SCOPE_SUBTREE,\n    '(mail=%(user)s)',\n)\n\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\n    '',\n    ldap.SCOPE_SUBTREE,\n    '(objectClass=groupOfUniqueNames)'\n)\n\nAUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()\nAUTH_LDAP_REQUIRE_GROUP = None\nAUTH_LDAP_DENY_GROUP = None\n\nAUTH_LDAP_USER_ATTR_MAP = {\n    'name': 'cn',\n    'email': 'mail'\n}\n\nAUTH_LDAP_FIND_GROUP_PERMS = False\nAUTH_LDAP_CACHE_GROUPS = True\nAUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600\n\n#如果ldap认证成功，默认给用户加入poizon组织中\nAUTH_LDAP_DEFAULT_SENTRY_ORGANIZATION = u'poizon'\n#默认的用户的角色是member\nAUTH_LDAP_SENTRY_ORGANIZATION_ROLE_TYPE = 'member'\n#开通相应的操作权限\nAUTH_LDAP_SENTRY_ORGANIZATION_GLOBAL_ACCESS = True\n#指定sentry的username字段名称\nAUTH_LDAP_SENTRY_USERNAME_FIELD = 'uid'\n#指定sentry的角色和ldap的角色的绑定关系，这里我们暂时不设置\nAUTH_LDAP_SENTRY_GROUP_ROLE_MAPPING = {}\n#扩展登录方式，采用Ldap的方式进行认证\nAUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (\n    'sentry_ldap_auth.backend.SentryLdapBackend',\n)\n\n#LOG配置\nimport logging\nlogger = logging.getLogger('django_auth_ldap')\nlogger.addHandler(logging.StreamHandler())\nlogger.setLevel('DEBUG')\n```\n","slug":"基于sentry的异常捕获平台","published":1,"updated":"2024-02-20T06:48:45.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv7003glwxao4nj4qo0","content":"<h2><span id=\"sentry-介绍\">sentry 介绍</span></h2><p>sentry 是一个开源的实时错误追踪系统，可以帮助开发者实时监控和统计异常信息。比如客户端和 h5 的 crash 的信息，有了 sentry 以后我们就可以第一时间来处理和解决系统的问题，就不需要过度地依赖用户反馈来定位问题了。sentry 主要包括服务端和客户端 SDK,对于系统集成这一块，sentry 提供了主流语言和框架的支持，包括 java、android、ios、javascript 等都提供官方了 SDK,同时 sentry 提供了一些比较流行的服务的集成插件，比如 jira、github、gitlab、pagerduty、dingding 等。</p>\n<h2><span id=\"sentry-架构\">sentry 架构</span></h2><p>sentry 的架构分位客户端和服务端，而且 sentry 官方提供不同语言和框架的集成 SDK。我们选择相应的 SDK 后就可以将错误信息实时上报到 sentry 的服务端。而 sentry 的服务端分为 web、cron、worker 这几个部分，主要工作流程为，应用程序或者客户端发生错误后将错误信息上报给 web 模块，web 模块处理后放入消息队列(rocketmq)或 redis 内存队列，worker 从队列中消费数据进行处理并存储 postgresql 中，如果配置相应报警规则根据配置报警工具进行报警。下图为 sentry 工作示意图：</p>\n<img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 283px;\">\n\n<h2><span id=\"sentry-安装\">sentry 安装</span></h2><p>Sentry 本身是基于 Django 开发的，而且也依赖到其他的如 Postgresql、 Redis 等组件，所以一般有两种途径进行安装：通过 Docker 或用 Python 搭建。官网下分别有以下的两个介绍：<br>Docker 安装 <a href=\"https://docs.sentry.io/server/installation/docker/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/server/installation/docker/</a><br>Python 安装 <a href=\"https://docs.sentry.io/server/installation/python/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/server/installation/python/</a><br>我们采用的是 docker 安装方式，如果是采用 docker 安装的方式，那么还有一种更加便捷的方式，那么就是采用 docker-compose 了，具体安装步骤如下：</p>\n<p>注意，通过 Docker 本地搭建 Sentry 的时候，需要 docker 版本为 1.10.0 以上，docker-compose 版本为 1.17.0 以上，同时要求最低有 3GB 的可用内存。</p>\n<ol>\n<li>安装 docker、docker-compose</li>\n</ol>\n<p>这里采用 yum 安装，具体安装步骤如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装一些必要的系统工具</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加软件源信息</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新 yum 缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装 Docker-ce</span></span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动 Docker 后台服务</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载docket-compose</span></span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改权限</span></span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 sentry</li>\n</ol>\n<p>其实 sentry 社区了提供一个基于 docker-composed 的开源项目，通过它我们可以一键部署 sentry。首先我克隆该项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/getsentry/onpremise.git</span><br><span class=\"line\">cd onpremise</span><br><span class=\"line\">-rw-r--r-- 1 root root  2017 Oct 15 22:27 config.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root  1427 Oct 16 16:27 docker-compose.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root    43 Oct 15 18:05 Dockerfile</span><br><span class=\"line\">-rwxr-xr-x 1 root root  2766 Oct 15 18:05 install.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root 11356 Oct 15 18:05 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root   548 Oct 15 18:05 Makefile</span><br><span class=\"line\">-rw-r--r-- 1 root root  2167 Oct 15 18:05 README.md</span><br><span class=\"line\">-rw-r--r-- 1 root root    42 Oct 16 17:24 requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 11493 Oct 15 18:05 sentry.conf.py</span><br><span class=\"line\">-rwxr-xr-x 1 root root  1020 Oct 15 18:05 test.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果并没有特殊要求或者额外的组件配置的话，可以直接运行 ./install.sh 将 sentry 及其依赖都通过 docker 安装。由于我们 redis 和 postgresql 是采用阿里云托管的，所以我们不能采用这种方式进行安装。具体步骤如下：</p>\n<p>2.1 创建环境变量文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建环境变量文件.env,根据.env.example拷贝一份即可</span></span><br><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>2.2 修改 docker-compose.xml 文件</p>\n<p>删除 redis、postgresql 等镜像依赖，并配置容器的时区，具体配置内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '3.4'</span><br><span class=\"line\"></span><br><span class=\"line\">x-defaults: &amp;defaults</span><br><span class=\"line\">  restart: unless-stopped</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    context: .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  depends_on:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - postgres</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - memcached</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - smtp</span></span><br><span class=\"line\">  env_file: .env</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 时区配置</span></span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_MEMCACHED_HOST: memcached</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_REDIS_HOST: redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_POSTGRES_HOST: postgres</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_EMAIL_HOST: smtp</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - sentry-data:/var/lib/sentry/files</span><br><span class=\"line\">    # 时区配置</span><br><span class=\"line\">    - /etc/localtime:/etc/localtime:ro</span><br><span class=\"line\">    - /etc/timezone:/etc/timezone:ro</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  smtp:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: tianon/exim4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\"docker-compose.yml\" [readonly] 72L, 1432C                                                                                                         1,1           Top</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  memcached:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: memcached:1.5-alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  redis:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: redis:3.2-alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  postgres:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: postgres:9.5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    volumes:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      - sentry-postgres:/var/lib/postgresql/data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  web:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    #web端口号，默认为9000</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - '9000:9000'</span><br><span class=\"line\"></span><br><span class=\"line\">  cron:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> work为了保证高可用，起了两个节点</span></span><br><span class=\"line\">  worker1:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run worker</span><br><span class=\"line\"></span><br><span class=\"line\">  worker2:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run worker</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">    sentry-data:</span><br><span class=\"line\">      external: true</span><br><span class=\"line\">    sentry-postgres:</span><br><span class=\"line\">      external: true</span><br></pre></td></tr></table></figure>\n\n<p>2.3 构建 docker-compose 镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build --pull</span><br></pre></td></tr></table></figure>\n\n<p>2.4 生成 sentry 密钥</p>\n<p>sentry 是用于 sentry 容器内部免密通信，并把这个值配置到 .env 的 SENTRY_SECRET_KEY key 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure>\n\n<p>2.5 配置 redis 和 postgresql 连接信息</p>\n<p>在.env 文件中添加以下配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">秘钥，由于容器内部免密通信</span></span><br><span class=\"line\">SENTRY_SECRET_KEY=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg host</span></span><br><span class=\"line\">SENTRY_POSTGRES_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg port</span></span><br><span class=\"line\">SENTRY_POSTGRES_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 数据库名称</span></span><br><span class=\"line\">SENTRY_DB_NAME=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 用户</span></span><br><span class=\"line\">SENTRY_DB_USER=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 用户密码</span></span><br><span class=\"line\">SENTRY_DB_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis host</span></span><br><span class=\"line\">SENTRY_REDIS_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis passowrd</span></span><br><span class=\"line\">SENTRY_REDIS_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis 端口号</span></span><br><span class=\"line\">SENTRY_REDIS_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis 数据名</span></span><br><span class=\"line\">SENTRY_REDIS_DB=</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里 postgresql 官方建议采用 9.5 和 9.6，由于阿里云没有这两个版本，所以我们采用 10 的版本。目前运行没有发现任何问题。redis 需要 3.2 以上版本，并且 sentry 不支持集群版的 redis。我们采用的 4.0 单机主从版。进行 Web 服务迁移</p>\n<p>2.6 进行 Web 服务迁移</p>\n<p>主要是初始化表结构和建用户等操作。具体操作执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure>\n\n<p>注意：注意在这个过程中命令行会提示你是否创建超级用户，如果确定，则输入邮箱和密码。如果没有创建用户，可以在升级结束后可以手动创建一个用户，具体执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web createuser</span><br></pre></td></tr></table></figure>\n\n<p>2.7 运行 sentry</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动容器</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置邮件信息</li>\n</ol>\n<p>当 sentry 采集到了异常信息就可以通过邮件的方式，发送给指定的处理人。而且这些配置信息是无法在 web console 中修改的，具体操作是在.env 环境变量文件，添加以下配置项：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">邮件的发送地址</span></span><br><span class=\"line\">ENTRY_SERVER_EMAIL=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp服务器主机地址</span></span><br><span class=\"line\">SENTRY_EMAIL_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp 服务器用户</span></span><br><span class=\"line\">SENTRY_EMAIL_USER=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp服务器密码</span></span><br><span class=\"line\">SENTRY_EMAIL_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> smtp服务器端口,注意如果采用qq的企业邮箱，这里不是foxmail中配置的465，而是25（巨坑）。</span></span><br><span class=\"line\">SENTRY_EMAIL_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">是否使用TLS，默认为<span class=\"literal\">false</span></span></span><br><span class=\"line\">SENTRY_EMAIL_USE_TLS=</span><br></pre></td></tr></table></figure>\n\n<p>重启 sentry 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>集成钉钉及时通讯工具</li>\n</ol>\n<p>我们公司使用钉钉作为内部通讯和工作辅助工作，平时工作中大家都可以通过 pc 端和 app 端第一时间查看到消息，并且报警对即时性要求比较高，所以集成钉钉很有必要，下面介绍一下 sentry 集成钉钉的步骤。</p>\n<ol>\n<li>安装 sentry-dingding 插件，sentry 的强大和可扩展是它很受欢迎的原因。目前开源社区相关 sentry 的插件也是很丰富的,sentry 钉钉插件 github 地址：<a href=\"https://github.com/anshengme/sentry-dingding\" target=\"_blank\" rel=\"noopener\">https://github.com/anshengme/sentry-dingding</a>。<br>sentry 为了方便我们安装插件，提供了一个 requirements.txt 文件。我们只需要将我们现需要安装的插件配置进去，重新构建镜像就可以完成安装和集成。修改 requirements.txt：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加钉钉插件</span></span><br><span class=\"line\">sentry-dingding~=0.0.3</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重启 sentry 服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>集成 LDAP</li>\n</ol>\n<p>跟集成钉钉一样，sentry 社区也提供了集成插件，sentry ldap 插件地址：<a href=\"https://github.com/Banno/getsentry-ldap-auth\" target=\"_blank\" rel=\"noopener\">https://github.com/Banno/getsentry-ldap-auth</a>。 1.安装 ldap 插件，这里跟安装钉钉插件有一定区别，钉钉是直接配置在 requirements.txt 中就可以了。而 ldap 插件如果采用这样的方式可能会报错，原因是 ldap 插件需要依赖 python-ldap 相关环节，所以我们需要在先安装这些依赖。具体安装步骤如下：</p>\n<ol>\n<li>安装 sentry ldap 插件<br>修改 DokerFile 文件，在文件添加以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换成国内的源，提高下载速度。但是貌似没啥用，下载还是很慢，后面在看看是什么原因</span></span><br><span class=\"line\">RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class=\"line\">RUN apt-get clean</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新源，这一步很重要不能省略，否则后面会下载失败</span></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装python-ldap相关依赖</span></span><br><span class=\"line\">RUN apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装sentry-ldap插件</span></span><br><span class=\"line\">RUN pip install sentry-ldap-auth</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 ldap 插件<br>在 sentry.conf.py 文件添加以下配置项:</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ldap</span><br><span class=\"line\"><span class=\"keyword\">from</span> django_auth_ldap.config <span class=\"keyword\">import</span> LDAPSearch, GroupOfUniqueNamesType</span><br><span class=\"line\"><span class=\"comment\">#设置ldap服务器地址</span></span><br><span class=\"line\">AUTH_LDAP_SERVER_URI = <span class=\"string\">'ldap://secad.poizon.com:3489'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap管理员账号</span></span><br><span class=\"line\">AUTH_LDAP_BIND_DN = <span class=\"string\">'xxx'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap管理员密码</span></span><br><span class=\"line\">AUTH_LDAP_BIND_PASSWORD = <span class=\"string\">'xxxxx'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap搜索路径，这里配置成技术部，需要注意如果有中文需要转成unicode的格式</span></span><br><span class=\"line\">OU=unicode(<span class=\"string\">'OU=技术部,OU=识装,DC=sz,DC=du'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_USER_SEARCH = LDAPSearch(</span><br><span class=\"line\">    OU,</span><br><span class=\"line\">    ldap.SCOPE_SUBTREE,</span><br><span class=\"line\">    <span class=\"string\">'(mail=%(user)s)'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class=\"line\">    <span class=\"string\">''</span>,</span><br><span class=\"line\">    ldap.SCOPE_SUBTREE,</span><br><span class=\"line\">    <span class=\"string\">'(objectClass=groupOfUniqueNames)'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()</span><br><span class=\"line\">AUTH_LDAP_REQUIRE_GROUP = <span class=\"literal\">None</span></span><br><span class=\"line\">AUTH_LDAP_DENY_GROUP = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'email'</span>: <span class=\"string\">'mail'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_FIND_GROUP_PERMS = <span class=\"literal\">False</span></span><br><span class=\"line\">AUTH_LDAP_CACHE_GROUPS = <span class=\"literal\">True</span></span><br><span class=\"line\">AUTH_LDAP_GROUP_CACHE_TIMEOUT = <span class=\"number\">3600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果ldap认证成功，默认给用户加入poizon组织中</span></span><br><span class=\"line\">AUTH_LDAP_DEFAULT_SENTRY_ORGANIZATION = <span class=\"string\">u'poizon'</span></span><br><span class=\"line\"><span class=\"comment\">#默认的用户的角色是member</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_ORGANIZATION_ROLE_TYPE = <span class=\"string\">'member'</span></span><br><span class=\"line\"><span class=\"comment\">#开通相应的操作权限</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_ORGANIZATION_GLOBAL_ACCESS = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">#指定sentry的username字段名称</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_USERNAME_FIELD = <span class=\"string\">'uid'</span></span><br><span class=\"line\"><span class=\"comment\">#指定sentry的角色和ldap的角色的绑定关系，这里我们暂时不设置</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_GROUP_ROLE_MAPPING = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#扩展登录方式，采用Ldap的方式进行认证</span></span><br><span class=\"line\">AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (</span><br><span class=\"line\">    <span class=\"string\">'sentry_ldap_auth.backend.SentryLdapBackend'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#LOG配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">'django_auth_ldap'</span>)</span><br><span class=\"line\">logger.addHandler(logging.StreamHandler())</span><br><span class=\"line\">logger.setLevel(<span class=\"string\">'DEBUG'</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":7088,"excerpt":"","more":"<h2 id=\"sentry-介绍\"><a href=\"#sentry-介绍\" class=\"headerlink\" title=\"sentry 介绍\"></a>sentry 介绍</h2><p>sentry 是一个开源的实时错误追踪系统，可以帮助开发者实时监控和统计异常信息。比如客户端和 h5 的 crash 的信息，有了 sentry 以后我们就可以第一时间来处理和解决系统的问题，就不需要过度地依赖用户反馈来定位问题了。sentry 主要包括服务端和客户端 SDK,对于系统集成这一块，sentry 提供了主流语言和框架的支持，包括 java、android、ios、javascript 等都提供官方了 SDK,同时 sentry 提供了一些比较流行的服务的集成插件，比如 jira、github、gitlab、pagerduty、dingding 等。</p>\n<h2 id=\"sentry-架构\"><a href=\"#sentry-架构\" class=\"headerlink\" title=\"sentry 架构\"></a>sentry 架构</h2><p>sentry 的架构分位客户端和服务端，而且 sentry 官方提供不同语言和框架的集成 SDK。我们选择相应的 SDK 后就可以将错误信息实时上报到 sentry 的服务端。而 sentry 的服务端分为 web、cron、worker 这几个部分，主要工作流程为，应用程序或者客户端发生错误后将错误信息上报给 web 模块，web 模块处理后放入消息队列(rocketmq)或 redis 内存队列，worker 从队列中消费数据进行处理并存储 postgresql 中，如果配置相应报警规则根据配置报警工具进行报警。下图为 sentry 工作示意图：</p>\n<img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/484053/1571292721535-807923a9-6f5a-4059-bfe5-b00c206dbe5e.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 283px;\">\n\n<h2 id=\"sentry-安装\"><a href=\"#sentry-安装\" class=\"headerlink\" title=\"sentry 安装\"></a>sentry 安装</h2><p>Sentry 本身是基于 Django 开发的，而且也依赖到其他的如 Postgresql、 Redis 等组件，所以一般有两种途径进行安装：通过 Docker 或用 Python 搭建。官网下分别有以下的两个介绍：<br>Docker 安装 <a href=\"https://docs.sentry.io/server/installation/docker/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/server/installation/docker/</a><br>Python 安装 <a href=\"https://docs.sentry.io/server/installation/python/\" target=\"_blank\" rel=\"noopener\">https://docs.sentry.io/server/installation/python/</a><br>我们采用的是 docker 安装方式，如果是采用 docker 安装的方式，那么还有一种更加便捷的方式，那么就是采用 docker-compose 了，具体安装步骤如下：</p>\n<p>注意，通过 Docker 本地搭建 Sentry 的时候，需要 docker 版本为 1.10.0 以上，docker-compose 版本为 1.17.0 以上，同时要求最低有 3GB 的可用内存。</p>\n<ol>\n<li>安装 docker、docker-compose</li>\n</ol>\n<p>这里采用 yum 安装，具体安装步骤如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装一些必要的系统工具</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加软件源信息</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新 yum 缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装 Docker-ce</span></span><br><span class=\"line\">yum -y install docker-ce</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动 Docker 后台服务</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载docket-compose</span></span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改权限</span></span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 sentry</li>\n</ol>\n<p>其实 sentry 社区了提供一个基于 docker-composed 的开源项目，通过它我们可以一键部署 sentry。首先我克隆该项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/getsentry/onpremise.git</span><br><span class=\"line\">cd onpremise</span><br><span class=\"line\">-rw-r--r-- 1 root root  2017 Oct 15 22:27 config.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root  1427 Oct 16 16:27 docker-compose.yml</span><br><span class=\"line\">-rw-r--r-- 1 root root    43 Oct 15 18:05 Dockerfile</span><br><span class=\"line\">-rwxr-xr-x 1 root root  2766 Oct 15 18:05 install.sh</span><br><span class=\"line\">-rw-r--r-- 1 root root 11356 Oct 15 18:05 LICENSE</span><br><span class=\"line\">-rw-r--r-- 1 root root   548 Oct 15 18:05 Makefile</span><br><span class=\"line\">-rw-r--r-- 1 root root  2167 Oct 15 18:05 README.md</span><br><span class=\"line\">-rw-r--r-- 1 root root    42 Oct 16 17:24 requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 11493 Oct 15 18:05 sentry.conf.py</span><br><span class=\"line\">-rwxr-xr-x 1 root root  1020 Oct 15 18:05 test.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果并没有特殊要求或者额外的组件配置的话，可以直接运行 ./install.sh 将 sentry 及其依赖都通过 docker 安装。由于我们 redis 和 postgresql 是采用阿里云托管的，所以我们不能采用这种方式进行安装。具体步骤如下：</p>\n<p>2.1 创建环境变量文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建环境变量文件.env,根据.env.example拷贝一份即可</span></span><br><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>2.2 修改 docker-compose.xml 文件</p>\n<p>删除 redis、postgresql 等镜像依赖，并配置容器的时区，具体配置内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '3.4'</span><br><span class=\"line\"></span><br><span class=\"line\">x-defaults: &amp;defaults</span><br><span class=\"line\">  restart: unless-stopped</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    context: .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  depends_on:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - postgres</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - memcached</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - smtp</span></span><br><span class=\"line\">  env_file: .env</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 时区配置</span></span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_MEMCACHED_HOST: memcached</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_REDIS_HOST: redis</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_POSTGRES_HOST: postgres</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    SENTRY_EMAIL_HOST: smtp</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - sentry-data:/var/lib/sentry/files</span><br><span class=\"line\">    # 时区配置</span><br><span class=\"line\">    - /etc/localtime:/etc/localtime:ro</span><br><span class=\"line\">    - /etc/timezone:/etc/timezone:ro</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  smtp:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: tianon/exim4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\"docker-compose.yml\" [readonly] 72L, 1432C                                                                                                         1,1           Top</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  memcached:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: memcached:1.5-alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  redis:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: redis:3.2-alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  postgres:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    restart: unless-stopped</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    image: postgres:9.5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    volumes:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      - sentry-postgres:/var/lib/postgresql/data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  web:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    #web端口号，默认为9000</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - '9000:9000'</span><br><span class=\"line\"></span><br><span class=\"line\">  cron:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run cron</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> work为了保证高可用，起了两个节点</span></span><br><span class=\"line\">  worker1:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run worker</span><br><span class=\"line\"></span><br><span class=\"line\">  worker2:</span><br><span class=\"line\">    &lt;&lt;: *defaults</span><br><span class=\"line\">    command: run worker</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">    sentry-data:</span><br><span class=\"line\">      external: true</span><br><span class=\"line\">    sentry-postgres:</span><br><span class=\"line\">      external: true</span><br></pre></td></tr></table></figure>\n\n<p>2.3 构建 docker-compose 镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build --pull</span><br></pre></td></tr></table></figure>\n\n<p>2.4 生成 sentry 密钥</p>\n<p>sentry 是用于 sentry 容器内部免密通信，并把这个值配置到 .env 的 SENTRY_SECRET_KEY key 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure>\n\n<p>2.5 配置 redis 和 postgresql 连接信息</p>\n<p>在.env 文件中添加以下配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">秘钥，由于容器内部免密通信</span></span><br><span class=\"line\">SENTRY_SECRET_KEY=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg host</span></span><br><span class=\"line\">SENTRY_POSTGRES_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg port</span></span><br><span class=\"line\">SENTRY_POSTGRES_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 数据库名称</span></span><br><span class=\"line\">SENTRY_DB_NAME=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 用户</span></span><br><span class=\"line\">SENTRY_DB_USER=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">pg 用户密码</span></span><br><span class=\"line\">SENTRY_DB_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis host</span></span><br><span class=\"line\">SENTRY_REDIS_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis passowrd</span></span><br><span class=\"line\">SENTRY_REDIS_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis 端口号</span></span><br><span class=\"line\">SENTRY_REDIS_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">redis 数据名</span></span><br><span class=\"line\">SENTRY_REDIS_DB=</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里 postgresql 官方建议采用 9.5 和 9.6，由于阿里云没有这两个版本，所以我们采用 10 的版本。目前运行没有发现任何问题。redis 需要 3.2 以上版本，并且 sentry 不支持集群版的 redis。我们采用的 4.0 单机主从版。进行 Web 服务迁移</p>\n<p>2.6 进行 Web 服务迁移</p>\n<p>主要是初始化表结构和建用户等操作。具体操作执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure>\n\n<p>注意：注意在这个过程中命令行会提示你是否创建超级用户，如果确定，则输入邮箱和密码。如果没有创建用户，可以在升级结束后可以手动创建一个用户，具体执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose run --rm web createuser</span><br></pre></td></tr></table></figure>\n\n<p>2.7 运行 sentry</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动容器</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置邮件信息</li>\n</ol>\n<p>当 sentry 采集到了异常信息就可以通过邮件的方式，发送给指定的处理人。而且这些配置信息是无法在 web console 中修改的，具体操作是在.env 环境变量文件，添加以下配置项：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">邮件的发送地址</span></span><br><span class=\"line\">ENTRY_SERVER_EMAIL=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp服务器主机地址</span></span><br><span class=\"line\">SENTRY_EMAIL_HOST=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp 服务器用户</span></span><br><span class=\"line\">SENTRY_EMAIL_USER=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">smtp服务器密码</span></span><br><span class=\"line\">SENTRY_EMAIL_PASSWORD=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> smtp服务器端口,注意如果采用qq的企业邮箱，这里不是foxmail中配置的465，而是25（巨坑）。</span></span><br><span class=\"line\">SENTRY_EMAIL_PORT=</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">是否使用TLS，默认为<span class=\"literal\">false</span></span></span><br><span class=\"line\">SENTRY_EMAIL_USE_TLS=</span><br></pre></td></tr></table></figure>\n\n<p>重启 sentry 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>集成钉钉及时通讯工具</li>\n</ol>\n<p>我们公司使用钉钉作为内部通讯和工作辅助工作，平时工作中大家都可以通过 pc 端和 app 端第一时间查看到消息，并且报警对即时性要求比较高，所以集成钉钉很有必要，下面介绍一下 sentry 集成钉钉的步骤。</p>\n<ol>\n<li>安装 sentry-dingding 插件，sentry 的强大和可扩展是它很受欢迎的原因。目前开源社区相关 sentry 的插件也是很丰富的,sentry 钉钉插件 github 地址：<a href=\"https://github.com/anshengme/sentry-dingding\" target=\"_blank\" rel=\"noopener\">https://github.com/anshengme/sentry-dingding</a>。<br>sentry 为了方便我们安装插件，提供了一个 requirements.txt 文件。我们只需要将我们现需要安装的插件配置进去，重新构建镜像就可以完成安装和集成。修改 requirements.txt：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加钉钉插件</span></span><br><span class=\"line\">sentry-dingding~=0.0.3</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重启 sentry 服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose run --rm web upgrade</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>集成 LDAP</li>\n</ol>\n<p>跟集成钉钉一样，sentry 社区也提供了集成插件，sentry ldap 插件地址：<a href=\"https://github.com/Banno/getsentry-ldap-auth\" target=\"_blank\" rel=\"noopener\">https://github.com/Banno/getsentry-ldap-auth</a>。 1.安装 ldap 插件，这里跟安装钉钉插件有一定区别，钉钉是直接配置在 requirements.txt 中就可以了。而 ldap 插件如果采用这样的方式可能会报错，原因是 ldap 插件需要依赖 python-ldap 相关环节，所以我们需要在先安装这些依赖。具体安装步骤如下：</p>\n<ol>\n<li>安装 sentry ldap 插件<br>修改 DokerFile 文件，在文件添加以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">切换成国内的源，提高下载速度。但是貌似没啥用，下载还是很慢，后面在看看是什么原因</span></span><br><span class=\"line\">RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class=\"line\">RUN apt-get clean</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更新源，这一步很重要不能省略，否则后面会下载失败</span></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装python-ldap相关依赖</span></span><br><span class=\"line\">RUN apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装sentry-ldap插件</span></span><br><span class=\"line\">RUN pip install sentry-ldap-auth</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 ldap 插件<br>在 sentry.conf.py 文件添加以下配置项:</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ldap</span><br><span class=\"line\"><span class=\"keyword\">from</span> django_auth_ldap.config <span class=\"keyword\">import</span> LDAPSearch, GroupOfUniqueNamesType</span><br><span class=\"line\"><span class=\"comment\">#设置ldap服务器地址</span></span><br><span class=\"line\">AUTH_LDAP_SERVER_URI = <span class=\"string\">'ldap://secad.poizon.com:3489'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap管理员账号</span></span><br><span class=\"line\">AUTH_LDAP_BIND_DN = <span class=\"string\">'xxx'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap管理员密码</span></span><br><span class=\"line\">AUTH_LDAP_BIND_PASSWORD = <span class=\"string\">'xxxxx'</span></span><br><span class=\"line\"><span class=\"comment\">#ldap搜索路径，这里配置成技术部，需要注意如果有中文需要转成unicode的格式</span></span><br><span class=\"line\">OU=unicode(<span class=\"string\">'OU=技术部,OU=识装,DC=sz,DC=du'</span>, <span class=\"string\">'utf8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_USER_SEARCH = LDAPSearch(</span><br><span class=\"line\">    OU,</span><br><span class=\"line\">    ldap.SCOPE_SUBTREE,</span><br><span class=\"line\">    <span class=\"string\">'(mail=%(user)s)'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class=\"line\">    <span class=\"string\">''</span>,</span><br><span class=\"line\">    ldap.SCOPE_SUBTREE,</span><br><span class=\"line\">    <span class=\"string\">'(objectClass=groupOfUniqueNames)'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()</span><br><span class=\"line\">AUTH_LDAP_REQUIRE_GROUP = <span class=\"literal\">None</span></span><br><span class=\"line\">AUTH_LDAP_DENY_GROUP = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'email'</span>: <span class=\"string\">'mail'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AUTH_LDAP_FIND_GROUP_PERMS = <span class=\"literal\">False</span></span><br><span class=\"line\">AUTH_LDAP_CACHE_GROUPS = <span class=\"literal\">True</span></span><br><span class=\"line\">AUTH_LDAP_GROUP_CACHE_TIMEOUT = <span class=\"number\">3600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果ldap认证成功，默认给用户加入poizon组织中</span></span><br><span class=\"line\">AUTH_LDAP_DEFAULT_SENTRY_ORGANIZATION = <span class=\"string\">u'poizon'</span></span><br><span class=\"line\"><span class=\"comment\">#默认的用户的角色是member</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_ORGANIZATION_ROLE_TYPE = <span class=\"string\">'member'</span></span><br><span class=\"line\"><span class=\"comment\">#开通相应的操作权限</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_ORGANIZATION_GLOBAL_ACCESS = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">#指定sentry的username字段名称</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_USERNAME_FIELD = <span class=\"string\">'uid'</span></span><br><span class=\"line\"><span class=\"comment\">#指定sentry的角色和ldap的角色的绑定关系，这里我们暂时不设置</span></span><br><span class=\"line\">AUTH_LDAP_SENTRY_GROUP_ROLE_MAPPING = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">#扩展登录方式，采用Ldap的方式进行认证</span></span><br><span class=\"line\">AUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + (</span><br><span class=\"line\">    <span class=\"string\">'sentry_ldap_auth.backend.SentryLdapBackend'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#LOG配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">'django_auth_ldap'</span>)</span><br><span class=\"line\">logger.addHandler(logging.StreamHandler())</span><br><span class=\"line\">logger.setLevel(<span class=\"string\">'DEBUG'</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"小程序带二维码分享图注意点","catalog":true,"date":"2021-01-21T09:00:40.000Z","subtitle":null,"header-img":null,"_content":"\n## 前提\n\n目前小程序都是在`Taro`基础上开发\n\n## 注意点\n\n### 获取节点\n\n目前taro上获取canvas节点，有两种方法\n\n1. type + id；\n2. canvas-id；\n   \n两者不能共存\n\n当使用type时，可以通过`createSelectorQuery`方法获取canvas节点获取支持 2D 和 WebGL 绘图上下文的RenderingContext\n\n```javascript\nTaro.nextTick(() => {\n  const query = Taro.createSelectorQuery()\n  query.select('#aniLoading').fields({ node: true, size: true, context: true }).exec(res => {\n    if (!res || !res[0]) return\n    const canvas = res[0].node;\n    const context = canvas.getContext('2d');  \n  }) \n})    \n```\ncanvas-id方式可通过Taro.createCanvasContext(canvasId)获取canvas上下文的CanvasContext\n\n```javascript\nconst ctx = Taro.createCanvasContext(canvasId)\n```\n\n由于小程序本身的特性，无法动态创建canvas节点，必须在节点结构提前创建canvas节点\n\n```javascript\n <Canvas\n    canvasId='canvas'\n    style='width:750px;height:1448px;'\n    className='fortune_canvas'\n /> \n```\n\n## 踩坑点\n\n1. 同一页面不能存在相同的canvas-id；\n2. <span style=\"color: red;\">canvas元素在Ios真机设备滚动页面下无法上滑；</span>\n\n[![yMg1gJ.md.png](https://s3.ax1x.com/2021/02/03/yMg1gJ.md.png)](https://imgchr.com/i/yMg1gJ)\n\n#### drawImage和base64\n\ncanvas内drawImage绘制图片，需要先通过`getImageInfo`或`downloadFile`，将网络图片存到本地之后拿到图片path、宽高等信息来进行绘制\n\n无法直接绘制base64的图，因为base64不是网络地址，就无法通过getImageInfo和downloadFile获取图片信息，可参考官方issue提出的相关问题和解决方案尝试\n\n[小程序生产海报的两种常见方式链接](https://developers.weixin.qq.com/community/develop/article/doc/00008c13228078898f2b0bcf751413)\n\n### 层级\n\ncanvas组件层级默认会比普通的view层级高，所以一般无法在canvas组件上再放置其他元素，但如果使用cover-view组件包裹canvas组件，是可以设置层级。\n\n### 二维码\n\n目前采用的是[weapp-qrcode](https://github.com/dillonlfy/weapp-qrcod)来绘制小程序上的二维码，本身也是基于qrcodejs（目前大多数H5上二维码绘制的基础库），测试下来在小程序还是会有一些问题\n\n保存canvas绘制图片时，安卓机器上二维码会比较糊，ios正常，导致wx没法识别，但是在页面绘制的二维码没有此问题\n\n[![yMgnEV.png](https://s3.ax1x.com/2021/02/03/yMgnEV.png)](https://imgchr.com/i/yMgnEV)\n\n目前调试下来，只有在需要绘制保存的图片的二维码时，加上`typeNumber`来进行调节二维码绘制路径的细粒度<span style=\"color: red;\">（正常页面展示时不需要加此参数）</span>\n\n[![yMguNT.png](https://s3.ax1x.com/2021/02/03/yMguNT.png)](https://imgchr.com/i/yMguNT)\n\n```javascript\nnew QRCode(canvasId, {\n  ...\n  correctLevel: QRCode.CorrectLevel.M,\n  typeNumber: 8\n});\n```\n\n#### 普通二维码跳转小程序\n\n如果绘制的是普通二维码，需要通过映射二维码地址跳转小程序指定页面   \n\n小程序后台-开发管理-开发设置-扫普通链接二维码打开小程序\n\n[![yMgK4U.md.png](https://s3.ax1x.com/2021/02/03/yMgK4U.md.png)](https://imgchr.com/i/yMgK4U)\n\n需要注意的是二维码映射关系跳转跳转对应的小程序版本（开发、体验、线上版本），测试的地址如果携带参数则必须严格匹配\n\n[![yMgl34.md.png](https://s3.ax1x.com/2021/02/03/yMgl34.md.png)](https://imgchr.com/i/yMgl34)\n\n此方案更多是为了解决线下二维码已经铺设二维码，兼容原先的二维码跳转小程序场景，并不是一个常用的二维码跳转方案。\n\n官方有提供获取小程序码，常规的api每天有数量限制，可以使用如下api，若采用官方生成小程序码的方案，完全可以弃用普通二维码绘制、映射跳转一系列繁琐步骤，但此方案需要依赖后端帮助获取。\n\n[官方不限制获取小程序码](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n","source":"_posts/小程序带二维码分享图注意点.md","raw":"---\ntitle: 小程序带二维码分享图注意点\ncatalog: true\ndate: 2021-01-21 17:00:40\nsubtitle:\nheader-img:\ntags: 小程序\ncategories: 前端\n---\n\n## 前提\n\n目前小程序都是在`Taro`基础上开发\n\n## 注意点\n\n### 获取节点\n\n目前taro上获取canvas节点，有两种方法\n\n1. type + id；\n2. canvas-id；\n   \n两者不能共存\n\n当使用type时，可以通过`createSelectorQuery`方法获取canvas节点获取支持 2D 和 WebGL 绘图上下文的RenderingContext\n\n```javascript\nTaro.nextTick(() => {\n  const query = Taro.createSelectorQuery()\n  query.select('#aniLoading').fields({ node: true, size: true, context: true }).exec(res => {\n    if (!res || !res[0]) return\n    const canvas = res[0].node;\n    const context = canvas.getContext('2d');  \n  }) \n})    \n```\ncanvas-id方式可通过Taro.createCanvasContext(canvasId)获取canvas上下文的CanvasContext\n\n```javascript\nconst ctx = Taro.createCanvasContext(canvasId)\n```\n\n由于小程序本身的特性，无法动态创建canvas节点，必须在节点结构提前创建canvas节点\n\n```javascript\n <Canvas\n    canvasId='canvas'\n    style='width:750px;height:1448px;'\n    className='fortune_canvas'\n /> \n```\n\n## 踩坑点\n\n1. 同一页面不能存在相同的canvas-id；\n2. <span style=\"color: red;\">canvas元素在Ios真机设备滚动页面下无法上滑；</span>\n\n[![yMg1gJ.md.png](https://s3.ax1x.com/2021/02/03/yMg1gJ.md.png)](https://imgchr.com/i/yMg1gJ)\n\n#### drawImage和base64\n\ncanvas内drawImage绘制图片，需要先通过`getImageInfo`或`downloadFile`，将网络图片存到本地之后拿到图片path、宽高等信息来进行绘制\n\n无法直接绘制base64的图，因为base64不是网络地址，就无法通过getImageInfo和downloadFile获取图片信息，可参考官方issue提出的相关问题和解决方案尝试\n\n[小程序生产海报的两种常见方式链接](https://developers.weixin.qq.com/community/develop/article/doc/00008c13228078898f2b0bcf751413)\n\n### 层级\n\ncanvas组件层级默认会比普通的view层级高，所以一般无法在canvas组件上再放置其他元素，但如果使用cover-view组件包裹canvas组件，是可以设置层级。\n\n### 二维码\n\n目前采用的是[weapp-qrcode](https://github.com/dillonlfy/weapp-qrcod)来绘制小程序上的二维码，本身也是基于qrcodejs（目前大多数H5上二维码绘制的基础库），测试下来在小程序还是会有一些问题\n\n保存canvas绘制图片时，安卓机器上二维码会比较糊，ios正常，导致wx没法识别，但是在页面绘制的二维码没有此问题\n\n[![yMgnEV.png](https://s3.ax1x.com/2021/02/03/yMgnEV.png)](https://imgchr.com/i/yMgnEV)\n\n目前调试下来，只有在需要绘制保存的图片的二维码时，加上`typeNumber`来进行调节二维码绘制路径的细粒度<span style=\"color: red;\">（正常页面展示时不需要加此参数）</span>\n\n[![yMguNT.png](https://s3.ax1x.com/2021/02/03/yMguNT.png)](https://imgchr.com/i/yMguNT)\n\n```javascript\nnew QRCode(canvasId, {\n  ...\n  correctLevel: QRCode.CorrectLevel.M,\n  typeNumber: 8\n});\n```\n\n#### 普通二维码跳转小程序\n\n如果绘制的是普通二维码，需要通过映射二维码地址跳转小程序指定页面   \n\n小程序后台-开发管理-开发设置-扫普通链接二维码打开小程序\n\n[![yMgK4U.md.png](https://s3.ax1x.com/2021/02/03/yMgK4U.md.png)](https://imgchr.com/i/yMgK4U)\n\n需要注意的是二维码映射关系跳转跳转对应的小程序版本（开发、体验、线上版本），测试的地址如果携带参数则必须严格匹配\n\n[![yMgl34.md.png](https://s3.ax1x.com/2021/02/03/yMgl34.md.png)](https://imgchr.com/i/yMgl34)\n\n此方案更多是为了解决线下二维码已经铺设二维码，兼容原先的二维码跳转小程序场景，并不是一个常用的二维码跳转方案。\n\n官方有提供获取小程序码，常规的api每天有数量限制，可以使用如下api，若采用官方生成小程序码的方案，完全可以弃用普通二维码绘制、映射跳转一系列繁琐步骤，但此方案需要依赖后端帮助获取。\n\n[官方不限制获取小程序码](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n","slug":"小程序带二维码分享图注意点","published":1,"updated":"2024-02-20T06:48:45.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijv8003jlwxasxals4dq","content":"<h2><span id=\"前提\">前提</span></h2><p>目前小程序都是在<code>Taro</code>基础上开发</p>\n<h2><span id=\"注意点\">注意点</span></h2><h3><span id=\"获取节点\">获取节点</span></h3><p>目前taro上获取canvas节点，有两种方法</p>\n<ol>\n<li><p>type + id；</p>\n</li>\n<li><p>canvas-id；</p>\n<p>两者不能共存</p>\n</li>\n</ol>\n<p>当使用type时，可以通过<code>createSelectorQuery</code>方法获取canvas节点获取支持 2D 和 WebGL 绘图上下文的RenderingContext</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Taro.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = Taro.createSelectorQuery()</span><br><span class=\"line\">  query.select(<span class=\"string\">'#aniLoading'</span>).fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span>, <span class=\"attr\">context</span>: <span class=\"literal\">true</span> &#125;).exec(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res || !res[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);  </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>canvas-id方式可通过Taro.createCanvasContext(canvasId)获取canvas上下文的CanvasContext</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = Taro.createCanvasContext(canvasId)</span><br></pre></td></tr></table></figure>\n\n<p>由于小程序本身的特性，无法动态创建canvas节点，必须在节点结构提前创建canvas节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Canvas</span><br><span class=\"line\">   canvasId=<span class=\"string\">'canvas'</span></span><br><span class=\"line\">   style=<span class=\"string\">'width:750px;height:1448px;'</span></span><br><span class=\"line\">   className=<span class=\"string\">'fortune_canvas'</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"踩坑点\">踩坑点</span></h2><ol>\n<li>同一页面不能存在相同的canvas-id；</li>\n<li><span style=\"color: red;\">canvas元素在Ios真机设备滚动页面下无法上滑；</span></li>\n</ol>\n<p><a href=\"https://imgchr.com/i/yMg1gJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMg1gJ.md.png\" alt=\"yMg1gJ.md.png\"></a></p>\n<h4><span id=\"drawimage和base64\">drawImage和base64</span></h4><p>canvas内drawImage绘制图片，需要先通过<code>getImageInfo</code>或<code>downloadFile</code>，将网络图片存到本地之后拿到图片path、宽高等信息来进行绘制</p>\n<p>无法直接绘制base64的图，因为base64不是网络地址，就无法通过getImageInfo和downloadFile获取图片信息，可参考官方issue提出的相关问题和解决方案尝试</p>\n<p><a href=\"https://developers.weixin.qq.com/community/develop/article/doc/00008c13228078898f2b0bcf751413\" target=\"_blank\" rel=\"noopener\">小程序生产海报的两种常见方式链接</a></p>\n<h3><span id=\"层级\">层级</span></h3><p>canvas组件层级默认会比普通的view层级高，所以一般无法在canvas组件上再放置其他元素，但如果使用cover-view组件包裹canvas组件，是可以设置层级。</p>\n<h3><span id=\"二维码\">二维码</span></h3><p>目前采用的是<a href=\"https://github.com/dillonlfy/weapp-qrcod\" target=\"_blank\" rel=\"noopener\">weapp-qrcode</a>来绘制小程序上的二维码，本身也是基于qrcodejs（目前大多数H5上二维码绘制的基础库），测试下来在小程序还是会有一些问题</p>\n<p>保存canvas绘制图片时，安卓机器上二维码会比较糊，ios正常，导致wx没法识别，但是在页面绘制的二维码没有此问题</p>\n<p><a href=\"https://imgchr.com/i/yMgnEV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgnEV.png\" alt=\"yMgnEV.png\"></a></p>\n<p>目前调试下来，只有在需要绘制保存的图片的二维码时，加上<code>typeNumber</code>来进行调节二维码绘制路径的细粒度<span style=\"color: red;\">（正常页面展示时不需要加此参数）</span></p>\n<p><a href=\"https://imgchr.com/i/yMguNT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMguNT.png\" alt=\"yMguNT.png\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> QRCode(canvasId, &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.M,</span><br><span class=\"line\">  typeNumber: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"普通二维码跳转小程序\">普通二维码跳转小程序</span></h4><p>如果绘制的是普通二维码，需要通过映射二维码地址跳转小程序指定页面   </p>\n<p>小程序后台-开发管理-开发设置-扫普通链接二维码打开小程序</p>\n<p><a href=\"https://imgchr.com/i/yMgK4U\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgK4U.md.png\" alt=\"yMgK4U.md.png\"></a></p>\n<p>需要注意的是二维码映射关系跳转跳转对应的小程序版本（开发、体验、线上版本），测试的地址如果携带参数则必须严格匹配</p>\n<p><a href=\"https://imgchr.com/i/yMgl34\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgl34.md.png\" alt=\"yMgl34.md.png\"></a></p>\n<p>此方案更多是为了解决线下二维码已经铺设二维码，兼容原先的二维码跳转小程序场景，并不是一个常用的二维码跳转方案。</p>\n<p>官方有提供获取小程序码，常规的api每天有数量限制，可以使用如下api，若采用官方生成小程序码的方案，完全可以弃用普通二维码绘制、映射跳转一系列繁琐步骤，但此方案需要依赖后端帮助获取。</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\" target=\"_blank\" rel=\"noopener\">官方不限制获取小程序码</a></p>\n","site":{"data":{}},"length":1605,"excerpt":"","more":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>目前小程序都是在<code>Taro</code>基础上开发</p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><h3 id=\"获取节点\"><a href=\"#获取节点\" class=\"headerlink\" title=\"获取节点\"></a>获取节点</h3><p>目前taro上获取canvas节点，有两种方法</p>\n<ol>\n<li><p>type + id；</p>\n</li>\n<li><p>canvas-id；</p>\n<p>两者不能共存</p>\n</li>\n</ol>\n<p>当使用type时，可以通过<code>createSelectorQuery</code>方法获取canvas节点获取支持 2D 和 WebGL 绘图上下文的RenderingContext</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Taro.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = Taro.createSelectorQuery()</span><br><span class=\"line\">  query.select(<span class=\"string\">'#aniLoading'</span>).fields(&#123; <span class=\"attr\">node</span>: <span class=\"literal\">true</span>, <span class=\"attr\">size</span>: <span class=\"literal\">true</span>, <span class=\"attr\">context</span>: <span class=\"literal\">true</span> &#125;).exec(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res || !res[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = res[<span class=\"number\">0</span>].node;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);  </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>canvas-id方式可通过Taro.createCanvasContext(canvasId)获取canvas上下文的CanvasContext</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = Taro.createCanvasContext(canvasId)</span><br></pre></td></tr></table></figure>\n\n<p>由于小程序本身的特性，无法动态创建canvas节点，必须在节点结构提前创建canvas节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Canvas</span><br><span class=\"line\">   canvasId=<span class=\"string\">'canvas'</span></span><br><span class=\"line\">   style=<span class=\"string\">'width:750px;height:1448px;'</span></span><br><span class=\"line\">   className=<span class=\"string\">'fortune_canvas'</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"踩坑点\"><a href=\"#踩坑点\" class=\"headerlink\" title=\"踩坑点\"></a>踩坑点</h2><ol>\n<li>同一页面不能存在相同的canvas-id；</li>\n<li><span style=\"color: red;\">canvas元素在Ios真机设备滚动页面下无法上滑；</span></li>\n</ol>\n<p><a href=\"https://imgchr.com/i/yMg1gJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMg1gJ.md.png\" alt=\"yMg1gJ.md.png\"></a></p>\n<h4 id=\"drawImage和base64\"><a href=\"#drawImage和base64\" class=\"headerlink\" title=\"drawImage和base64\"></a>drawImage和base64</h4><p>canvas内drawImage绘制图片，需要先通过<code>getImageInfo</code>或<code>downloadFile</code>，将网络图片存到本地之后拿到图片path、宽高等信息来进行绘制</p>\n<p>无法直接绘制base64的图，因为base64不是网络地址，就无法通过getImageInfo和downloadFile获取图片信息，可参考官方issue提出的相关问题和解决方案尝试</p>\n<p><a href=\"https://developers.weixin.qq.com/community/develop/article/doc/00008c13228078898f2b0bcf751413\" target=\"_blank\" rel=\"noopener\">小程序生产海报的两种常见方式链接</a></p>\n<h3 id=\"层级\"><a href=\"#层级\" class=\"headerlink\" title=\"层级\"></a>层级</h3><p>canvas组件层级默认会比普通的view层级高，所以一般无法在canvas组件上再放置其他元素，但如果使用cover-view组件包裹canvas组件，是可以设置层级。</p>\n<h3 id=\"二维码\"><a href=\"#二维码\" class=\"headerlink\" title=\"二维码\"></a>二维码</h3><p>目前采用的是<a href=\"https://github.com/dillonlfy/weapp-qrcod\" target=\"_blank\" rel=\"noopener\">weapp-qrcode</a>来绘制小程序上的二维码，本身也是基于qrcodejs（目前大多数H5上二维码绘制的基础库），测试下来在小程序还是会有一些问题</p>\n<p>保存canvas绘制图片时，安卓机器上二维码会比较糊，ios正常，导致wx没法识别，但是在页面绘制的二维码没有此问题</p>\n<p><a href=\"https://imgchr.com/i/yMgnEV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgnEV.png\" alt=\"yMgnEV.png\"></a></p>\n<p>目前调试下来，只有在需要绘制保存的图片的二维码时，加上<code>typeNumber</code>来进行调节二维码绘制路径的细粒度<span style=\"color: red;\">（正常页面展示时不需要加此参数）</span></p>\n<p><a href=\"https://imgchr.com/i/yMguNT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMguNT.png\" alt=\"yMguNT.png\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> QRCode(canvasId, &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.M,</span><br><span class=\"line\">  typeNumber: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"普通二维码跳转小程序\"><a href=\"#普通二维码跳转小程序\" class=\"headerlink\" title=\"普通二维码跳转小程序\"></a>普通二维码跳转小程序</h4><p>如果绘制的是普通二维码，需要通过映射二维码地址跳转小程序指定页面   </p>\n<p>小程序后台-开发管理-开发设置-扫普通链接二维码打开小程序</p>\n<p><a href=\"https://imgchr.com/i/yMgK4U\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgK4U.md.png\" alt=\"yMgK4U.md.png\"></a></p>\n<p>需要注意的是二维码映射关系跳转跳转对应的小程序版本（开发、体验、线上版本），测试的地址如果携带参数则必须严格匹配</p>\n<p><a href=\"https://imgchr.com/i/yMgl34\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s3.ax1x.com/2021/02/03/yMgl34.md.png\" alt=\"yMgl34.md.png\"></a></p>\n<p>此方案更多是为了解决线下二维码已经铺设二维码，兼容原先的二维码跳转小程序场景，并不是一个常用的二维码跳转方案。</p>\n<p>官方有提供获取小程序码，常规的api每天有数量限制，可以使用如下api，若采用官方生成小程序码的方案，完全可以弃用普通二维码绘制、映射跳转一系列繁琐步骤，但此方案需要依赖后端帮助获取。</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\" target=\"_blank\" rel=\"noopener\">官方不限制获取小程序码</a></p>\n"},{"title":"堆排序入门","catalog":true,"date":"2020-12-02T03:06:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 简介\n\n  堆排序是指利用堆这种数据结构所设计的一种排序算法。\n  利用最大堆实现升序, 最小堆实现降序。\n  因为最大堆的根父节点一定是最大的, 让它和队尾元素互换, 然后在从堆中排除最后一个元素, 并复原最大堆，循环 n-1次。\n  \n## 堆的特点\n\n- 堆是一个近似完全二叉树的结构；\n- 堆分为 最大堆和最小堆；\n- 最大堆父节点都大于子节点，最小堆父节点都小于子节点；\n- 第i个元素的左子节点：2*i + 1  （i为父节点index）\n- 第i个元素的右子节点：2*i + 2\n- 第i个元素的父节点： (n - 1) / 2\n- 最后一个非叶子节点为 Math.floor(arr.length / 2) - 1\n\n## 过程\n\n### 基本过程\n\nmax_heapify 过程：其时间复杂度为O(lgn)\n\nbuild_max_heap 过程：从无序数组构建最大堆。具有线性时间复杂度。\n\nheap_sort 过程：堆排序过程。时间复杂度是O(nlgn)\n\n堆排序的关键点在于如何构建最大堆\n\n### 堆排序原理\n\n1.首先，构建最大堆，此时堆的大小与数组大小相等，\n\n2.然后，把堆顶元素（堆中最大的元素 a ）与堆尾元素交换，\n\n3.此时 a 元素已经放到了正确的位置，\n\n4.堆的大小减去1，\n\n5.对堆顶的元素执行 max_heapify 过程，维持最大堆的性质。之后堆顶又是目前堆中的最大元素了。\n\n6.从 步骤2 循环，直到堆中只剩下一个元素（该元素是数组中最小元素，且此时位于下标 0 的位置）\n\n示意图如下：\n\n![最大堆的构建过程](https://i.loli.net/2020/03/21/Mqn8abVcAim9GTu.png)\n\n## 实现\n\n```javascript\nlet arrs = [7, 1, 13, 9, 11, 5, 8]\n\nconsole.log(`原始序列：`, arrs)\n\nconst newArrs = heapSort(arrs)\n\nconsole.log(`排序后：`, arrs)\n\nfunction swap(arr, i, j) {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\n// 堆调整\nfunction maxHeapify(arr, i, len) {\n    let left = 2 * i + 1,\n        right = 2 * i + 2,\n        largest = i\n\n    if (left < len && arr[left] > arr[largest]) largest = left\n    if (right < len && arr[right] > arr[largest]) largest = right\n\n    // 不等于初始值 说明左右节点有比原先父节点大的数值\n    if (largest !== i) {\n        swap(arr, i, largest)\n        // 原先的父节点位置和现在父节点交换位置后 在原先的节点位置处是否还是最大值 需要判断比较\n        maxHeapify(arr, largest, len)\n    }\n}\n\n// 构建最大堆（大顶堆）\nfunction buildMaxHeap(arr = []) {\n    // 初始化最大堆 从最后一个非叶子节点开始\n    for(let i = Math.floor(arr.length / 2 - 1); i >= 0; i--) {\n        maxHeapify(arr, i, arr.length)\n    }\n}\n\n// 堆排序\nfunction heapSort(arr) {\n    if (!arr || arr.length === 0) return new Error('数组为null或者长度为0')\n    let newArr = []\n\n    buildMaxHeap(arr)\n\n    // 大顶堆的第一个元素与堆内最后一个元素交换位置 并将堆大小-1 循环n-1次\n    for(let i = arr.length - 1; i > 0; i--) {\n        newArr.push(arr[0])\n        swap(arr, 0, i)\n        arr.length--\n        maxHeapify(arr, 0, arr.length)\n    }\n\n    return newArr\n}\n\n```\n\n## 时间复杂度\n\nbuildMaxHeap使用O(N)的时间，元素下滤需要O(logN)，需要下滤N-1次，所以总共需要O(N + (N - 1)logN) = O(NlogN)。所以复杂度稳定在O(NlogN)。\n","source":"_posts/堆排序.md","raw":"---\ntitle: 堆排序入门\ncatalog: true\ndate: 2020-12-02 11:06:43\nsubtitle:\nheader-img:\ntags: algorithm\ncategories: 前端\n---\n\n## 简介\n\n  堆排序是指利用堆这种数据结构所设计的一种排序算法。\n  利用最大堆实现升序, 最小堆实现降序。\n  因为最大堆的根父节点一定是最大的, 让它和队尾元素互换, 然后在从堆中排除最后一个元素, 并复原最大堆，循环 n-1次。\n  \n## 堆的特点\n\n- 堆是一个近似完全二叉树的结构；\n- 堆分为 最大堆和最小堆；\n- 最大堆父节点都大于子节点，最小堆父节点都小于子节点；\n- 第i个元素的左子节点：2*i + 1  （i为父节点index）\n- 第i个元素的右子节点：2*i + 2\n- 第i个元素的父节点： (n - 1) / 2\n- 最后一个非叶子节点为 Math.floor(arr.length / 2) - 1\n\n## 过程\n\n### 基本过程\n\nmax_heapify 过程：其时间复杂度为O(lgn)\n\nbuild_max_heap 过程：从无序数组构建最大堆。具有线性时间复杂度。\n\nheap_sort 过程：堆排序过程。时间复杂度是O(nlgn)\n\n堆排序的关键点在于如何构建最大堆\n\n### 堆排序原理\n\n1.首先，构建最大堆，此时堆的大小与数组大小相等，\n\n2.然后，把堆顶元素（堆中最大的元素 a ）与堆尾元素交换，\n\n3.此时 a 元素已经放到了正确的位置，\n\n4.堆的大小减去1，\n\n5.对堆顶的元素执行 max_heapify 过程，维持最大堆的性质。之后堆顶又是目前堆中的最大元素了。\n\n6.从 步骤2 循环，直到堆中只剩下一个元素（该元素是数组中最小元素，且此时位于下标 0 的位置）\n\n示意图如下：\n\n![最大堆的构建过程](https://i.loli.net/2020/03/21/Mqn8abVcAim9GTu.png)\n\n## 实现\n\n```javascript\nlet arrs = [7, 1, 13, 9, 11, 5, 8]\n\nconsole.log(`原始序列：`, arrs)\n\nconst newArrs = heapSort(arrs)\n\nconsole.log(`排序后：`, arrs)\n\nfunction swap(arr, i, j) {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\n// 堆调整\nfunction maxHeapify(arr, i, len) {\n    let left = 2 * i + 1,\n        right = 2 * i + 2,\n        largest = i\n\n    if (left < len && arr[left] > arr[largest]) largest = left\n    if (right < len && arr[right] > arr[largest]) largest = right\n\n    // 不等于初始值 说明左右节点有比原先父节点大的数值\n    if (largest !== i) {\n        swap(arr, i, largest)\n        // 原先的父节点位置和现在父节点交换位置后 在原先的节点位置处是否还是最大值 需要判断比较\n        maxHeapify(arr, largest, len)\n    }\n}\n\n// 构建最大堆（大顶堆）\nfunction buildMaxHeap(arr = []) {\n    // 初始化最大堆 从最后一个非叶子节点开始\n    for(let i = Math.floor(arr.length / 2 - 1); i >= 0; i--) {\n        maxHeapify(arr, i, arr.length)\n    }\n}\n\n// 堆排序\nfunction heapSort(arr) {\n    if (!arr || arr.length === 0) return new Error('数组为null或者长度为0')\n    let newArr = []\n\n    buildMaxHeap(arr)\n\n    // 大顶堆的第一个元素与堆内最后一个元素交换位置 并将堆大小-1 循环n-1次\n    for(let i = arr.length - 1; i > 0; i--) {\n        newArr.push(arr[0])\n        swap(arr, 0, i)\n        arr.length--\n        maxHeapify(arr, 0, arr.length)\n    }\n\n    return newArr\n}\n\n```\n\n## 时间复杂度\n\nbuildMaxHeap使用O(N)的时间，元素下滤需要O(logN)，需要下滤N-1次，所以总共需要O(N + (N - 1)logN) = O(NlogN)。所以复杂度稳定在O(NlogN)。\n","slug":"堆排序","published":1,"updated":"2024-02-20T06:48:45.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijva003mlwxazzjt9noo","content":"<h2><span id=\"简介\">简介</span></h2><p>  堆排序是指利用堆这种数据结构所设计的一种排序算法。<br>  利用最大堆实现升序, 最小堆实现降序。<br>  因为最大堆的根父节点一定是最大的, 让它和队尾元素互换, 然后在从堆中排除最后一个元素, 并复原最大堆，循环 n-1次。</p>\n<h2><span id=\"堆的特点\">堆的特点</span></h2><ul>\n<li>堆是一个近似完全二叉树的结构；</li>\n<li>堆分为 最大堆和最小堆；</li>\n<li>最大堆父节点都大于子节点，最小堆父节点都小于子节点；</li>\n<li>第i个元素的左子节点：2*i + 1  （i为父节点index）</li>\n<li>第i个元素的右子节点：2*i + 2</li>\n<li>第i个元素的父节点： (n - 1) / 2</li>\n<li>最后一个非叶子节点为 Math.floor(arr.length / 2) - 1</li>\n</ul>\n<h2><span id=\"过程\">过程</span></h2><h3><span id=\"基本过程\">基本过程</span></h3><p>max_heapify 过程：其时间复杂度为O(lgn)</p>\n<p>build_max_heap 过程：从无序数组构建最大堆。具有线性时间复杂度。</p>\n<p>heap_sort 过程：堆排序过程。时间复杂度是O(nlgn)</p>\n<p>堆排序的关键点在于如何构建最大堆</p>\n<h3><span id=\"堆排序原理\">堆排序原理</span></h3><p>1.首先，构建最大堆，此时堆的大小与数组大小相等，</p>\n<p>2.然后，把堆顶元素（堆中最大的元素 a ）与堆尾元素交换，</p>\n<p>3.此时 a 元素已经放到了正确的位置，</p>\n<p>4.堆的大小减去1，</p>\n<p>5.对堆顶的元素执行 max_heapify 过程，维持最大堆的性质。之后堆顶又是目前堆中的最大元素了。</p>\n<p>6.从 步骤2 循环，直到堆中只剩下一个元素（该元素是数组中最小元素，且此时位于下标 0 的位置）</p>\n<p>示意图如下：</p>\n<p><img src=\"https://i.loli.net/2020/03/21/Mqn8abVcAim9GTu.png\" alt=\"最大堆的构建过程\"></p>\n<h2><span id=\"实现\">实现</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrs = [<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`原始序列：`</span>, arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArrs = heapSort(arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`排序后：`</span>, arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[j]</span><br><span class=\"line\">    arr[j] = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆调整</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxHeapify</span>(<span class=\"params\">arr, i, len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>,</span><br><span class=\"line\">        right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>,</span><br><span class=\"line\">        largest = i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) largest = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) largest = right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不等于初始值 说明左右节点有比原先父节点大的数值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest !== i) &#123;</span><br><span class=\"line\">        swap(arr, i, largest)</span><br><span class=\"line\">        <span class=\"comment\">// 原先的父节点位置和现在父节点交换位置后 在原先的节点位置处是否还是最大值 需要判断比较</span></span><br><span class=\"line\">        maxHeapify(arr, largest, len)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建最大堆（大顶堆）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMaxHeap</span>(<span class=\"params\">arr = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化最大堆 从最后一个非叶子节点开始</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span> - <span class=\"number\">1</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        maxHeapify(arr, i, arr.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr || arr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'数组为null或者长度为0'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\"></span><br><span class=\"line\">    buildMaxHeap(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 大顶堆的第一个元素与堆内最后一个元素交换位置 并将堆大小-1 循环n-1次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newArr.push(arr[<span class=\"number\">0</span>])</span><br><span class=\"line\">        swap(arr, <span class=\"number\">0</span>, i)</span><br><span class=\"line\">        arr.length--</span><br><span class=\"line\">        maxHeapify(arr, <span class=\"number\">0</span>, arr.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"时间复杂度\">时间复杂度</span></h2><p>buildMaxHeap使用O(N)的时间，元素下滤需要O(logN)，需要下滤N-1次，所以总共需要O(N + (N - 1)logN) = O(NlogN)。所以复杂度稳定在O(NlogN)。</p>\n","site":{"data":{}},"length":1732,"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>  堆排序是指利用堆这种数据结构所设计的一种排序算法。<br>  利用最大堆实现升序, 最小堆实现降序。<br>  因为最大堆的根父节点一定是最大的, 让它和队尾元素互换, 然后在从堆中排除最后一个元素, 并复原最大堆，循环 n-1次。</p>\n<h2 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h2><ul>\n<li>堆是一个近似完全二叉树的结构；</li>\n<li>堆分为 最大堆和最小堆；</li>\n<li>最大堆父节点都大于子节点，最小堆父节点都小于子节点；</li>\n<li>第i个元素的左子节点：2*i + 1  （i为父节点index）</li>\n<li>第i个元素的右子节点：2*i + 2</li>\n<li>第i个元素的父节点： (n - 1) / 2</li>\n<li>最后一个非叶子节点为 Math.floor(arr.length / 2) - 1</li>\n</ul>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"基本过程\"><a href=\"#基本过程\" class=\"headerlink\" title=\"基本过程\"></a>基本过程</h3><p>max_heapify 过程：其时间复杂度为O(lgn)</p>\n<p>build_max_heap 过程：从无序数组构建最大堆。具有线性时间复杂度。</p>\n<p>heap_sort 过程：堆排序过程。时间复杂度是O(nlgn)</p>\n<p>堆排序的关键点在于如何构建最大堆</p>\n<h3 id=\"堆排序原理\"><a href=\"#堆排序原理\" class=\"headerlink\" title=\"堆排序原理\"></a>堆排序原理</h3><p>1.首先，构建最大堆，此时堆的大小与数组大小相等，</p>\n<p>2.然后，把堆顶元素（堆中最大的元素 a ）与堆尾元素交换，</p>\n<p>3.此时 a 元素已经放到了正确的位置，</p>\n<p>4.堆的大小减去1，</p>\n<p>5.对堆顶的元素执行 max_heapify 过程，维持最大堆的性质。之后堆顶又是目前堆中的最大元素了。</p>\n<p>6.从 步骤2 循环，直到堆中只剩下一个元素（该元素是数组中最小元素，且此时位于下标 0 的位置）</p>\n<p>示意图如下：</p>\n<p><img src=\"https://i.loli.net/2020/03/21/Mqn8abVcAim9GTu.png\" alt=\"最大堆的构建过程\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrs = [<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`原始序列：`</span>, arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArrs = heapSort(arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`排序后：`</span>, arrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[j]</span><br><span class=\"line\">    arr[j] = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆调整</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxHeapify</span>(<span class=\"params\">arr, i, len</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>,</span><br><span class=\"line\">        right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>,</span><br><span class=\"line\">        largest = i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) largest = left</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) largest = right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不等于初始值 说明左右节点有比原先父节点大的数值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest !== i) &#123;</span><br><span class=\"line\">        swap(arr, i, largest)</span><br><span class=\"line\">        <span class=\"comment\">// 原先的父节点位置和现在父节点交换位置后 在原先的节点位置处是否还是最大值 需要判断比较</span></span><br><span class=\"line\">        maxHeapify(arr, largest, len)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建最大堆（大顶堆）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildMaxHeap</span>(<span class=\"params\">arr = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化最大堆 从最后一个非叶子节点开始</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span> - <span class=\"number\">1</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        maxHeapify(arr, i, arr.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr || arr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'数组为null或者长度为0'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\"></span><br><span class=\"line\">    buildMaxHeap(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 大顶堆的第一个元素与堆内最后一个元素交换位置 并将堆大小-1 循环n-1次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        newArr.push(arr[<span class=\"number\">0</span>])</span><br><span class=\"line\">        swap(arr, <span class=\"number\">0</span>, i)</span><br><span class=\"line\">        arr.length--</span><br><span class=\"line\">        maxHeapify(arr, <span class=\"number\">0</span>, arr.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>buildMaxHeap使用O(N)的时间，元素下滤需要O(logN)，需要下滤N-1次，所以总共需要O(N + (N - 1)logN) = O(NlogN)。所以复杂度稳定在O(NlogN)。</p>\n"},{"title":"前端知识点总结","catalog":true,"date":"2018-07-21T02:24:38.000Z","subtitle":null,"header-img":null,"_content":"\n# js 知识点总结\n\n## 1. 解码和编码\n\n> 原因：因为链接里面会有中文或者特殊字符号无法跳转需要进行相关编码解码\n\n**编码**\n\n>\n\n    'encodeURI': 只对查询的参数做编码\n\n    'encodeURIComponent': 对整个url做编码，包括? & / #\n\n```javascript\na = 'www.baidu.com/test?name=\"zhangsan\"'\nencodeURI(a) => 'www.baidu.com/test?name=%22zhangsan%22'\nencodeURIComponent(a) => 'www.baidu.com%2Ftest%3Fname%3D%22zhangsan%22'\n```\n\n**解码**\n\n>\n\n    'decodeURI': 只对查询参数做解码\n    'decodeURIComponent': 对整个URL做解码\n\n---\n\n## 2. 序列化和反序列化\n\n>\n\n```\nJSON.stringify()        // 序列化\nJSON.parse()            // 反序列化\n```\n\n使用 ajax 需要设置请求头部信息\n\nheader: {'Content-Type': 'application/json; charset=utf-8;'}\n\n> JSON.stringify() 可以简单的用来迅速判断两个对象是否相等，但不严谨（比如：序列化失败）\n\n---\n\n## 3. 日期\n\n```\nnew Date().getTime()   // 单位  秒\n// 获取当前时间   （存在兼容性）\nnew Date().toLocaleDateString() // 2017/7/24\nnew Date().toLocaleTimeString() // 下午5:07:33\nnew Date().toLocaleString()     // 2017/7/24 下午5:07:33\n// 若要显示24进制 需要option选项\nnew Date().toLocaleTimeString(\"UTC\",{ hour12: false })  // 17:20:16\n```\n\n---\n\n## 4. 重排/重绘\n\n1. 重排（回流）：几何属性发生变化 比如：内容、结构、位置或尺寸发生变化，需要重新计算样式和渲染树；\n\n2. 重绘：元素发生的改变只影响了节点的一些样式（背景色、边框色、文字颜色等）\n\n回流必定会发生重绘，重绘不一定会引发回流。\n\n> 重排比重绘要消耗更多的资源\n\n---\n\n## 5. 锚点定位 scrollIntoView （无兼容问题）\n\n可以用来做一些 tab 定位\n\n```\ndocument.getElementById('xx').scrollIntoView()\n```\n\n---\n\n## 6. typeof 和 instanceof\n\n> ### typeof\n\n会返回一个变量的基本类型，只有以下几种：number,boolean,string,object,function；\n\n缺点：\n\n- 不适用于来判断数组，因为不管是数组还是对象，都会返回 object。\n- 判断不了 null null 也是对象\n\n```\ntypeof [1]      // Object\n```\n\n> ### instanceof\n\n运算符用来测试一个对象在其原型链中是否存在一个构造\n\n返回的是一个布尔值 只能用来判断对象和函数\n\n```\nvar a = {};\nalert(  a instanceof Object )     // true\nvar a  = [];\nalert(  a instanceof Array )    // true\n```\n\n最靠谱也是最方便的办法使用`Object.prototype.toString.call()`来判断\n\n```javascript\nfunction types(target) {}\n```\n\n---\n\n## 7. requestAnimationFrame （RAF） 动画 api 兼容 Ie 8/9\n\n```\nvar i = 0\n\nwindow.requestAnimFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          function( callback ){\n            window.setTimeout(callback, 1000 / 60);\n          };\n})()\n\nrequestAnimFrame(animloop)\n\nfunction animloop () {\n    document.getElementById('test').style.top = i ++\n}\n\n```\n\n### 优点\n\n    1. 解决毫秒的不精确性；\n    2. 避免过渡渲染；\n    3. 浏览器可以优化并行的动画动作，将合并的动作放入一个渲染周期；\n    4. 过程可控；\n\n> 动画效率之争\n\n    css3动画高效的原因有以下三点：\n\n        1. 强制使用硬件加速（GPU）；\n        2. 使用与RAF类似的机制；\n        3. 优化DOM操作 避免内存消耗来减少卡顿；\n\n    同时因为采用GPU， 导致浏览器一直出于高负荷运转，移动端电量损耗和一定卡顿，\n    而且css不能完全被js控制\n    pc上兼容性\n\njs 动画库 （比如 Velocity.js 和 GSAP）\n\n---\n\n## 8. 跨域\n\n仅客户端上 域名、端口、协议 三者有一个不一样就会跨域。\n\n跨域的办法\n\n1. ### 服务端配置CORS\n   1. access-control-allow-method\n   2. access-control-allow-origin\n2. ### nginx代理转发\n   1. location / {  proxy_pass xxxxxxx;   }\n3. ### JSONP\n\n   通过 js 标签引入一个 js 文件 这个 js 文件载入成功之后会执行我们在 url 参数中指定的函数 并且会将后端传入给我们的 json 数据作为参数传入\n\n   例如：url?item=1&callback=filter\n\n   原生 js 实现 jsonp 的话 定义好 callback 的函数名称,动态创建 js 标签 url 加上查询的参数写好 callback 的回调函数名称即可\n\n4. ### 利用 iframe 并修改 document.domain 来跨子域\n\n   两个不同域的页面引入 iframe 标签 同时将两个页面的主域设置成相同的域名\n\n   ![页面1](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox669ialYSHxewnD1B4L5UibVqhMnFEfibLhA8vUQu2s9rltB2HZ6UTQ19iag/0?wx_fmt=png)\n   ![页面2](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6Kv2iaHanjIzQHDNeia2FsoHSz8AJPkxh0IqickdbPg0CPeFPhoQMpuv5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n5. ### window.name （可以配合 iframe）\n\n   同源窗口下 window.name 对所有页面都是共享的\n\n   每个页面对 window.name 都有读写权限\n\n   window.name 的值并不会因为新页面而重置\n\n6. widnow.postMessage （存在兼容性 IE7/8 不支持）\n\n   ！[页面 1](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6z8ibxywKPEusvEA2xS8ialrQ1Oxd0jw0V8C6f7Gicy6Obsyt5bicibxdx5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n   ！[页面 2](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6B9Fpsa9KmNAMibvfSqE8Qv2icpLzzFE6NfvEp8YxWW6JOMTacIzaQzxw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n7. Nginx 反向代理\n\n\n\n\n## 9. selection\n\n> 获取鼠标划过文本的对象\n> `window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();`\n\n---\n\n## 10. 正则表达式\n\n> 常用规则\n\n- \\n 回车\n- \\t 制表符\n- \\r 换行符\n- \\s 空格\n- \\u4e00-\\u9fa5 中文\n- \\w 大小写字母\\_数字\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- {n, m} 至少出现 n 次 最多 m 次\n- {n,} 至少 n 次\n- \\* 任意次\n- \\+ 至少一次\n- {n} 至少 n 次\n- () 分组符号\n- [\\s\\S] 任意字符\n- ^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。\n- \\$正则的最后位置 , 就代表结束的意思\n- ?<= 向前匹配 ?= 向后匹配\n \n匹配中文: [\\u4e00-\\u9fa5]\n\n例如：\n\n```\nvar str = '2013-6-7';\nvar re1 = /\\d-+/g;        // 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-\nvar re1 = /(\\d-）+/g;     // 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-\nvar re2  = /(\\d+)(-)/g;   // 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-\n\n--------------------------\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n    //replace()中如果有子项，\n    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )\n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\n```\n\n- [] 表示某个集合中的任意一个\n- [^a] 排除 a\n\n```\n// var re = /\\bclassname\\b/;\n\n// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会\n// 把classname当做一个字符串去匹配。\n\nvar re = new RegExp('\\\\b'+classname+'\\\\b');\n\n// 匹配的时候，classname前面必须是起始或者空格，后面也是。\n\n默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。\n```\n\n---\n\n## 11. Object\n\n    1. constructor\n\n        实例的constructor 永远指向 构造函数 的 prototype.constructor\n\n        理解成 实例是基于构造函数原型链生成的对象\n\n```\n\nfunction A(x){\n    this.x = x;\n}\nvar newA = new A(name);\n\n此时：\nnewA.constructor == A.prototype.constructor;\n\n```\n\n    2. hasOwnProperty\n\n        判断对象上某个属性是否属于自身 属于自身为true, 原型链上为false\n\n```\n    function a () {\n        this.show = 'x';\n    }\n    a.prototype.hide = function () {\n        console.log(111111);\n    }\n    var z = new a();\n    z.hasOwnProperty('show');          // true\n    z.hasOwnProperty('hide');          // false\n```\n\n    3. isPrototypeOf\n\n        判断一个对象是否是另一个对象的原型\n\n```\n    var monkey = {\n        hair : true,\n        breathes : function(){\n            alert('1')\n        }\n    }\n    function Human(name){\n        this.name = name;\n    }\n    // Human的原型链绑定monkey对象\n    Human.prototype = monkey;\n\n    var man = new Human('张三');\n    monkey.isPrototypeOf(man);      // true\n\n```\n\n    4. prototype和__proto__\n\n        prototype是一个函数的内置属性（每个函数都有一个prototype属性）\n\n        __proto__ 是一个实例对象的内置属性 实例化的对象在内部通过此属性寻找原型链\n\n```\nvar Person = function () {}\nvar zhangsan = new Person ()\n\nzhansan.__prop__ = Person.prototype\n\nnew 的过程拆分成以下四步\n\n1. var p = {}\n2. p.__proto__ = Person.prototype\n3. ret = Person.call(p, arguments)\n4. 返回值ret若是对象则直接返回ret，不是则返回新的对象p\n```\n\n    5. Object.getPrototypeOf\n\n        获取 实例化对象 原型链 的相关属性\n\n```\nfunction Test () {\n\n}\n\ntest.prototype.showName = function () {\n    console.log(1)\n}\n\nlet obj = new Test ()\nObject.getPrototypeOf(obj) == obj.__proto__\n\n```\n\n    6. Object.keys\n\n        可以用来枚举可遍历的属性 返回一个数组\n\n    7. Object.create\n\n        在原型链上创建对象属性\n\n```\n    <!-- 属性创建在原型链上 -->\n    Object.create({\n        name: '张三'\n    })\n\n    <!-- 字面量方式创建的对象属性挂在自身 -->\n    let test = {\n        name: '张三'\n    }\n\n```\n\n    8. Object.isExtensible\n\n        判断对象是否可以新增属性\n\n    9. Object.preventExtension\n\n        锁住对象 使其不能新增属性 但是原来的属性可以修改删除\n\n    10. Object.seal\n\n        密封对象 不能增加新属性 也不能删除旧属性  但是能修改原来的属性\n\n    11. Object.isSealed\n\n        判断对象是否密封\n\n    12. Object.freeze\n\n        冻结对象 不能新增 不能修改 不能删除\n\n    13. Object.isFrozen\n\n        判断对象是否完全被冻结\n\n    14. Object.getOwnPropertyNames\n\n        获取自身属性名字 返回一个数组\n\n    15. Object.getOwnPropertyDescriptor\n\n        判断某个对象上某个属性的状态描述\n\n    16. Object.defineProperty\n\n\n\n\n    -----------\n\n## 12. 继承\n\n> **调用另一个对象的方法，以另一个对象替换当前对象的上下文**\n>\n> > 缺点\n> >\n> > > 只能继承父级本身属性，原型链的属性无法继承\n\n- **call**\n  > 第二个参数可以省略\n- **apply**\n  > 第二个参数必须是数组或者用 arguments 代替\n- **bind**\n  > bind 与 call 和 apply 的区别在于 bind 是一个函数 不会立即执行 必须在后面再加上一对括号去立即执行\n\n```\n例子1：\n\nfunction Add(a,b)\n{\n    this.add = function(a,b){\n        alert(a+b)\n    };\n    this.xx = 333;\n}\nfunction Sub()\n{\n    this.sub = '张三';\n\n    // call方法\n    Add.call(this); // call继承Add所有方法(不包含原型链上的方法)\n\n    // apply方法  参数不能指定的时候用[]或者arguments代替\n    Add.apply(this, [])\n    // 又可以写成\n    Add.apply(this, arguments)\n\n    // bind方法\n    Add.bind(this)();\n}\n\nx = new Sub();\nx.add(5,7)                  // 11\n\n=====================================\n\n例子2：\n\n若只想继承父级构造函数某一个具体方法\n需要先将父子对象都实例化后 调用父级的具体方法call\n\nfunction Add(a,b)\n{\n    this.add = function(a,b){\n        alert(a+b)\n    };\n    this.xx = 333;\n}\nfunction Sub()\n{\n    this.sub = '张三';\n}\n\nnewAdd = new Add(7,8);\nnewSub = new Sub();\n\n// Sub只继承了Add的add方法并执行相关方法\n\ncall方法：\nnewAdd.add.call(newSub, 10, 4);      // 14\n\napply方法：\nnewAdd.add.apply(newSub, [10, 4]);   // 14\n\nbind方法：\nnewAdd.add.bind(newSub, 10, 4)();   // 14\n\n```\n\n> > **注意**\n> >\n> > > 若想要全部继承父级所有相关属性 得采用==原型链继承==的方式\n\n```\nfunction person(){\n    this.hair = 'black';\n    this.eye = 'black';\n    this.skin = 'yellow';\n    this.view = function(){\n        return this.hair + ',' + this.eye + ',' + this.skin;\n    }\n}\nfunction man(){\n    this.feature = ['beard','strong'];\n}\nman.prototype = new person();\n\n```\n\n---\n\n## 13. cookie sessionStorage localStorage\n\n    1. cookie\n        * 4k的限制；\n        * 服务端和客户端传递时都会带上cookie；\n        * 本质上是对字符串的读取 存储内容过多消耗内存空间 导致页面变卡顿；\n        * 不能被爬虫读取；\n        * 设置时间之前一直有效，到时间就清除；\n    2. sessionStorage\n        * 临时存储：引入“浏览器窗口”的概念，同源同窗口数据不会销毁，不同标签页中数据不能共享，关闭浏览器时候销毁；\n        * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n        * 性能更好，即本地读取数据比服务器获取快多了；\n        * 不能跨tab标签页传值；\n    3. localStorage\n        * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n        * 体积更大 5M；\n        * 持久存储在本地，直到手动清除；\n\n```\nlocalStorage.setItem('sss',1111);\nlocalStorage.getItem('sss');\nlocalStorage.removeItem('sss');\nlocalStorage.clear();\n```\n\n---\n\n## 14. 闭包\n\n    简单回答闭包就是 一个函数返回自身内部函数的调用\n\n    为什么使用？\n\n    因为js是链式的 一层一层向上级查找 所以外部函数无法访问内部函数;\n\n> > 优点\n> > 缺点\n>\n> - 不会被内存回收 容易出现性能问题\n\n```\nfunction foo(){\n    var a = 2;\n\n    function bar(){\n        console.log(a);\n    }\n\n    return bar;\n}\nvar newFoo = foo();\nnewFoo();               // a\n\n```\n\n---\n\n## 15. 深拷贝和浅拷贝\n\n- **浅拷贝**\n  > **复制对象的副本 指向同一内存区域 对副本的操作会影响父级对象**\n\n浅拷贝方式：\n\n1. 直接赋值；\n2. Object.assign();\n3. JSON 序列化；\n\n- **深拷贝**\n  > **复制对象的副本 指向不同的内存区域 与父级对象独立**\n\n```\n// 浅拷贝\nvar a = {\n    name : 'zhangsan'\n}\n\nvar b = a;\nb.name = 'lisi';\n\nconsole.log(a.name);    // \"lisi\"\nconsole.log(b.name);    // \"lisi\"\n\n// 深拷贝  (更完整的深拷贝还需要再详细优化)\nfunction deepCopy(p, c){\n    var c = c || {};\n    for(var i in p ){\n        // 数组和对象的时候再处理\n        if(typeof p[i] === 'object'){\n            c[i] = (p[i].constructor === Array) ? [] : {};\n            deepCopy(p[i], c[i]);\n        }else{\n            // 基本类型直接赋值\n            c[i] = p[i]\n        }\n    }\n    return c;\n}\n\nvar parent = {\n    number: [1, 2, 3],\n    obj: {\n        prop: 1\n    }\n}\n\nvar copyParent = deepCopy(parent);\ncopyParent.number.push(4)\ncopyParent.number                   // 1,2,3,4\nparent.number                       // 1,2,3\n```\n\n---\n\n## 16. 传值类型和引用类型\n\n- **传值类型（基本类型）**\n  > 值为基本类型时候为深拷贝\n  >\n  > > 基本类型就是 null，undefined，Boolean，string，number\n  > >\n  > > > ==独立不干扰==\n- **引用类型**\n  > 值为对象类型时候为浅拷贝\n  >\n  > > 值都是对对象的引用，即一个指向对象的指针\n  > >\n  > > > ==对副本的操作会影响父级对象==\n\n```\n// 传值类型\nvar  a = 1;\nfunction voo(data)\n{\n    data = 2;\n    console.log(data);   // 2\n}\nvoo(a);\nconsole.log(a);    // 1\n\n// 引用类型\nvar  a = {\n    name : \"张三\"\n};\nfunction voo(data)\n{\n    data.name = \"李四\";\n    console.log(data);   //  Object {name: \"李四\"}\n}\nvoo(a);\nconsole.log(a);         //  Object {name: \"李四\"}\n\n// 引用类型不会被基本类型覆盖\nvar  a = {\n    name : \"张三\"\n};\nfunction voo(data)\n{\n    data = 3；\n    console.log(data);   // 3\n}\nvoo(a);\nconsole.log(a);         //  Object {name: \"张三\"}\n\n// 为了解决引用类型的问题  引入深拷贝的概念  参考上面一个概念\n\n```\n\n---\n\n## 17. 函数作用域提升与预编译\n\n> 由于 js 没有其他强类型语言{}这类的块级作用域 只有函数作用域 函数的声明很随意导致各种问题出现\n>\n> > 变量预编译 > 函数预编译\n\n```\n// 第一条\n\na();\nvar a = c = function() {\n    console.log(2)\n};\na();\n\nfunction a() {\n    console.log(1)\n};\na();\n(function(b) {\n    b(), c()\n    var b = c = function a() {\n        console.log(3)\n    }\n    b();\n})(a);\nc();\n\n// 等价于：\nvar a;                      // 变量声明提升\nfunction a() {              // 函数声明提升\n    console.log(1)\n};\na();                        // 1\na = c = function() {\n    console.log(2)\n};\n\na();                        // 2\n\n(function(b) {\n    var b\n    b()                     // 2\n    c()                     // 本来以error\n    // 后来有人指正 原因就在于var b=c=xxx。\n    // c相当于没有加var 不会预编译，这里c直接查找到外部作用域的c\n    b = c = function a() {\n        console.log(3)\n    }\n    b();                    // 3\n})(a);\n\nc();                        // 3\n\n\n// 第二条\nfunction fn(){\n    function a(){console.log(1)}\n    return a;\n    function a(){console.log(2)}\n}\nfn()();                     //2 由于预编译 后面的a覆盖了前面的a\n\n// 第三条\nvar a=10;\nfunction fn(){\n    // 预编译a 赋值undefined，内部作用域存在a这个变量，\n    // 所以这里 !a 就是  !undefined，就是true，进入函数a=20;\n    if (!a) {\n        var a=20\n    }\n    console.log(a)          //  这里是20 ，\n}\nfn()\n\n// 第四条\n<script>\n    console.log(typeof a)   //undefined\n    var a='littlebear';\n    console.log(a)          //littlebear\n</script>\n<script>\n    console.log(typeof a)   //string  第二个<script>标签里的a但会往上查找。\n    var a=1;\n    console.log(a)//1\n</script>\n\n// 第五条\n<script>\n    console.log(typeof a)   //undefined\n    console.log(a)\n    // 报错，遇到<script>标签对时，会先对这一块进行预解析，\n    // 下面没预解析，所以找不到声明过的a，于是报错了\n</script>\n<script>\n    console.log(typeof a)   //undefined\n    var a=1;\n    console.log(a)          //1\n</script>\n\n// 第六条\n<script>\n    function fn(a,b){\n        console.log(a)      //容易上当 初始化a的时候已经赋值'容易上当'\n        var a=10;\n        console.log(a)      //10\n    }\n    fn('容易上当');\n</script>\n\n```\n\n---\n\n## 18. AMD 和 CMD 区别\n\n1. AMD 推崇依赖前置。 （requireJS）\n\n   CMD 推崇依赖就近， （seaJS）\n\n```\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()         // 此处略去 100 行\n    var b = require('./b')  // 依赖可以就近书写\n    b.doSomething()         // ...\n\n})\n// AMD 默认推荐\ndefine(['./a', './b'], function(a, b) {\n    // 依赖必须一开始就写好\n    a.doSomething()    // 此处略去 100 行\n    b.doSomething()\n})\n```\n\n2. 对于依赖的模块，\n\n   AMD 是提前执行（预执行），\n\n   CMD 是延迟执行（懒执行）。\n\n> 不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n\n3. AMD 的 API 默认是一个当多个用，\n\n   CMD 的 API 严格区分，推崇职责单一\n\n> 比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。\n\n---\n\n## 19. 常见服务器的状态码\n\n- 301\n\n  永久重定向\n\n- 302\n\n  临时重定向 会出现 URL 劫持 体现在搜索引擎收录策略上 会改变原有请求方法\n\n* 304\n\n  Not Modified\n\n  客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n\n- 307\n\n  临时重定向 与 302 区别 客户端应`保持请求方法`不变向新的地址发出请求\n\n* 400\n\n  Bad Request\n\n  表示该请求报文中存在语法错误，导致服务器无法理解该请求。多用于接口参数校验。\n\n* 403\n\n  Forbidden\n\n  该状态码表明对请求资源的访问被服务器拒绝了。多用于权限拦截。\n\n* 407\n\n  代理服务器未授权\n\n* 413\n\n  post body 请求体过大\n\n- 500\n\n  Internal Server Error\n\n  该状态码表明服务器端在执行请求时发生了错误。\n\n- 501\n\n  服务器不具备完成请求的功能。比如服务正在重启时，暂时无法响应客户端请求。\n\n- 502\n\n  上游网关错误\n\n- 503\n\n  服务不可用\n\n---\n\n## 20. 事件冒泡和事件捕获\n\n    * 事件冒泡兼容写法\n\n    ```\n    if (event.cancelBubble) {\n        event.cancelBubble = true\n    } else {\n        event.stopPropagation()\n    }\n    ```\n    --------------------------\n\n## 21. 数组\n\n    1. push\n\n        向数组末尾添加指定元素\n\n    2. pop\n\n        移除数组末尾的一个元素 并返回移除的元素\n\n    3. shift\n\n        移除数组第一项 并返回该元素\n\n    4. unshift\n\n        给数组第一项加上一个元素 返回数组长度\n\n    5. join\n\n        数组按照指定的字符换转成字符串\n\n    6. sort\n\n        数组按照ASCII排序  所以要完全按照从小到大的顺序排序的话需要指定参数 1 -1 0\n\n    7. splice\n\n        从0开始\n\n    > 删除 ---------------------（**起始位置，截取个数**）\n\n    > 插入 ---------------------（**起始位置，截取个数为0，要插入的项**）\n\n    > 替换----------------------（**起始位置，截取个数为1，要插入的项**）\n\n    8. slice\n\n    9. concat\n\n    10. reverse\n\n    11. 遍历数组的方法\n\n        > forEach\n        > for in\n\n        两者区别 在于 for in 会遍历数组原型链的属性值\n\n        为了避免这样的情况 使用 hasOwnProperty 解决\n\n---\n\n## 22.正则\n\n- ()：小括号，叫做分组符。\n- \\s : 空格\n- \\S : 非空格\n- \\d : 数字\n- \\D : 非数字\n- \\w : 字符 ( 字母 ，数字，下划线\\_ )\n- \\W : 非字符\n- .（点）——任意字符\n- \\. : 真正的点\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- \\B : 非独立的部分\n- {n,m}：至少出现 n 次，最多 m 次\n- {n,} :至少 n 次\n  - - :任意次 相当于{0,}\n- ？ ：零次或一次 相当于{0,1}\n  - - ：一次或任意次相当于 {1,}\n- {n}： 正好 n 次\n- [] ： 表示某个集合中的任意一个 不能为空\n\n---\n\n> ### 字符串相关的正则方法\n\n- ### match()\n\n> 返回一个包含匹配内容的数组\n\n```\nvar str = 'abcdef';\n\nvar re = /B/i;\n\nstr.match(re) // [b]\n```\n\n例子 2：\n\n```\nurl = https://dimg.fws.qa.nt.ctripcorp.com/images/2d090m000000062hy59E5.jpg\"\nurl.match(/[^\\/]*$/) // 2d090m000000062hy59E5.jpg\nurl.match(/^[^\\/]*/) // https\n```\n\n- ### search()\n\n> 返回匹配到的第一个内容所在的位置\n\n```\nvar str = 'abcdef';\n\nvar re = /B/i;\n\nstr.search(re) // 1\n\n```\n\n- ### replace()\n\n> 查找符合正则的字符串并替换成==一个==对应的字符串。返回替换后的内容。\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); // 我爱**，*上太阳升。\n\n```\n\n并不能解决一个文字\\*的对应\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n            alert(str);\n            //用来测试：参数代表每次搜索到的符合正则的字符，\n            //所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }\n            return result; //所以搜索到了几个字就返回几个*\n        });\nalert(str2)\n```\n\n    ```\n    var str = '2013-6-7';\n    var re = /(\\d+)(-)/g;\n\n    str = str.replace(re,function($0,$1,$2){\n            // replace()中如果有子项，\n            // 第一个参数 ：$0（匹配成功后的整体结果  2013-  6-）,\n            // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n            // 第三个参数 : $2(匹配成功的第二个分组，这里指的是-    - - )\n        return $1 + '.';  //分别返回2013.   6.\n    });\n\n    alert( str );   //2013.6.7\n    //整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\n    ```\n\n---\n\n### 正则两个方法\n\n- ### test()\n\n> 匹配到指定内容返回 true\n\n- ### ==exec()==\n\n> 返回第一匹配项信息的数组 若没有返回 null\n> 有两个属性 index input\n\n    ```\n    var text = 'mom and dad and baby'\n    var pattern = /mom( and dad( and baby)?)?/gi\n    var matches = pattern.exec(text)\n    mathes.index // 0\n    mathes.input // mom and dad and baby\n    mathes[0] // mom and dad and baby\n    mathes[1] //  and dad and baby\n    mathes[2] // and baby\n    ```\n\n## 23. 后退监听\n\n> history.back() history.forward() history.replace()触发 onpopstate 事件\n\n    ```\n    window.onpopstate = function () {\n        alert('2222')\n        history.pushState(null, null, document.URL)\n        return false\n    }\n    history.pushState(null, null, document.URL)\n    ```\n\n    onbeforeunload事件有坑 chrome51版本及以后不能自定义文字 并且 页面载入之后一定要有浏览器行为才能触发\n\n\n## 27. 进制转换\n\n> 十进制转十六进制\n\n    ```\n    var s = 255\n    s.toString(16) // ff\n    ```\n\n> 十六进制转十进制\n\n    ```\n    parseInt('0xFF')   // 255\n    ```\n\n## 28. label 绑定事件一定要让事件委托到触发里面的 input\n\n    所以事件委托的时候直接监听input\n\n## 29. 浏览器中的简单请求和复杂请求\n\n    简单请求\n        - 请求类型 get/post/head\n        - 除了常见的请求头外，无额外自定义请求头\n          - Content-Type （且值是application/x-www-form-urlencoded，multipart/form-data，text/plain 之一）\n          - Content-Language\n          - Accept\n          - Accept-Language\n          - Save-Data\n\n    复杂请求\n        会发送options预检请求\n\n## 30. Math\n\n    1. Math.floor 向下舍入；\n    2. Math.ceil  向上舍入;\n    3. Math.cos   余弦;\n    4. Math.round 四舍五入;\n    5. Math.sin   正弦；\n    6. Math.tan   正切；\n\n## 31. isNaN\n\n    首先需要知道 '' == 0   'abc' != 0   [] == 0  [1] != 0   null == 0  {} != 0  undefined != 0\n\n    ```\n    isNaN('')   // false\n    isNaN(' ')  // false\n    isNaN('abc') // true\n    isNaN(undefined) // true\n    isNaN([])   // false\n    isNaN({})   // true\n    isNaN(null) // false\n\n    ```\n\n## 32. Boolen\n\n    首先需要知道  0 == false    1 == true  '' == false   undefined != false != true    null != false != true\n\n    ```\n    Boolean('') // false\n    Boolean('ssss') // true\n    Boolean([])  // true\n    Boolean([1,2])  // true\n    Boolen({})      // true\n    Boolen(null)    // false\n    Boolen(undefined)   // false\n    ```\n\n## 33. 解决回调地狱 （多级回调）\n\n    1. Promise\n\n    2. aSync/await\n\n    3. generator\n\n## 34. 字符串\n\n    1. slice\n\n        在 不修改目标数组 的情况下返回截取的指定元素（ **起始位置，截止位置**）\n\n        从0开始 ==不包含最后一个数值==\n\n        负数情况下 将负数加上自身长度得到的数值作为参数\n\n    2. substr\n\n        subdtr接收的是 起始位置 和 所要返回的字符串长度\n\n        在负数情况下  将第一个参数与字符串长度相加后的数值作为第一个参数\n\n    3. substring\n\n        默认会将较小的参数作为第一个参数\n\n        在 不修改目标数组 的情况下返回截取的指定元素 （ **起始位置，截止位置**）\n\n        负数当做0处理\n\n```\nlet test = 'abcdef'\ntest.slice(0, -1)   // abcde\ntest.slice(2, -3)   => test.slice(2,3)  // c\n\ntest.substring(1, -2) => a\ntest.substring(2, -3) => ab\n```\n\n    4. split\n\n        字符串按照指定规则转换成数组\n\n## 35. let 与 var 区别\n\n    1. var存在变量提升， let不存在；\n    2. let不允许重复声明；\n    3. var挂载在window下，let挂载在块作用域下；\n\n## 36. 为什么 var 可以重复声明\n\n    因为js运行过程中，\n\n    引擎 负责整个代码编译和运行\n\n    编译器 负责词法分析、语法分析、代码生成等工作\n\n    编译器从左至右编译var a，如果a不存在则在作用域声明一个新的变量a，若存在a则忽略继续向下编译；\n\n    引擎遇到a = 2，按照作用域链向上查找 若存在变量a直接赋值，不存在则在作用域重新声明新的变量并赋值2\n\n## 37. CommonJS 中的 require/exports 和 ES6 的 import/export 有什么区别\n\n1.\n\n> CommomJS 模块 require 代码时候会立刻执行；\n> ES6 模块是动态引用，不会立刻执行，仅仅作为一个加载模块的对象引用；\n\n2.\n\n> CommonJs 模块输出的是一个值的拷贝， 输出后的对象会被缓存（即 如果发现一个模块被多次引用，会直接返回已经执行的部分）；\n\n```\n// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n```\n\n```\n// main.js\nvar mod = require('./lib');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n\n```\n\n> ES6 模块输出的是值的只读引用；\n\n- 接口输出的变量是只读的，重新赋值会报错；\n- export 通过接口输出的是同一个值，得到的都是同样的实例；\n- 如果需要 import 支持动态加载 提案建议引入 import() 返回一个 promise 对象；\n\n参考资料：\n\n1. [ES6 模块与 CommonJS 模块的差异](http://es6.ruanyifeng.com/#docs/module-loader)\n\n## 38. 浏览器缓存\n\n    浏览器缓存分为 强缓存 和 协商缓存\n\n    1. 客户端先根据资源的http header判断是否命中强缓存，如果命中直接从缓存中读取；\n\n    2. 强缓存未命中，客户端发出请求，服务端根据请求的request header验证资源是否命中协商缓存，这个过程成为http再验证。如果命中，服务器将请求返回，状态码304，但不返回资源，而是告诉客服端可以从缓存读取；\n\n    3. 当协商缓存也没有命中，直接服务端返回资源给客户端；\n\n\n    强缓存\n\n    1. Expires 代表缓存过期时间；\n\n    2. Cache-Control： max-age  代表缓存最大生命周期；\n\n    协商缓存\n\n    1. Last-Modified 代表资源最后更新时间；\n\n    2. If-Modified-Since 代表 判断两次请求之间是否有过修改 没有直接返回协商缓存；\n\n## 39. 处理 js 双精度问题\n\n    ```javascript\n        0.1 + 0.2 = 0.30000000000000004\n    ```\n\n由于计算机是做二进制运算\n\n0.1 => 0.0001 1001 1001 1001…（无限循环）\n\n0.2 => 0.0011 0011 0011 0011…（无限循环）\n\n双精度浮点数的小数部分最多支持 52 位\n\n处理方法：\n\n    1. 优先考虑服务端计算；\n    2. 利用精度溢出结尾要么99999要么1111，可以利用Math.round()四舍五入；\n\n\n## 40. postMessage\n\n1. window.postMessage() 可以安全进行跨域、跨页面通信；\n1. 页面加载完成后才能进行跨域通信；\n\n发起端可以是 open 一个新窗口 或者 创建一个 iframe 往新窗口里发送数据\n\n案例:\n\n    ```javascript\n\n<!-- 客户端两种方式 -->\n\n<!-- 当前页面地址 http://www.webhek.com -->\n<!-- open方式 -->\n\n//弹出一个新窗口\nvar domain = 'http://fanyi.youdao.com';\nvar myPopup = window.open(domain, 'myWindow');\n\n//周期性的发送消息\nsetInterval(function(){\nvar message = 'Hello! The time is: ' + (new Date().getTime());\nconsole.log('blog.local: sending message: ' + message);\n//send the message and target URI\nmyPopup.postMessage(message,domain);\n},6000);\n\n<!-- iframe方式 -->\n\n//捕获 iframe\nvar domain = \"http://fanyi.youdao.com\";\nvar iframe = document.getElementById('myIFrame').contentWindow;\n\n//发送消息\nsetInterval(function(){\nvar message = 'Hello! The time is: ' + (new Date().getTime());\nconsole.log('blog.local: sending message: ' + message);\n//send the message and target URI\niframe.postMessage(message,domain);\n},6000);\n\n<!-- 接收端 -->\n\n//监听消息反馈\nwindow.addEventListener('message',function(event) {\nif(event.origin !== 'http://www.webhek.com') return;\nconsole.log('received response: ',event.data);\n},false);\n\n    ```\n\n> 截图如下：\n\n![web骇客网站  接收端截图](https://wx4.sinaimg.cn/mw690/006ANKB8gy1fqhqrhftfmj30yu0objvr.jpg)\n![有道翻译网站 接收端截图](https://wx2.sinaimg.cn/mw690/006ANKB8gy1fqhqri8fjlj30zk0h4tbk.jpg)\n\n> 参考资料\n\n1. [用 HTML5 里的 window.postMessage 在两个网页间传递数据](http://www.webhek.com/post/window-postmessage-api.html)\n\n## 41. Service Worker\n\n> 背景\n\n为了解决 web 业务不断增加带来更多消耗资源、耗时等复杂运算带来性能问题，w3c 初期提出 Web Worker 的 API，目的为了解放主线程。原理是 将复杂 耗时的操作独立出来交给 Web Worker，完成后通过 postMessage 方法告诉主线程。\n\n缺点：临时存在，不能永久；为此提出 Service Worker，在 Web Worker 基础上增加持久缓存能力。\n\n在 Service Worker 之前有 APPCache 这个持久缓存的 API，不过存在更新机主不完善，二次更新，大小限制，回滚等问题，具体参考下方链接 1。\n\nService Worker 的特性如下：\n\n- 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n\n- 一旦被 install，就永远存在，除非被 uninstall\n\n- 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n\n- 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n\n- 离线内容开发者可控\n\n- 能向客户端推送消息\n\n- 不能直接操作 DOM\n\n- 出于安全的考虑，必须在 HTTPS 环境下才能工作\n\n- 异步实现，内部大都是通过 Promise 实现\n\n- 只能运行在 HTTPS 协议下\n\n> 参考资料\n\n1. [为什么 app cache 没有得到大规模应用？它有哪些硬伤吗？](https://www.zhihu.com/question/29876535)\n2. [Service Worker 简介](https://lavas.baidu.com/doc/offline-and-cache-loading/service-worker/service-worker-introduction)\n3. [如何优雅的为 PWA 注册 Service Worker](https://zhuanlan.zhihu.com/p/28161855)\n\n## 42 加载更多/下拉刷新\n\n原理：\n\nscrollTop（滚动条滚动距离） + clientHeight（可见区域高度） == scrollHeight（元素实际高度）\n\n备注：\n\noffsetHeighgt = height + padding + border\n\nclientHeight = height + padding\n\n## 43. js 标签中`async`和`defer`的作用与区别\n\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。\n并行加载，\n\n- async\n\n无顺序的加载，可能在`DOMContentLoaded`触发之前或之后执行。\n\n- defer\n\n会等待 document 解析完成，按照 defer 顺序执行对应脚本，全部执行完毕后会触发`DOMContentLoaded`事件\n\n\n## JsBridge\n\n### 实现js调用Native的方式，有三个方法：\n- 注入api\n- 劫持URL Scheme\n- 弹窗拦截\n\n\n【注入api】 通过webview提供的接口，向js的上下文（window）注入对象或方法，js直接调用相关方法\n【劫持URL Scheme】通常是web端唤醒App（或跳到App某一个页面）。Native劫持Web的请求自定义处理。\n【弹窗拦截】类似劫持URL Scheme原理，劫持弹窗、二次确认等方法。\n\n### Native调用js的方法\n\nNative调用js的方式本质就是 执行拼接的js字符串\n\n# css\n\n## BFC是什么？BFC能用来干什么？怎么才能触发BFC？\n\nBFC（块格式化上下文）\n\n触发BFC几种方式：\n- 浮动 （float不为none即可）\n- 绝对定位（position: absoulte 或 fixed）\n- display: inline-block | table-cell | flex | inline-flex\n- overflow （除了visible之外的值）\n\nBFC特点\n- 如果两个块级元素属于同一个BFC，上下margin会重叠，以较大的为准；\n- BFC区域不会与浮动元素的区域重叠；\n- 页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\nBFC作用\n- 清除元素浮动；\n- margin重叠；\n- 两栏布局；\n\n","source":"_posts/前端知识点总结.md","raw":"---\ntitle: 前端知识点总结\ncatalog: true\ndate: 2018-07-21 10:24:38\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n# js 知识点总结\n\n## 1. 解码和编码\n\n> 原因：因为链接里面会有中文或者特殊字符号无法跳转需要进行相关编码解码\n\n**编码**\n\n>\n\n    'encodeURI': 只对查询的参数做编码\n\n    'encodeURIComponent': 对整个url做编码，包括? & / #\n\n```javascript\na = 'www.baidu.com/test?name=\"zhangsan\"'\nencodeURI(a) => 'www.baidu.com/test?name=%22zhangsan%22'\nencodeURIComponent(a) => 'www.baidu.com%2Ftest%3Fname%3D%22zhangsan%22'\n```\n\n**解码**\n\n>\n\n    'decodeURI': 只对查询参数做解码\n    'decodeURIComponent': 对整个URL做解码\n\n---\n\n## 2. 序列化和反序列化\n\n>\n\n```\nJSON.stringify()        // 序列化\nJSON.parse()            // 反序列化\n```\n\n使用 ajax 需要设置请求头部信息\n\nheader: {'Content-Type': 'application/json; charset=utf-8;'}\n\n> JSON.stringify() 可以简单的用来迅速判断两个对象是否相等，但不严谨（比如：序列化失败）\n\n---\n\n## 3. 日期\n\n```\nnew Date().getTime()   // 单位  秒\n// 获取当前时间   （存在兼容性）\nnew Date().toLocaleDateString() // 2017/7/24\nnew Date().toLocaleTimeString() // 下午5:07:33\nnew Date().toLocaleString()     // 2017/7/24 下午5:07:33\n// 若要显示24进制 需要option选项\nnew Date().toLocaleTimeString(\"UTC\",{ hour12: false })  // 17:20:16\n```\n\n---\n\n## 4. 重排/重绘\n\n1. 重排（回流）：几何属性发生变化 比如：内容、结构、位置或尺寸发生变化，需要重新计算样式和渲染树；\n\n2. 重绘：元素发生的改变只影响了节点的一些样式（背景色、边框色、文字颜色等）\n\n回流必定会发生重绘，重绘不一定会引发回流。\n\n> 重排比重绘要消耗更多的资源\n\n---\n\n## 5. 锚点定位 scrollIntoView （无兼容问题）\n\n可以用来做一些 tab 定位\n\n```\ndocument.getElementById('xx').scrollIntoView()\n```\n\n---\n\n## 6. typeof 和 instanceof\n\n> ### typeof\n\n会返回一个变量的基本类型，只有以下几种：number,boolean,string,object,function；\n\n缺点：\n\n- 不适用于来判断数组，因为不管是数组还是对象，都会返回 object。\n- 判断不了 null null 也是对象\n\n```\ntypeof [1]      // Object\n```\n\n> ### instanceof\n\n运算符用来测试一个对象在其原型链中是否存在一个构造\n\n返回的是一个布尔值 只能用来判断对象和函数\n\n```\nvar a = {};\nalert(  a instanceof Object )     // true\nvar a  = [];\nalert(  a instanceof Array )    // true\n```\n\n最靠谱也是最方便的办法使用`Object.prototype.toString.call()`来判断\n\n```javascript\nfunction types(target) {}\n```\n\n---\n\n## 7. requestAnimationFrame （RAF） 动画 api 兼容 Ie 8/9\n\n```\nvar i = 0\n\nwindow.requestAnimFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          function( callback ){\n            window.setTimeout(callback, 1000 / 60);\n          };\n})()\n\nrequestAnimFrame(animloop)\n\nfunction animloop () {\n    document.getElementById('test').style.top = i ++\n}\n\n```\n\n### 优点\n\n    1. 解决毫秒的不精确性；\n    2. 避免过渡渲染；\n    3. 浏览器可以优化并行的动画动作，将合并的动作放入一个渲染周期；\n    4. 过程可控；\n\n> 动画效率之争\n\n    css3动画高效的原因有以下三点：\n\n        1. 强制使用硬件加速（GPU）；\n        2. 使用与RAF类似的机制；\n        3. 优化DOM操作 避免内存消耗来减少卡顿；\n\n    同时因为采用GPU， 导致浏览器一直出于高负荷运转，移动端电量损耗和一定卡顿，\n    而且css不能完全被js控制\n    pc上兼容性\n\njs 动画库 （比如 Velocity.js 和 GSAP）\n\n---\n\n## 8. 跨域\n\n仅客户端上 域名、端口、协议 三者有一个不一样就会跨域。\n\n跨域的办法\n\n1. ### 服务端配置CORS\n   1. access-control-allow-method\n   2. access-control-allow-origin\n2. ### nginx代理转发\n   1. location / {  proxy_pass xxxxxxx;   }\n3. ### JSONP\n\n   通过 js 标签引入一个 js 文件 这个 js 文件载入成功之后会执行我们在 url 参数中指定的函数 并且会将后端传入给我们的 json 数据作为参数传入\n\n   例如：url?item=1&callback=filter\n\n   原生 js 实现 jsonp 的话 定义好 callback 的函数名称,动态创建 js 标签 url 加上查询的参数写好 callback 的回调函数名称即可\n\n4. ### 利用 iframe 并修改 document.domain 来跨子域\n\n   两个不同域的页面引入 iframe 标签 同时将两个页面的主域设置成相同的域名\n\n   ![页面1](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox669ialYSHxewnD1B4L5UibVqhMnFEfibLhA8vUQu2s9rltB2HZ6UTQ19iag/0?wx_fmt=png)\n   ![页面2](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6Kv2iaHanjIzQHDNeia2FsoHSz8AJPkxh0IqickdbPg0CPeFPhoQMpuv5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n5. ### window.name （可以配合 iframe）\n\n   同源窗口下 window.name 对所有页面都是共享的\n\n   每个页面对 window.name 都有读写权限\n\n   window.name 的值并不会因为新页面而重置\n\n6. widnow.postMessage （存在兼容性 IE7/8 不支持）\n\n   ！[页面 1](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6z8ibxywKPEusvEA2xS8ialrQ1Oxd0jw0V8C6f7Gicy6Obsyt5bicibxdx5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n   ！[页面 2](http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6B9Fpsa9KmNAMibvfSqE8Qv2icpLzzFE6NfvEp8YxWW6JOMTacIzaQzxw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1)\n\n7. Nginx 反向代理\n\n\n\n\n## 9. selection\n\n> 获取鼠标划过文本的对象\n> `window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();`\n\n---\n\n## 10. 正则表达式\n\n> 常用规则\n\n- \\n 回车\n- \\t 制表符\n- \\r 换行符\n- \\s 空格\n- \\u4e00-\\u9fa5 中文\n- \\w 大小写字母\\_数字\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- {n, m} 至少出现 n 次 最多 m 次\n- {n,} 至少 n 次\n- \\* 任意次\n- \\+ 至少一次\n- {n} 至少 n 次\n- () 分组符号\n- [\\s\\S] 任意字符\n- ^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。\n- \\$正则的最后位置 , 就代表结束的意思\n- ?<= 向前匹配 ?= 向后匹配\n \n匹配中文: [\\u4e00-\\u9fa5]\n\n例如：\n\n```\nvar str = '2013-6-7';\nvar re1 = /\\d-+/g;        // 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-\nvar re1 = /(\\d-）+/g;     // 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-\nvar re2  = /(\\d+)(-)/g;   // 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-\n\n--------------------------\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n    //replace()中如果有子项，\n    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )\n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\n```\n\n- [] 表示某个集合中的任意一个\n- [^a] 排除 a\n\n```\n// var re = /\\bclassname\\b/;\n\n// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会\n// 把classname当做一个字符串去匹配。\n\nvar re = new RegExp('\\\\b'+classname+'\\\\b');\n\n// 匹配的时候，classname前面必须是起始或者空格，后面也是。\n\n默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。\n```\n\n---\n\n## 11. Object\n\n    1. constructor\n\n        实例的constructor 永远指向 构造函数 的 prototype.constructor\n\n        理解成 实例是基于构造函数原型链生成的对象\n\n```\n\nfunction A(x){\n    this.x = x;\n}\nvar newA = new A(name);\n\n此时：\nnewA.constructor == A.prototype.constructor;\n\n```\n\n    2. hasOwnProperty\n\n        判断对象上某个属性是否属于自身 属于自身为true, 原型链上为false\n\n```\n    function a () {\n        this.show = 'x';\n    }\n    a.prototype.hide = function () {\n        console.log(111111);\n    }\n    var z = new a();\n    z.hasOwnProperty('show');          // true\n    z.hasOwnProperty('hide');          // false\n```\n\n    3. isPrototypeOf\n\n        判断一个对象是否是另一个对象的原型\n\n```\n    var monkey = {\n        hair : true,\n        breathes : function(){\n            alert('1')\n        }\n    }\n    function Human(name){\n        this.name = name;\n    }\n    // Human的原型链绑定monkey对象\n    Human.prototype = monkey;\n\n    var man = new Human('张三');\n    monkey.isPrototypeOf(man);      // true\n\n```\n\n    4. prototype和__proto__\n\n        prototype是一个函数的内置属性（每个函数都有一个prototype属性）\n\n        __proto__ 是一个实例对象的内置属性 实例化的对象在内部通过此属性寻找原型链\n\n```\nvar Person = function () {}\nvar zhangsan = new Person ()\n\nzhansan.__prop__ = Person.prototype\n\nnew 的过程拆分成以下四步\n\n1. var p = {}\n2. p.__proto__ = Person.prototype\n3. ret = Person.call(p, arguments)\n4. 返回值ret若是对象则直接返回ret，不是则返回新的对象p\n```\n\n    5. Object.getPrototypeOf\n\n        获取 实例化对象 原型链 的相关属性\n\n```\nfunction Test () {\n\n}\n\ntest.prototype.showName = function () {\n    console.log(1)\n}\n\nlet obj = new Test ()\nObject.getPrototypeOf(obj) == obj.__proto__\n\n```\n\n    6. Object.keys\n\n        可以用来枚举可遍历的属性 返回一个数组\n\n    7. Object.create\n\n        在原型链上创建对象属性\n\n```\n    <!-- 属性创建在原型链上 -->\n    Object.create({\n        name: '张三'\n    })\n\n    <!-- 字面量方式创建的对象属性挂在自身 -->\n    let test = {\n        name: '张三'\n    }\n\n```\n\n    8. Object.isExtensible\n\n        判断对象是否可以新增属性\n\n    9. Object.preventExtension\n\n        锁住对象 使其不能新增属性 但是原来的属性可以修改删除\n\n    10. Object.seal\n\n        密封对象 不能增加新属性 也不能删除旧属性  但是能修改原来的属性\n\n    11. Object.isSealed\n\n        判断对象是否密封\n\n    12. Object.freeze\n\n        冻结对象 不能新增 不能修改 不能删除\n\n    13. Object.isFrozen\n\n        判断对象是否完全被冻结\n\n    14. Object.getOwnPropertyNames\n\n        获取自身属性名字 返回一个数组\n\n    15. Object.getOwnPropertyDescriptor\n\n        判断某个对象上某个属性的状态描述\n\n    16. Object.defineProperty\n\n\n\n\n    -----------\n\n## 12. 继承\n\n> **调用另一个对象的方法，以另一个对象替换当前对象的上下文**\n>\n> > 缺点\n> >\n> > > 只能继承父级本身属性，原型链的属性无法继承\n\n- **call**\n  > 第二个参数可以省略\n- **apply**\n  > 第二个参数必须是数组或者用 arguments 代替\n- **bind**\n  > bind 与 call 和 apply 的区别在于 bind 是一个函数 不会立即执行 必须在后面再加上一对括号去立即执行\n\n```\n例子1：\n\nfunction Add(a,b)\n{\n    this.add = function(a,b){\n        alert(a+b)\n    };\n    this.xx = 333;\n}\nfunction Sub()\n{\n    this.sub = '张三';\n\n    // call方法\n    Add.call(this); // call继承Add所有方法(不包含原型链上的方法)\n\n    // apply方法  参数不能指定的时候用[]或者arguments代替\n    Add.apply(this, [])\n    // 又可以写成\n    Add.apply(this, arguments)\n\n    // bind方法\n    Add.bind(this)();\n}\n\nx = new Sub();\nx.add(5,7)                  // 11\n\n=====================================\n\n例子2：\n\n若只想继承父级构造函数某一个具体方法\n需要先将父子对象都实例化后 调用父级的具体方法call\n\nfunction Add(a,b)\n{\n    this.add = function(a,b){\n        alert(a+b)\n    };\n    this.xx = 333;\n}\nfunction Sub()\n{\n    this.sub = '张三';\n}\n\nnewAdd = new Add(7,8);\nnewSub = new Sub();\n\n// Sub只继承了Add的add方法并执行相关方法\n\ncall方法：\nnewAdd.add.call(newSub, 10, 4);      // 14\n\napply方法：\nnewAdd.add.apply(newSub, [10, 4]);   // 14\n\nbind方法：\nnewAdd.add.bind(newSub, 10, 4)();   // 14\n\n```\n\n> > **注意**\n> >\n> > > 若想要全部继承父级所有相关属性 得采用==原型链继承==的方式\n\n```\nfunction person(){\n    this.hair = 'black';\n    this.eye = 'black';\n    this.skin = 'yellow';\n    this.view = function(){\n        return this.hair + ',' + this.eye + ',' + this.skin;\n    }\n}\nfunction man(){\n    this.feature = ['beard','strong'];\n}\nman.prototype = new person();\n\n```\n\n---\n\n## 13. cookie sessionStorage localStorage\n\n    1. cookie\n        * 4k的限制；\n        * 服务端和客户端传递时都会带上cookie；\n        * 本质上是对字符串的读取 存储内容过多消耗内存空间 导致页面变卡顿；\n        * 不能被爬虫读取；\n        * 设置时间之前一直有效，到时间就清除；\n    2. sessionStorage\n        * 临时存储：引入“浏览器窗口”的概念，同源同窗口数据不会销毁，不同标签页中数据不能共享，关闭浏览器时候销毁；\n        * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n        * 性能更好，即本地读取数据比服务器获取快多了；\n        * 不能跨tab标签页传值；\n    3. localStorage\n        * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n        * 体积更大 5M；\n        * 持久存储在本地，直到手动清除；\n\n```\nlocalStorage.setItem('sss',1111);\nlocalStorage.getItem('sss');\nlocalStorage.removeItem('sss');\nlocalStorage.clear();\n```\n\n---\n\n## 14. 闭包\n\n    简单回答闭包就是 一个函数返回自身内部函数的调用\n\n    为什么使用？\n\n    因为js是链式的 一层一层向上级查找 所以外部函数无法访问内部函数;\n\n> > 优点\n> > 缺点\n>\n> - 不会被内存回收 容易出现性能问题\n\n```\nfunction foo(){\n    var a = 2;\n\n    function bar(){\n        console.log(a);\n    }\n\n    return bar;\n}\nvar newFoo = foo();\nnewFoo();               // a\n\n```\n\n---\n\n## 15. 深拷贝和浅拷贝\n\n- **浅拷贝**\n  > **复制对象的副本 指向同一内存区域 对副本的操作会影响父级对象**\n\n浅拷贝方式：\n\n1. 直接赋值；\n2. Object.assign();\n3. JSON 序列化；\n\n- **深拷贝**\n  > **复制对象的副本 指向不同的内存区域 与父级对象独立**\n\n```\n// 浅拷贝\nvar a = {\n    name : 'zhangsan'\n}\n\nvar b = a;\nb.name = 'lisi';\n\nconsole.log(a.name);    // \"lisi\"\nconsole.log(b.name);    // \"lisi\"\n\n// 深拷贝  (更完整的深拷贝还需要再详细优化)\nfunction deepCopy(p, c){\n    var c = c || {};\n    for(var i in p ){\n        // 数组和对象的时候再处理\n        if(typeof p[i] === 'object'){\n            c[i] = (p[i].constructor === Array) ? [] : {};\n            deepCopy(p[i], c[i]);\n        }else{\n            // 基本类型直接赋值\n            c[i] = p[i]\n        }\n    }\n    return c;\n}\n\nvar parent = {\n    number: [1, 2, 3],\n    obj: {\n        prop: 1\n    }\n}\n\nvar copyParent = deepCopy(parent);\ncopyParent.number.push(4)\ncopyParent.number                   // 1,2,3,4\nparent.number                       // 1,2,3\n```\n\n---\n\n## 16. 传值类型和引用类型\n\n- **传值类型（基本类型）**\n  > 值为基本类型时候为深拷贝\n  >\n  > > 基本类型就是 null，undefined，Boolean，string，number\n  > >\n  > > > ==独立不干扰==\n- **引用类型**\n  > 值为对象类型时候为浅拷贝\n  >\n  > > 值都是对对象的引用，即一个指向对象的指针\n  > >\n  > > > ==对副本的操作会影响父级对象==\n\n```\n// 传值类型\nvar  a = 1;\nfunction voo(data)\n{\n    data = 2;\n    console.log(data);   // 2\n}\nvoo(a);\nconsole.log(a);    // 1\n\n// 引用类型\nvar  a = {\n    name : \"张三\"\n};\nfunction voo(data)\n{\n    data.name = \"李四\";\n    console.log(data);   //  Object {name: \"李四\"}\n}\nvoo(a);\nconsole.log(a);         //  Object {name: \"李四\"}\n\n// 引用类型不会被基本类型覆盖\nvar  a = {\n    name : \"张三\"\n};\nfunction voo(data)\n{\n    data = 3；\n    console.log(data);   // 3\n}\nvoo(a);\nconsole.log(a);         //  Object {name: \"张三\"}\n\n// 为了解决引用类型的问题  引入深拷贝的概念  参考上面一个概念\n\n```\n\n---\n\n## 17. 函数作用域提升与预编译\n\n> 由于 js 没有其他强类型语言{}这类的块级作用域 只有函数作用域 函数的声明很随意导致各种问题出现\n>\n> > 变量预编译 > 函数预编译\n\n```\n// 第一条\n\na();\nvar a = c = function() {\n    console.log(2)\n};\na();\n\nfunction a() {\n    console.log(1)\n};\na();\n(function(b) {\n    b(), c()\n    var b = c = function a() {\n        console.log(3)\n    }\n    b();\n})(a);\nc();\n\n// 等价于：\nvar a;                      // 变量声明提升\nfunction a() {              // 函数声明提升\n    console.log(1)\n};\na();                        // 1\na = c = function() {\n    console.log(2)\n};\n\na();                        // 2\n\n(function(b) {\n    var b\n    b()                     // 2\n    c()                     // 本来以error\n    // 后来有人指正 原因就在于var b=c=xxx。\n    // c相当于没有加var 不会预编译，这里c直接查找到外部作用域的c\n    b = c = function a() {\n        console.log(3)\n    }\n    b();                    // 3\n})(a);\n\nc();                        // 3\n\n\n// 第二条\nfunction fn(){\n    function a(){console.log(1)}\n    return a;\n    function a(){console.log(2)}\n}\nfn()();                     //2 由于预编译 后面的a覆盖了前面的a\n\n// 第三条\nvar a=10;\nfunction fn(){\n    // 预编译a 赋值undefined，内部作用域存在a这个变量，\n    // 所以这里 !a 就是  !undefined，就是true，进入函数a=20;\n    if (!a) {\n        var a=20\n    }\n    console.log(a)          //  这里是20 ，\n}\nfn()\n\n// 第四条\n<script>\n    console.log(typeof a)   //undefined\n    var a='littlebear';\n    console.log(a)          //littlebear\n</script>\n<script>\n    console.log(typeof a)   //string  第二个<script>标签里的a但会往上查找。\n    var a=1;\n    console.log(a)//1\n</script>\n\n// 第五条\n<script>\n    console.log(typeof a)   //undefined\n    console.log(a)\n    // 报错，遇到<script>标签对时，会先对这一块进行预解析，\n    // 下面没预解析，所以找不到声明过的a，于是报错了\n</script>\n<script>\n    console.log(typeof a)   //undefined\n    var a=1;\n    console.log(a)          //1\n</script>\n\n// 第六条\n<script>\n    function fn(a,b){\n        console.log(a)      //容易上当 初始化a的时候已经赋值'容易上当'\n        var a=10;\n        console.log(a)      //10\n    }\n    fn('容易上当');\n</script>\n\n```\n\n---\n\n## 18. AMD 和 CMD 区别\n\n1. AMD 推崇依赖前置。 （requireJS）\n\n   CMD 推崇依赖就近， （seaJS）\n\n```\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()         // 此处略去 100 行\n    var b = require('./b')  // 依赖可以就近书写\n    b.doSomething()         // ...\n\n})\n// AMD 默认推荐\ndefine(['./a', './b'], function(a, b) {\n    // 依赖必须一开始就写好\n    a.doSomething()    // 此处略去 100 行\n    b.doSomething()\n})\n```\n\n2. 对于依赖的模块，\n\n   AMD 是提前执行（预执行），\n\n   CMD 是延迟执行（懒执行）。\n\n> 不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n\n3. AMD 的 API 默认是一个当多个用，\n\n   CMD 的 API 严格区分，推崇职责单一\n\n> 比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。\n\n---\n\n## 19. 常见服务器的状态码\n\n- 301\n\n  永久重定向\n\n- 302\n\n  临时重定向 会出现 URL 劫持 体现在搜索引擎收录策略上 会改变原有请求方法\n\n* 304\n\n  Not Modified\n\n  客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n\n- 307\n\n  临时重定向 与 302 区别 客户端应`保持请求方法`不变向新的地址发出请求\n\n* 400\n\n  Bad Request\n\n  表示该请求报文中存在语法错误，导致服务器无法理解该请求。多用于接口参数校验。\n\n* 403\n\n  Forbidden\n\n  该状态码表明对请求资源的访问被服务器拒绝了。多用于权限拦截。\n\n* 407\n\n  代理服务器未授权\n\n* 413\n\n  post body 请求体过大\n\n- 500\n\n  Internal Server Error\n\n  该状态码表明服务器端在执行请求时发生了错误。\n\n- 501\n\n  服务器不具备完成请求的功能。比如服务正在重启时，暂时无法响应客户端请求。\n\n- 502\n\n  上游网关错误\n\n- 503\n\n  服务不可用\n\n---\n\n## 20. 事件冒泡和事件捕获\n\n    * 事件冒泡兼容写法\n\n    ```\n    if (event.cancelBubble) {\n        event.cancelBubble = true\n    } else {\n        event.stopPropagation()\n    }\n    ```\n    --------------------------\n\n## 21. 数组\n\n    1. push\n\n        向数组末尾添加指定元素\n\n    2. pop\n\n        移除数组末尾的一个元素 并返回移除的元素\n\n    3. shift\n\n        移除数组第一项 并返回该元素\n\n    4. unshift\n\n        给数组第一项加上一个元素 返回数组长度\n\n    5. join\n\n        数组按照指定的字符换转成字符串\n\n    6. sort\n\n        数组按照ASCII排序  所以要完全按照从小到大的顺序排序的话需要指定参数 1 -1 0\n\n    7. splice\n\n        从0开始\n\n    > 删除 ---------------------（**起始位置，截取个数**）\n\n    > 插入 ---------------------（**起始位置，截取个数为0，要插入的项**）\n\n    > 替换----------------------（**起始位置，截取个数为1，要插入的项**）\n\n    8. slice\n\n    9. concat\n\n    10. reverse\n\n    11. 遍历数组的方法\n\n        > forEach\n        > for in\n\n        两者区别 在于 for in 会遍历数组原型链的属性值\n\n        为了避免这样的情况 使用 hasOwnProperty 解决\n\n---\n\n## 22.正则\n\n- ()：小括号，叫做分组符。\n- \\s : 空格\n- \\S : 非空格\n- \\d : 数字\n- \\D : 非数字\n- \\w : 字符 ( 字母 ，数字，下划线\\_ )\n- \\W : 非字符\n- .（点）——任意字符\n- \\. : 真正的点\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- \\B : 非独立的部分\n- {n,m}：至少出现 n 次，最多 m 次\n- {n,} :至少 n 次\n  - - :任意次 相当于{0,}\n- ？ ：零次或一次 相当于{0,1}\n  - - ：一次或任意次相当于 {1,}\n- {n}： 正好 n 次\n- [] ： 表示某个集合中的任意一个 不能为空\n\n---\n\n> ### 字符串相关的正则方法\n\n- ### match()\n\n> 返回一个包含匹配内容的数组\n\n```\nvar str = 'abcdef';\n\nvar re = /B/i;\n\nstr.match(re) // [b]\n```\n\n例子 2：\n\n```\nurl = https://dimg.fws.qa.nt.ctripcorp.com/images/2d090m000000062hy59E5.jpg\"\nurl.match(/[^\\/]*$/) // 2d090m000000062hy59E5.jpg\nurl.match(/^[^\\/]*/) // https\n```\n\n- ### search()\n\n> 返回匹配到的第一个内容所在的位置\n\n```\nvar str = 'abcdef';\n\nvar re = /B/i;\n\nstr.search(re) // 1\n\n```\n\n- ### replace()\n\n> 查找符合正则的字符串并替换成==一个==对应的字符串。返回替换后的内容。\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); // 我爱**，*上太阳升。\n\n```\n\n并不能解决一个文字\\*的对应\n\n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n            alert(str);\n            //用来测试：参数代表每次搜索到的符合正则的字符，\n            //所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }\n            return result; //所以搜索到了几个字就返回几个*\n        });\nalert(str2)\n```\n\n    ```\n    var str = '2013-6-7';\n    var re = /(\\d+)(-)/g;\n\n    str = str.replace(re,function($0,$1,$2){\n            // replace()中如果有子项，\n            // 第一个参数 ：$0（匹配成功后的整体结果  2013-  6-）,\n            // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n            // 第三个参数 : $2(匹配成功的第二个分组，这里指的是-    - - )\n        return $1 + '.';  //分别返回2013.   6.\n    });\n\n    alert( str );   //2013.6.7\n    //整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\n    ```\n\n---\n\n### 正则两个方法\n\n- ### test()\n\n> 匹配到指定内容返回 true\n\n- ### ==exec()==\n\n> 返回第一匹配项信息的数组 若没有返回 null\n> 有两个属性 index input\n\n    ```\n    var text = 'mom and dad and baby'\n    var pattern = /mom( and dad( and baby)?)?/gi\n    var matches = pattern.exec(text)\n    mathes.index // 0\n    mathes.input // mom and dad and baby\n    mathes[0] // mom and dad and baby\n    mathes[1] //  and dad and baby\n    mathes[2] // and baby\n    ```\n\n## 23. 后退监听\n\n> history.back() history.forward() history.replace()触发 onpopstate 事件\n\n    ```\n    window.onpopstate = function () {\n        alert('2222')\n        history.pushState(null, null, document.URL)\n        return false\n    }\n    history.pushState(null, null, document.URL)\n    ```\n\n    onbeforeunload事件有坑 chrome51版本及以后不能自定义文字 并且 页面载入之后一定要有浏览器行为才能触发\n\n\n## 27. 进制转换\n\n> 十进制转十六进制\n\n    ```\n    var s = 255\n    s.toString(16) // ff\n    ```\n\n> 十六进制转十进制\n\n    ```\n    parseInt('0xFF')   // 255\n    ```\n\n## 28. label 绑定事件一定要让事件委托到触发里面的 input\n\n    所以事件委托的时候直接监听input\n\n## 29. 浏览器中的简单请求和复杂请求\n\n    简单请求\n        - 请求类型 get/post/head\n        - 除了常见的请求头外，无额外自定义请求头\n          - Content-Type （且值是application/x-www-form-urlencoded，multipart/form-data，text/plain 之一）\n          - Content-Language\n          - Accept\n          - Accept-Language\n          - Save-Data\n\n    复杂请求\n        会发送options预检请求\n\n## 30. Math\n\n    1. Math.floor 向下舍入；\n    2. Math.ceil  向上舍入;\n    3. Math.cos   余弦;\n    4. Math.round 四舍五入;\n    5. Math.sin   正弦；\n    6. Math.tan   正切；\n\n## 31. isNaN\n\n    首先需要知道 '' == 0   'abc' != 0   [] == 0  [1] != 0   null == 0  {} != 0  undefined != 0\n\n    ```\n    isNaN('')   // false\n    isNaN(' ')  // false\n    isNaN('abc') // true\n    isNaN(undefined) // true\n    isNaN([])   // false\n    isNaN({})   // true\n    isNaN(null) // false\n\n    ```\n\n## 32. Boolen\n\n    首先需要知道  0 == false    1 == true  '' == false   undefined != false != true    null != false != true\n\n    ```\n    Boolean('') // false\n    Boolean('ssss') // true\n    Boolean([])  // true\n    Boolean([1,2])  // true\n    Boolen({})      // true\n    Boolen(null)    // false\n    Boolen(undefined)   // false\n    ```\n\n## 33. 解决回调地狱 （多级回调）\n\n    1. Promise\n\n    2. aSync/await\n\n    3. generator\n\n## 34. 字符串\n\n    1. slice\n\n        在 不修改目标数组 的情况下返回截取的指定元素（ **起始位置，截止位置**）\n\n        从0开始 ==不包含最后一个数值==\n\n        负数情况下 将负数加上自身长度得到的数值作为参数\n\n    2. substr\n\n        subdtr接收的是 起始位置 和 所要返回的字符串长度\n\n        在负数情况下  将第一个参数与字符串长度相加后的数值作为第一个参数\n\n    3. substring\n\n        默认会将较小的参数作为第一个参数\n\n        在 不修改目标数组 的情况下返回截取的指定元素 （ **起始位置，截止位置**）\n\n        负数当做0处理\n\n```\nlet test = 'abcdef'\ntest.slice(0, -1)   // abcde\ntest.slice(2, -3)   => test.slice(2,3)  // c\n\ntest.substring(1, -2) => a\ntest.substring(2, -3) => ab\n```\n\n    4. split\n\n        字符串按照指定规则转换成数组\n\n## 35. let 与 var 区别\n\n    1. var存在变量提升， let不存在；\n    2. let不允许重复声明；\n    3. var挂载在window下，let挂载在块作用域下；\n\n## 36. 为什么 var 可以重复声明\n\n    因为js运行过程中，\n\n    引擎 负责整个代码编译和运行\n\n    编译器 负责词法分析、语法分析、代码生成等工作\n\n    编译器从左至右编译var a，如果a不存在则在作用域声明一个新的变量a，若存在a则忽略继续向下编译；\n\n    引擎遇到a = 2，按照作用域链向上查找 若存在变量a直接赋值，不存在则在作用域重新声明新的变量并赋值2\n\n## 37. CommonJS 中的 require/exports 和 ES6 的 import/export 有什么区别\n\n1.\n\n> CommomJS 模块 require 代码时候会立刻执行；\n> ES6 模块是动态引用，不会立刻执行，仅仅作为一个加载模块的对象引用；\n\n2.\n\n> CommonJs 模块输出的是一个值的拷贝， 输出后的对象会被缓存（即 如果发现一个模块被多次引用，会直接返回已经执行的部分）；\n\n```\n// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n```\n\n```\n// main.js\nvar mod = require('./lib');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n\n```\n\n> ES6 模块输出的是值的只读引用；\n\n- 接口输出的变量是只读的，重新赋值会报错；\n- export 通过接口输出的是同一个值，得到的都是同样的实例；\n- 如果需要 import 支持动态加载 提案建议引入 import() 返回一个 promise 对象；\n\n参考资料：\n\n1. [ES6 模块与 CommonJS 模块的差异](http://es6.ruanyifeng.com/#docs/module-loader)\n\n## 38. 浏览器缓存\n\n    浏览器缓存分为 强缓存 和 协商缓存\n\n    1. 客户端先根据资源的http header判断是否命中强缓存，如果命中直接从缓存中读取；\n\n    2. 强缓存未命中，客户端发出请求，服务端根据请求的request header验证资源是否命中协商缓存，这个过程成为http再验证。如果命中，服务器将请求返回，状态码304，但不返回资源，而是告诉客服端可以从缓存读取；\n\n    3. 当协商缓存也没有命中，直接服务端返回资源给客户端；\n\n\n    强缓存\n\n    1. Expires 代表缓存过期时间；\n\n    2. Cache-Control： max-age  代表缓存最大生命周期；\n\n    协商缓存\n\n    1. Last-Modified 代表资源最后更新时间；\n\n    2. If-Modified-Since 代表 判断两次请求之间是否有过修改 没有直接返回协商缓存；\n\n## 39. 处理 js 双精度问题\n\n    ```javascript\n        0.1 + 0.2 = 0.30000000000000004\n    ```\n\n由于计算机是做二进制运算\n\n0.1 => 0.0001 1001 1001 1001…（无限循环）\n\n0.2 => 0.0011 0011 0011 0011…（无限循环）\n\n双精度浮点数的小数部分最多支持 52 位\n\n处理方法：\n\n    1. 优先考虑服务端计算；\n    2. 利用精度溢出结尾要么99999要么1111，可以利用Math.round()四舍五入；\n\n\n## 40. postMessage\n\n1. window.postMessage() 可以安全进行跨域、跨页面通信；\n1. 页面加载完成后才能进行跨域通信；\n\n发起端可以是 open 一个新窗口 或者 创建一个 iframe 往新窗口里发送数据\n\n案例:\n\n    ```javascript\n\n<!-- 客户端两种方式 -->\n\n<!-- 当前页面地址 http://www.webhek.com -->\n<!-- open方式 -->\n\n//弹出一个新窗口\nvar domain = 'http://fanyi.youdao.com';\nvar myPopup = window.open(domain, 'myWindow');\n\n//周期性的发送消息\nsetInterval(function(){\nvar message = 'Hello! The time is: ' + (new Date().getTime());\nconsole.log('blog.local: sending message: ' + message);\n//send the message and target URI\nmyPopup.postMessage(message,domain);\n},6000);\n\n<!-- iframe方式 -->\n\n//捕获 iframe\nvar domain = \"http://fanyi.youdao.com\";\nvar iframe = document.getElementById('myIFrame').contentWindow;\n\n//发送消息\nsetInterval(function(){\nvar message = 'Hello! The time is: ' + (new Date().getTime());\nconsole.log('blog.local: sending message: ' + message);\n//send the message and target URI\niframe.postMessage(message,domain);\n},6000);\n\n<!-- 接收端 -->\n\n//监听消息反馈\nwindow.addEventListener('message',function(event) {\nif(event.origin !== 'http://www.webhek.com') return;\nconsole.log('received response: ',event.data);\n},false);\n\n    ```\n\n> 截图如下：\n\n![web骇客网站  接收端截图](https://wx4.sinaimg.cn/mw690/006ANKB8gy1fqhqrhftfmj30yu0objvr.jpg)\n![有道翻译网站 接收端截图](https://wx2.sinaimg.cn/mw690/006ANKB8gy1fqhqri8fjlj30zk0h4tbk.jpg)\n\n> 参考资料\n\n1. [用 HTML5 里的 window.postMessage 在两个网页间传递数据](http://www.webhek.com/post/window-postmessage-api.html)\n\n## 41. Service Worker\n\n> 背景\n\n为了解决 web 业务不断增加带来更多消耗资源、耗时等复杂运算带来性能问题，w3c 初期提出 Web Worker 的 API，目的为了解放主线程。原理是 将复杂 耗时的操作独立出来交给 Web Worker，完成后通过 postMessage 方法告诉主线程。\n\n缺点：临时存在，不能永久；为此提出 Service Worker，在 Web Worker 基础上增加持久缓存能力。\n\n在 Service Worker 之前有 APPCache 这个持久缓存的 API，不过存在更新机主不完善，二次更新，大小限制，回滚等问题，具体参考下方链接 1。\n\nService Worker 的特性如下：\n\n- 一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。\n\n- 一旦被 install，就永远存在，除非被 uninstall\n\n- 需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）\n\n- 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）\n\n- 离线内容开发者可控\n\n- 能向客户端推送消息\n\n- 不能直接操作 DOM\n\n- 出于安全的考虑，必须在 HTTPS 环境下才能工作\n\n- 异步实现，内部大都是通过 Promise 实现\n\n- 只能运行在 HTTPS 协议下\n\n> 参考资料\n\n1. [为什么 app cache 没有得到大规模应用？它有哪些硬伤吗？](https://www.zhihu.com/question/29876535)\n2. [Service Worker 简介](https://lavas.baidu.com/doc/offline-and-cache-loading/service-worker/service-worker-introduction)\n3. [如何优雅的为 PWA 注册 Service Worker](https://zhuanlan.zhihu.com/p/28161855)\n\n## 42 加载更多/下拉刷新\n\n原理：\n\nscrollTop（滚动条滚动距离） + clientHeight（可见区域高度） == scrollHeight（元素实际高度）\n\n备注：\n\noffsetHeighgt = height + padding + border\n\nclientHeight = height + padding\n\n## 43. js 标签中`async`和`defer`的作用与区别\n\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。\n并行加载，\n\n- async\n\n无顺序的加载，可能在`DOMContentLoaded`触发之前或之后执行。\n\n- defer\n\n会等待 document 解析完成，按照 defer 顺序执行对应脚本，全部执行完毕后会触发`DOMContentLoaded`事件\n\n\n## JsBridge\n\n### 实现js调用Native的方式，有三个方法：\n- 注入api\n- 劫持URL Scheme\n- 弹窗拦截\n\n\n【注入api】 通过webview提供的接口，向js的上下文（window）注入对象或方法，js直接调用相关方法\n【劫持URL Scheme】通常是web端唤醒App（或跳到App某一个页面）。Native劫持Web的请求自定义处理。\n【弹窗拦截】类似劫持URL Scheme原理，劫持弹窗、二次确认等方法。\n\n### Native调用js的方法\n\nNative调用js的方式本质就是 执行拼接的js字符串\n\n# css\n\n## BFC是什么？BFC能用来干什么？怎么才能触发BFC？\n\nBFC（块格式化上下文）\n\n触发BFC几种方式：\n- 浮动 （float不为none即可）\n- 绝对定位（position: absoulte 或 fixed）\n- display: inline-block | table-cell | flex | inline-flex\n- overflow （除了visible之外的值）\n\nBFC特点\n- 如果两个块级元素属于同一个BFC，上下margin会重叠，以较大的为准；\n- BFC区域不会与浮动元素的区域重叠；\n- 页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。\n\nBFC作用\n- 清除元素浮动；\n- margin重叠；\n- 两栏布局；\n\n","slug":"前端知识点总结","published":1,"updated":"2024-02-20T06:48:45.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvc003qlwxab25c5r7m","content":"<h1><span id=\"js-知识点总结\">js 知识点总结</span></h1><h2><span id=\"1-解码和编码\">1. 解码和编码</span></h2><blockquote>\n<p>原因：因为链接里面会有中文或者特殊字符号无法跳转需要进行相关编码解码</p>\n</blockquote>\n<p><strong>编码</strong></p>\n<blockquote>\n</blockquote>\n<pre><code>&#39;encodeURI&#39;: 只对查询的参数做编码\n\n&#39;encodeURIComponent&#39;: 对整个url做编码，包括? &amp; / #\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'www.baidu.com/test?name=\"zhangsan\"'</span></span><br><span class=\"line\"><span class=\"built_in\">encodeURI</span>(a) =&gt; <span class=\"string\">'www.baidu.com/test?name=%22zhangsan%22'</span></span><br><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>(a) =&gt; <span class=\"string\">'www.baidu.com%2Ftest%3Fname%3D%22zhangsan%22'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解码</strong></p>\n<blockquote>\n</blockquote>\n<pre><code>&#39;decodeURI&#39;: 只对查询参数做解码\n&#39;decodeURIComponent&#39;: 对整个URL做解码\n</code></pre>\n<hr>\n<h2><span id=\"2-序列化和反序列化\">2. 序列化和反序列化</span></h2><blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()        // 序列化</span><br><span class=\"line\">JSON.parse()            // 反序列化</span><br></pre></td></tr></table></figure>\n\n<p>使用 ajax 需要设置请求头部信息</p>\n<p>header: {‘Content-Type’: ‘application/json; charset=utf-8;’}</p>\n<blockquote>\n<p>JSON.stringify() 可以简单的用来迅速判断两个对象是否相等，但不严谨（比如：序列化失败）</p>\n</blockquote>\n<hr>\n<h2><span id=\"3-日期\">3. 日期</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Date().getTime()   // 单位  秒</span><br><span class=\"line\">// 获取当前时间   （存在兼容性）</span><br><span class=\"line\">new Date().toLocaleDateString() // 2017/7/24</span><br><span class=\"line\">new Date().toLocaleTimeString() // 下午5:07:33</span><br><span class=\"line\">new Date().toLocaleString()     // 2017/7/24 下午5:07:33</span><br><span class=\"line\">// 若要显示24进制 需要option选项</span><br><span class=\"line\">new Date().toLocaleTimeString(&quot;UTC&quot;,&#123; hour12: false &#125;)  // 17:20:16</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"4-重排重绘\">4. 重排/重绘</span></h2><ol>\n<li><p>重排（回流）：几何属性发生变化 比如：内容、结构、位置或尺寸发生变化，需要重新计算样式和渲染树；</p>\n</li>\n<li><p>重绘：元素发生的改变只影响了节点的一些样式（背景色、边框色、文字颜色等）</p>\n</li>\n</ol>\n<p>回流必定会发生重绘，重绘不一定会引发回流。</p>\n<blockquote>\n<p>重排比重绘要消耗更多的资源</p>\n</blockquote>\n<hr>\n<h2><span id=\"5-锚点定位-scrollintoview-无兼容问题\">5. 锚点定位 scrollIntoView （无兼容问题）</span></h2><p>可以用来做一些 tab 定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;xx&apos;).scrollIntoView()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"6-typeof-和-instanceof\">6. typeof 和 instanceof</span></h2><blockquote>\n<h3><span id=\"typeof\">typeof</span></h3></blockquote>\n<p>会返回一个变量的基本类型，只有以下几种：number,boolean,string,object,function；</p>\n<p>缺点：</p>\n<ul>\n<li>不适用于来判断数组，因为不管是数组还是对象，都会返回 object。</li>\n<li>判断不了 null null 也是对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof [1]      // Object</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h3><span id=\"instanceof\">instanceof</span></h3></blockquote>\n<p>运算符用来测试一个对象在其原型链中是否存在一个构造</p>\n<p>返回的是一个布尔值 只能用来判断对象和函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;&#125;;</span><br><span class=\"line\">alert(  a instanceof Object )     // true</span><br><span class=\"line\">var a  = [];</span><br><span class=\"line\">alert(  a instanceof Array )    // true</span><br></pre></td></tr></table></figure>\n\n<p>最靠谱也是最方便的办法使用<code>Object.prototype.toString.call()</code>来判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">types</span>(<span class=\"params\">target</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"7-requestanimationframe-raf-动画-api-兼容-ie-89\">7. requestAnimationFrame （RAF） 动画 api 兼容 Ie 8/9</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0</span><br><span class=\"line\"></span><br><span class=\"line\">window.requestAnimFrame = (function()&#123;</span><br><span class=\"line\">  return  window.requestAnimationFrame       ||</span><br><span class=\"line\">          window.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          window.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          function( callback )&#123;</span><br><span class=\"line\">            window.setTimeout(callback, 1000 / 60);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">requestAnimFrame(animloop)</span><br><span class=\"line\"></span><br><span class=\"line\">function animloop () &#123;</span><br><span class=\"line\">    document.getElementById(&apos;test&apos;).style.top = i ++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"优点\">优点</span></h3><pre><code>1. 解决毫秒的不精确性；\n2. 避免过渡渲染；\n3. 浏览器可以优化并行的动画动作，将合并的动作放入一个渲染周期；\n4. 过程可控；\n</code></pre>\n<blockquote>\n<p>动画效率之争</p>\n</blockquote>\n<pre><code>css3动画高效的原因有以下三点：\n\n    1. 强制使用硬件加速（GPU）；\n    2. 使用与RAF类似的机制；\n    3. 优化DOM操作 避免内存消耗来减少卡顿；\n\n同时因为采用GPU， 导致浏览器一直出于高负荷运转，移动端电量损耗和一定卡顿，\n而且css不能完全被js控制\npc上兼容性\n</code></pre>\n<p>js 动画库 （比如 Velocity.js 和 GSAP）</p>\n<hr>\n<h2><span id=\"8-跨域\">8. 跨域</span></h2><p>仅客户端上 域名、端口、协议 三者有一个不一样就会跨域。</p>\n<p>跨域的办法</p>\n<ol>\n<li><h3><span id=\"服务端配置cors\">服务端配置CORS</span></h3><ol>\n<li>access-control-allow-method</li>\n<li>access-control-allow-origin</li>\n</ol>\n</li>\n<li><h3><span id=\"nginx代理转发\">nginx代理转发</span></h3><ol>\n<li>location / {  proxy_pass xxxxxxx;   }</li>\n</ol>\n</li>\n<li><h3><span id=\"jsonp\">JSONP</span></h3><p>通过 js 标签引入一个 js 文件 这个 js 文件载入成功之后会执行我们在 url 参数中指定的函数 并且会将后端传入给我们的 json 数据作为参数传入</p>\n<p>例如：url?item=1&amp;callback=filter</p>\n<p>原生 js 实现 jsonp 的话 定义好 callback 的函数名称,动态创建 js 标签 url 加上查询的参数写好 callback 的回调函数名称即可</p>\n</li>\n<li><h3><span id=\"利用-iframe-并修改-documentdomain-来跨子域\">利用 iframe 并修改 document.domain 来跨子域</span></h3><p>两个不同域的页面引入 iframe 标签 同时将两个页面的主域设置成相同的域名</p>\n<p><img src=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox669ialYSHxewnD1B4L5UibVqhMnFEfibLhA8vUQu2s9rltB2HZ6UTQ19iag/0?wx_fmt=png\" alt=\"页面1\"><br><img src=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6Kv2iaHanjIzQHDNeia2FsoHSz8AJPkxh0IqickdbPg0CPeFPhoQMpuv5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"页面2\"></p>\n</li>\n<li><h3><span id=\"windowname-可以配合-iframe\">window.name （可以配合 iframe）</span></h3><p>同源窗口下 window.name 对所有页面都是共享的</p>\n<p>每个页面对 window.name 都有读写权限</p>\n<p>window.name 的值并不会因为新页面而重置</p>\n</li>\n<li><p>widnow.postMessage （存在兼容性 IE7/8 不支持）</p>\n<p>！<a href=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6z8ibxywKPEusvEA2xS8ialrQ1Oxd0jw0V8C6f7Gicy6Obsyt5bicibxdx5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" target=\"_blank\" rel=\"noopener\">页面 1</a></p>\n<p>！<a href=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6B9Fpsa9KmNAMibvfSqE8Qv2icpLzzFE6NfvEp8YxWW6JOMTacIzaQzxw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" target=\"_blank\" rel=\"noopener\">页面 2</a></p>\n</li>\n<li><p>Nginx 反向代理</p>\n</li>\n</ol>\n<h2><span id=\"9-selection\">9. selection</span></h2><blockquote>\n<p>获取鼠标划过文本的对象<br><code>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</code></p>\n</blockquote>\n<hr>\n<h2><span id=\"10-正则表达式\">10. 正则表达式</span></h2><blockquote>\n<p>常用规则</p>\n</blockquote>\n<ul>\n<li><p>\\n 回车</p>\n</li>\n<li><p>\\t 制表符</p>\n</li>\n<li><p>\\r 换行符</p>\n</li>\n<li><p>\\s 空格</p>\n</li>\n<li><p>\\u4e00-\\u9fa5 中文</p>\n</li>\n<li><p>\\w 大小写字母_数字</p>\n</li>\n<li><p>\\b : 独立的部分 （ 起始，结束，空格 ）</p>\n</li>\n<li><p>{n, m} 至少出现 n 次 最多 m 次</p>\n</li>\n<li><p>{n,} 至少 n 次</p>\n</li>\n<li><p>* 任意次</p>\n</li>\n<li><p>+ 至少一次</p>\n</li>\n<li><p>{n} 至少 n 次</p>\n</li>\n<li><p>() 分组符号</p>\n</li>\n<li><p>[\\s\\S] 任意字符</p>\n</li>\n<li><p>^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。</p>\n</li>\n<li><p>$正则的最后位置 , 就代表结束的意思</p>\n</li>\n<li><p>?&lt;= 向前匹配 ?= 向后匹配</p>\n<p>匹配中文: [\\u4e00-\\u9fa5]</p>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re1 = /\\d-+/g;        // 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-</span><br><span class=\"line\">var re1 = /(\\d-）+/g;     // 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-</span><br><span class=\"line\">var re2  = /(\\d+)(-)/g;   // 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re = /(\\d+)(-)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,function($0,$1,$2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //replace()中如果有子项，</span><br><span class=\"line\">    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,</span><br><span class=\"line\">    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span><br><span class=\"line\">    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )</span><br><span class=\"line\">    return $1 + &apos;.&apos;;  //分别返回2013.   6.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[] 表示某个集合中的任意一个</li>\n<li>[^a] 排除 a</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// var re = /\\bclassname\\b/;</span><br><span class=\"line\"></span><br><span class=\"line\">// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会</span><br><span class=\"line\">// 把classname当做一个字符串去匹配。</span><br><span class=\"line\"></span><br><span class=\"line\">var re = new RegExp(&apos;\\\\b&apos;+classname+&apos;\\\\b&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配的时候，classname前面必须是起始或者空格，后面也是。</span><br><span class=\"line\"></span><br><span class=\"line\">默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"11-object\">11. Object</span></h2><pre><code>1. constructor\n\n    实例的constructor 永远指向 构造函数 的 prototype.constructor\n\n    理解成 实例是基于构造函数原型链生成的对象\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function A(x)&#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var newA = new A(name);</span><br><span class=\"line\"></span><br><span class=\"line\">此时：</span><br><span class=\"line\">newA.constructor == A.prototype.constructor;</span><br></pre></td></tr></table></figure>\n\n<pre><code>2. hasOwnProperty\n\n    判断对象上某个属性是否属于自身 属于自身为true, 原型链上为false\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a () &#123;</span><br><span class=\"line\">    this.show = &apos;x&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.prototype.hide = function () &#123;</span><br><span class=\"line\">    console.log(111111);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var z = new a();</span><br><span class=\"line\">z.hasOwnProperty(&apos;show&apos;);          // true</span><br><span class=\"line\">z.hasOwnProperty(&apos;hide&apos;);          // false</span><br></pre></td></tr></table></figure>\n\n<pre><code>3. isPrototypeOf\n\n    判断一个对象是否是另一个对象的原型\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var monkey = &#123;</span><br><span class=\"line\">    hair : true,</span><br><span class=\"line\">    breathes : function()&#123;</span><br><span class=\"line\">        alert(&apos;1&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Human的原型链绑定monkey对象</span><br><span class=\"line\">Human.prototype = monkey;</span><br><span class=\"line\"></span><br><span class=\"line\">var man = new Human(&apos;张三&apos;);</span><br><span class=\"line\">monkey.isPrototypeOf(man);      // true</span><br></pre></td></tr></table></figure>\n\n<pre><code>4. prototype和__proto__\n\n    prototype是一个函数的内置属性（每个函数都有一个prototype属性）\n\n    __proto__ 是一个实例对象的内置属性 实例化的对象在内部通过此属性寻找原型链\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person = function () &#123;&#125;</span><br><span class=\"line\">var zhangsan = new Person ()</span><br><span class=\"line\"></span><br><span class=\"line\">zhansan.__prop__ = Person.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">new 的过程拆分成以下四步</span><br><span class=\"line\"></span><br><span class=\"line\">1. var p = &#123;&#125;</span><br><span class=\"line\">2. p.__proto__ = Person.prototype</span><br><span class=\"line\">3. ret = Person.call(p, arguments)</span><br><span class=\"line\">4. 返回值ret若是对象则直接返回ret，不是则返回新的对象p</span><br></pre></td></tr></table></figure>\n\n<pre><code>5. Object.getPrototypeOf\n\n    获取 实例化对象 原型链 的相关属性\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Test () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test.prototype.showName = function () &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj = new Test ()</span><br><span class=\"line\">Object.getPrototypeOf(obj) == obj.__proto__</span><br></pre></td></tr></table></figure>\n\n<pre><code>6. Object.keys\n\n    可以用来枚举可遍历的属性 返回一个数组\n\n7. Object.create\n\n    在原型链上创建对象属性\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 属性创建在原型链上 --&gt;</span><br><span class=\"line\">Object.create(&#123;</span><br><span class=\"line\">    name: &apos;张三&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 字面量方式创建的对象属性挂在自身 --&gt;</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">    name: &apos;张三&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>8. Object.isExtensible\n\n    判断对象是否可以新增属性\n\n9. Object.preventExtension\n\n    锁住对象 使其不能新增属性 但是原来的属性可以修改删除\n\n10. Object.seal\n\n    密封对象 不能增加新属性 也不能删除旧属性  但是能修改原来的属性\n\n11. Object.isSealed\n\n    判断对象是否密封\n\n12. Object.freeze\n\n    冻结对象 不能新增 不能修改 不能删除\n\n13. Object.isFrozen\n\n    判断对象是否完全被冻结\n\n14. Object.getOwnPropertyNames\n\n    获取自身属性名字 返回一个数组\n\n15. Object.getOwnPropertyDescriptor\n\n    判断某个对象上某个属性的状态描述\n\n16. Object.defineProperty\n\n\n\n\n-----------\n</code></pre>\n<h2><span id=\"12-继承\">12. 继承</span></h2><blockquote>\n<p><strong>调用另一个对象的方法，以另一个对象替换当前对象的上下文</strong></p>\n<blockquote>\n<p>缺点</p>\n<blockquote>\n<p>只能继承父级本身属性，原型链的属性无法继承</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><strong>call</strong><blockquote>\n<p>第二个参数可以省略</p>\n</blockquote>\n</li>\n<li><strong>apply</strong><blockquote>\n<p>第二个参数必须是数组或者用 arguments 代替</p>\n</blockquote>\n</li>\n<li><strong>bind</strong><blockquote>\n<p>bind 与 call 和 apply 的区别在于 bind 是一个函数 不会立即执行 必须在后面再加上一对括号去立即执行</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\"></span><br><span class=\"line\">function Add(a,b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.add = function(a,b)&#123;</span><br><span class=\"line\">        alert(a+b)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.xx = 333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.sub = &apos;张三&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // call方法</span><br><span class=\"line\">    Add.call(this); // call继承Add所有方法(不包含原型链上的方法)</span><br><span class=\"line\"></span><br><span class=\"line\">    // apply方法  参数不能指定的时候用[]或者arguments代替</span><br><span class=\"line\">    Add.apply(this, [])</span><br><span class=\"line\">    // 又可以写成</span><br><span class=\"line\">    Add.apply(this, arguments)</span><br><span class=\"line\"></span><br><span class=\"line\">    // bind方法</span><br><span class=\"line\">    Add.bind(this)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">x = new Sub();</span><br><span class=\"line\">x.add(5,7)                  // 11</span><br><span class=\"line\"></span><br><span class=\"line\">=====================================</span><br><span class=\"line\"></span><br><span class=\"line\">例子2：</span><br><span class=\"line\"></span><br><span class=\"line\">若只想继承父级构造函数某一个具体方法</span><br><span class=\"line\">需要先将父子对象都实例化后 调用父级的具体方法call</span><br><span class=\"line\"></span><br><span class=\"line\">function Add(a,b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.add = function(a,b)&#123;</span><br><span class=\"line\">        alert(a+b)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.xx = 333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.sub = &apos;张三&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">newAdd = new Add(7,8);</span><br><span class=\"line\">newSub = new Sub();</span><br><span class=\"line\"></span><br><span class=\"line\">// Sub只继承了Add的add方法并执行相关方法</span><br><span class=\"line\"></span><br><span class=\"line\">call方法：</span><br><span class=\"line\">newAdd.add.call(newSub, 10, 4);      // 14</span><br><span class=\"line\"></span><br><span class=\"line\">apply方法：</span><br><span class=\"line\">newAdd.add.apply(newSub, [10, 4]);   // 14</span><br><span class=\"line\"></span><br><span class=\"line\">bind方法：</span><br><span class=\"line\">newAdd.add.bind(newSub, 10, 4)();   // 14</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>若想要全部继承父级所有相关属性 得采用==原型链继承==的方式</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person()&#123;</span><br><span class=\"line\">    this.hair = &apos;black&apos;;</span><br><span class=\"line\">    this.eye = &apos;black&apos;;</span><br><span class=\"line\">    this.skin = &apos;yellow&apos;;</span><br><span class=\"line\">    this.view = function()&#123;</span><br><span class=\"line\">        return this.hair + &apos;,&apos; + this.eye + &apos;,&apos; + this.skin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function man()&#123;</span><br><span class=\"line\">    this.feature = [&apos;beard&apos;,&apos;strong&apos;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">man.prototype = new person();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"13-cookie-sessionstorage-localstorage\">13. cookie sessionStorage localStorage</span></h2><pre><code>1. cookie\n    * 4k的限制；\n    * 服务端和客户端传递时都会带上cookie；\n    * 本质上是对字符串的读取 存储内容过多消耗内存空间 导致页面变卡顿；\n    * 不能被爬虫读取；\n    * 设置时间之前一直有效，到时间就清除；\n2. sessionStorage\n    * 临时存储：引入“浏览器窗口”的概念，同源同窗口数据不会销毁，不同标签页中数据不能共享，关闭浏览器时候销毁；\n    * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n    * 性能更好，即本地读取数据比服务器获取快多了；\n    * 不能跨tab标签页传值；\n3. localStorage\n    * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n    * 体积更大 5M；\n    * 持久存储在本地，直到手动清除；\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(&apos;sss&apos;,1111);</span><br><span class=\"line\">localStorage.getItem(&apos;sss&apos;);</span><br><span class=\"line\">localStorage.removeItem(&apos;sss&apos;);</span><br><span class=\"line\">localStorage.clear();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"14-闭包\">14. 闭包</span></h2><pre><code>简单回答闭包就是 一个函数返回自身内部函数的调用\n\n为什么使用？\n\n因为js是链式的 一层一层向上级查找 所以外部函数无法访问内部函数;\n</code></pre>\n<blockquote>\n<blockquote>\n<p>优点<br>缺点</p>\n</blockquote>\n<ul>\n<li>不会被内存回收 容易出现性能问题</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    function bar()&#123;</span><br><span class=\"line\">        console.log(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var newFoo = foo();</span><br><span class=\"line\">newFoo();               // a</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"15-深拷贝和浅拷贝\">15. 深拷贝和浅拷贝</span></h2><ul>\n<li><strong>浅拷贝</strong><blockquote>\n<p><strong>复制对象的副本 指向同一内存区域 对副本的操作会影响父级对象</strong></p>\n</blockquote>\n</li>\n</ul>\n<p>浅拷贝方式：</p>\n<ol>\n<li>直接赋值；</li>\n<li>Object.assign();</li>\n<li>JSON 序列化；</li>\n</ol>\n<ul>\n<li><strong>深拷贝</strong><blockquote>\n<p><strong>复制对象的副本 指向不同的内存区域 与父级对象独立</strong></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 浅拷贝</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">    name : &apos;zhangsan&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = a;</span><br><span class=\"line\">b.name = &apos;lisi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.name);    // &quot;lisi&quot;</span><br><span class=\"line\">console.log(b.name);    // &quot;lisi&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 深拷贝  (更完整的深拷贝还需要再详细优化)</span><br><span class=\"line\">function deepCopy(p, c)&#123;</span><br><span class=\"line\">    var c = c || &#123;&#125;;</span><br><span class=\"line\">    for(var i in p )&#123;</span><br><span class=\"line\">        // 数组和对象的时候再处理</span><br><span class=\"line\">        if(typeof p[i] === &apos;object&apos;)&#123;</span><br><span class=\"line\">            c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\">            deepCopy(p[i], c[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            // 基本类型直接赋值</span><br><span class=\"line\">            c[i] = p[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var parent = &#123;</span><br><span class=\"line\">    number: [1, 2, 3],</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">        prop: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var copyParent = deepCopy(parent);</span><br><span class=\"line\">copyParent.number.push(4)</span><br><span class=\"line\">copyParent.number                   // 1,2,3,4</span><br><span class=\"line\">parent.number                       // 1,2,3</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"16-传值类型和引用类型\">16. 传值类型和引用类型</span></h2><ul>\n<li><strong>传值类型（基本类型）</strong><blockquote>\n<p>值为基本类型时候为深拷贝</p>\n<blockquote>\n<p>基本类型就是 null，undefined，Boolean，string，number</p>\n<blockquote>\n<p>==独立不干扰==</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>引用类型</strong><blockquote>\n<p>值为对象类型时候为浅拷贝</p>\n<blockquote>\n<p>值都是对对象的引用，即一个指向对象的指针</p>\n<blockquote>\n<p>==对副本的操作会影响父级对象==</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传值类型</span><br><span class=\"line\">var  a = 1;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = 2;</span><br><span class=\"line\">    console.log(data);   // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);    // 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 引用类型</span><br><span class=\"line\">var  a = &#123;</span><br><span class=\"line\">    name : &quot;张三&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data.name = &quot;李四&quot;;</span><br><span class=\"line\">    console.log(data);   //  Object &#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);         //  Object &#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引用类型不会被基本类型覆盖</span><br><span class=\"line\">var  a = &#123;</span><br><span class=\"line\">    name : &quot;张三&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = 3；</span><br><span class=\"line\">    console.log(data);   // 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);         //  Object &#123;name: &quot;张三&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为了解决引用类型的问题  引入深拷贝的概念  参考上面一个概念</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"17-函数作用域提升与预编译\">17. 函数作用域提升与预编译</span></h2><blockquote>\n<p>由于 js 没有其他强类型语言{}这类的块级作用域 只有函数作用域 函数的声明很随意导致各种问题出现</p>\n<blockquote>\n<p>变量预编译 &gt; 函数预编译</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一条</span><br><span class=\"line\"></span><br><span class=\"line\">a();</span><br><span class=\"line\">var a = c = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\">(function(b) &#123;</span><br><span class=\"line\">    b(), c()</span><br><span class=\"line\">    var b = c = function a() &#123;</span><br><span class=\"line\">        console.log(3)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;)(a);</span><br><span class=\"line\">c();</span><br><span class=\"line\"></span><br><span class=\"line\">// 等价于：</span><br><span class=\"line\">var a;                      // 变量声明提升</span><br><span class=\"line\">function a() &#123;              // 函数声明提升</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();                        // 1</span><br><span class=\"line\">a = c = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a();                        // 2</span><br><span class=\"line\"></span><br><span class=\"line\">(function(b) &#123;</span><br><span class=\"line\">    var b</span><br><span class=\"line\">    b()                     // 2</span><br><span class=\"line\">    c()                     // 本来以error</span><br><span class=\"line\">    // 后来有人指正 原因就在于var b=c=xxx。</span><br><span class=\"line\">    // c相当于没有加var 不会预编译，这里c直接查找到外部作用域的c</span><br><span class=\"line\">    b = c = function a() &#123;</span><br><span class=\"line\">        console.log(3)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();                    // 3</span><br><span class=\"line\">&#125;)(a);</span><br><span class=\"line\"></span><br><span class=\"line\">c();                        // 3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 第二条</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">    function a()&#123;console.log(1)&#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">    function a()&#123;console.log(2)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()();                     //2 由于预编译 后面的a覆盖了前面的a</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三条</span><br><span class=\"line\">var a=10;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">    // 预编译a 赋值undefined，内部作用域存在a这个变量，</span><br><span class=\"line\">    // 所以这里 !a 就是  !undefined，就是true，进入函数a=20;</span><br><span class=\"line\">    if (!a) &#123;</span><br><span class=\"line\">        var a=20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a)          //  这里是20 ，</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br><span class=\"line\"></span><br><span class=\"line\">// 第四条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    var a=&apos;littlebear&apos;;</span><br><span class=\"line\">    console.log(a)          //littlebear</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //string  第二个&lt;script&gt;标签里的a但会往上查找。</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a)//1</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第五条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">    // 报错，遇到&lt;script&gt;标签对时，会先对这一块进行预解析，</span><br><span class=\"line\">    // 下面没预解析，所以找不到声明过的a，于是报错了</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a)          //1</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第六条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function fn(a,b)&#123;</span><br><span class=\"line\">        console.log(a)      //容易上当 初始化a的时候已经赋值&apos;容易上当&apos;</span><br><span class=\"line\">        var a=10;</span><br><span class=\"line\">        console.log(a)      //10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(&apos;容易上当&apos;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"18-amd-和-cmd-区别\">18. AMD 和 CMD 区别</span></h2><ol>\n<li><p>AMD 推崇依赖前置。 （requireJS）</p>\n<p>CMD 推崇依赖就近， （seaJS）</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// CMD</span><br><span class=\"line\">define(function(require, exports, module) &#123;</span><br><span class=\"line\">    var a = require(&apos;./a&apos;)</span><br><span class=\"line\">    a.doSomething()         // 此处略去 100 行</span><br><span class=\"line\">    var b = require(&apos;./b&apos;)  // 依赖可以就近书写</span><br><span class=\"line\">    b.doSomething()         // ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// AMD 默认推荐</span><br><span class=\"line\">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123;</span><br><span class=\"line\">    // 依赖必须一开始就写好</span><br><span class=\"line\">    a.doSomething()    // 此处略去 100 行</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>对于依赖的模块，</p>\n<p>AMD 是提前执行（预执行），</p>\n<p>CMD 是延迟执行（懒执行）。</p>\n</li>\n</ol>\n<blockquote>\n<p>不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>AMD 的 API 默认是一个当多个用，</p>\n<p>CMD 的 API 严格区分，推崇职责单一</p>\n</li>\n</ol>\n<blockquote>\n<p>比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。</p>\n</blockquote>\n<hr>\n<h2><span id=\"19-常见服务器的状态码\">19. 常见服务器的状态码</span></h2><ul>\n<li><p>301</p>\n<p>永久重定向</p>\n</li>\n<li><p>302</p>\n<p>临时重定向 会出现 URL 劫持 体现在搜索引擎收录策略上 会改变原有请求方法</p>\n</li>\n</ul>\n<ul>\n<li><p>304</p>\n<p>Not Modified</p>\n<p>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</p>\n</li>\n</ul>\n<ul>\n<li><p>307</p>\n<p>临时重定向 与 302 区别 客户端应<code>保持请求方法</code>不变向新的地址发出请求</p>\n</li>\n</ul>\n<ul>\n<li><p>400</p>\n<p>Bad Request</p>\n<p>表示该请求报文中存在语法错误，导致服务器无法理解该请求。多用于接口参数校验。</p>\n</li>\n<li><p>403</p>\n<p>Forbidden</p>\n<p>该状态码表明对请求资源的访问被服务器拒绝了。多用于权限拦截。</p>\n</li>\n<li><p>407</p>\n<p>代理服务器未授权</p>\n</li>\n<li><p>413</p>\n<p>post body 请求体过大</p>\n</li>\n</ul>\n<ul>\n<li><p>500</p>\n<p>Internal Server Error</p>\n<p>该状态码表明服务器端在执行请求时发生了错误。</p>\n</li>\n<li><p>501</p>\n<p>服务器不具备完成请求的功能。比如服务正在重启时，暂时无法响应客户端请求。</p>\n</li>\n<li><p>502</p>\n<p>上游网关错误</p>\n</li>\n<li><p>503</p>\n<p>服务不可用</p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"20-事件冒泡和事件捕获\">20. 事件冒泡和事件捕获</span></h2><pre><code>* 事件冒泡兼容写法\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (event.cancelBubble) &#123;</span><br><span class=\"line\">    event.cancelBubble = true</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    event.stopPropagation()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n--------------------------\n</code></pre>\n<h2><span id=\"21-数组\">21. 数组</span></h2><pre><code>1. push\n\n    向数组末尾添加指定元素\n\n2. pop\n\n    移除数组末尾的一个元素 并返回移除的元素\n\n3. shift\n\n    移除数组第一项 并返回该元素\n\n4. unshift\n\n    给数组第一项加上一个元素 返回数组长度\n\n5. join\n\n    数组按照指定的字符换转成字符串\n\n6. sort\n\n    数组按照ASCII排序  所以要完全按照从小到大的顺序排序的话需要指定参数 1 -1 0\n\n7. splice\n\n    从0开始\n\n&gt; 删除 ---------------------（**起始位置，截取个数**）\n\n&gt; 插入 ---------------------（**起始位置，截取个数为0，要插入的项**）\n\n&gt; 替换----------------------（**起始位置，截取个数为1，要插入的项**）\n\n8. slice\n\n9. concat\n\n10. reverse\n\n11. 遍历数组的方法\n\n    &gt; forEach\n    &gt; for in\n\n    两者区别 在于 for in 会遍历数组原型链的属性值\n\n    为了避免这样的情况 使用 hasOwnProperty 解决\n</code></pre>\n<hr>\n<h2><span id=\"22正则\">22.正则</span></h2><ul>\n<li>()：小括号，叫做分组符。</li>\n<li>\\s : 空格</li>\n<li>\\S : 非空格</li>\n<li>\\d : 数字</li>\n<li>\\D : 非数字</li>\n<li>\\w : 字符 ( 字母 ，数字，下划线_ )</li>\n<li>\\W : 非字符</li>\n<li>.（点）——任意字符</li>\n<li>. : 真正的点</li>\n<li>\\b : 独立的部分 （ 起始，结束，空格 ）</li>\n<li>\\B : 非独立的部分</li>\n<li>{n,m}：至少出现 n 次，最多 m 次</li>\n<li>{n,} :至少 n 次<ul>\n<li><ul>\n<li>:任意次 相当于{0,}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>？ ：零次或一次 相当于{0,1}<ul>\n<li><ul>\n<li>：一次或任意次相当于 {1,}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>{n}： 正好 n 次</li>\n<li>[] ： 表示某个集合中的任意一个 不能为空</li>\n</ul>\n<hr>\n<blockquote>\n<h3><span id=\"字符串相关的正则方法\">字符串相关的正则方法</span></h3></blockquote>\n<ul>\n<li><h3><span id=\"match\">match()</span></h3></li>\n</ul>\n<blockquote>\n<p>返回一个包含匹配内容的数组</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;abcdef&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var re = /B/i;</span><br><span class=\"line\"></span><br><span class=\"line\">str.match(re) // [b]</span><br></pre></td></tr></table></figure>\n\n<p>例子 2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = https://dimg.fws.qa.nt.ctripcorp.com/images/2d090m000000062hy59E5.jpg&quot;</span><br><span class=\"line\">url.match(/[^\\/]*$/) // 2d090m000000062hy59E5.jpg</span><br><span class=\"line\">url.match(/^[^\\/]*/) // https</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3><span id=\"search\">search()</span></h3></li>\n</ul>\n<blockquote>\n<p>返回匹配到的第一个内容所在的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;abcdef&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var re = /B/i;</span><br><span class=\"line\"></span><br><span class=\"line\">str.search(re) // 1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3><span id=\"replace\">replace()</span></h3></li>\n</ul>\n<blockquote>\n<p>查找符合正则的字符串并替换成==一个==对应的字符串。返回替换后的内容。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;我爱北京天安门，天安门上太阳升。&quot;;</span><br><span class=\"line\">var re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配</span><br><span class=\"line\">var str2 = str.replace(re,&apos;*&apos;); // 我爱**，*上太阳升。</span><br></pre></td></tr></table></figure>\n\n<p>并不能解决一个文字*的对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;我爱北京天安门，天安门上太阳升。&quot;;</span><br><span class=\"line\">var re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配</span><br><span class=\"line\">var str2 = str.replace(re,function(str)&#123;</span><br><span class=\"line\">            alert(str);</span><br><span class=\"line\">            //用来测试：参数代表每次搜索到的符合正则的字符，</span><br><span class=\"line\">            //所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span><br><span class=\"line\">            var result = &apos;&apos;;</span><br><span class=\"line\">            for(var i=0;i&lt;str.length;i++)&#123;</span><br><span class=\"line\">                result += &apos;*&apos;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return result; //所以搜索到了几个字就返回几个*</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)</span><br></pre></td></tr></table></figure>\n\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re = /(\\d+)(-)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,function($0,$1,$2)&#123;</span><br><span class=\"line\">        // replace()中如果有子项，</span><br><span class=\"line\">        // 第一个参数 ：$0（匹配成功后的整体结果  2013-  6-）,</span><br><span class=\"line\">        // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span><br><span class=\"line\">        // 第三个参数 : $2(匹配成功的第二个分组，这里指的是-    - - )</span><br><span class=\"line\">    return $1 + &apos;.&apos;;  //分别返回2013.   6.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   //2013.6.7</span><br><span class=\"line\">//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7</span><br></pre></td></tr></table></figure>\n</code></pre>\n<hr>\n<h3><span id=\"正则两个方法\">正则两个方法</span></h3><ul>\n<li><h3><span id=\"test\">test()</span></h3></li>\n</ul>\n<blockquote>\n<p>匹配到指定内容返回 true</p>\n</blockquote>\n<ul>\n<li><h3><span id=\"exec\">==exec()==</span></h3></li>\n</ul>\n<blockquote>\n<p>返回第一匹配项信息的数组 若没有返回 null<br>有两个属性 index input</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;mom and dad and baby&apos;</span><br><span class=\"line\">var pattern = /mom( and dad( and baby)?)?/gi</span><br><span class=\"line\">var matches = pattern.exec(text)</span><br><span class=\"line\">mathes.index // 0</span><br><span class=\"line\">mathes.input // mom and dad and baby</span><br><span class=\"line\">mathes[0] // mom and dad and baby</span><br><span class=\"line\">mathes[1] //  and dad and baby</span><br><span class=\"line\">mathes[2] // and baby</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2><span id=\"23-后退监听\">23. 后退监听</span></h2><blockquote>\n<p>history.back() history.forward() history.replace()触发 onpopstate 事件</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onpopstate = function () &#123;</span><br><span class=\"line\">    alert(&apos;2222&apos;)</span><br><span class=\"line\">    history.pushState(null, null, document.URL)</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">history.pushState(null, null, document.URL)</span><br></pre></td></tr></table></figure>\n\nonbeforeunload事件有坑 chrome51版本及以后不能自定义文字 并且 页面载入之后一定要有浏览器行为才能触发\n</code></pre>\n<h2><span id=\"27-进制转换\">27. 进制转换</span></h2><blockquote>\n<p>十进制转十六进制</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = 255</span><br><span class=\"line\">s.toString(16) // ff</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>十六进制转十进制</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;0xFF&apos;)   // 255</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2><span id=\"28-label-绑定事件一定要让事件委托到触发里面的-input\">28. label 绑定事件一定要让事件委托到触发里面的 input</span></h2><pre><code>所以事件委托的时候直接监听input\n</code></pre>\n<h2><span id=\"29-浏览器中的简单请求和复杂请求\">29. 浏览器中的简单请求和复杂请求</span></h2><pre><code>简单请求\n    - 请求类型 get/post/head\n    - 除了常见的请求头外，无额外自定义请求头\n      - Content-Type （且值是application/x-www-form-urlencoded，multipart/form-data，text/plain 之一）\n      - Content-Language\n      - Accept\n      - Accept-Language\n      - Save-Data\n\n复杂请求\n    会发送options预检请求\n</code></pre>\n<h2><span id=\"30-math\">30. Math</span></h2><pre><code>1. Math.floor 向下舍入；\n2. Math.ceil  向上舍入;\n3. Math.cos   余弦;\n4. Math.round 四舍五入;\n5. Math.sin   正弦；\n6. Math.tan   正切；\n</code></pre>\n<h2><span id=\"31-isnan\">31. isNaN</span></h2><pre><code>首先需要知道 &#39;&#39; == 0   &#39;abc&#39; != 0   [] == 0  [1] != 0   null == 0  {} != 0  undefined != 0\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isNaN(&apos;&apos;)   // false</span><br><span class=\"line\">isNaN(&apos; &apos;)  // false</span><br><span class=\"line\">isNaN(&apos;abc&apos;) // true</span><br><span class=\"line\">isNaN(undefined) // true</span><br><span class=\"line\">isNaN([])   // false</span><br><span class=\"line\">isNaN(&#123;&#125;)   // true</span><br><span class=\"line\">isNaN(null) // false</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2><span id=\"32-boolen\">32. Boolen</span></h2><pre><code>首先需要知道  0 == false    1 == true  &#39;&#39; == false   undefined != false != true    null != false != true\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean(&apos;&apos;) // false</span><br><span class=\"line\">Boolean(&apos;ssss&apos;) // true</span><br><span class=\"line\">Boolean([])  // true</span><br><span class=\"line\">Boolean([1,2])  // true</span><br><span class=\"line\">Boolen(&#123;&#125;)      // true</span><br><span class=\"line\">Boolen(null)    // false</span><br><span class=\"line\">Boolen(undefined)   // false</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2><span id=\"33-解决回调地狱-多级回调\">33. 解决回调地狱 （多级回调）</span></h2><pre><code>1. Promise\n\n2. aSync/await\n\n3. generator\n</code></pre>\n<h2><span id=\"34-字符串\">34. 字符串</span></h2><pre><code>1. slice\n\n    在 不修改目标数组 的情况下返回截取的指定元素（ **起始位置，截止位置**）\n\n    从0开始 ==不包含最后一个数值==\n\n    负数情况下 将负数加上自身长度得到的数值作为参数\n\n2. substr\n\n    subdtr接收的是 起始位置 和 所要返回的字符串长度\n\n    在负数情况下  将第一个参数与字符串长度相加后的数值作为第一个参数\n\n3. substring\n\n    默认会将较小的参数作为第一个参数\n\n    在 不修改目标数组 的情况下返回截取的指定元素 （ **起始位置，截止位置**）\n\n    负数当做0处理\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let test = &apos;abcdef&apos;</span><br><span class=\"line\">test.slice(0, -1)   // abcde</span><br><span class=\"line\">test.slice(2, -3)   =&gt; test.slice(2,3)  // c</span><br><span class=\"line\"></span><br><span class=\"line\">test.substring(1, -2) =&gt; a</span><br><span class=\"line\">test.substring(2, -3) =&gt; ab</span><br></pre></td></tr></table></figure>\n\n<pre><code>4. split\n\n    字符串按照指定规则转换成数组\n</code></pre>\n<h2><span id=\"35-let-与-var-区别\">35. let 与 var 区别</span></h2><pre><code>1. var存在变量提升， let不存在；\n2. let不允许重复声明；\n3. var挂载在window下，let挂载在块作用域下；\n</code></pre>\n<h2><span id=\"36-为什么-var-可以重复声明\">36. 为什么 var 可以重复声明</span></h2><pre><code>因为js运行过程中，\n\n引擎 负责整个代码编译和运行\n\n编译器 负责词法分析、语法分析、代码生成等工作\n\n编译器从左至右编译var a，如果a不存在则在作用域声明一个新的变量a，若存在a则忽略继续向下编译；\n\n引擎遇到a = 2，按照作用域链向上查找 若存在变量a直接赋值，不存在则在作用域重新声明新的变量并赋值2\n</code></pre>\n<h2><span id=\"37-commonjs-中的-requireexports-和-es6-的-importexport-有什么区别\">37. CommonJS 中的 require/exports 和 ES6 的 import/export 有什么区别</span></h2><p>1.</p>\n<blockquote>\n<p>CommomJS 模块 require 代码时候会立刻执行；<br>ES6 模块是动态引用，不会立刻执行，仅仅作为一个加载模块的对象引用；</p>\n</blockquote>\n<p>2.</p>\n<blockquote>\n<p>CommonJs 模块输出的是一个值的拷贝， 输出后的对象会被缓存（即 如果发现一个模块被多次引用，会直接返回已经执行的部分）；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// lib.js</span><br><span class=\"line\">var counter = 3;</span><br><span class=\"line\">function incCounter() &#123;</span><br><span class=\"line\">  counter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  counter: counter,</span><br><span class=\"line\">  incCounter: incCounter,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">var mod = require(&apos;./lib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(mod.counter);  // 3</span><br><span class=\"line\">mod.incCounter();</span><br><span class=\"line\">console.log(mod.counter); // 3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ES6 模块输出的是值的只读引用；</p>\n</blockquote>\n<ul>\n<li>接口输出的变量是只读的，重新赋值会报错；</li>\n<li>export 通过接口输出的是同一个值，得到的都是同样的实例；</li>\n<li>如果需要 import 支持动态加载 提案建议引入 import() 返回一个 promise 对象；</li>\n</ul>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\" rel=\"noopener\">ES6 模块与 CommonJS 模块的差异</a></li>\n</ol>\n<h2><span id=\"38-浏览器缓存\">38. 浏览器缓存</span></h2><pre><code>浏览器缓存分为 强缓存 和 协商缓存\n\n1. 客户端先根据资源的http header判断是否命中强缓存，如果命中直接从缓存中读取；\n\n2. 强缓存未命中，客户端发出请求，服务端根据请求的request header验证资源是否命中协商缓存，这个过程成为http再验证。如果命中，服务器将请求返回，状态码304，但不返回资源，而是告诉客服端可以从缓存读取；\n\n3. 当协商缓存也没有命中，直接服务端返回资源给客户端；\n\n\n强缓存\n\n1. Expires 代表缓存过期时间；\n\n2. Cache-Control： max-age  代表缓存最大生命周期；\n\n协商缓存\n\n1. Last-Modified 代表资源最后更新时间；\n\n2. If-Modified-Since 代表 判断两次请求之间是否有过修改 没有直接返回协商缓存；\n</code></pre>\n<h2><span id=\"39-处理-js-双精度问题\">39. 处理 js 双精度问题</span></h2><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> = <span class=\"number\">0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>由于计算机是做二进制运算</p>\n<p>0.1 =&gt; 0.0001 1001 1001 1001…（无限循环）</p>\n<p>0.2 =&gt; 0.0011 0011 0011 0011…（无限循环）</p>\n<p>双精度浮点数的小数部分最多支持 52 位</p>\n<p>处理方法：</p>\n<pre><code>1. 优先考虑服务端计算；\n2. 利用精度溢出结尾要么99999要么1111，可以利用Math.round()四舍五入；\n</code></pre>\n<h2><span id=\"40-postmessage\">40. postMessage</span></h2><ol>\n<li>window.postMessage() 可以安全进行跨域、跨页面通信；</li>\n<li>页面加载完成后才能进行跨域通信；</li>\n</ol>\n<p>发起端可以是 open 一个新窗口 或者 创建一个 iframe 往新窗口里发送数据</p>\n<p>案例:</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 客户端两种方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 当前页面地址 http:<span class=\"comment\">//www.webhek.com --&gt;</span></span><br><span class=\"line\">&lt;!-- open方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//弹出一个新窗口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">'http://fanyi.youdao.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myPopup = <span class=\"built_in\">window</span>.open(domain, <span class=\"string\">'myWindow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//周期性的发送消息</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'Hello! The time is: '</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'blog.local: sending message: '</span> + message);</span><br><span class=\"line\"><span class=\"comment\">//send the message and target URI</span></span><br><span class=\"line\">myPopup.postMessage(message,domain);</span><br><span class=\"line\">&#125;,<span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- iframe方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//捕获 iframe</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">\"http://fanyi.youdao.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myIFrame'</span>).contentWindow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'Hello! The time is: '</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'blog.local: sending message: '</span> + message);</span><br><span class=\"line\"><span class=\"comment\">//send the message and target URI</span></span><br><span class=\"line\">iframe.postMessage(message,domain);</span><br><span class=\"line\">&#125;,<span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 接收端 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听消息反馈</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(event.origin !== <span class=\"string\">'http://www.webhek.com'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'received response: '</span>,event.data);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>截图如下：</p>\n</blockquote>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006ANKB8gy1fqhqrhftfmj30yu0objvr.jpg\" alt=\"web骇客网站  接收端截图\"><br><img src=\"https://wx2.sinaimg.cn/mw690/006ANKB8gy1fqhqri8fjlj30zk0h4tbk.jpg\" alt=\"有道翻译网站 接收端截图\"></p>\n<blockquote>\n<p>参考资料</p>\n</blockquote>\n<ol>\n<li><a href=\"http://www.webhek.com/post/window-postmessage-api.html\" target=\"_blank\" rel=\"noopener\">用 HTML5 里的 window.postMessage 在两个网页间传递数据</a></li>\n</ol>\n<h2><span id=\"41-service-worker\">41. Service Worker</span></h2><blockquote>\n<p>背景</p>\n</blockquote>\n<p>为了解决 web 业务不断增加带来更多消耗资源、耗时等复杂运算带来性能问题，w3c 初期提出 Web Worker 的 API，目的为了解放主线程。原理是 将复杂 耗时的操作独立出来交给 Web Worker，完成后通过 postMessage 方法告诉主线程。</p>\n<p>缺点：临时存在，不能永久；为此提出 Service Worker，在 Web Worker 基础上增加持久缓存能力。</p>\n<p>在 Service Worker 之前有 APPCache 这个持久缓存的 API，不过存在更新机主不完善，二次更新，大小限制，回滚等问题，具体参考下方链接 1。</p>\n<p>Service Worker 的特性如下：</p>\n<ul>\n<li><p>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</p>\n</li>\n<li><p>一旦被 install，就永远存在，除非被 uninstall</p>\n</li>\n<li><p>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</p>\n</li>\n<li><p>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</p>\n</li>\n<li><p>离线内容开发者可控</p>\n</li>\n<li><p>能向客户端推送消息</p>\n</li>\n<li><p>不能直接操作 DOM</p>\n</li>\n<li><p>出于安全的考虑，必须在 HTTPS 环境下才能工作</p>\n</li>\n<li><p>异步实现，内部大都是通过 Promise 实现</p>\n</li>\n<li><p>只能运行在 HTTPS 协议下</p>\n</li>\n</ul>\n<blockquote>\n<p>参考资料</p>\n</blockquote>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/29876535\" target=\"_blank\" rel=\"noopener\">为什么 app cache 没有得到大规模应用？它有哪些硬伤吗？</a></li>\n<li><a href=\"https://lavas.baidu.com/doc/offline-and-cache-loading/service-worker/service-worker-introduction\" target=\"_blank\" rel=\"noopener\">Service Worker 简介</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28161855\" target=\"_blank\" rel=\"noopener\">如何优雅的为 PWA 注册 Service Worker</a></li>\n</ol>\n<h2><span id=\"42-加载更多下拉刷新\">42 加载更多/下拉刷新</span></h2><p>原理：</p>\n<p>scrollTop（滚动条滚动距离） + clientHeight（可见区域高度） == scrollHeight（元素实际高度）</p>\n<p>备注：</p>\n<p>offsetHeighgt = height + padding + border</p>\n<p>clientHeight = height + padding</p>\n<h2><span id=\"43-js-标签中async和defer的作用与区别\">43. js 标签中<code>async</code>和<code>defer</code>的作用与区别</span></h2><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。<br>并行加载，</p>\n<ul>\n<li>async</li>\n</ul>\n<p>无顺序的加载，可能在<code>DOMContentLoaded</code>触发之前或之后执行。</p>\n<ul>\n<li>defer</li>\n</ul>\n<p>会等待 document 解析完成，按照 defer 顺序执行对应脚本，全部执行完毕后会触发<code>DOMContentLoaded</code>事件</p>\n<h2><span id=\"jsbridge\">JsBridge</span></h2><h3><span id=\"实现js调用native的方式有三个方法\">实现js调用Native的方式，有三个方法：</span></h3><ul>\n<li>注入api</li>\n<li>劫持URL Scheme</li>\n<li>弹窗拦截</li>\n</ul>\n<p>【注入api】 通过webview提供的接口，向js的上下文（window）注入对象或方法，js直接调用相关方法<br>【劫持URL Scheme】通常是web端唤醒App（或跳到App某一个页面）。Native劫持Web的请求自定义处理。<br>【弹窗拦截】类似劫持URL Scheme原理，劫持弹窗、二次确认等方法。</p>\n<h3><span id=\"native调用js的方法\">Native调用js的方法</span></h3><p>Native调用js的方式本质就是 执行拼接的js字符串</p>\n<h1><span id=\"css\">css</span></h1><h2><span id=\"bfc是什么bfc能用来干什么怎么才能触发bfc\">BFC是什么？BFC能用来干什么？怎么才能触发BFC？</span></h2><p>BFC（块格式化上下文）</p>\n<p>触发BFC几种方式：</p>\n<ul>\n<li>浮动 （float不为none即可）</li>\n<li>绝对定位（position: absoulte 或 fixed）</li>\n<li>display: inline-block | table-cell | flex | inline-flex</li>\n<li>overflow （除了visible之外的值）</li>\n</ul>\n<p>BFC特点</p>\n<ul>\n<li>如果两个块级元素属于同一个BFC，上下margin会重叠，以较大的为准；</li>\n<li>BFC区域不会与浮动元素的区域重叠；</li>\n<li>页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li>\n</ul>\n<p>BFC作用</p>\n<ul>\n<li>清除元素浮动；</li>\n<li>margin重叠；</li>\n<li>两栏布局；</li>\n</ul>\n","site":{"data":{}},"length":19404,"excerpt":"","more":"<h1 id=\"js-知识点总结\"><a href=\"#js-知识点总结\" class=\"headerlink\" title=\"js 知识点总结\"></a>js 知识点总结</h1><h2 id=\"1-解码和编码\"><a href=\"#1-解码和编码\" class=\"headerlink\" title=\"1. 解码和编码\"></a>1. 解码和编码</h2><blockquote>\n<p>原因：因为链接里面会有中文或者特殊字符号无法跳转需要进行相关编码解码</p>\n</blockquote>\n<p><strong>编码</strong></p>\n<blockquote>\n</blockquote>\n<pre><code>&#39;encodeURI&#39;: 只对查询的参数做编码\n\n&#39;encodeURIComponent&#39;: 对整个url做编码，包括? &amp; / #\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'www.baidu.com/test?name=\"zhangsan\"'</span></span><br><span class=\"line\"><span class=\"built_in\">encodeURI</span>(a) =&gt; <span class=\"string\">'www.baidu.com/test?name=%22zhangsan%22'</span></span><br><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>(a) =&gt; <span class=\"string\">'www.baidu.com%2Ftest%3Fname%3D%22zhangsan%22'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解码</strong></p>\n<blockquote>\n</blockquote>\n<pre><code>&#39;decodeURI&#39;: 只对查询参数做解码\n&#39;decodeURIComponent&#39;: 对整个URL做解码\n</code></pre>\n<hr>\n<h2 id=\"2-序列化和反序列化\"><a href=\"#2-序列化和反序列化\" class=\"headerlink\" title=\"2. 序列化和反序列化\"></a>2. 序列化和反序列化</h2><blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify()        // 序列化</span><br><span class=\"line\">JSON.parse()            // 反序列化</span><br></pre></td></tr></table></figure>\n\n<p>使用 ajax 需要设置请求头部信息</p>\n<p>header: {‘Content-Type’: ‘application/json; charset=utf-8;’}</p>\n<blockquote>\n<p>JSON.stringify() 可以简单的用来迅速判断两个对象是否相等，但不严谨（比如：序列化失败）</p>\n</blockquote>\n<hr>\n<h2 id=\"3-日期\"><a href=\"#3-日期\" class=\"headerlink\" title=\"3. 日期\"></a>3. 日期</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Date().getTime()   // 单位  秒</span><br><span class=\"line\">// 获取当前时间   （存在兼容性）</span><br><span class=\"line\">new Date().toLocaleDateString() // 2017/7/24</span><br><span class=\"line\">new Date().toLocaleTimeString() // 下午5:07:33</span><br><span class=\"line\">new Date().toLocaleString()     // 2017/7/24 下午5:07:33</span><br><span class=\"line\">// 若要显示24进制 需要option选项</span><br><span class=\"line\">new Date().toLocaleTimeString(&quot;UTC&quot;,&#123; hour12: false &#125;)  // 17:20:16</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-重排-重绘\"><a href=\"#4-重排-重绘\" class=\"headerlink\" title=\"4. 重排/重绘\"></a>4. 重排/重绘</h2><ol>\n<li><p>重排（回流）：几何属性发生变化 比如：内容、结构、位置或尺寸发生变化，需要重新计算样式和渲染树；</p>\n</li>\n<li><p>重绘：元素发生的改变只影响了节点的一些样式（背景色、边框色、文字颜色等）</p>\n</li>\n</ol>\n<p>回流必定会发生重绘，重绘不一定会引发回流。</p>\n<blockquote>\n<p>重排比重绘要消耗更多的资源</p>\n</blockquote>\n<hr>\n<h2 id=\"5-锚点定位-scrollIntoView-（无兼容问题）\"><a href=\"#5-锚点定位-scrollIntoView-（无兼容问题）\" class=\"headerlink\" title=\"5. 锚点定位 scrollIntoView （无兼容问题）\"></a>5. 锚点定位 scrollIntoView （无兼容问题）</h2><p>可以用来做一些 tab 定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;xx&apos;).scrollIntoView()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"6-typeof-和-instanceof\"><a href=\"#6-typeof-和-instanceof\" class=\"headerlink\" title=\"6. typeof 和 instanceof\"></a>6. typeof 和 instanceof</h2><blockquote>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3></blockquote>\n<p>会返回一个变量的基本类型，只有以下几种：number,boolean,string,object,function；</p>\n<p>缺点：</p>\n<ul>\n<li>不适用于来判断数组，因为不管是数组还是对象，都会返回 object。</li>\n<li>判断不了 null null 也是对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof [1]      // Object</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3></blockquote>\n<p>运算符用来测试一个对象在其原型链中是否存在一个构造</p>\n<p>返回的是一个布尔值 只能用来判断对象和函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;&#125;;</span><br><span class=\"line\">alert(  a instanceof Object )     // true</span><br><span class=\"line\">var a  = [];</span><br><span class=\"line\">alert(  a instanceof Array )    // true</span><br></pre></td></tr></table></figure>\n\n<p>最靠谱也是最方便的办法使用<code>Object.prototype.toString.call()</code>来判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">types</span>(<span class=\"params\">target</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"7-requestAnimationFrame-（RAF）-动画-api-兼容-Ie-8-9\"><a href=\"#7-requestAnimationFrame-（RAF）-动画-api-兼容-Ie-8-9\" class=\"headerlink\" title=\"7. requestAnimationFrame （RAF） 动画 api 兼容 Ie 8/9\"></a>7. requestAnimationFrame （RAF） 动画 api 兼容 Ie 8/9</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0</span><br><span class=\"line\"></span><br><span class=\"line\">window.requestAnimFrame = (function()&#123;</span><br><span class=\"line\">  return  window.requestAnimationFrame       ||</span><br><span class=\"line\">          window.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          window.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          function( callback )&#123;</span><br><span class=\"line\">            window.setTimeout(callback, 1000 / 60);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">requestAnimFrame(animloop)</span><br><span class=\"line\"></span><br><span class=\"line\">function animloop () &#123;</span><br><span class=\"line\">    document.getElementById(&apos;test&apos;).style.top = i ++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><pre><code>1. 解决毫秒的不精确性；\n2. 避免过渡渲染；\n3. 浏览器可以优化并行的动画动作，将合并的动作放入一个渲染周期；\n4. 过程可控；\n</code></pre>\n<blockquote>\n<p>动画效率之争</p>\n</blockquote>\n<pre><code>css3动画高效的原因有以下三点：\n\n    1. 强制使用硬件加速（GPU）；\n    2. 使用与RAF类似的机制；\n    3. 优化DOM操作 避免内存消耗来减少卡顿；\n\n同时因为采用GPU， 导致浏览器一直出于高负荷运转，移动端电量损耗和一定卡顿，\n而且css不能完全被js控制\npc上兼容性\n</code></pre>\n<p>js 动画库 （比如 Velocity.js 和 GSAP）</p>\n<hr>\n<h2 id=\"8-跨域\"><a href=\"#8-跨域\" class=\"headerlink\" title=\"8. 跨域\"></a>8. 跨域</h2><p>仅客户端上 域名、端口、协议 三者有一个不一样就会跨域。</p>\n<p>跨域的办法</p>\n<ol>\n<li><h3 id=\"服务端配置CORS\"><a href=\"#服务端配置CORS\" class=\"headerlink\" title=\"服务端配置CORS\"></a>服务端配置CORS</h3><ol>\n<li>access-control-allow-method</li>\n<li>access-control-allow-origin</li>\n</ol>\n</li>\n<li><h3 id=\"nginx代理转发\"><a href=\"#nginx代理转发\" class=\"headerlink\" title=\"nginx代理转发\"></a>nginx代理转发</h3><ol>\n<li>location / {  proxy_pass xxxxxxx;   }</li>\n</ol>\n</li>\n<li><h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>通过 js 标签引入一个 js 文件 这个 js 文件载入成功之后会执行我们在 url 参数中指定的函数 并且会将后端传入给我们的 json 数据作为参数传入</p>\n<p>例如：url?item=1&amp;callback=filter</p>\n<p>原生 js 实现 jsonp 的话 定义好 callback 的函数名称,动态创建 js 标签 url 加上查询的参数写好 callback 的回调函数名称即可</p>\n</li>\n<li><h3 id=\"利用-iframe-并修改-document-domain-来跨子域\"><a href=\"#利用-iframe-并修改-document-domain-来跨子域\" class=\"headerlink\" title=\"利用 iframe 并修改 document.domain 来跨子域\"></a>利用 iframe 并修改 document.domain 来跨子域</h3><p>两个不同域的页面引入 iframe 标签 同时将两个页面的主域设置成相同的域名</p>\n<p><img src=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox669ialYSHxewnD1B4L5UibVqhMnFEfibLhA8vUQu2s9rltB2HZ6UTQ19iag/0?wx_fmt=png\" alt=\"页面1\"><br><img src=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6Kv2iaHanjIzQHDNeia2FsoHSz8AJPkxh0IqickdbPg0CPeFPhoQMpuv5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"页面2\"></p>\n</li>\n<li><h3 id=\"window-name-（可以配合-iframe）\"><a href=\"#window-name-（可以配合-iframe）\" class=\"headerlink\" title=\"window.name （可以配合 iframe）\"></a>window.name （可以配合 iframe）</h3><p>同源窗口下 window.name 对所有页面都是共享的</p>\n<p>每个页面对 window.name 都有读写权限</p>\n<p>window.name 的值并不会因为新页面而重置</p>\n</li>\n<li><p>widnow.postMessage （存在兼容性 IE7/8 不支持）</p>\n<p>！<a href=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6z8ibxywKPEusvEA2xS8ialrQ1Oxd0jw0V8C6f7Gicy6Obsyt5bicibxdx5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" target=\"_blank\" rel=\"noopener\">页面 1</a></p>\n<p>！<a href=\"http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3G96tn5N9s0grjcDZD0Ox6B9Fpsa9KmNAMibvfSqE8Qv2icpLzzFE6NfvEp8YxWW6JOMTacIzaQzxw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1\" target=\"_blank\" rel=\"noopener\">页面 2</a></p>\n</li>\n<li><p>Nginx 反向代理</p>\n</li>\n</ol>\n<h2 id=\"9-selection\"><a href=\"#9-selection\" class=\"headerlink\" title=\"9. selection\"></a>9. selection</h2><blockquote>\n<p>获取鼠标划过文本的对象<br><code>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</code></p>\n</blockquote>\n<hr>\n<h2 id=\"10-正则表达式\"><a href=\"#10-正则表达式\" class=\"headerlink\" title=\"10. 正则表达式\"></a>10. 正则表达式</h2><blockquote>\n<p>常用规则</p>\n</blockquote>\n<ul>\n<li><p>\\n 回车</p>\n</li>\n<li><p>\\t 制表符</p>\n</li>\n<li><p>\\r 换行符</p>\n</li>\n<li><p>\\s 空格</p>\n</li>\n<li><p>\\u4e00-\\u9fa5 中文</p>\n</li>\n<li><p>\\w 大小写字母_数字</p>\n</li>\n<li><p>\\b : 独立的部分 （ 起始，结束，空格 ）</p>\n</li>\n<li><p>{n, m} 至少出现 n 次 最多 m 次</p>\n</li>\n<li><p>{n,} 至少 n 次</p>\n</li>\n<li><p>* 任意次</p>\n</li>\n<li><p>+ 至少一次</p>\n</li>\n<li><p>{n} 至少 n 次</p>\n</li>\n<li><p>() 分组符号</p>\n</li>\n<li><p>[\\s\\S] 任意字符</p>\n</li>\n<li><p>^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。</p>\n</li>\n<li><p>$正则的最后位置 , 就代表结束的意思</p>\n</li>\n<li><p>?&lt;= 向前匹配 ?= 向后匹配</p>\n<p>匹配中文: [\\u4e00-\\u9fa5]</p>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re1 = /\\d-+/g;        // 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-</span><br><span class=\"line\">var re1 = /(\\d-）+/g;     // 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-</span><br><span class=\"line\">var re2  = /(\\d+)(-)/g;   // 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------</span><br><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re = /(\\d+)(-)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,function($0,$1,$2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //replace()中如果有子项，</span><br><span class=\"line\">    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,</span><br><span class=\"line\">    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span><br><span class=\"line\">    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )</span><br><span class=\"line\">    return $1 + &apos;.&apos;;  //分别返回2013.   6.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>[] 表示某个集合中的任意一个</li>\n<li>[^a] 排除 a</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// var re = /\\bclassname\\b/;</span><br><span class=\"line\"></span><br><span class=\"line\">// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会</span><br><span class=\"line\">// 把classname当做一个字符串去匹配。</span><br><span class=\"line\"></span><br><span class=\"line\">var re = new RegExp(&apos;\\\\b&apos;+classname+&apos;\\\\b&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配的时候，classname前面必须是起始或者空格，后面也是。</span><br><span class=\"line\"></span><br><span class=\"line\">默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-Object\"><a href=\"#11-Object\" class=\"headerlink\" title=\"11. Object\"></a>11. Object</h2><pre><code>1. constructor\n\n    实例的constructor 永远指向 构造函数 的 prototype.constructor\n\n    理解成 实例是基于构造函数原型链生成的对象\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function A(x)&#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var newA = new A(name);</span><br><span class=\"line\"></span><br><span class=\"line\">此时：</span><br><span class=\"line\">newA.constructor == A.prototype.constructor;</span><br></pre></td></tr></table></figure>\n\n<pre><code>2. hasOwnProperty\n\n    判断对象上某个属性是否属于自身 属于自身为true, 原型链上为false\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a () &#123;</span><br><span class=\"line\">    this.show = &apos;x&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.prototype.hide = function () &#123;</span><br><span class=\"line\">    console.log(111111);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var z = new a();</span><br><span class=\"line\">z.hasOwnProperty(&apos;show&apos;);          // true</span><br><span class=\"line\">z.hasOwnProperty(&apos;hide&apos;);          // false</span><br></pre></td></tr></table></figure>\n\n<pre><code>3. isPrototypeOf\n\n    判断一个对象是否是另一个对象的原型\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var monkey = &#123;</span><br><span class=\"line\">    hair : true,</span><br><span class=\"line\">    breathes : function()&#123;</span><br><span class=\"line\">        alert(&apos;1&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Human的原型链绑定monkey对象</span><br><span class=\"line\">Human.prototype = monkey;</span><br><span class=\"line\"></span><br><span class=\"line\">var man = new Human(&apos;张三&apos;);</span><br><span class=\"line\">monkey.isPrototypeOf(man);      // true</span><br></pre></td></tr></table></figure>\n\n<pre><code>4. prototype和__proto__\n\n    prototype是一个函数的内置属性（每个函数都有一个prototype属性）\n\n    __proto__ 是一个实例对象的内置属性 实例化的对象在内部通过此属性寻找原型链\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person = function () &#123;&#125;</span><br><span class=\"line\">var zhangsan = new Person ()</span><br><span class=\"line\"></span><br><span class=\"line\">zhansan.__prop__ = Person.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">new 的过程拆分成以下四步</span><br><span class=\"line\"></span><br><span class=\"line\">1. var p = &#123;&#125;</span><br><span class=\"line\">2. p.__proto__ = Person.prototype</span><br><span class=\"line\">3. ret = Person.call(p, arguments)</span><br><span class=\"line\">4. 返回值ret若是对象则直接返回ret，不是则返回新的对象p</span><br></pre></td></tr></table></figure>\n\n<pre><code>5. Object.getPrototypeOf\n\n    获取 实例化对象 原型链 的相关属性\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Test () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test.prototype.showName = function () &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj = new Test ()</span><br><span class=\"line\">Object.getPrototypeOf(obj) == obj.__proto__</span><br></pre></td></tr></table></figure>\n\n<pre><code>6. Object.keys\n\n    可以用来枚举可遍历的属性 返回一个数组\n\n7. Object.create\n\n    在原型链上创建对象属性\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 属性创建在原型链上 --&gt;</span><br><span class=\"line\">Object.create(&#123;</span><br><span class=\"line\">    name: &apos;张三&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 字面量方式创建的对象属性挂在自身 --&gt;</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">    name: &apos;张三&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>8. Object.isExtensible\n\n    判断对象是否可以新增属性\n\n9. Object.preventExtension\n\n    锁住对象 使其不能新增属性 但是原来的属性可以修改删除\n\n10. Object.seal\n\n    密封对象 不能增加新属性 也不能删除旧属性  但是能修改原来的属性\n\n11. Object.isSealed\n\n    判断对象是否密封\n\n12. Object.freeze\n\n    冻结对象 不能新增 不能修改 不能删除\n\n13. Object.isFrozen\n\n    判断对象是否完全被冻结\n\n14. Object.getOwnPropertyNames\n\n    获取自身属性名字 返回一个数组\n\n15. Object.getOwnPropertyDescriptor\n\n    判断某个对象上某个属性的状态描述\n\n16. Object.defineProperty\n\n\n\n\n-----------\n</code></pre>\n<h2 id=\"12-继承\"><a href=\"#12-继承\" class=\"headerlink\" title=\"12. 继承\"></a>12. 继承</h2><blockquote>\n<p><strong>调用另一个对象的方法，以另一个对象替换当前对象的上下文</strong></p>\n<blockquote>\n<p>缺点</p>\n<blockquote>\n<p>只能继承父级本身属性，原型链的属性无法继承</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ul>\n<li><strong>call</strong><blockquote>\n<p>第二个参数可以省略</p>\n</blockquote>\n</li>\n<li><strong>apply</strong><blockquote>\n<p>第二个参数必须是数组或者用 arguments 代替</p>\n</blockquote>\n</li>\n<li><strong>bind</strong><blockquote>\n<p>bind 与 call 和 apply 的区别在于 bind 是一个函数 不会立即执行 必须在后面再加上一对括号去立即执行</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\"></span><br><span class=\"line\">function Add(a,b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.add = function(a,b)&#123;</span><br><span class=\"line\">        alert(a+b)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.xx = 333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.sub = &apos;张三&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // call方法</span><br><span class=\"line\">    Add.call(this); // call继承Add所有方法(不包含原型链上的方法)</span><br><span class=\"line\"></span><br><span class=\"line\">    // apply方法  参数不能指定的时候用[]或者arguments代替</span><br><span class=\"line\">    Add.apply(this, [])</span><br><span class=\"line\">    // 又可以写成</span><br><span class=\"line\">    Add.apply(this, arguments)</span><br><span class=\"line\"></span><br><span class=\"line\">    // bind方法</span><br><span class=\"line\">    Add.bind(this)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">x = new Sub();</span><br><span class=\"line\">x.add(5,7)                  // 11</span><br><span class=\"line\"></span><br><span class=\"line\">=====================================</span><br><span class=\"line\"></span><br><span class=\"line\">例子2：</span><br><span class=\"line\"></span><br><span class=\"line\">若只想继承父级构造函数某一个具体方法</span><br><span class=\"line\">需要先将父子对象都实例化后 调用父级的具体方法call</span><br><span class=\"line\"></span><br><span class=\"line\">function Add(a,b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.add = function(a,b)&#123;</span><br><span class=\"line\">        alert(a+b)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.xx = 333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.sub = &apos;张三&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">newAdd = new Add(7,8);</span><br><span class=\"line\">newSub = new Sub();</span><br><span class=\"line\"></span><br><span class=\"line\">// Sub只继承了Add的add方法并执行相关方法</span><br><span class=\"line\"></span><br><span class=\"line\">call方法：</span><br><span class=\"line\">newAdd.add.call(newSub, 10, 4);      // 14</span><br><span class=\"line\"></span><br><span class=\"line\">apply方法：</span><br><span class=\"line\">newAdd.add.apply(newSub, [10, 4]);   // 14</span><br><span class=\"line\"></span><br><span class=\"line\">bind方法：</span><br><span class=\"line\">newAdd.add.bind(newSub, 10, 4)();   // 14</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>若想要全部继承父级所有相关属性 得采用==原型链继承==的方式</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person()&#123;</span><br><span class=\"line\">    this.hair = &apos;black&apos;;</span><br><span class=\"line\">    this.eye = &apos;black&apos;;</span><br><span class=\"line\">    this.skin = &apos;yellow&apos;;</span><br><span class=\"line\">    this.view = function()&#123;</span><br><span class=\"line\">        return this.hair + &apos;,&apos; + this.eye + &apos;,&apos; + this.skin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function man()&#123;</span><br><span class=\"line\">    this.feature = [&apos;beard&apos;,&apos;strong&apos;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">man.prototype = new person();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-cookie-sessionStorage-localStorage\"><a href=\"#13-cookie-sessionStorage-localStorage\" class=\"headerlink\" title=\"13. cookie sessionStorage localStorage\"></a>13. cookie sessionStorage localStorage</h2><pre><code>1. cookie\n    * 4k的限制；\n    * 服务端和客户端传递时都会带上cookie；\n    * 本质上是对字符串的读取 存储内容过多消耗内存空间 导致页面变卡顿；\n    * 不能被爬虫读取；\n    * 设置时间之前一直有效，到时间就清除；\n2. sessionStorage\n    * 临时存储：引入“浏览器窗口”的概念，同源同窗口数据不会销毁，不同标签页中数据不能共享，关闭浏览器时候销毁；\n    * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n    * 性能更好，即本地读取数据比服务器获取快多了；\n    * 不能跨tab标签页传值；\n3. localStorage\n    * 减少网络流量，即减少数据在服务端和客户端之间的传递；\n    * 体积更大 5M；\n    * 持久存储在本地，直到手动清除；\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(&apos;sss&apos;,1111);</span><br><span class=\"line\">localStorage.getItem(&apos;sss&apos;);</span><br><span class=\"line\">localStorage.removeItem(&apos;sss&apos;);</span><br><span class=\"line\">localStorage.clear();</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"14-闭包\"><a href=\"#14-闭包\" class=\"headerlink\" title=\"14. 闭包\"></a>14. 闭包</h2><pre><code>简单回答闭包就是 一个函数返回自身内部函数的调用\n\n为什么使用？\n\n因为js是链式的 一层一层向上级查找 所以外部函数无法访问内部函数;\n</code></pre>\n<blockquote>\n<blockquote>\n<p>优点<br>缺点</p>\n</blockquote>\n<ul>\n<li>不会被内存回收 容易出现性能问题</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    function bar()&#123;</span><br><span class=\"line\">        console.log(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var newFoo = foo();</span><br><span class=\"line\">newFoo();               // a</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"15-深拷贝和浅拷贝\"><a href=\"#15-深拷贝和浅拷贝\" class=\"headerlink\" title=\"15. 深拷贝和浅拷贝\"></a>15. 深拷贝和浅拷贝</h2><ul>\n<li><strong>浅拷贝</strong><blockquote>\n<p><strong>复制对象的副本 指向同一内存区域 对副本的操作会影响父级对象</strong></p>\n</blockquote>\n</li>\n</ul>\n<p>浅拷贝方式：</p>\n<ol>\n<li>直接赋值；</li>\n<li>Object.assign();</li>\n<li>JSON 序列化；</li>\n</ol>\n<ul>\n<li><strong>深拷贝</strong><blockquote>\n<p><strong>复制对象的副本 指向不同的内存区域 与父级对象独立</strong></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 浅拷贝</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">    name : &apos;zhangsan&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = a;</span><br><span class=\"line\">b.name = &apos;lisi&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.name);    // &quot;lisi&quot;</span><br><span class=\"line\">console.log(b.name);    // &quot;lisi&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 深拷贝  (更完整的深拷贝还需要再详细优化)</span><br><span class=\"line\">function deepCopy(p, c)&#123;</span><br><span class=\"line\">    var c = c || &#123;&#125;;</span><br><span class=\"line\">    for(var i in p )&#123;</span><br><span class=\"line\">        // 数组和对象的时候再处理</span><br><span class=\"line\">        if(typeof p[i] === &apos;object&apos;)&#123;</span><br><span class=\"line\">            c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\">            deepCopy(p[i], c[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            // 基本类型直接赋值</span><br><span class=\"line\">            c[i] = p[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var parent = &#123;</span><br><span class=\"line\">    number: [1, 2, 3],</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">        prop: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var copyParent = deepCopy(parent);</span><br><span class=\"line\">copyParent.number.push(4)</span><br><span class=\"line\">copyParent.number                   // 1,2,3,4</span><br><span class=\"line\">parent.number                       // 1,2,3</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"16-传值类型和引用类型\"><a href=\"#16-传值类型和引用类型\" class=\"headerlink\" title=\"16. 传值类型和引用类型\"></a>16. 传值类型和引用类型</h2><ul>\n<li><strong>传值类型（基本类型）</strong><blockquote>\n<p>值为基本类型时候为深拷贝</p>\n<blockquote>\n<p>基本类型就是 null，undefined，Boolean，string，number</p>\n<blockquote>\n<p>==独立不干扰==</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><strong>引用类型</strong><blockquote>\n<p>值为对象类型时候为浅拷贝</p>\n<blockquote>\n<p>值都是对对象的引用，即一个指向对象的指针</p>\n<blockquote>\n<p>==对副本的操作会影响父级对象==</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传值类型</span><br><span class=\"line\">var  a = 1;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = 2;</span><br><span class=\"line\">    console.log(data);   // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);    // 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 引用类型</span><br><span class=\"line\">var  a = &#123;</span><br><span class=\"line\">    name : &quot;张三&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data.name = &quot;李四&quot;;</span><br><span class=\"line\">    console.log(data);   //  Object &#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);         //  Object &#123;name: &quot;李四&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引用类型不会被基本类型覆盖</span><br><span class=\"line\">var  a = &#123;</span><br><span class=\"line\">    name : &quot;张三&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function voo(data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data = 3；</span><br><span class=\"line\">    console.log(data);   // 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">voo(a);</span><br><span class=\"line\">console.log(a);         //  Object &#123;name: &quot;张三&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为了解决引用类型的问题  引入深拷贝的概念  参考上面一个概念</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"17-函数作用域提升与预编译\"><a href=\"#17-函数作用域提升与预编译\" class=\"headerlink\" title=\"17. 函数作用域提升与预编译\"></a>17. 函数作用域提升与预编译</h2><blockquote>\n<p>由于 js 没有其他强类型语言{}这类的块级作用域 只有函数作用域 函数的声明很随意导致各种问题出现</p>\n<blockquote>\n<p>变量预编译 &gt; 函数预编译</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一条</span><br><span class=\"line\"></span><br><span class=\"line\">a();</span><br><span class=\"line\">var a = c = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\">(function(b) &#123;</span><br><span class=\"line\">    b(), c()</span><br><span class=\"line\">    var b = c = function a() &#123;</span><br><span class=\"line\">        console.log(3)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;)(a);</span><br><span class=\"line\">c();</span><br><span class=\"line\"></span><br><span class=\"line\">// 等价于：</span><br><span class=\"line\">var a;                      // 变量声明提升</span><br><span class=\"line\">function a() &#123;              // 函数声明提升</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();                        // 1</span><br><span class=\"line\">a = c = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a();                        // 2</span><br><span class=\"line\"></span><br><span class=\"line\">(function(b) &#123;</span><br><span class=\"line\">    var b</span><br><span class=\"line\">    b()                     // 2</span><br><span class=\"line\">    c()                     // 本来以error</span><br><span class=\"line\">    // 后来有人指正 原因就在于var b=c=xxx。</span><br><span class=\"line\">    // c相当于没有加var 不会预编译，这里c直接查找到外部作用域的c</span><br><span class=\"line\">    b = c = function a() &#123;</span><br><span class=\"line\">        console.log(3)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();                    // 3</span><br><span class=\"line\">&#125;)(a);</span><br><span class=\"line\"></span><br><span class=\"line\">c();                        // 3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 第二条</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">    function a()&#123;console.log(1)&#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">    function a()&#123;console.log(2)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()();                     //2 由于预编译 后面的a覆盖了前面的a</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三条</span><br><span class=\"line\">var a=10;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">    // 预编译a 赋值undefined，内部作用域存在a这个变量，</span><br><span class=\"line\">    // 所以这里 !a 就是  !undefined，就是true，进入函数a=20;</span><br><span class=\"line\">    if (!a) &#123;</span><br><span class=\"line\">        var a=20</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a)          //  这里是20 ，</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br><span class=\"line\"></span><br><span class=\"line\">// 第四条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    var a=&apos;littlebear&apos;;</span><br><span class=\"line\">    console.log(a)          //littlebear</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //string  第二个&lt;script&gt;标签里的a但会往上查找。</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a)//1</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第五条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">    // 报错，遇到&lt;script&gt;标签对时，会先对这一块进行预解析，</span><br><span class=\"line\">    // 下面没预解析，所以找不到声明过的a，于是报错了</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(typeof a)   //undefined</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a)          //1</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第六条</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function fn(a,b)&#123;</span><br><span class=\"line\">        console.log(a)      //容易上当 初始化a的时候已经赋值&apos;容易上当&apos;</span><br><span class=\"line\">        var a=10;</span><br><span class=\"line\">        console.log(a)      //10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(&apos;容易上当&apos;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"18-AMD-和-CMD-区别\"><a href=\"#18-AMD-和-CMD-区别\" class=\"headerlink\" title=\"18. AMD 和 CMD 区别\"></a>18. AMD 和 CMD 区别</h2><ol>\n<li><p>AMD 推崇依赖前置。 （requireJS）</p>\n<p>CMD 推崇依赖就近， （seaJS）</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// CMD</span><br><span class=\"line\">define(function(require, exports, module) &#123;</span><br><span class=\"line\">    var a = require(&apos;./a&apos;)</span><br><span class=\"line\">    a.doSomething()         // 此处略去 100 行</span><br><span class=\"line\">    var b = require(&apos;./b&apos;)  // 依赖可以就近书写</span><br><span class=\"line\">    b.doSomething()         // ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// AMD 默认推荐</span><br><span class=\"line\">define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123;</span><br><span class=\"line\">    // 依赖必须一开始就写好</span><br><span class=\"line\">    a.doSomething()    // 此处略去 100 行</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>对于依赖的模块，</p>\n<p>AMD 是提前执行（预执行），</p>\n<p>CMD 是延迟执行（懒执行）。</p>\n</li>\n</ol>\n<blockquote>\n<p>不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>AMD 的 API 默认是一个当多个用，</p>\n<p>CMD 的 API 严格区分，推崇职责单一</p>\n</li>\n</ol>\n<blockquote>\n<p>比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。</p>\n</blockquote>\n<hr>\n<h2 id=\"19-常见服务器的状态码\"><a href=\"#19-常见服务器的状态码\" class=\"headerlink\" title=\"19. 常见服务器的状态码\"></a>19. 常见服务器的状态码</h2><ul>\n<li><p>301</p>\n<p>永久重定向</p>\n</li>\n<li><p>302</p>\n<p>临时重定向 会出现 URL 劫持 体现在搜索引擎收录策略上 会改变原有请求方法</p>\n</li>\n</ul>\n<ul>\n<li><p>304</p>\n<p>Not Modified</p>\n<p>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</p>\n</li>\n</ul>\n<ul>\n<li><p>307</p>\n<p>临时重定向 与 302 区别 客户端应<code>保持请求方法</code>不变向新的地址发出请求</p>\n</li>\n</ul>\n<ul>\n<li><p>400</p>\n<p>Bad Request</p>\n<p>表示该请求报文中存在语法错误，导致服务器无法理解该请求。多用于接口参数校验。</p>\n</li>\n<li><p>403</p>\n<p>Forbidden</p>\n<p>该状态码表明对请求资源的访问被服务器拒绝了。多用于权限拦截。</p>\n</li>\n<li><p>407</p>\n<p>代理服务器未授权</p>\n</li>\n<li><p>413</p>\n<p>post body 请求体过大</p>\n</li>\n</ul>\n<ul>\n<li><p>500</p>\n<p>Internal Server Error</p>\n<p>该状态码表明服务器端在执行请求时发生了错误。</p>\n</li>\n<li><p>501</p>\n<p>服务器不具备完成请求的功能。比如服务正在重启时，暂时无法响应客户端请求。</p>\n</li>\n<li><p>502</p>\n<p>上游网关错误</p>\n</li>\n<li><p>503</p>\n<p>服务不可用</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"20-事件冒泡和事件捕获\"><a href=\"#20-事件冒泡和事件捕获\" class=\"headerlink\" title=\"20. 事件冒泡和事件捕获\"></a>20. 事件冒泡和事件捕获</h2><pre><code>* 事件冒泡兼容写法\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (event.cancelBubble) &#123;</span><br><span class=\"line\">    event.cancelBubble = true</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    event.stopPropagation()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n--------------------------\n</code></pre>\n<h2 id=\"21-数组\"><a href=\"#21-数组\" class=\"headerlink\" title=\"21. 数组\"></a>21. 数组</h2><pre><code>1. push\n\n    向数组末尾添加指定元素\n\n2. pop\n\n    移除数组末尾的一个元素 并返回移除的元素\n\n3. shift\n\n    移除数组第一项 并返回该元素\n\n4. unshift\n\n    给数组第一项加上一个元素 返回数组长度\n\n5. join\n\n    数组按照指定的字符换转成字符串\n\n6. sort\n\n    数组按照ASCII排序  所以要完全按照从小到大的顺序排序的话需要指定参数 1 -1 0\n\n7. splice\n\n    从0开始\n\n&gt; 删除 ---------------------（**起始位置，截取个数**）\n\n&gt; 插入 ---------------------（**起始位置，截取个数为0，要插入的项**）\n\n&gt; 替换----------------------（**起始位置，截取个数为1，要插入的项**）\n\n8. slice\n\n9. concat\n\n10. reverse\n\n11. 遍历数组的方法\n\n    &gt; forEach\n    &gt; for in\n\n    两者区别 在于 for in 会遍历数组原型链的属性值\n\n    为了避免这样的情况 使用 hasOwnProperty 解决\n</code></pre>\n<hr>\n<h2 id=\"22-正则\"><a href=\"#22-正则\" class=\"headerlink\" title=\"22.正则\"></a>22.正则</h2><ul>\n<li>()：小括号，叫做分组符。</li>\n<li>\\s : 空格</li>\n<li>\\S : 非空格</li>\n<li>\\d : 数字</li>\n<li>\\D : 非数字</li>\n<li>\\w : 字符 ( 字母 ，数字，下划线_ )</li>\n<li>\\W : 非字符</li>\n<li>.（点）——任意字符</li>\n<li>. : 真正的点</li>\n<li>\\b : 独立的部分 （ 起始，结束，空格 ）</li>\n<li>\\B : 非独立的部分</li>\n<li>{n,m}：至少出现 n 次，最多 m 次</li>\n<li>{n,} :至少 n 次<ul>\n<li><ul>\n<li>:任意次 相当于{0,}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>？ ：零次或一次 相当于{0,1}<ul>\n<li><ul>\n<li>：一次或任意次相当于 {1,}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>{n}： 正好 n 次</li>\n<li>[] ： 表示某个集合中的任意一个 不能为空</li>\n</ul>\n<hr>\n<blockquote>\n<h3 id=\"字符串相关的正则方法\"><a href=\"#字符串相关的正则方法\" class=\"headerlink\" title=\"字符串相关的正则方法\"></a>字符串相关的正则方法</h3></blockquote>\n<ul>\n<li><h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h3></li>\n</ul>\n<blockquote>\n<p>返回一个包含匹配内容的数组</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;abcdef&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var re = /B/i;</span><br><span class=\"line\"></span><br><span class=\"line\">str.match(re) // [b]</span><br></pre></td></tr></table></figure>\n\n<p>例子 2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = https://dimg.fws.qa.nt.ctripcorp.com/images/2d090m000000062hy59E5.jpg&quot;</span><br><span class=\"line\">url.match(/[^\\/]*$/) // 2d090m000000062hy59E5.jpg</span><br><span class=\"line\">url.match(/^[^\\/]*/) // https</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a>search()</h3></li>\n</ul>\n<blockquote>\n<p>返回匹配到的第一个内容所在的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;abcdef&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var re = /B/i;</span><br><span class=\"line\"></span><br><span class=\"line\">str.search(re) // 1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3></li>\n</ul>\n<blockquote>\n<p>查找符合正则的字符串并替换成==一个==对应的字符串。返回替换后的内容。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;我爱北京天安门，天安门上太阳升。&quot;;</span><br><span class=\"line\">var re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配</span><br><span class=\"line\">var str2 = str.replace(re,&apos;*&apos;); // 我爱**，*上太阳升。</span><br></pre></td></tr></table></figure>\n\n<p>并不能解决一个文字*的对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;我爱北京天安门，天安门上太阳升。&quot;;</span><br><span class=\"line\">var re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配</span><br><span class=\"line\">var str2 = str.replace(re,function(str)&#123;</span><br><span class=\"line\">            alert(str);</span><br><span class=\"line\">            //用来测试：参数代表每次搜索到的符合正则的字符，</span><br><span class=\"line\">            //所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span><br><span class=\"line\">            var result = &apos;&apos;;</span><br><span class=\"line\">            for(var i=0;i&lt;str.length;i++)&#123;</span><br><span class=\"line\">                result += &apos;*&apos;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return result; //所以搜索到了几个字就返回几个*</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)</span><br></pre></td></tr></table></figure>\n\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &apos;2013-6-7&apos;;</span><br><span class=\"line\">var re = /(\\d+)(-)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,function($0,$1,$2)&#123;</span><br><span class=\"line\">        // replace()中如果有子项，</span><br><span class=\"line\">        // 第一个参数 ：$0（匹配成功后的整体结果  2013-  6-）,</span><br><span class=\"line\">        // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span><br><span class=\"line\">        // 第三个参数 : $2(匹配成功的第二个分组，这里指的是-    - - )</span><br><span class=\"line\">    return $1 + &apos;.&apos;;  //分别返回2013.   6.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   //2013.6.7</span><br><span class=\"line\">//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7</span><br></pre></td></tr></table></figure>\n</code></pre>\n<hr>\n<h3 id=\"正则两个方法\"><a href=\"#正则两个方法\" class=\"headerlink\" title=\"正则两个方法\"></a>正则两个方法</h3><ul>\n<li><h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h3></li>\n</ul>\n<blockquote>\n<p>匹配到指定内容返回 true</p>\n</blockquote>\n<ul>\n<li><h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"==exec()==\"></a>==exec()==</h3></li>\n</ul>\n<blockquote>\n<p>返回第一匹配项信息的数组 若没有返回 null<br>有两个属性 index input</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;mom and dad and baby&apos;</span><br><span class=\"line\">var pattern = /mom( and dad( and baby)?)?/gi</span><br><span class=\"line\">var matches = pattern.exec(text)</span><br><span class=\"line\">mathes.index // 0</span><br><span class=\"line\">mathes.input // mom and dad and baby</span><br><span class=\"line\">mathes[0] // mom and dad and baby</span><br><span class=\"line\">mathes[1] //  and dad and baby</span><br><span class=\"line\">mathes[2] // and baby</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"23-后退监听\"><a href=\"#23-后退监听\" class=\"headerlink\" title=\"23. 后退监听\"></a>23. 后退监听</h2><blockquote>\n<p>history.back() history.forward() history.replace()触发 onpopstate 事件</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onpopstate = function () &#123;</span><br><span class=\"line\">    alert(&apos;2222&apos;)</span><br><span class=\"line\">    history.pushState(null, null, document.URL)</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">history.pushState(null, null, document.URL)</span><br></pre></td></tr></table></figure>\n\nonbeforeunload事件有坑 chrome51版本及以后不能自定义文字 并且 页面载入之后一定要有浏览器行为才能触发\n</code></pre>\n<h2 id=\"27-进制转换\"><a href=\"#27-进制转换\" class=\"headerlink\" title=\"27. 进制转换\"></a>27. 进制转换</h2><blockquote>\n<p>十进制转十六进制</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = 255</span><br><span class=\"line\">s.toString(16) // ff</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>十六进制转十进制</p>\n</blockquote>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;0xFF&apos;)   // 255</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"28-label-绑定事件一定要让事件委托到触发里面的-input\"><a href=\"#28-label-绑定事件一定要让事件委托到触发里面的-input\" class=\"headerlink\" title=\"28. label 绑定事件一定要让事件委托到触发里面的 input\"></a>28. label 绑定事件一定要让事件委托到触发里面的 input</h2><pre><code>所以事件委托的时候直接监听input\n</code></pre>\n<h2 id=\"29-浏览器中的简单请求和复杂请求\"><a href=\"#29-浏览器中的简单请求和复杂请求\" class=\"headerlink\" title=\"29. 浏览器中的简单请求和复杂请求\"></a>29. 浏览器中的简单请求和复杂请求</h2><pre><code>简单请求\n    - 请求类型 get/post/head\n    - 除了常见的请求头外，无额外自定义请求头\n      - Content-Type （且值是application/x-www-form-urlencoded，multipart/form-data，text/plain 之一）\n      - Content-Language\n      - Accept\n      - Accept-Language\n      - Save-Data\n\n复杂请求\n    会发送options预检请求\n</code></pre>\n<h2 id=\"30-Math\"><a href=\"#30-Math\" class=\"headerlink\" title=\"30. Math\"></a>30. Math</h2><pre><code>1. Math.floor 向下舍入；\n2. Math.ceil  向上舍入;\n3. Math.cos   余弦;\n4. Math.round 四舍五入;\n5. Math.sin   正弦；\n6. Math.tan   正切；\n</code></pre>\n<h2 id=\"31-isNaN\"><a href=\"#31-isNaN\" class=\"headerlink\" title=\"31. isNaN\"></a>31. isNaN</h2><pre><code>首先需要知道 &#39;&#39; == 0   &#39;abc&#39; != 0   [] == 0  [1] != 0   null == 0  {} != 0  undefined != 0\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isNaN(&apos;&apos;)   // false</span><br><span class=\"line\">isNaN(&apos; &apos;)  // false</span><br><span class=\"line\">isNaN(&apos;abc&apos;) // true</span><br><span class=\"line\">isNaN(undefined) // true</span><br><span class=\"line\">isNaN([])   // false</span><br><span class=\"line\">isNaN(&#123;&#125;)   // true</span><br><span class=\"line\">isNaN(null) // false</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"32-Boolen\"><a href=\"#32-Boolen\" class=\"headerlink\" title=\"32. Boolen\"></a>32. Boolen</h2><pre><code>首先需要知道  0 == false    1 == true  &#39;&#39; == false   undefined != false != true    null != false != true\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean(&apos;&apos;) // false</span><br><span class=\"line\">Boolean(&apos;ssss&apos;) // true</span><br><span class=\"line\">Boolean([])  // true</span><br><span class=\"line\">Boolean([1,2])  // true</span><br><span class=\"line\">Boolen(&#123;&#125;)      // true</span><br><span class=\"line\">Boolen(null)    // false</span><br><span class=\"line\">Boolen(undefined)   // false</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"33-解决回调地狱-（多级回调）\"><a href=\"#33-解决回调地狱-（多级回调）\" class=\"headerlink\" title=\"33. 解决回调地狱 （多级回调）\"></a>33. 解决回调地狱 （多级回调）</h2><pre><code>1. Promise\n\n2. aSync/await\n\n3. generator\n</code></pre>\n<h2 id=\"34-字符串\"><a href=\"#34-字符串\" class=\"headerlink\" title=\"34. 字符串\"></a>34. 字符串</h2><pre><code>1. slice\n\n    在 不修改目标数组 的情况下返回截取的指定元素（ **起始位置，截止位置**）\n\n    从0开始 ==不包含最后一个数值==\n\n    负数情况下 将负数加上自身长度得到的数值作为参数\n\n2. substr\n\n    subdtr接收的是 起始位置 和 所要返回的字符串长度\n\n    在负数情况下  将第一个参数与字符串长度相加后的数值作为第一个参数\n\n3. substring\n\n    默认会将较小的参数作为第一个参数\n\n    在 不修改目标数组 的情况下返回截取的指定元素 （ **起始位置，截止位置**）\n\n    负数当做0处理\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let test = &apos;abcdef&apos;</span><br><span class=\"line\">test.slice(0, -1)   // abcde</span><br><span class=\"line\">test.slice(2, -3)   =&gt; test.slice(2,3)  // c</span><br><span class=\"line\"></span><br><span class=\"line\">test.substring(1, -2) =&gt; a</span><br><span class=\"line\">test.substring(2, -3) =&gt; ab</span><br></pre></td></tr></table></figure>\n\n<pre><code>4. split\n\n    字符串按照指定规则转换成数组\n</code></pre>\n<h2 id=\"35-let-与-var-区别\"><a href=\"#35-let-与-var-区别\" class=\"headerlink\" title=\"35. let 与 var 区别\"></a>35. let 与 var 区别</h2><pre><code>1. var存在变量提升， let不存在；\n2. let不允许重复声明；\n3. var挂载在window下，let挂载在块作用域下；\n</code></pre>\n<h2 id=\"36-为什么-var-可以重复声明\"><a href=\"#36-为什么-var-可以重复声明\" class=\"headerlink\" title=\"36. 为什么 var 可以重复声明\"></a>36. 为什么 var 可以重复声明</h2><pre><code>因为js运行过程中，\n\n引擎 负责整个代码编译和运行\n\n编译器 负责词法分析、语法分析、代码生成等工作\n\n编译器从左至右编译var a，如果a不存在则在作用域声明一个新的变量a，若存在a则忽略继续向下编译；\n\n引擎遇到a = 2，按照作用域链向上查找 若存在变量a直接赋值，不存在则在作用域重新声明新的变量并赋值2\n</code></pre>\n<h2 id=\"37-CommonJS-中的-require-exports-和-ES6-的-import-export-有什么区别\"><a href=\"#37-CommonJS-中的-require-exports-和-ES6-的-import-export-有什么区别\" class=\"headerlink\" title=\"37. CommonJS 中的 require/exports 和 ES6 的 import/export 有什么区别\"></a>37. CommonJS 中的 require/exports 和 ES6 的 import/export 有什么区别</h2><p>1.</p>\n<blockquote>\n<p>CommomJS 模块 require 代码时候会立刻执行；<br>ES6 模块是动态引用，不会立刻执行，仅仅作为一个加载模块的对象引用；</p>\n</blockquote>\n<p>2.</p>\n<blockquote>\n<p>CommonJs 模块输出的是一个值的拷贝， 输出后的对象会被缓存（即 如果发现一个模块被多次引用，会直接返回已经执行的部分）；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// lib.js</span><br><span class=\"line\">var counter = 3;</span><br><span class=\"line\">function incCounter() &#123;</span><br><span class=\"line\">  counter++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  counter: counter,</span><br><span class=\"line\">  incCounter: incCounter,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">var mod = require(&apos;./lib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(mod.counter);  // 3</span><br><span class=\"line\">mod.incCounter();</span><br><span class=\"line\">console.log(mod.counter); // 3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ES6 模块输出的是值的只读引用；</p>\n</blockquote>\n<ul>\n<li>接口输出的变量是只读的，重新赋值会报错；</li>\n<li>export 通过接口输出的是同一个值，得到的都是同样的实例；</li>\n<li>如果需要 import 支持动态加载 提案建议引入 import() 返回一个 promise 对象；</li>\n</ul>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\" rel=\"noopener\">ES6 模块与 CommonJS 模块的差异</a></li>\n</ol>\n<h2 id=\"38-浏览器缓存\"><a href=\"#38-浏览器缓存\" class=\"headerlink\" title=\"38. 浏览器缓存\"></a>38. 浏览器缓存</h2><pre><code>浏览器缓存分为 强缓存 和 协商缓存\n\n1. 客户端先根据资源的http header判断是否命中强缓存，如果命中直接从缓存中读取；\n\n2. 强缓存未命中，客户端发出请求，服务端根据请求的request header验证资源是否命中协商缓存，这个过程成为http再验证。如果命中，服务器将请求返回，状态码304，但不返回资源，而是告诉客服端可以从缓存读取；\n\n3. 当协商缓存也没有命中，直接服务端返回资源给客户端；\n\n\n强缓存\n\n1. Expires 代表缓存过期时间；\n\n2. Cache-Control： max-age  代表缓存最大生命周期；\n\n协商缓存\n\n1. Last-Modified 代表资源最后更新时间；\n\n2. If-Modified-Since 代表 判断两次请求之间是否有过修改 没有直接返回协商缓存；\n</code></pre>\n<h2 id=\"39-处理-js-双精度问题\"><a href=\"#39-处理-js-双精度问题\" class=\"headerlink\" title=\"39. 处理 js 双精度问题\"></a>39. 处理 js 双精度问题</h2><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> = <span class=\"number\">0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>由于计算机是做二进制运算</p>\n<p>0.1 =&gt; 0.0001 1001 1001 1001…（无限循环）</p>\n<p>0.2 =&gt; 0.0011 0011 0011 0011…（无限循环）</p>\n<p>双精度浮点数的小数部分最多支持 52 位</p>\n<p>处理方法：</p>\n<pre><code>1. 优先考虑服务端计算；\n2. 利用精度溢出结尾要么99999要么1111，可以利用Math.round()四舍五入；\n</code></pre>\n<h2 id=\"40-postMessage\"><a href=\"#40-postMessage\" class=\"headerlink\" title=\"40. postMessage\"></a>40. postMessage</h2><ol>\n<li>window.postMessage() 可以安全进行跨域、跨页面通信；</li>\n<li>页面加载完成后才能进行跨域通信；</li>\n</ol>\n<p>发起端可以是 open 一个新窗口 或者 创建一个 iframe 往新窗口里发送数据</p>\n<p>案例:</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 客户端两种方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 当前页面地址 http:<span class=\"comment\">//www.webhek.com --&gt;</span></span><br><span class=\"line\">&lt;!-- open方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//弹出一个新窗口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">'http://fanyi.youdao.com'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myPopup = <span class=\"built_in\">window</span>.open(domain, <span class=\"string\">'myWindow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//周期性的发送消息</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'Hello! The time is: '</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'blog.local: sending message: '</span> + message);</span><br><span class=\"line\"><span class=\"comment\">//send the message and target URI</span></span><br><span class=\"line\">myPopup.postMessage(message,domain);</span><br><span class=\"line\">&#125;,<span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- iframe方式 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//捕获 iframe</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">\"http://fanyi.youdao.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myIFrame'</span>).contentWindow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'Hello! The time is: '</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'blog.local: sending message: '</span> + message);</span><br><span class=\"line\"><span class=\"comment\">//send the message and target URI</span></span><br><span class=\"line\">iframe.postMessage(message,domain);</span><br><span class=\"line\">&#125;,<span class=\"number\">6000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 接收端 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听消息反馈</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(event.origin !== <span class=\"string\">'http://www.webhek.com'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'received response: '</span>,event.data);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<blockquote>\n<p>截图如下：</p>\n</blockquote>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006ANKB8gy1fqhqrhftfmj30yu0objvr.jpg\" alt=\"web骇客网站  接收端截图\"><br><img src=\"https://wx2.sinaimg.cn/mw690/006ANKB8gy1fqhqri8fjlj30zk0h4tbk.jpg\" alt=\"有道翻译网站 接收端截图\"></p>\n<blockquote>\n<p>参考资料</p>\n</blockquote>\n<ol>\n<li><a href=\"http://www.webhek.com/post/window-postmessage-api.html\" target=\"_blank\" rel=\"noopener\">用 HTML5 里的 window.postMessage 在两个网页间传递数据</a></li>\n</ol>\n<h2 id=\"41-Service-Worker\"><a href=\"#41-Service-Worker\" class=\"headerlink\" title=\"41. Service Worker\"></a>41. Service Worker</h2><blockquote>\n<p>背景</p>\n</blockquote>\n<p>为了解决 web 业务不断增加带来更多消耗资源、耗时等复杂运算带来性能问题，w3c 初期提出 Web Worker 的 API，目的为了解放主线程。原理是 将复杂 耗时的操作独立出来交给 Web Worker，完成后通过 postMessage 方法告诉主线程。</p>\n<p>缺点：临时存在，不能永久；为此提出 Service Worker，在 Web Worker 基础上增加持久缓存能力。</p>\n<p>在 Service Worker 之前有 APPCache 这个持久缓存的 API，不过存在更新机主不完善，二次更新，大小限制，回滚等问题，具体参考下方链接 1。</p>\n<p>Service Worker 的特性如下：</p>\n<ul>\n<li><p>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</p>\n</li>\n<li><p>一旦被 install，就永远存在，除非被 uninstall</p>\n</li>\n<li><p>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</p>\n</li>\n<li><p>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</p>\n</li>\n<li><p>离线内容开发者可控</p>\n</li>\n<li><p>能向客户端推送消息</p>\n</li>\n<li><p>不能直接操作 DOM</p>\n</li>\n<li><p>出于安全的考虑，必须在 HTTPS 环境下才能工作</p>\n</li>\n<li><p>异步实现，内部大都是通过 Promise 实现</p>\n</li>\n<li><p>只能运行在 HTTPS 协议下</p>\n</li>\n</ul>\n<blockquote>\n<p>参考资料</p>\n</blockquote>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/29876535\" target=\"_blank\" rel=\"noopener\">为什么 app cache 没有得到大规模应用？它有哪些硬伤吗？</a></li>\n<li><a href=\"https://lavas.baidu.com/doc/offline-and-cache-loading/service-worker/service-worker-introduction\" target=\"_blank\" rel=\"noopener\">Service Worker 简介</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28161855\" target=\"_blank\" rel=\"noopener\">如何优雅的为 PWA 注册 Service Worker</a></li>\n</ol>\n<h2 id=\"42-加载更多-下拉刷新\"><a href=\"#42-加载更多-下拉刷新\" class=\"headerlink\" title=\"42 加载更多/下拉刷新\"></a>42 加载更多/下拉刷新</h2><p>原理：</p>\n<p>scrollTop（滚动条滚动距离） + clientHeight（可见区域高度） == scrollHeight（元素实际高度）</p>\n<p>备注：</p>\n<p>offsetHeighgt = height + padding + border</p>\n<p>clientHeight = height + padding</p>\n<h2 id=\"43-js-标签中async和defer的作用与区别\"><a href=\"#43-js-标签中async和defer的作用与区别\" class=\"headerlink\" title=\"43. js 标签中async和defer的作用与区别\"></a>43. js 标签中<code>async</code>和<code>defer</code>的作用与区别</h2><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。<br>并行加载，</p>\n<ul>\n<li>async</li>\n</ul>\n<p>无顺序的加载，可能在<code>DOMContentLoaded</code>触发之前或之后执行。</p>\n<ul>\n<li>defer</li>\n</ul>\n<p>会等待 document 解析完成，按照 defer 顺序执行对应脚本，全部执行完毕后会触发<code>DOMContentLoaded</code>事件</p>\n<h2 id=\"JsBridge\"><a href=\"#JsBridge\" class=\"headerlink\" title=\"JsBridge\"></a>JsBridge</h2><h3 id=\"实现js调用Native的方式，有三个方法：\"><a href=\"#实现js调用Native的方式，有三个方法：\" class=\"headerlink\" title=\"实现js调用Native的方式，有三个方法：\"></a>实现js调用Native的方式，有三个方法：</h3><ul>\n<li>注入api</li>\n<li>劫持URL Scheme</li>\n<li>弹窗拦截</li>\n</ul>\n<p>【注入api】 通过webview提供的接口，向js的上下文（window）注入对象或方法，js直接调用相关方法<br>【劫持URL Scheme】通常是web端唤醒App（或跳到App某一个页面）。Native劫持Web的请求自定义处理。<br>【弹窗拦截】类似劫持URL Scheme原理，劫持弹窗、二次确认等方法。</p>\n<h3 id=\"Native调用js的方法\"><a href=\"#Native调用js的方法\" class=\"headerlink\" title=\"Native调用js的方法\"></a>Native调用js的方法</h3><p>Native调用js的方式本质就是 执行拼接的js字符串</p>\n<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><h2 id=\"BFC是什么？BFC能用来干什么？怎么才能触发BFC？\"><a href=\"#BFC是什么？BFC能用来干什么？怎么才能触发BFC？\" class=\"headerlink\" title=\"BFC是什么？BFC能用来干什么？怎么才能触发BFC？\"></a>BFC是什么？BFC能用来干什么？怎么才能触发BFC？</h2><p>BFC（块格式化上下文）</p>\n<p>触发BFC几种方式：</p>\n<ul>\n<li>浮动 （float不为none即可）</li>\n<li>绝对定位（position: absoulte 或 fixed）</li>\n<li>display: inline-block | table-cell | flex | inline-flex</li>\n<li>overflow （除了visible之外的值）</li>\n</ul>\n<p>BFC特点</p>\n<ul>\n<li>如果两个块级元素属于同一个BFC，上下margin会重叠，以较大的为准；</li>\n<li>BFC区域不会与浮动元素的区域重叠；</li>\n<li>页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</li>\n</ul>\n<p>BFC作用</p>\n<ul>\n<li>清除元素浮动；</li>\n<li>margin重叠；</li>\n<li>两栏布局；</li>\n</ul>\n"},{"title":"常用npm包整理","catalog":false,"date":"2019-07-03T01:56:32.000Z","subtitle":null,"header-img":null,"_content":"\n## git 钩子\n\n- husky\n- lint-staged\n\n## 代码风格相关\n\n- commitizen\n- eslint\n- standard-version\n- stylelint\n\n```shell\nnpm install commitizen -g\n\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n\n\nyarn add standard-version -D\n\n```\n\n配置`package.json`\n\n```json\n\n\"scripts\": {\n    \"release\": \"standard-version\"\n},\n\"husky\": {\n    \"hooks\": {\n        \"pre-commit\": \"lint-staged\"\n    }\n},\n\"lint-staged\": {\n    \"src/**/*.{js}\": [\n        \"eslint --fix\",\n        \"git add\"\n    ]\n}\n```\n\n参考链接：\n\n1. [commitizen](https://github.com/commitizen/cz-cli)\n\n## 工具命令\n\n- tildify\n\n将绝对路径转换为波形路径 比如/Users/sindresorhus/dev → ~/dev\n\n- ora\n\n这个模块用于在终端里有显示载入动画\n\n- download-git-repo\n\n一个用于下载 git 仓库的项目的模块\n\n- inquirer\n\n是一个命令行的回答的模块，你可以自己设定终端的问题，然后对这些回答给出相应的处理\n\n- commander\n\n可以将文字输出到终端当中 多用于提示 根据定义的 bin 的 name 触发对应脚本\n\n## Node 服务\n\n- protocol-buffers\n\nnodejs 处理 rpc 通信的一种数据序列化格式模块 类似 JSON\n\n- dotenv\n\nnodejs 从文件(.env)中加载环境变量\n\n- pino/koa-pino-logger\n\nnodejs 日志库\n\n- pm2\n- pm2-web\n- pm2-logrotate/pm2-logrotate-ext 日志按天分隔\n\npm2 可视化管理开启\n\npm2 monitor \\${id}\n\n参考资料：\n\n1. [PM2 简易使用手册](https://juejin.im/post/5be406705188256dbb5176f9#heading-10)\n\n## Typescript\n\n- ts-node\n- ts-node-dev\n\n开发模式实时编译文件并输出到指定目录下\n\n## 单元测试\n\n- supertest\n\nhttp 断言库\n\n- jest\n\n- mock-fs\n\n在内存里模拟 fs 文件，进行 mock 文件测试\n\n## 定时任务\n\n- node-cron 定时脚本/任务\n\n## 其他\n\n- verdaccio\n\n搭建私有 npm 库\n\n- 安装本地包\n\nnpm install file:完整的相对路径 如 file:/User/Desktop/XXX\n\n- vue-awesome-swiper\n\nswiper vue 版本组件\n","source":"_posts/常用npm包整理.md","raw":"---\ntitle: 常用npm包整理\ncatalog: false\ndate: 2019-07-03 09:56:32\nsubtitle:\nheader-img:\ntags: npm\ncategories: 前端\n---\n\n## git 钩子\n\n- husky\n- lint-staged\n\n## 代码风格相关\n\n- commitizen\n- eslint\n- standard-version\n- stylelint\n\n```shell\nnpm install commitizen -g\n\ncommitizen init cz-conventional-changelog --yarn --dev --exact\n\n\nyarn add standard-version -D\n\n```\n\n配置`package.json`\n\n```json\n\n\"scripts\": {\n    \"release\": \"standard-version\"\n},\n\"husky\": {\n    \"hooks\": {\n        \"pre-commit\": \"lint-staged\"\n    }\n},\n\"lint-staged\": {\n    \"src/**/*.{js}\": [\n        \"eslint --fix\",\n        \"git add\"\n    ]\n}\n```\n\n参考链接：\n\n1. [commitizen](https://github.com/commitizen/cz-cli)\n\n## 工具命令\n\n- tildify\n\n将绝对路径转换为波形路径 比如/Users/sindresorhus/dev → ~/dev\n\n- ora\n\n这个模块用于在终端里有显示载入动画\n\n- download-git-repo\n\n一个用于下载 git 仓库的项目的模块\n\n- inquirer\n\n是一个命令行的回答的模块，你可以自己设定终端的问题，然后对这些回答给出相应的处理\n\n- commander\n\n可以将文字输出到终端当中 多用于提示 根据定义的 bin 的 name 触发对应脚本\n\n## Node 服务\n\n- protocol-buffers\n\nnodejs 处理 rpc 通信的一种数据序列化格式模块 类似 JSON\n\n- dotenv\n\nnodejs 从文件(.env)中加载环境变量\n\n- pino/koa-pino-logger\n\nnodejs 日志库\n\n- pm2\n- pm2-web\n- pm2-logrotate/pm2-logrotate-ext 日志按天分隔\n\npm2 可视化管理开启\n\npm2 monitor \\${id}\n\n参考资料：\n\n1. [PM2 简易使用手册](https://juejin.im/post/5be406705188256dbb5176f9#heading-10)\n\n## Typescript\n\n- ts-node\n- ts-node-dev\n\n开发模式实时编译文件并输出到指定目录下\n\n## 单元测试\n\n- supertest\n\nhttp 断言库\n\n- jest\n\n- mock-fs\n\n在内存里模拟 fs 文件，进行 mock 文件测试\n\n## 定时任务\n\n- node-cron 定时脚本/任务\n\n## 其他\n\n- verdaccio\n\n搭建私有 npm 库\n\n- 安装本地包\n\nnpm install file:完整的相对路径 如 file:/User/Desktop/XXX\n\n- vue-awesome-swiper\n\nswiper vue 版本组件\n","slug":"常用npm包整理","published":1,"updated":"2024-02-20T06:48:45.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvd003slwxak72goqid","content":"<h2><span id=\"git-钩子\">git 钩子</span></h2><ul>\n<li>husky</li>\n<li>lint-staged</li>\n</ul>\n<h2><span id=\"代码风格相关\">代码风格相关</span></h2><ul>\n<li>commitizen</li>\n<li>eslint</li>\n<li>standard-version</li>\n<li>stylelint</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commitizen -g</span><br><span class=\"line\"></span><br><span class=\"line\">commitizen init cz-conventional-changelog --yarn --dev --exact</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add standard-version -D</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"release\": \"standard-version\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">        \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js&#125;\": [</span><br><span class=\"line\">        \"eslint --fix\",</span><br><span class=\"line\">        <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">commitizen</a></li>\n</ol>\n<h2><span id=\"工具命令\">工具命令</span></h2><ul>\n<li>tildify</li>\n</ul>\n<p>将绝对路径转换为波形路径 比如/Users/sindresorhus/dev → ~/dev</p>\n<ul>\n<li>ora</li>\n</ul>\n<p>这个模块用于在终端里有显示载入动画</p>\n<ul>\n<li>download-git-repo</li>\n</ul>\n<p>一个用于下载 git 仓库的项目的模块</p>\n<ul>\n<li>inquirer</li>\n</ul>\n<p>是一个命令行的回答的模块，你可以自己设定终端的问题，然后对这些回答给出相应的处理</p>\n<ul>\n<li>commander</li>\n</ul>\n<p>可以将文字输出到终端当中 多用于提示 根据定义的 bin 的 name 触发对应脚本</p>\n<h2><span id=\"node-服务\">Node 服务</span></h2><ul>\n<li>protocol-buffers</li>\n</ul>\n<p>nodejs 处理 rpc 通信的一种数据序列化格式模块 类似 JSON</p>\n<ul>\n<li>dotenv</li>\n</ul>\n<p>nodejs 从文件(.env)中加载环境变量</p>\n<ul>\n<li>pino/koa-pino-logger</li>\n</ul>\n<p>nodejs 日志库</p>\n<ul>\n<li>pm2</li>\n<li>pm2-web</li>\n<li>pm2-logrotate/pm2-logrotate-ext 日志按天分隔</li>\n</ul>\n<p>pm2 可视化管理开启</p>\n<p>pm2 monitor ${id}</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/5be406705188256dbb5176f9#heading-10\" target=\"_blank\" rel=\"noopener\">PM2 简易使用手册</a></li>\n</ol>\n<h2><span id=\"typescript\">Typescript</span></h2><ul>\n<li>ts-node</li>\n<li>ts-node-dev</li>\n</ul>\n<p>开发模式实时编译文件并输出到指定目录下</p>\n<h2><span id=\"单元测试\">单元测试</span></h2><ul>\n<li>supertest</li>\n</ul>\n<p>http 断言库</p>\n<ul>\n<li><p>jest</p>\n</li>\n<li><p>mock-fs</p>\n</li>\n</ul>\n<p>在内存里模拟 fs 文件，进行 mock 文件测试</p>\n<h2><span id=\"定时任务\">定时任务</span></h2><ul>\n<li>node-cron 定时脚本/任务</li>\n</ul>\n<h2><span id=\"其他\">其他</span></h2><ul>\n<li>verdaccio</li>\n</ul>\n<p>搭建私有 npm 库</p>\n<ul>\n<li>安装本地包</li>\n</ul>\n<p>npm install file:完整的相对路径 如 file:/User/Desktop/XXX</p>\n<ul>\n<li>vue-awesome-swiper</li>\n</ul>\n<p>swiper vue 版本组件</p>\n","site":{"data":{}},"length":1038,"excerpt":"","more":"<h2 id=\"git-钩子\"><a href=\"#git-钩子\" class=\"headerlink\" title=\"git 钩子\"></a>git 钩子</h2><ul>\n<li>husky</li>\n<li>lint-staged</li>\n</ul>\n<h2 id=\"代码风格相关\"><a href=\"#代码风格相关\" class=\"headerlink\" title=\"代码风格相关\"></a>代码风格相关</h2><ul>\n<li>commitizen</li>\n<li>eslint</li>\n<li>standard-version</li>\n<li>stylelint</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commitizen -g</span><br><span class=\"line\"></span><br><span class=\"line\">commitizen init cz-conventional-changelog --yarn --dev --exact</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add standard-version -D</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"release\": \"standard-version\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">        \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js&#125;\": [</span><br><span class=\"line\">        \"eslint --fix\",</span><br><span class=\"line\">        <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<ol>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">commitizen</a></li>\n</ol>\n<h2 id=\"工具命令\"><a href=\"#工具命令\" class=\"headerlink\" title=\"工具命令\"></a>工具命令</h2><ul>\n<li>tildify</li>\n</ul>\n<p>将绝对路径转换为波形路径 比如/Users/sindresorhus/dev → ~/dev</p>\n<ul>\n<li>ora</li>\n</ul>\n<p>这个模块用于在终端里有显示载入动画</p>\n<ul>\n<li>download-git-repo</li>\n</ul>\n<p>一个用于下载 git 仓库的项目的模块</p>\n<ul>\n<li>inquirer</li>\n</ul>\n<p>是一个命令行的回答的模块，你可以自己设定终端的问题，然后对这些回答给出相应的处理</p>\n<ul>\n<li>commander</li>\n</ul>\n<p>可以将文字输出到终端当中 多用于提示 根据定义的 bin 的 name 触发对应脚本</p>\n<h2 id=\"Node-服务\"><a href=\"#Node-服务\" class=\"headerlink\" title=\"Node 服务\"></a>Node 服务</h2><ul>\n<li>protocol-buffers</li>\n</ul>\n<p>nodejs 处理 rpc 通信的一种数据序列化格式模块 类似 JSON</p>\n<ul>\n<li>dotenv</li>\n</ul>\n<p>nodejs 从文件(.env)中加载环境变量</p>\n<ul>\n<li>pino/koa-pino-logger</li>\n</ul>\n<p>nodejs 日志库</p>\n<ul>\n<li>pm2</li>\n<li>pm2-web</li>\n<li>pm2-logrotate/pm2-logrotate-ext 日志按天分隔</li>\n</ul>\n<p>pm2 可视化管理开启</p>\n<p>pm2 monitor ${id}</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://juejin.im/post/5be406705188256dbb5176f9#heading-10\" target=\"_blank\" rel=\"noopener\">PM2 简易使用手册</a></li>\n</ol>\n<h2 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h2><ul>\n<li>ts-node</li>\n<li>ts-node-dev</li>\n</ul>\n<p>开发模式实时编译文件并输出到指定目录下</p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><ul>\n<li>supertest</li>\n</ul>\n<p>http 断言库</p>\n<ul>\n<li><p>jest</p>\n</li>\n<li><p>mock-fs</p>\n</li>\n</ul>\n<p>在内存里模拟 fs 文件，进行 mock 文件测试</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><ul>\n<li>node-cron 定时脚本/任务</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>verdaccio</li>\n</ul>\n<p>搭建私有 npm 库</p>\n<ul>\n<li>安装本地包</li>\n</ul>\n<p>npm install file:完整的相对路径 如 file:/User/Desktop/XXX</p>\n<ul>\n<li>vue-awesome-swiper</li>\n</ul>\n<p>swiper vue 版本组件</p>\n"},{"title":"常见css布局问题","catalog":true,"date":"2020-03-19T14:30:45.000Z","subtitle":null,"header-img":null,"_content":"\n## 左右两边盒子宽度固定，中间盒子宽度自适应\n\n- 利用相对定位\n\n```html\n<div class=\"box\">\n  <div class=\"left\"></div>\n  <div class=\"main\"></div>\n  <div class=\"right\"></div>\n</div>\n\n<style>\n  .box {\n    position: relative;\n  }\n\n  .left {\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    border: 1px solid blue;\n  }\n\n  .right {\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    right: 0;\n    top: 0;\n    border: 1px solid red;\n  }\n\n  .main {\n    height: 100px;\n    padding: 0 100px;\n    border: 1px solid yellow;\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yjodJ.md.png](https://s1.ax1x.com/2020/03/19/8yjodJ.md.png)](https://imgchr.com/i/8yjodJ)\n\n- flex 布局\n\n```html\n<div class=\"box1\">\n  <div class=\"left1\"></div>\n  <div class=\"main1\"></div>\n  <div class=\"right1\"></div>\n</div>\n\n<style>\n  .box1 {\n    display: flex;\n  }\n\n  .left1 {\n    width: 100px;\n    height: 100px;\n    background: blue;\n  }\n\n  .right1 {\n    width: 100px;\n    height: 100px;\n    background: red;\n  }\n\n  .main1 {\n    flex: 1;\n    height: 100px;\n\n    background: #000;\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yv3lV.md.png](https://s1.ax1x.com/2020/03/19/8yv3lV.md.png)](https://imgchr.com/i/8yv3lV)\n\n---\n\n## 圣杯布局\n\n步骤：\n\n1. 父盒子清除浮动，子盒子全部左浮动；\n2. left2 和 right2 各设置固定宽度，中间 main2 盒子 width：100%，此时会把 left2 和 right2 挤到第二行来；\n3. left2 盒子利用 margin-left: -100%，位置会到第一行最左侧，同时会挡住 main2；\n4. 主盒子 box2 利用 padding-left 和 padding-right 给左右盒子留出位置；\n5. 利用相对定位设置 left：-left2 宽度进行占位；\n6. 同理，right2 盒子 margin-left：-right2 盒子宽度到第一行最右侧；\n7. 设置 right：-right2 盒子宽度，去占右边空白位；\n\n```html\n<div class=\"box2\">\n  <div class=\"main2\"></div>\n  <div class=\"left2\"></div>\n  <div class=\"right2\"></div>\n</div>\n\n<style>\n  .box2 {\n    overflow: hidden;\n    padding-left: 100px;\n    padding-right: 150px;\n  }\n\n  .main2,\n  .left2,\n  .right2 {\n    float: left;\n    position: relative;\n  }\n\n  .main2 {\n    width: 100%;\n    height: 100px;\n    background: rgb(206, 201, 201);\n  }\n\n  .left2 {\n    width: 100px;\n    height: 100px;\n    margin-left: -100%;\n    left: -100px;\n    background: rgba(95, 179, 235, 0.972);\n  }\n\n  .right2 {\n    width: 150px;\n    height: 100px;\n    margin-left: -150px;\n    right: -150px;\n    background: rgb(231, 105, 2);\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yxkN9.md.png](https://s1.ax1x.com/2020/03/19/8yxkN9.md.png)](https://imgchr.com/i/8yxkN9)\n\n---\n\n## 双飞翼布局\n\n和圣杯布局一致，不过多了一个元素\n\n```html\n<div class=\"box3\">\n  <div class=\"main3_box\">\n    <div class=\"main3\"></div>\n  </div>\n  <div class=\"left3\"></div>\n  <div class=\"right3\"></div>\n</div>\n\n<style>\n  .box3 {\n    overflow: hidden;\n  }\n\n  .main3_box,\n  .left3,\n  .right3 {\n    float: left;\n    height: 100px;\n  }\n\n  .main3_box {\n    width: 100%;\n    background: rgb(231, 105, 2);\n  }\n\n  .main3 {\n    height: 100px;\n    margin: 0 150px 0 100px;\n    background: red;\n  }\n\n  .left3 {\n    width: 100px;\n    margin-left: -100%;\n    background: rgb(206, 201, 201);\n  }\n\n  .right3 {\n    width: 150px;\n    margin-left: -150px;\n    background: rgba(95, 179, 235, 0.972);\n  }\n</style>\n```\n\n效果图如下：\n\n[![86CoXq.md.png](https://s1.ax1x.com/2020/03/19/86CoXq.md.png)](https://imgchr.com/i/86CoXq)\n","source":"_posts/常见css布局问题.md","raw":"---\ntitle: 常见css布局问题\ncatalog: true\ndate: 2020-03-19 22:30:45\nsubtitle:\nheader-img:\ntags: css\ncategories: 前端\n---\n\n## 左右两边盒子宽度固定，中间盒子宽度自适应\n\n- 利用相对定位\n\n```html\n<div class=\"box\">\n  <div class=\"left\"></div>\n  <div class=\"main\"></div>\n  <div class=\"right\"></div>\n</div>\n\n<style>\n  .box {\n    position: relative;\n  }\n\n  .left {\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    border: 1px solid blue;\n  }\n\n  .right {\n    width: 100px;\n    height: 100px;\n    position: absolute;\n    right: 0;\n    top: 0;\n    border: 1px solid red;\n  }\n\n  .main {\n    height: 100px;\n    padding: 0 100px;\n    border: 1px solid yellow;\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yjodJ.md.png](https://s1.ax1x.com/2020/03/19/8yjodJ.md.png)](https://imgchr.com/i/8yjodJ)\n\n- flex 布局\n\n```html\n<div class=\"box1\">\n  <div class=\"left1\"></div>\n  <div class=\"main1\"></div>\n  <div class=\"right1\"></div>\n</div>\n\n<style>\n  .box1 {\n    display: flex;\n  }\n\n  .left1 {\n    width: 100px;\n    height: 100px;\n    background: blue;\n  }\n\n  .right1 {\n    width: 100px;\n    height: 100px;\n    background: red;\n  }\n\n  .main1 {\n    flex: 1;\n    height: 100px;\n\n    background: #000;\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yv3lV.md.png](https://s1.ax1x.com/2020/03/19/8yv3lV.md.png)](https://imgchr.com/i/8yv3lV)\n\n---\n\n## 圣杯布局\n\n步骤：\n\n1. 父盒子清除浮动，子盒子全部左浮动；\n2. left2 和 right2 各设置固定宽度，中间 main2 盒子 width：100%，此时会把 left2 和 right2 挤到第二行来；\n3. left2 盒子利用 margin-left: -100%，位置会到第一行最左侧，同时会挡住 main2；\n4. 主盒子 box2 利用 padding-left 和 padding-right 给左右盒子留出位置；\n5. 利用相对定位设置 left：-left2 宽度进行占位；\n6. 同理，right2 盒子 margin-left：-right2 盒子宽度到第一行最右侧；\n7. 设置 right：-right2 盒子宽度，去占右边空白位；\n\n```html\n<div class=\"box2\">\n  <div class=\"main2\"></div>\n  <div class=\"left2\"></div>\n  <div class=\"right2\"></div>\n</div>\n\n<style>\n  .box2 {\n    overflow: hidden;\n    padding-left: 100px;\n    padding-right: 150px;\n  }\n\n  .main2,\n  .left2,\n  .right2 {\n    float: left;\n    position: relative;\n  }\n\n  .main2 {\n    width: 100%;\n    height: 100px;\n    background: rgb(206, 201, 201);\n  }\n\n  .left2 {\n    width: 100px;\n    height: 100px;\n    margin-left: -100%;\n    left: -100px;\n    background: rgba(95, 179, 235, 0.972);\n  }\n\n  .right2 {\n    width: 150px;\n    height: 100px;\n    margin-left: -150px;\n    right: -150px;\n    background: rgb(231, 105, 2);\n  }\n</style>\n```\n\n效果图如下：\n\n[![8yxkN9.md.png](https://s1.ax1x.com/2020/03/19/8yxkN9.md.png)](https://imgchr.com/i/8yxkN9)\n\n---\n\n## 双飞翼布局\n\n和圣杯布局一致，不过多了一个元素\n\n```html\n<div class=\"box3\">\n  <div class=\"main3_box\">\n    <div class=\"main3\"></div>\n  </div>\n  <div class=\"left3\"></div>\n  <div class=\"right3\"></div>\n</div>\n\n<style>\n  .box3 {\n    overflow: hidden;\n  }\n\n  .main3_box,\n  .left3,\n  .right3 {\n    float: left;\n    height: 100px;\n  }\n\n  .main3_box {\n    width: 100%;\n    background: rgb(231, 105, 2);\n  }\n\n  .main3 {\n    height: 100px;\n    margin: 0 150px 0 100px;\n    background: red;\n  }\n\n  .left3 {\n    width: 100px;\n    margin-left: -100%;\n    background: rgb(206, 201, 201);\n  }\n\n  .right3 {\n    width: 150px;\n    margin-left: -150px;\n    background: rgba(95, 179, 235, 0.972);\n  }\n</style>\n```\n\n效果图如下：\n\n[![86CoXq.md.png](https://s1.ax1x.com/2020/03/19/86CoXq.md.png)](https://imgchr.com/i/86CoXq)\n","slug":"常见css布局问题","published":1,"updated":"2024-02-20T06:48:45.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvf003wlwxaaursdqm0","content":"<h2><span id=\"左右两边盒子宽度固定中间盒子宽度自适应\">左右两边盒子宽度固定，中间盒子宽度自适应</span></h2><ul>\n<li>利用相对定位</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    padding: 0 100px;</span><br><span class=\"line\">    border: 1px solid yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yjodJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yjodJ.md.png\" alt=\"8yjodJ.md.png\"></a></p>\n<ul>\n<li>flex 布局</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left1</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right1</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main1</span> &#123;</span></span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yv3lV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yv3lV.md.png\" alt=\"8yv3lV.md.png\"></a></p>\n<hr>\n<h2><span id=\"圣杯布局\">圣杯布局</span></h2><p>步骤：</p>\n<ol>\n<li>父盒子清除浮动，子盒子全部左浮动；</li>\n<li>left2 和 right2 各设置固定宽度，中间 main2 盒子 width：100%，此时会把 left2 和 right2 挤到第二行来；</li>\n<li>left2 盒子利用 margin-left: -100%，位置会到第一行最左侧，同时会挡住 main2；</li>\n<li>主盒子 box2 利用 padding-left 和 padding-right 给左右盒子留出位置；</li>\n<li>利用相对定位设置 left：-left2 宽度进行占位；</li>\n<li>同理，right2 盒子 margin-left：-right2 盒子宽度到第一行最右侧；</li>\n<li>设置 right：-right2 盒子宽度，去占右边空白位；</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    padding-left: 100px;</span><br><span class=\"line\">    padding-right: 150px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main2</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left2</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right2</span> &#123;</span></span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main2</span> &#123;</span></span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: rgb(206, 201, 201);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left2</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    left: -100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(95, 179, 235, 0<span class=\"selector-class\">.972</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right2</span> &#123;</span></span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin-left: -150px;</span><br><span class=\"line\">    right: -150px;</span><br><span class=\"line\">    background: rgb(231, 105, 2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yxkN9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yxkN9.md.png\" alt=\"8yxkN9.md.png\"></a></p>\n<hr>\n<h2><span id=\"双飞翼布局\">双飞翼布局</span></h2><p>和圣杯布局一致，不过多了一个元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main3_box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box3</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3_box</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left3</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right3</span> &#123;</span></span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3_box</span> &#123;</span></span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background: rgb(231, 105, 2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3</span> &#123;</span></span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin: 0 150px 0 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left3</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    background: rgb(206, 201, 201);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right3</span> &#123;</span></span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    margin-left: -150px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(95, 179, 235, 0<span class=\"selector-class\">.972</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/86CoXq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/86CoXq.md.png\" alt=\"86CoXq.md.png\"></a></p>\n","site":{"data":{}},"length":2620,"excerpt":"","more":"<h2 id=\"左右两边盒子宽度固定，中间盒子宽度自适应\"><a href=\"#左右两边盒子宽度固定，中间盒子宽度自适应\" class=\"headerlink\" title=\"左右两边盒子宽度固定，中间盒子宽度自适应\"></a>左右两边盒子宽度固定，中间盒子宽度自适应</h2><ul>\n<li>利用相对定位</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main</span> &#123;</span></span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    padding: 0 100px;</span><br><span class=\"line\">    border: 1px solid yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yjodJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yjodJ.md.png\" alt=\"8yjodJ.md.png\"></a></p>\n<ul>\n<li>flex 布局</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left1</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right1</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main1</span> &#123;</span></span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yv3lV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yv3lV.md.png\" alt=\"8yv3lV.md.png\"></a></p>\n<hr>\n<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><p>步骤：</p>\n<ol>\n<li>父盒子清除浮动，子盒子全部左浮动；</li>\n<li>left2 和 right2 各设置固定宽度，中间 main2 盒子 width：100%，此时会把 left2 和 right2 挤到第二行来；</li>\n<li>left2 盒子利用 margin-left: -100%，位置会到第一行最左侧，同时会挡住 main2；</li>\n<li>主盒子 box2 利用 padding-left 和 padding-right 给左右盒子留出位置；</li>\n<li>利用相对定位设置 left：-left2 宽度进行占位；</li>\n<li>同理，right2 盒子 margin-left：-right2 盒子宽度到第一行最右侧；</li>\n<li>设置 right：-right2 盒子宽度，去占右边空白位；</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    padding-left: 100px;</span><br><span class=\"line\">    padding-right: 150px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main2</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left2</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right2</span> &#123;</span></span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main2</span> &#123;</span></span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background: rgb(206, 201, 201);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left2</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    left: -100px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(95, 179, 235, 0<span class=\"selector-class\">.972</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right2</span> &#123;</span></span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin-left: -150px;</span><br><span class=\"line\">    right: -150px;</span><br><span class=\"line\">    background: rgb(231, 105, 2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/8yxkN9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/8yxkN9.md.png\" alt=\"8yxkN9.md.png\"></a></p>\n<hr>\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>和圣杯布局一致，不过多了一个元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main3_box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box3</span> &#123;</span></span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3_box</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left3</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right3</span> &#123;</span></span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3_box</span> &#123;</span></span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background: rgb(231, 105, 2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.main3</span> &#123;</span></span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    margin: 0 150px 0 100px;</span><br><span class=\"line\">    background: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.left3</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    background: rgb(206, 201, 201);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.right3</span> &#123;</span></span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    margin-left: -150px;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-tag\">rgba</span>(95, 179, 235, 0<span class=\"selector-class\">.972</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图如下：</p>\n<p><a href=\"https://imgchr.com/i/86CoXq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/19/86CoXq.md.png\" alt=\"86CoXq.md.png\"></a></p>\n"},{"title":"性能上报","catalog":true,"date":"2020-06-15T09:35:41.000Z","subtitle":null,"header-img":null,"_content":"\n性能计算逻辑，全部取自`window.performance.timing`\n\n![指标解读](https://picb.zhimg.com/80/v2-e4e26420d6b681b2b15b9edf9db9d4d0_720w.jpg)\n\n## 关键指标\n\n```javascript\n// 上一个页面卸载\nunloadEventEnd - unloadEventStart as prevUnload,\n// 重定向\nredirectEnd - redirectStart as redirect,\n// DNS缓存时间\ndomainLookupStart - fetchStart as appCache,\n// DNS解析耗时\ndomain_lookup_end - domainLookupStart as dns,\n// SSL\nconnectEnd - secureConnectionStart as ssl,\n// TCP链接耗时\nconnectEnd - connectStart as tcp,\n// ttfb 页面第一个字节的时间\nresponseStart - responseStart as ttfb,\n// request耗时\nresponseEnd - responseStart as htmlRequest,\n// domLoading - fetchStart as fp,\n// dom树解析完成 / 白屏时间  \ndomInteractive - fetchStart as domIteractive,\n// domReady / TTI 可交互时间\ndomContentLoadEventEnd - fetchStart as domReady,\n// dom解析耗时\ndomComplete -  domLoading as domProcess,\n// 资源加载耗时\ndomComplete - domContentLoadEventStart  as resourceLoad,\n// load事件耗时\nloadEventEnd - loadEventStart as loadEvent,\n// 页面完全加载耗时\nloadEventEnd - fetchStart as pageComplete\n```\n\n## 首屏时间\n\n首屏时间是指页面第一屏所有资源完整展示的时间。这是一个对用户来说非常直接的体验指标，但是对于前端却是一个非常难以统计衡量的指标。\n\n目前统计首屏时间有如下几种方式：\n\n1. 用户自定义打点（最准确方式，只有用户自己最清楚什么时候算是首屏加载完成）;\n2. lighthouse 中使用的是 chrome 渲染过程中记录的 trace event;\n3. aegis 的方法：利用 MutationObserver 接口，监听 document 对象的节点变化。\n\n检查这些变化的节点是否在首屏中，若这些节点在首屏中，那当前的时间点就是首屏渲染时间。如果首屏有图片，则通过遍历 performance.getEntries拿到的所有在首屏的图片实体对象，统计最慢的图片加载时间来更新首屏渲染时间；\n\n4. 利用 MutationObserver；\n\n在首屏内容模块插入一个 div，利用 Mutation Observer API 监听该 div 的 dom 事件，判断该 div 的高度是否大于 0 或者大于指定值，如果大于了，就表示主要内容已经渲染出来，可计算首屏时间。\n\n## 数据上报方式\n\n测量好数据之后，需要将数据发给服务端。考虑到页面性能统计对数据的丢失率要求不高，且数据上报应该尽量不影响主流程的逻辑和页面的性能情况下进行。\n\n### img标签上报\n\n标签上报是最通用，最常用的上报方式，其中具备两个主要特点：\n\n1. 没有任何兼容性；\n2. 不存在跨域问题；\n\n### navigator.sendBeacon\n\n大部分现代浏览器都支持 navigator.sendBeacon方法。这个方法可以用来发送一些统计和诊断的小量数据，特别适合上报统计的场景。\n\n1. 数据可靠，浏览器关闭也能发送；\n2. 异步执行，不会影响下一页面加载即；\n\n```javascript\nwindow.addEventListener('unload', logData, false);\n\nfunction logData() {\n    navigator.sendBeacon(\"/log\", analyticsData);\n}\n```\n\n## 参考\n\n1. [如何进行web性能监控](http://www.alloyteam.com/2020/01/14184/#prettyPhoto)\n","source":"_posts/性能上报.md","raw":"---\ntitle: 性能上报\ncatalog: true\ndate: 2020-06-15 17:35:41\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n性能计算逻辑，全部取自`window.performance.timing`\n\n![指标解读](https://picb.zhimg.com/80/v2-e4e26420d6b681b2b15b9edf9db9d4d0_720w.jpg)\n\n## 关键指标\n\n```javascript\n// 上一个页面卸载\nunloadEventEnd - unloadEventStart as prevUnload,\n// 重定向\nredirectEnd - redirectStart as redirect,\n// DNS缓存时间\ndomainLookupStart - fetchStart as appCache,\n// DNS解析耗时\ndomain_lookup_end - domainLookupStart as dns,\n// SSL\nconnectEnd - secureConnectionStart as ssl,\n// TCP链接耗时\nconnectEnd - connectStart as tcp,\n// ttfb 页面第一个字节的时间\nresponseStart - responseStart as ttfb,\n// request耗时\nresponseEnd - responseStart as htmlRequest,\n// domLoading - fetchStart as fp,\n// dom树解析完成 / 白屏时间  \ndomInteractive - fetchStart as domIteractive,\n// domReady / TTI 可交互时间\ndomContentLoadEventEnd - fetchStart as domReady,\n// dom解析耗时\ndomComplete -  domLoading as domProcess,\n// 资源加载耗时\ndomComplete - domContentLoadEventStart  as resourceLoad,\n// load事件耗时\nloadEventEnd - loadEventStart as loadEvent,\n// 页面完全加载耗时\nloadEventEnd - fetchStart as pageComplete\n```\n\n## 首屏时间\n\n首屏时间是指页面第一屏所有资源完整展示的时间。这是一个对用户来说非常直接的体验指标，但是对于前端却是一个非常难以统计衡量的指标。\n\n目前统计首屏时间有如下几种方式：\n\n1. 用户自定义打点（最准确方式，只有用户自己最清楚什么时候算是首屏加载完成）;\n2. lighthouse 中使用的是 chrome 渲染过程中记录的 trace event;\n3. aegis 的方法：利用 MutationObserver 接口，监听 document 对象的节点变化。\n\n检查这些变化的节点是否在首屏中，若这些节点在首屏中，那当前的时间点就是首屏渲染时间。如果首屏有图片，则通过遍历 performance.getEntries拿到的所有在首屏的图片实体对象，统计最慢的图片加载时间来更新首屏渲染时间；\n\n4. 利用 MutationObserver；\n\n在首屏内容模块插入一个 div，利用 Mutation Observer API 监听该 div 的 dom 事件，判断该 div 的高度是否大于 0 或者大于指定值，如果大于了，就表示主要内容已经渲染出来，可计算首屏时间。\n\n## 数据上报方式\n\n测量好数据之后，需要将数据发给服务端。考虑到页面性能统计对数据的丢失率要求不高，且数据上报应该尽量不影响主流程的逻辑和页面的性能情况下进行。\n\n### img标签上报\n\n标签上报是最通用，最常用的上报方式，其中具备两个主要特点：\n\n1. 没有任何兼容性；\n2. 不存在跨域问题；\n\n### navigator.sendBeacon\n\n大部分现代浏览器都支持 navigator.sendBeacon方法。这个方法可以用来发送一些统计和诊断的小量数据，特别适合上报统计的场景。\n\n1. 数据可靠，浏览器关闭也能发送；\n2. 异步执行，不会影响下一页面加载即；\n\n```javascript\nwindow.addEventListener('unload', logData, false);\n\nfunction logData() {\n    navigator.sendBeacon(\"/log\", analyticsData);\n}\n```\n\n## 参考\n\n1. [如何进行web性能监控](http://www.alloyteam.com/2020/01/14184/#prettyPhoto)\n","slug":"性能上报","published":1,"updated":"2024-02-20T06:48:45.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvg003zlwxa5olj8y7h","content":"<p>性能计算逻辑，全部取自<code>window.performance.timing</code></p>\n<p><img src=\"https://picb.zhimg.com/80/v2-e4e26420d6b681b2b15b9edf9db9d4d0_720w.jpg\" alt=\"指标解读\"></p>\n<h2><span id=\"关键指标\">关键指标</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上一个页面卸载</span></span><br><span class=\"line\">unloadEventEnd - unloadEventStart <span class=\"keyword\">as</span> prevUnload,</span><br><span class=\"line\"><span class=\"comment\">// 重定向</span></span><br><span class=\"line\">redirectEnd - redirectStart <span class=\"keyword\">as</span> redirect,</span><br><span class=\"line\"><span class=\"comment\">// DNS缓存时间</span></span><br><span class=\"line\">domainLookupStart - fetchStart <span class=\"keyword\">as</span> appCache,</span><br><span class=\"line\"><span class=\"comment\">// DNS解析耗时</span></span><br><span class=\"line\">domain_lookup_end - domainLookupStart <span class=\"keyword\">as</span> dns,</span><br><span class=\"line\"><span class=\"comment\">// SSL</span></span><br><span class=\"line\">connectEnd - secureConnectionStart <span class=\"keyword\">as</span> ssl,</span><br><span class=\"line\"><span class=\"comment\">// TCP链接耗时</span></span><br><span class=\"line\">connectEnd - connectStart <span class=\"keyword\">as</span> tcp,</span><br><span class=\"line\"><span class=\"comment\">// ttfb 页面第一个字节的时间</span></span><br><span class=\"line\">responseStart - responseStart <span class=\"keyword\">as</span> ttfb,</span><br><span class=\"line\"><span class=\"comment\">// request耗时</span></span><br><span class=\"line\">responseEnd - responseStart <span class=\"keyword\">as</span> htmlRequest,</span><br><span class=\"line\"><span class=\"comment\">// domLoading - fetchStart as fp,</span></span><br><span class=\"line\"><span class=\"comment\">// dom树解析完成 / 白屏时间  </span></span><br><span class=\"line\">domInteractive - fetchStart <span class=\"keyword\">as</span> domIteractive,</span><br><span class=\"line\"><span class=\"comment\">// domReady / TTI 可交互时间</span></span><br><span class=\"line\">domContentLoadEventEnd - fetchStart <span class=\"keyword\">as</span> domReady,</span><br><span class=\"line\"><span class=\"comment\">// dom解析耗时</span></span><br><span class=\"line\">domComplete -  domLoading <span class=\"keyword\">as</span> domProcess,</span><br><span class=\"line\"><span class=\"comment\">// 资源加载耗时</span></span><br><span class=\"line\">domComplete - domContentLoadEventStart  <span class=\"keyword\">as</span> resourceLoad,</span><br><span class=\"line\"><span class=\"comment\">// load事件耗时</span></span><br><span class=\"line\">loadEventEnd - loadEventStart <span class=\"keyword\">as</span> loadEvent,</span><br><span class=\"line\"><span class=\"comment\">// 页面完全加载耗时</span></span><br><span class=\"line\">loadEventEnd - fetchStart <span class=\"keyword\">as</span> pageComplete</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"首屏时间\">首屏时间</span></h2><p>首屏时间是指页面第一屏所有资源完整展示的时间。这是一个对用户来说非常直接的体验指标，但是对于前端却是一个非常难以统计衡量的指标。</p>\n<p>目前统计首屏时间有如下几种方式：</p>\n<ol>\n<li>用户自定义打点（最准确方式，只有用户自己最清楚什么时候算是首屏加载完成）;</li>\n<li>lighthouse 中使用的是 chrome 渲染过程中记录的 trace event;</li>\n<li>aegis 的方法：利用 MutationObserver 接口，监听 document 对象的节点变化。</li>\n</ol>\n<p>检查这些变化的节点是否在首屏中，若这些节点在首屏中，那当前的时间点就是首屏渲染时间。如果首屏有图片，则通过遍历 performance.getEntries拿到的所有在首屏的图片实体对象，统计最慢的图片加载时间来更新首屏渲染时间；</p>\n<ol start=\"4\">\n<li>利用 MutationObserver；</li>\n</ol>\n<p>在首屏内容模块插入一个 div，利用 Mutation Observer API 监听该 div 的 dom 事件，判断该 div 的高度是否大于 0 或者大于指定值，如果大于了，就表示主要内容已经渲染出来，可计算首屏时间。</p>\n<h2><span id=\"数据上报方式\">数据上报方式</span></h2><p>测量好数据之后，需要将数据发给服务端。考虑到页面性能统计对数据的丢失率要求不高，且数据上报应该尽量不影响主流程的逻辑和页面的性能情况下进行。</p>\n<h3><span id=\"img标签上报\">img标签上报</span></h3><p>标签上报是最通用，最常用的上报方式，其中具备两个主要特点：</p>\n<ol>\n<li>没有任何兼容性；</li>\n<li>不存在跨域问题；</li>\n</ol>\n<h3><span id=\"navigatorsendbeacon\">navigator.sendBeacon</span></h3><p>大部分现代浏览器都支持 navigator.sendBeacon方法。这个方法可以用来发送一些统计和诊断的小量数据，特别适合上报统计的场景。</p>\n<ol>\n<li>数据可靠，浏览器关闭也能发送；</li>\n<li>异步执行，不会影响下一页面加载即；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'unload'</span>, logData, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    navigator.sendBeacon(<span class=\"string\">\"/log\"</span>, analyticsData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"参考\">参考</span></h2><ol>\n<li><a href=\"http://www.alloyteam.com/2020/01/14184/#prettyPhoto\" target=\"_blank\" rel=\"noopener\">如何进行web性能监控</a></li>\n</ol>\n","site":{"data":{}},"length":1636,"excerpt":"","more":"<p>性能计算逻辑，全部取自<code>window.performance.timing</code></p>\n<p><img src=\"https://picb.zhimg.com/80/v2-e4e26420d6b681b2b15b9edf9db9d4d0_720w.jpg\" alt=\"指标解读\"></p>\n<h2 id=\"关键指标\"><a href=\"#关键指标\" class=\"headerlink\" title=\"关键指标\"></a>关键指标</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上一个页面卸载</span></span><br><span class=\"line\">unloadEventEnd - unloadEventStart <span class=\"keyword\">as</span> prevUnload,</span><br><span class=\"line\"><span class=\"comment\">// 重定向</span></span><br><span class=\"line\">redirectEnd - redirectStart <span class=\"keyword\">as</span> redirect,</span><br><span class=\"line\"><span class=\"comment\">// DNS缓存时间</span></span><br><span class=\"line\">domainLookupStart - fetchStart <span class=\"keyword\">as</span> appCache,</span><br><span class=\"line\"><span class=\"comment\">// DNS解析耗时</span></span><br><span class=\"line\">domain_lookup_end - domainLookupStart <span class=\"keyword\">as</span> dns,</span><br><span class=\"line\"><span class=\"comment\">// SSL</span></span><br><span class=\"line\">connectEnd - secureConnectionStart <span class=\"keyword\">as</span> ssl,</span><br><span class=\"line\"><span class=\"comment\">// TCP链接耗时</span></span><br><span class=\"line\">connectEnd - connectStart <span class=\"keyword\">as</span> tcp,</span><br><span class=\"line\"><span class=\"comment\">// ttfb 页面第一个字节的时间</span></span><br><span class=\"line\">responseStart - responseStart <span class=\"keyword\">as</span> ttfb,</span><br><span class=\"line\"><span class=\"comment\">// request耗时</span></span><br><span class=\"line\">responseEnd - responseStart <span class=\"keyword\">as</span> htmlRequest,</span><br><span class=\"line\"><span class=\"comment\">// domLoading - fetchStart as fp,</span></span><br><span class=\"line\"><span class=\"comment\">// dom树解析完成 / 白屏时间  </span></span><br><span class=\"line\">domInteractive - fetchStart <span class=\"keyword\">as</span> domIteractive,</span><br><span class=\"line\"><span class=\"comment\">// domReady / TTI 可交互时间</span></span><br><span class=\"line\">domContentLoadEventEnd - fetchStart <span class=\"keyword\">as</span> domReady,</span><br><span class=\"line\"><span class=\"comment\">// dom解析耗时</span></span><br><span class=\"line\">domComplete -  domLoading <span class=\"keyword\">as</span> domProcess,</span><br><span class=\"line\"><span class=\"comment\">// 资源加载耗时</span></span><br><span class=\"line\">domComplete - domContentLoadEventStart  <span class=\"keyword\">as</span> resourceLoad,</span><br><span class=\"line\"><span class=\"comment\">// load事件耗时</span></span><br><span class=\"line\">loadEventEnd - loadEventStart <span class=\"keyword\">as</span> loadEvent,</span><br><span class=\"line\"><span class=\"comment\">// 页面完全加载耗时</span></span><br><span class=\"line\">loadEventEnd - fetchStart <span class=\"keyword\">as</span> pageComplete</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"首屏时间\"><a href=\"#首屏时间\" class=\"headerlink\" title=\"首屏时间\"></a>首屏时间</h2><p>首屏时间是指页面第一屏所有资源完整展示的时间。这是一个对用户来说非常直接的体验指标，但是对于前端却是一个非常难以统计衡量的指标。</p>\n<p>目前统计首屏时间有如下几种方式：</p>\n<ol>\n<li>用户自定义打点（最准确方式，只有用户自己最清楚什么时候算是首屏加载完成）;</li>\n<li>lighthouse 中使用的是 chrome 渲染过程中记录的 trace event;</li>\n<li>aegis 的方法：利用 MutationObserver 接口，监听 document 对象的节点变化。</li>\n</ol>\n<p>检查这些变化的节点是否在首屏中，若这些节点在首屏中，那当前的时间点就是首屏渲染时间。如果首屏有图片，则通过遍历 performance.getEntries拿到的所有在首屏的图片实体对象，统计最慢的图片加载时间来更新首屏渲染时间；</p>\n<ol start=\"4\">\n<li>利用 MutationObserver；</li>\n</ol>\n<p>在首屏内容模块插入一个 div，利用 Mutation Observer API 监听该 div 的 dom 事件，判断该 div 的高度是否大于 0 或者大于指定值，如果大于了，就表示主要内容已经渲染出来，可计算首屏时间。</p>\n<h2 id=\"数据上报方式\"><a href=\"#数据上报方式\" class=\"headerlink\" title=\"数据上报方式\"></a>数据上报方式</h2><p>测量好数据之后，需要将数据发给服务端。考虑到页面性能统计对数据的丢失率要求不高，且数据上报应该尽量不影响主流程的逻辑和页面的性能情况下进行。</p>\n<h3 id=\"img标签上报\"><a href=\"#img标签上报\" class=\"headerlink\" title=\"img标签上报\"></a>img标签上报</h3><p>标签上报是最通用，最常用的上报方式，其中具备两个主要特点：</p>\n<ol>\n<li>没有任何兼容性；</li>\n<li>不存在跨域问题；</li>\n</ol>\n<h3 id=\"navigator-sendBeacon\"><a href=\"#navigator-sendBeacon\" class=\"headerlink\" title=\"navigator.sendBeacon\"></a>navigator.sendBeacon</h3><p>大部分现代浏览器都支持 navigator.sendBeacon方法。这个方法可以用来发送一些统计和诊断的小量数据，特别适合上报统计的场景。</p>\n<ol>\n<li>数据可靠，浏览器关闭也能发送；</li>\n<li>异步执行，不会影响下一页面加载即；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'unload'</span>, logData, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    navigator.sendBeacon(<span class=\"string\">\"/log\"</span>, analyticsData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://www.alloyteam.com/2020/01/14184/#prettyPhoto\" target=\"_blank\" rel=\"noopener\">如何进行web性能监控</a></li>\n</ol>\n"},{"title":"正则表达式必知必会","catalog":true,"date":"2019-08-30T06:11:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 规则说明\n\n- \\n 回车\n- \\t 制表符\n- \\r 换行符\n- \\s 空格\n- \\u4e00-\\u9fa5 中文\n- \\w 大小写字母\\_数字\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- {n, m} 至少出现 n 次 最多 m 次\n- {n,} 至少 n 次\n- \\. 任意次\n- \\+ 至少一次\n- {n} 至少 n 次\n- () 子表达式，分组符号\n- [\\s\\S] 任意字符\n- ^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。\n- [] 表示某个集合中的任意一个\n- [^a] 排除 a\n- ?=   向前查找\n- ?<=  向后查找\n- ?!   负向前查找\n- ?<!  负向后查找（不包含）\n\n## 常用匹配规则\n\n- 匹配中文: [\\u4e00-\\u9fa5]\n- 任意字符：.\\*（贪婪型） .\\*?（懒惰型）\n\n```javascript\n//去掉a标签\na =\n '度假：原价购页面<a href=\"jumpType:22,jumplink:273\" style=\"font-size:16px\">sss</a>'\n\n//  .*? 是一个组合 尽可能匹配少的内容 即不会贪婪匹配到</a>结束\na.replace(/<\\/?a.*?>/g, '')\n```\n\n例如：\n\n```javascript\nvar str = '2013-6-7';\n// 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-\nvar re1 = /\\d-+/g;\n// 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-\nvar re1 = /(\\d-)+/g;\n// 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-\nvar re2  = /(\\d+)(-)/g;\n\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n    //replace()中如果有子项，\n    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )\n\n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\n\n// var re = /\\bclassname\\b/;\n\n// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会\n// 把classname当做一个字符串去匹配。\n\nvar re = new RegExp('\\\\b'+classname+'\\\\b');\n\n// 匹配的时候，classname前面必须是起始或者空格，后面也是。\n\n默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。\n\n```\n\n## 回溯引用：前后一致匹配\n\n背景\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H2>\n    Information about Bluetooth, 802.11, and more.\n</Body>\n`\n\n// 注意 .*? （懒惰型） 而不是.*（贪婪型），\n// 如果是.*有可能会存在从H1一直匹配到H6的情况出现\nconst a = /<[Hh][1-6]>.*?<\\/[Hh][1-6]>/g\n```\n\n缺点\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H3>\n    Information about Bluetooth, 802.11, and more.\n</Body>\n`\n\n// 注意 .*? （懒惰型） 而不是.*（贪婪型），\n// 如果是.*有可能会存在从H1一直匹配到H6的情况出现\nconst a = /<[Hh][1-6]>.*?<\\/[Hh][1-6]>/g\n```\n\n此时使用上述匹配会匹配到不合法的字符（\\<H2>Wireless\\</H3>），在这种情况下只能求助于回溯引用。\n\n### 回溯引用\n\n指得是模式的后半部分引用在前半部分中定义的*子表达式*。\n\n回溯引用匹配通常从1开始计数（\\1、\\2等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式\n\n与字符串的replace方法的回调使用$0, $1, $2等参数类似\n\n其他一些元字符\n\n元字符|说明\n--|:--:\n\\E|结束\\L或\\U转换\n\\l|把下一个字符转换为小写\n\\L|把\\L到\\E之间的字符全部转换为小写\n\\u|把下一个字符转换为大写\n\\U|把\\U到\\E之间的字符全部转换为大写\n\n```javascript\nconst b = '313-555-123'.replace(/(\\d{3})(-)(\\d{3})-(\\d{3})/g, ($0, $1, $2, $3, $4) => `(${$1}) ${$3}-${$4}`) // (313) 555-123\n```\n\n解决\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H3>\n    Information about Bluetooth, 802.11, and more.\n    <H2>Wireless</h2>\n</Body>\n`\n\nconst a = /<([Hh][1-6])>.*?<\\/\\1>/g\n```\n\n## 前后查找\n\n### 概括\n\n从结果中排除最终不需要的辅助查找的字符\n\n### 背景\n\n比如有一些字符串\\<h1>ssss\\</h1>，我们只需要其中的ssss，不需要在返回的结果中包含\\<h1>等标签字符，一般做法是先想办法把他们检索出来，在以手动形式排除，这既浪费时间，又容易招致不必要的后患。这时候就需要一种模式，包含匹配的本身并不返回，而是用于确定正确的匹配位置，他并不是匹配结果的一部分。换句话说，我们需要进行**前后查找**。\n\n```javascript\n// 测试文本\nvar str = `\nhttp://www.forta.com/\nhttps://www.forta.com/\nftp://www.forta.com/\n`\n\n// 向前查找   匹配字符直到:停止（不包含:）\nvar a = /.+(?=:)/g   // http https ftp\n// 包含:\nvar b = /.+(:)/g     // http: https: ftp:\n\n\n// 获取物品价格\nvar str1 = `\nABCD: $23.25\nHFG1: $5.3\nXTC99: $69.1\nTotal items found: 4\n`\n\n// 结果会有多余的$\nvar a1 = /\\$\\d+\\.\\d+/g // $23.25 $5.3 $69.1\n\n// 向后查找 结果不会返回多余的$  \nvar b1 = /(?<=\\$)\\.\\d+/g // 23.25 5.3 69.1\n\n\n// 获取购买物品的数量\nvar str2 = `\nI paid $30 for 100 apples, 50 oranges, and 60 pears. I saved $5 on this order.\n`\n\nvar a2 = `/\\b(?<!\\$)\\d+/g`\n\n```\n","source":"_posts/正则表达式必知必会.md","raw":"---\ntitle: 正则表达式必知必会\ncatalog: true\ndate: 2019-08-30 14:11:43\nsubtitle:\nheader-img:\ntags: javascript\ncategories: 前端\n---\n\n## 规则说明\n\n- \\n 回车\n- \\t 制表符\n- \\r 换行符\n- \\s 空格\n- \\u4e00-\\u9fa5 中文\n- \\w 大小写字母\\_数字\n- \\b : 独立的部分 （ 起始，结束，空格 ）\n- {n, m} 至少出现 n 次 最多 m 次\n- {n,} 至少 n 次\n- \\. 任意次\n- \\+ 至少一次\n- {n} 至少 n 次\n- () 子表达式，分组符号\n- [\\s\\S] 任意字符\n- ^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。\n- [] 表示某个集合中的任意一个\n- [^a] 排除 a\n- ?=   向前查找\n- ?<=  向后查找\n- ?!   负向前查找\n- ?<!  负向后查找（不包含）\n\n## 常用匹配规则\n\n- 匹配中文: [\\u4e00-\\u9fa5]\n- 任意字符：.\\*（贪婪型） .\\*?（懒惰型）\n\n```javascript\n//去掉a标签\na =\n '度假：原价购页面<a href=\"jumpType:22,jumplink:273\" style=\"font-size:16px\">sss</a>'\n\n//  .*? 是一个组合 尽可能匹配少的内容 即不会贪婪匹配到</a>结束\na.replace(/<\\/?a.*?>/g, '')\n```\n\n例如：\n\n```javascript\nvar str = '2013-6-7';\n// 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-\nvar re1 = /\\d-+/g;\n// 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-\nvar re1 = /(\\d-)+/g;\n// 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-\nvar re2  = /(\\d+)(-)/g;\n\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n    //replace()中如果有子项，\n    //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n    // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n    //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )\n\n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\n\n// var re = /\\bclassname\\b/;\n\n// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会\n// 把classname当做一个字符串去匹配。\n\nvar re = new RegExp('\\\\b'+classname+'\\\\b');\n\n// 匹配的时候，classname前面必须是起始或者空格，后面也是。\n\n默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。\n\n```\n\n## 回溯引用：前后一致匹配\n\n背景\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H2>\n    Information about Bluetooth, 802.11, and more.\n</Body>\n`\n\n// 注意 .*? （懒惰型） 而不是.*（贪婪型），\n// 如果是.*有可能会存在从H1一直匹配到H6的情况出现\nconst a = /<[Hh][1-6]>.*?<\\/[Hh][1-6]>/g\n```\n\n缺点\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H3>\n    Information about Bluetooth, 802.11, and more.\n</Body>\n`\n\n// 注意 .*? （懒惰型） 而不是.*（贪婪型），\n// 如果是.*有可能会存在从H1一直匹配到H6的情况出现\nconst a = /<[Hh][1-6]>.*?<\\/[Hh][1-6]>/g\n```\n\n此时使用上述匹配会匹配到不合法的字符（\\<H2>Wireless\\</H3>），在这种情况下只能求助于回溯引用。\n\n### 回溯引用\n\n指得是模式的后半部分引用在前半部分中定义的*子表达式*。\n\n回溯引用匹配通常从1开始计数（\\1、\\2等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式\n\n与字符串的replace方法的回调使用$0, $1, $2等参数类似\n\n其他一些元字符\n\n元字符|说明\n--|:--:\n\\E|结束\\L或\\U转换\n\\l|把下一个字符转换为小写\n\\L|把\\L到\\E之间的字符全部转换为小写\n\\u|把下一个字符转换为大写\n\\U|把\\U到\\E之间的字符全部转换为大写\n\n```javascript\nconst b = '313-555-123'.replace(/(\\d{3})(-)(\\d{3})-(\\d{3})/g, ($0, $1, $2, $3, $4) => `(${$1}) ${$3}-${$4}`) // (313) 555-123\n```\n\n解决\n\n```javascript\n// 测试文本\nvar str1 = `\n<Body>\n    <H1>Welcome to my Homepage</H1>\n    Content is divided into two sections: <BR>\n    <H2>ColdFusion</H2>\n    Information about Macromedia ColdFusion.\n    <H2>Wireless</H3>\n    Information about Bluetooth, 802.11, and more.\n    <H2>Wireless</h2>\n</Body>\n`\n\nconst a = /<([Hh][1-6])>.*?<\\/\\1>/g\n```\n\n## 前后查找\n\n### 概括\n\n从结果中排除最终不需要的辅助查找的字符\n\n### 背景\n\n比如有一些字符串\\<h1>ssss\\</h1>，我们只需要其中的ssss，不需要在返回的结果中包含\\<h1>等标签字符，一般做法是先想办法把他们检索出来，在以手动形式排除，这既浪费时间，又容易招致不必要的后患。这时候就需要一种模式，包含匹配的本身并不返回，而是用于确定正确的匹配位置，他并不是匹配结果的一部分。换句话说，我们需要进行**前后查找**。\n\n```javascript\n// 测试文本\nvar str = `\nhttp://www.forta.com/\nhttps://www.forta.com/\nftp://www.forta.com/\n`\n\n// 向前查找   匹配字符直到:停止（不包含:）\nvar a = /.+(?=:)/g   // http https ftp\n// 包含:\nvar b = /.+(:)/g     // http: https: ftp:\n\n\n// 获取物品价格\nvar str1 = `\nABCD: $23.25\nHFG1: $5.3\nXTC99: $69.1\nTotal items found: 4\n`\n\n// 结果会有多余的$\nvar a1 = /\\$\\d+\\.\\d+/g // $23.25 $5.3 $69.1\n\n// 向后查找 结果不会返回多余的$  \nvar b1 = /(?<=\\$)\\.\\d+/g // 23.25 5.3 69.1\n\n\n// 获取购买物品的数量\nvar str2 = `\nI paid $30 for 100 apples, 50 oranges, and 60 pears. I saved $5 on this order.\n`\n\nvar a2 = `/\\b(?<!\\$)\\d+/g`\n\n```\n","slug":"正则表达式必知必会","published":1,"updated":"2024-02-20T06:48:45.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvi0043lwxaqtfesr8g","content":"<h2><span id=\"规则说明\">规则说明</span></h2><ul>\n<li>\\n 回车</li>\n<li>\\t 制表符</li>\n<li>\\r 换行符</li>\n<li>\\s 空格</li>\n<li>\\u4e00-\\u9fa5 中文</li>\n<li>\\w 大小写字母_数字</li>\n<li>\\b : 独立的部分 （ 起始，结束，空格 ）</li>\n<li>{n, m} 至少出现 n 次 最多 m 次</li>\n<li>{n,} 至少 n 次</li>\n<li>. 任意次</li>\n<li>+ 至少一次</li>\n<li>{n} 至少 n 次</li>\n<li>() 子表达式，分组符号</li>\n<li>[\\s\\S] 任意字符</li>\n<li>^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。</li>\n<li>[] 表示某个集合中的任意一个</li>\n<li>[^a] 排除 a</li>\n<li>?=   向前查找</li>\n<li>?&lt;=  向后查找</li>\n<li>?!   负向前查找</li>\n<li>?&lt;!  负向后查找（不包含）</li>\n</ul>\n<h2><span id=\"常用匹配规则\">常用匹配规则</span></h2><ul>\n<li>匹配中文: [\\u4e00-\\u9fa5]</li>\n<li>任意字符：.*（贪婪型） .*?（懒惰型）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去掉a标签</span></span><br><span class=\"line\">a =</span><br><span class=\"line\"> <span class=\"string\">'度假：原价购页面&lt;a href=\"jumpType:22,jumplink:273\" style=\"font-size:16px\"&gt;sss&lt;/a&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  .*? 是一个组合 尽可能匹配少的内容 即不会贪婪匹配到&lt;/a&gt;结束</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/&lt;\\/?a.*?&gt;/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2013-6-7'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re1 = <span class=\"regexp\">/\\d-+/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re1 = <span class=\"regexp\">/(\\d-)+/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re2  = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2013-6-7'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">0</span>,$<span class=\"number\">1</span>,$<span class=\"number\">2</span></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//replace()中如果有子项，</span></span><br><span class=\"line\">    <span class=\"comment\">//第一个参数：$0（匹配成功后的整体结果  2013-  6-）,</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span></span><br><span class=\"line\">    <span class=\"comment\">//第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span> + <span class=\"string\">'.'</span>;  <span class=\"comment\">//分别返回2013.   6.</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var re = /\\bclassname\\b/;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会</span></span><br><span class=\"line\"><span class=\"comment\">// 把classname当做一个字符串去匹配。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span>+classname+<span class=\"string\">'\\\\b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配的时候，classname前面必须是起始或者空格，后面也是。</span></span><br><span class=\"line\"></span><br><span class=\"line\">默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"回溯引用前后一致匹配\">回溯引用：前后一致匹配</span></h2><p>背景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 .*? （懒惰型） 而不是.*（贪婪型），</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是.*有可能会存在从H1一直匹配到H6的情况出现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;[Hh][1-6]&gt;.*?&lt;\\/[Hh][1-6]&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 .*? （懒惰型） 而不是.*（贪婪型），</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是.*有可能会存在从H1一直匹配到H6的情况出现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;[Hh][1-6]&gt;.*?&lt;\\/[Hh][1-6]&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<p>此时使用上述匹配会匹配到不合法的字符（&lt;H2&gt;Wireless&lt;/H3&gt;），在这种情况下只能求助于回溯引用。</p>\n<h3><span id=\"回溯引用\">回溯引用</span></h3><p>指得是模式的后半部分引用在前半部分中定义的<em>子表达式</em>。</p>\n<p>回溯引用匹配通常从1开始计数（\\1、\\2等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式</p>\n<p>与字符串的replace方法的回调使用$0, $1, $2等参数类似</p>\n<p>其他一些元字符</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\E</td>\n<td align=\"center\">结束\\L或\\U转换</td>\n</tr>\n<tr>\n<td>\\l</td>\n<td align=\"center\">把下一个字符转换为小写</td>\n</tr>\n<tr>\n<td>\\L</td>\n<td align=\"center\">把\\L到\\E之间的字符全部转换为小写</td>\n</tr>\n<tr>\n<td>\\u</td>\n<td align=\"center\">把下一个字符转换为大写</td>\n</tr>\n<tr>\n<td>\\U</td>\n<td align=\"center\">把\\U到\\E之间的字符全部转换为大写</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">'313-555-123'</span>.replace(<span class=\"regexp\">/(\\d&#123;3&#125;)(-)(\\d&#123;3&#125;)-(\\d&#123;3&#125;)/g</span>, ($<span class=\"number\">0</span>, $<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>, $<span class=\"number\">4</span>) =&gt; <span class=\"string\">`(<span class=\"subst\">$&#123;$<span class=\"number\">1</span>&#125;</span>) <span class=\"subst\">$&#123;$<span class=\"number\">3</span>&#125;</span>-<span class=\"subst\">$&#123;$<span class=\"number\">4</span>&#125;</span>`</span>) <span class=\"comment\">// (313) 555-123</span></span><br></pre></td></tr></table></figure>\n\n<p>解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;([Hh][1-6])&gt;.*?&lt;\\/\\1&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"前后查找\">前后查找</span></h2><h3><span id=\"概括\">概括</span></h3><p>从结果中排除最终不需要的辅助查找的字符</p>\n<h3><span id=\"背景\">背景</span></h3><p>比如有一些字符串&lt;h1&gt;ssss&lt;/h1&gt;，我们只需要其中的ssss，不需要在返回的结果中包含&lt;h1&gt;等标签字符，一般做法是先想办法把他们检索出来，在以手动形式排除，这既浪费时间，又容易招致不必要的后患。这时候就需要一种模式，包含匹配的本身并不返回，而是用于确定正确的匹配位置，他并不是匹配结果的一部分。换句话说，我们需要进行<strong>前后查找</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">http://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">https://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">ftp://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向前查找   匹配字符直到:停止（不包含:）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/.+(?=:)/g</span>   <span class=\"comment\">// http https ftp</span></span><br><span class=\"line\"><span class=\"comment\">// 包含:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"regexp\">/.+(:)/g</span>     <span class=\"comment\">// http: https: ftp:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取物品价格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">ABCD: $23.25</span></span><br><span class=\"line\"><span class=\"string\">HFG1: $5.3</span></span><br><span class=\"line\"><span class=\"string\">XTC99: $69.1</span></span><br><span class=\"line\"><span class=\"string\">Total items found: 4</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果会有多余的$</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"regexp\">/\\$\\d+\\.\\d+/g</span> <span class=\"comment\">// $23.25 $5.3 $69.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向后查找 结果不会返回多余的$  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"regexp\">/(?&lt;=\\$)\\.\\d+/g</span> <span class=\"comment\">// 23.25 5.3 69.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取购买物品的数量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">I paid $30 for 100 apples, 50 oranges, and 60 pears. I saved $5 on this order.</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"string\">`/\\b(?&lt;!\\$)\\d+/g`</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":3380,"excerpt":"","more":"<h2 id=\"规则说明\"><a href=\"#规则说明\" class=\"headerlink\" title=\"规则说明\"></a>规则说明</h2><ul>\n<li>\\n 回车</li>\n<li>\\t 制表符</li>\n<li>\\r 换行符</li>\n<li>\\s 空格</li>\n<li>\\u4e00-\\u9fa5 中文</li>\n<li>\\w 大小写字母_数字</li>\n<li>\\b : 独立的部分 （ 起始，结束，空格 ）</li>\n<li>{n, m} 至少出现 n 次 最多 m 次</li>\n<li>{n,} 至少 n 次</li>\n<li>. 任意次</li>\n<li>+ 至少一次</li>\n<li>{n} 至少 n 次</li>\n<li>() 子表达式，分组符号</li>\n<li>[\\s\\S] 任意字符</li>\n<li>^ 放在正则的最开始位置，就代表起始的意思，注意 /[^a] / 和 /^[a]/是不一样的，前者是排除的意思，后者是代表首位。</li>\n<li>[] 表示某个集合中的任意一个</li>\n<li>[^a] 排除 a</li>\n<li>?=   向前查找</li>\n<li>?&lt;=  向后查找</li>\n<li>?!   负向前查找</li>\n<li>?&lt;!  负向后查找（不包含）</li>\n</ul>\n<h2 id=\"常用匹配规则\"><a href=\"#常用匹配规则\" class=\"headerlink\" title=\"常用匹配规则\"></a>常用匹配规则</h2><ul>\n<li>匹配中文: [\\u4e00-\\u9fa5]</li>\n<li>任意字符：.*（贪婪型） .*?（懒惰型）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//去掉a标签</span></span><br><span class=\"line\">a =</span><br><span class=\"line\"> <span class=\"string\">'度假：原价购页面&lt;a href=\"jumpType:22,jumplink:273\" style=\"font-size:16px\"&gt;sss&lt;/a&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  .*? 是一个组合 尽可能匹配少的内容 即不会贪婪匹配到&lt;/a&gt;结束</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/&lt;\\/?a.*?&gt;/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2013-6-7'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配数字，横杠，横杠数量至少为1，匹配结果为：  3- 6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re1 = <span class=\"regexp\">/\\d-+/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配数字，横杠，数字和横杠整体数量至少为1   3-6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re1 = <span class=\"regexp\">/(\\d-)+/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 全局匹配至少一个数字，匹配一个横杠 匹配结果：2013- 6-</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re2  = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'2013-6-7'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$<span class=\"number\">0</span>,$<span class=\"number\">1</span>,$<span class=\"number\">2</span></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//replace()中如果有子项，</span></span><br><span class=\"line\">    <span class=\"comment\">//第一个参数：$0（匹配成功后的整体结果  2013-  6-）,</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)</span></span><br><span class=\"line\">    <span class=\"comment\">//第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $<span class=\"number\">1</span> + <span class=\"string\">'.'</span>;  <span class=\"comment\">//分别返回2013.   6.</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var re = /\\bclassname\\b/;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能这样写，当正则需要用到参数时候，一定要用全称的写法，简写方式会</span></span><br><span class=\"line\"><span class=\"comment\">// 把classname当做一个字符串去匹配。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span>+classname+<span class=\"string\">'\\\\b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配的时候，classname前面必须是起始或者空格，后面也是。</span></span><br><span class=\"line\"></span><br><span class=\"line\">默认匹配成功就停止，所以就算有重复的也不会再匹配进去了。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回溯引用：前后一致匹配\"><a href=\"#回溯引用：前后一致匹配\" class=\"headerlink\" title=\"回溯引用：前后一致匹配\"></a>回溯引用：前后一致匹配</h2><p>背景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 .*? （懒惰型） 而不是.*（贪婪型），</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是.*有可能会存在从H1一直匹配到H6的情况出现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;[Hh][1-6]&gt;.*?&lt;\\/[Hh][1-6]&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 .*? （懒惰型） 而不是.*（贪婪型），</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是.*有可能会存在从H1一直匹配到H6的情况出现</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;[Hh][1-6]&gt;.*?&lt;\\/[Hh][1-6]&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<p>此时使用上述匹配会匹配到不合法的字符（&lt;H2&gt;Wireless&lt;/H3&gt;），在这种情况下只能求助于回溯引用。</p>\n<h3 id=\"回溯引用\"><a href=\"#回溯引用\" class=\"headerlink\" title=\"回溯引用\"></a>回溯引用</h3><p>指得是模式的后半部分引用在前半部分中定义的<em>子表达式</em>。</p>\n<p>回溯引用匹配通常从1开始计数（\\1、\\2等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式</p>\n<p>与字符串的replace方法的回调使用$0, $1, $2等参数类似</p>\n<p>其他一些元字符</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\E</td>\n<td align=\"center\">结束\\L或\\U转换</td>\n</tr>\n<tr>\n<td>\\l</td>\n<td align=\"center\">把下一个字符转换为小写</td>\n</tr>\n<tr>\n<td>\\L</td>\n<td align=\"center\">把\\L到\\E之间的字符全部转换为小写</td>\n</tr>\n<tr>\n<td>\\u</td>\n<td align=\"center\">把下一个字符转换为大写</td>\n</tr>\n<tr>\n<td>\\U</td>\n<td align=\"center\">把\\U到\\E之间的字符全部转换为大写</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">'313-555-123'</span>.replace(<span class=\"regexp\">/(\\d&#123;3&#125;)(-)(\\d&#123;3&#125;)-(\\d&#123;3&#125;)/g</span>, ($<span class=\"number\">0</span>, $<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>, $<span class=\"number\">4</span>) =&gt; <span class=\"string\">`(<span class=\"subst\">$&#123;$<span class=\"number\">1</span>&#125;</span>) <span class=\"subst\">$&#123;$<span class=\"number\">3</span>&#125;</span>-<span class=\"subst\">$&#123;$<span class=\"number\">4</span>&#125;</span>`</span>) <span class=\"comment\">// (313) 555-123</span></span><br></pre></td></tr></table></figure>\n\n<p>解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H1&gt;Welcome to my Homepage&lt;/H1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Content is divided into two sections: &lt;BR&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;ColdFusion&lt;/H2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Macromedia ColdFusion.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/H3&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Information about Bluetooth, 802.11, and more.</span></span><br><span class=\"line\"><span class=\"string\">    &lt;H2&gt;Wireless&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/Body&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"regexp\">/&lt;([Hh][1-6])&gt;.*?&lt;\\/\\1&gt;/g</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前后查找\"><a href=\"#前后查找\" class=\"headerlink\" title=\"前后查找\"></a>前后查找</h2><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><p>从结果中排除最终不需要的辅助查找的字符</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>比如有一些字符串&lt;h1&gt;ssss&lt;/h1&gt;，我们只需要其中的ssss，不需要在返回的结果中包含&lt;h1&gt;等标签字符，一般做法是先想办法把他们检索出来，在以手动形式排除，这既浪费时间，又容易招致不必要的后患。这时候就需要一种模式，包含匹配的本身并不返回，而是用于确定正确的匹配位置，他并不是匹配结果的一部分。换句话说，我们需要进行<strong>前后查找</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">http://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">https://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">ftp://www.forta.com/</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向前查找   匹配字符直到:停止（不包含:）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/.+(?=:)/g</span>   <span class=\"comment\">// http https ftp</span></span><br><span class=\"line\"><span class=\"comment\">// 包含:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"regexp\">/.+(:)/g</span>     <span class=\"comment\">// http: https: ftp:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取物品价格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">ABCD: $23.25</span></span><br><span class=\"line\"><span class=\"string\">HFG1: $5.3</span></span><br><span class=\"line\"><span class=\"string\">XTC99: $69.1</span></span><br><span class=\"line\"><span class=\"string\">Total items found: 4</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果会有多余的$</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"regexp\">/\\$\\d+\\.\\d+/g</span> <span class=\"comment\">// $23.25 $5.3 $69.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向后查找 结果不会返回多余的$  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"regexp\">/(?&lt;=\\$)\\.\\d+/g</span> <span class=\"comment\">// 23.25 5.3 69.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取购买物品的数量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">I paid $30 for 100 apples, 50 oranges, and 60 pears. I saved $5 on this order.</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"string\">`/\\b(?&lt;!\\$)\\d+/g`</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"序","catalog":true,"date":"2019-06-15T06:00:06.000Z","subtitle":null,"header-img":null,"_content":"\nhello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。\n\n搭建这个博客的原因，主要受限于以下几点：\n\n1. 平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；\n2. 知识点需要查阅，温故知新，查漏补缺；\n3. 分享自己遇到的一些知识和经验给其他人去参考和借鉴；\n4. 锻炼书写表达能力；\n5. 希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；\n\n如果有任何疑问或者问题咨询，欢迎留言向我咨询；\n\n谢谢。\n","source":"_posts/序.md","raw":"---\ntitle: 序\ncatalog: true\ndate: 2019-06-15 14:00:06\nsubtitle:\nheader-img:\ntags: 随笔\n---\n\nhello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。\n\n搭建这个博客的原因，主要受限于以下几点：\n\n1. 平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；\n2. 知识点需要查阅，温故知新，查漏补缺；\n3. 分享自己遇到的一些知识和经验给其他人去参考和借鉴；\n4. 锻炼书写表达能力；\n5. 希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；\n\n如果有任何疑问或者问题咨询，欢迎留言向我咨询；\n\n谢谢。\n","slug":"序","published":1,"updated":"2024-02-20T06:48:45.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvk0046lwxa1qmsy838","content":"<p>hello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。</p>\n<p>搭建这个博客的原因，主要受限于以下几点：</p>\n<ol>\n<li>平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；</li>\n<li>知识点需要查阅，温故知新，查漏补缺；</li>\n<li>分享自己遇到的一些知识和经验给其他人去参考和借鉴；</li>\n<li>锻炼书写表达能力；</li>\n<li>希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；</li>\n</ol>\n<p>如果有任何疑问或者问题咨询，欢迎留言向我咨询；</p>\n<p>谢谢。</p>\n","site":{"data":{}},"length":268,"excerpt":"","more":"<p>hello，大家好，我是黄晨，来自江苏泰州，前端开发一枚。</p>\n<p>搭建这个博客的原因，主要受限于以下几点：</p>\n<ol>\n<li>平时学习、积累的知识需要有一个平台去记录，之前也使用了比如掘金、简书、博客园、github这些网站去在线记录，一开始还能满足自己的需求，后来慢慢觉得还是需要有一个自己的博客，提供一种更自由、个性化的编写体验以及阅读体验；</li>\n<li>知识点需要查阅，温故知新，查漏补缺；</li>\n<li>分享自己遇到的一些知识和经验给其他人去参考和借鉴；</li>\n<li>锻炼书写表达能力；</li>\n<li>希望五年、十年以后回头再查阅自己博客的时候会有另一番风味体验；</li>\n</ol>\n<p>如果有任何疑问或者问题咨询，欢迎留言向我咨询；</p>\n<p>谢谢。</p>\n"},{"title":"记录一次node爬虫开发","catalog":true,"date":"2019-05-07T14:42:51.000Z","subtitle":null,"header-img":null,"_content":"\n在做一个爬虫开发需求的使用，由于目标网站是动态的，无法直接处理静态资源，这时候想到使用`google`推出的`node`无头浏览器`puppeteer`，借此尝试一下。\n\n因为我当时开发的时候，在`mac`上开发，开发完毕之后需要部署到远程`centos7`的远程服务器上，部署的时候就有个小问题，如何判断系统环境是 mac、window 还是 linux，来决定导出的文件存放的目录。\n\n```javascript\nconst os = require('os')\n//Linux系统上'Linux'\n//macOS 系统上'Darwin'\n//Windows系统上'Windows_NT'\nlet sysType = os.type()\nif (sysType === 'Windows_NT') {\n console.log(\"It's windows\")\n}\n```\n\n一切开发顺利，在`centos7`上部署的时候，遇到`pupeteer`几个问题：\n\n- 无法下载（需要翻墙）\n- 无法启动（具体解决见参考链接）\n\n参考链接：\n\n1. [centos 安装 puppeteer 启动失败解决处理](<[https://segmentfault.com/a/1190000011382062](https://segmentfault.com/a/1190000011382062)>)\n","source":"_posts/记录一次node爬虫开发.md","raw":"---\ntitle: 记录一次node爬虫开发\ncatalog: true\ndate: 2019-05-07 22:42:51\nsubtitle:\nheader-img:\ntags: crawler\ncategories: 前端\n---\n\n在做一个爬虫开发需求的使用，由于目标网站是动态的，无法直接处理静态资源，这时候想到使用`google`推出的`node`无头浏览器`puppeteer`，借此尝试一下。\n\n因为我当时开发的时候，在`mac`上开发，开发完毕之后需要部署到远程`centos7`的远程服务器上，部署的时候就有个小问题，如何判断系统环境是 mac、window 还是 linux，来决定导出的文件存放的目录。\n\n```javascript\nconst os = require('os')\n//Linux系统上'Linux'\n//macOS 系统上'Darwin'\n//Windows系统上'Windows_NT'\nlet sysType = os.type()\nif (sysType === 'Windows_NT') {\n console.log(\"It's windows\")\n}\n```\n\n一切开发顺利，在`centos7`上部署的时候，遇到`pupeteer`几个问题：\n\n- 无法下载（需要翻墙）\n- 无法启动（具体解决见参考链接）\n\n参考链接：\n\n1. [centos 安装 puppeteer 启动失败解决处理](<[https://segmentfault.com/a/1190000011382062](https://segmentfault.com/a/1190000011382062)>)\n","slug":"记录一次node爬虫开发","published":1,"updated":"2024-02-20T06:48:45.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvm004alwxag72u5azb","content":"<p>在做一个爬虫开发需求的使用，由于目标网站是动态的，无法直接处理静态资源，这时候想到使用<code>google</code>推出的<code>node</code>无头浏览器<code>puppeteer</code>，借此尝试一下。</p>\n<p>因为我当时开发的时候，在<code>mac</code>上开发，开发完毕之后需要部署到远程<code>centos7</code>的远程服务器上，部署的时候就有个小问题，如何判断系统环境是 mac、window 还是 linux，来决定导出的文件存放的目录。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>)</span><br><span class=\"line\"><span class=\"comment\">//Linux系统上'Linux'</span></span><br><span class=\"line\"><span class=\"comment\">//macOS 系统上'Darwin'</span></span><br><span class=\"line\"><span class=\"comment\">//Windows系统上'Windows_NT'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sysType = os.type()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (sysType === <span class=\"string\">'Windows_NT'</span>) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"It's windows\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一切开发顺利，在<code>centos7</code>上部署的时候，遇到<code>pupeteer</code>几个问题：</p>\n<ul>\n<li>无法下载（需要翻墙）</li>\n<li>无法启动（具体解决见参考链接）</li>\n</ul>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"%5Bhttps://segmentfault.com/a/1190000011382062%5D(https://segmentfault.com/a/1190000011382062)\">centos 安装 puppeteer 启动失败解决处理</a></li>\n</ol>\n","site":{"data":{}},"length":442,"excerpt":"","more":"<p>在做一个爬虫开发需求的使用，由于目标网站是动态的，无法直接处理静态资源，这时候想到使用<code>google</code>推出的<code>node</code>无头浏览器<code>puppeteer</code>，借此尝试一下。</p>\n<p>因为我当时开发的时候，在<code>mac</code>上开发，开发完毕之后需要部署到远程<code>centos7</code>的远程服务器上，部署的时候就有个小问题，如何判断系统环境是 mac、window 还是 linux，来决定导出的文件存放的目录。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>)</span><br><span class=\"line\"><span class=\"comment\">//Linux系统上'Linux'</span></span><br><span class=\"line\"><span class=\"comment\">//macOS 系统上'Darwin'</span></span><br><span class=\"line\"><span class=\"comment\">//Windows系统上'Windows_NT'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sysType = os.type()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (sysType === <span class=\"string\">'Windows_NT'</span>) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"It's windows\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一切开发顺利，在<code>centos7</code>上部署的时候，遇到<code>pupeteer</code>几个问题：</p>\n<ul>\n<li>无法下载（需要翻墙）</li>\n<li>无法启动（具体解决见参考链接）</li>\n</ul>\n<p>参考链接：</p>\n<ol>\n<li><a href=\"%5Bhttps://segmentfault.com/a/1190000011382062%5D(https://segmentfault.com/a/1190000011382062)\">centos 安装 puppeteer 启动失败解决处理</a></li>\n</ol>\n"},{"title":"浅析node进程与线程","catalog":true,"date":"2020-03-13T10:37:20.000Z","subtitle":null,"header-img":null,"_content":"\n\n## 概念\n\n进程：是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。\n\n线程：是程序执行中一个单一的顺序控制流，它存在于进程之中，是比进程更小的能独立运行的基本单位。\n\n个人不成熟的通俗理解为：\n\n进程好比一个货物工厂的传送带，每个传送带是相互独立，执行各自任务，其中线程就是传送带上的机械手臂，控制货物在传送带上的具体摆放。\n\n## 单线程\n\n常说的 node 是单线程，往往说的只是 node 只有一个 js 执行主线程，实际 node 有其他多个线程组成；\n\n示例\n\n```javascript\nrequire(\"http\")\n  .createServer((req, res) => {\n    res.writeHead(200);\n    res.end(\"Hello World\");\n  })\n  .listen(8000);\nconsole.log(\"process id\", process.pid);\n```\n\n此时 8000 端口的服务 pid 为 35919，在 linux 下通过`top -pid 35919`查看详细信息如下：\n\n```javacript\nPID    COMMAND      %CPU TIME     #TH  #WQ  #POR MEM    PURG CMPRS  PGRP  PPID  STATE    BOOSTS     %CPU_ME\n35919  node         0.0  00:00.09 7    0    35   8564K  0B   8548K  35919 35622 sleeping *0[1]      0.00000\n```\n\n其中 TH 是进程信息，表明当前进程有 7 个线程。\n\n事实上一个 Node 进程通常包含：\n\n- 1 个 Javascript 执行主线程；\n- 1 个 watchdog 监控线程用于处理调试信息；\n- 1 个 v8 task scheduler 线程用于调度任务优先级，加速延迟敏感任务执行；\n- 4 个 v8 线程，主要用来执行代码调优与 GC 等后台任务以及用于异步 I / O 的 libuv 线程池。\n\n```c++\n// v8 初始化线程\nconst int thread_pool_size = 4; // 默认 4 个线程\ndefault_platform = v8::platform::CreateDefaultPlatform(thread_pool_size);\nV8::InitializePlatform(default_platform);\nV8::Initialize();\n```\n\n其中异步 I/O 线程池，如果执行程序中不包含 I/O 操作如文件读写等，则默认线程池大小为 0，否则 Node 会初始化大小为 4 的异步 I/O 线程池，当然我们也可以通过 process.env.UV_THREADPOOL_SIZE 自己设定线程池大小。需要注意的是在 Node 中网络 I/O 并不占用线程池。\n\n![Node进程结构图](https://user-gold-cdn.xitu.io/2019/12/28/16f4bf755017c54b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 事件循环\n\nNode 高并发是通过 libuv 实现的一个异步，非阻塞 I/O 的事件循环机制，参考浏览器事件循环，可保证程序时时刻刻都能保证响应\n\n![Node事件环](https://user-gold-cdn.xitu.io/2019/12/28/16f4bf749b92cfe4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 子进程\n\nNode 在处理 I/O 密集场景下的高并发，但在遇到 CPU 密集场景下，主线程被长时间阻塞导致无法处理额外请求。\n\n为了处理这样场景以及发挥多核 CPU 性能，官方提供了`child_process`模块。\n\n- 通信\n\n在 Linux 中，子进程之间可以通过管道、消息队列、信号量、共享内存、socket 等手段实现进程通信。\n\nNode 中使用 IPC 信道收发消息，IPC 由 libuv 通过 pipe 实现。\n\n父子进程通过`process.send`和`on('message')`这样发布订阅模式形式实现通信。\n\n```javascript\n// fork模式用来创建父子通信模式\nconst { fork } = require(\"child_process\");\nconst child = fork(\"./a.js\");\nchild.start();\n\nchild.on(\"message\", () => {});\n\nchild.on(\"exit\", () => {});\n```\n\n## cluster\n\n为了更好管理进程、负载均衡以及端口复用，官方引入了`cluster`模块，遵循主从节点模式。\n\n## 工作线程\n\nNode10 以后，由于进程创建、销毁、切换时系统开销较大，为了减小 CPU 密集型任务计算的系统开销，官方提供了`worker_threads`模块。\n\n使用 parentPort （继承于 EventEmitter）进行父子线程通信\n\n参考资料：\n\n- [政采云前端-浅析 Node 进程与线程](https://juejin.im/post/5e0728ce518825122b0f99f2)\n","source":"_posts/浅析node进程与线程.md","raw":"---\ntitle: 浅析node进程与线程\ncatalog: true\ndate: 2020-03-13 18:37:20\nsubtitle:\nheader-img:\ntags: node\ncategories: 前端\n---\n\n\n## 概念\n\n进程：是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。\n\n线程：是程序执行中一个单一的顺序控制流，它存在于进程之中，是比进程更小的能独立运行的基本单位。\n\n个人不成熟的通俗理解为：\n\n进程好比一个货物工厂的传送带，每个传送带是相互独立，执行各自任务，其中线程就是传送带上的机械手臂，控制货物在传送带上的具体摆放。\n\n## 单线程\n\n常说的 node 是单线程，往往说的只是 node 只有一个 js 执行主线程，实际 node 有其他多个线程组成；\n\n示例\n\n```javascript\nrequire(\"http\")\n  .createServer((req, res) => {\n    res.writeHead(200);\n    res.end(\"Hello World\");\n  })\n  .listen(8000);\nconsole.log(\"process id\", process.pid);\n```\n\n此时 8000 端口的服务 pid 为 35919，在 linux 下通过`top -pid 35919`查看详细信息如下：\n\n```javacript\nPID    COMMAND      %CPU TIME     #TH  #WQ  #POR MEM    PURG CMPRS  PGRP  PPID  STATE    BOOSTS     %CPU_ME\n35919  node         0.0  00:00.09 7    0    35   8564K  0B   8548K  35919 35622 sleeping *0[1]      0.00000\n```\n\n其中 TH 是进程信息，表明当前进程有 7 个线程。\n\n事实上一个 Node 进程通常包含：\n\n- 1 个 Javascript 执行主线程；\n- 1 个 watchdog 监控线程用于处理调试信息；\n- 1 个 v8 task scheduler 线程用于调度任务优先级，加速延迟敏感任务执行；\n- 4 个 v8 线程，主要用来执行代码调优与 GC 等后台任务以及用于异步 I / O 的 libuv 线程池。\n\n```c++\n// v8 初始化线程\nconst int thread_pool_size = 4; // 默认 4 个线程\ndefault_platform = v8::platform::CreateDefaultPlatform(thread_pool_size);\nV8::InitializePlatform(default_platform);\nV8::Initialize();\n```\n\n其中异步 I/O 线程池，如果执行程序中不包含 I/O 操作如文件读写等，则默认线程池大小为 0，否则 Node 会初始化大小为 4 的异步 I/O 线程池，当然我们也可以通过 process.env.UV_THREADPOOL_SIZE 自己设定线程池大小。需要注意的是在 Node 中网络 I/O 并不占用线程池。\n\n![Node进程结构图](https://user-gold-cdn.xitu.io/2019/12/28/16f4bf755017c54b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 事件循环\n\nNode 高并发是通过 libuv 实现的一个异步，非阻塞 I/O 的事件循环机制，参考浏览器事件循环，可保证程序时时刻刻都能保证响应\n\n![Node事件环](https://user-gold-cdn.xitu.io/2019/12/28/16f4bf749b92cfe4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 子进程\n\nNode 在处理 I/O 密集场景下的高并发，但在遇到 CPU 密集场景下，主线程被长时间阻塞导致无法处理额外请求。\n\n为了处理这样场景以及发挥多核 CPU 性能，官方提供了`child_process`模块。\n\n- 通信\n\n在 Linux 中，子进程之间可以通过管道、消息队列、信号量、共享内存、socket 等手段实现进程通信。\n\nNode 中使用 IPC 信道收发消息，IPC 由 libuv 通过 pipe 实现。\n\n父子进程通过`process.send`和`on('message')`这样发布订阅模式形式实现通信。\n\n```javascript\n// fork模式用来创建父子通信模式\nconst { fork } = require(\"child_process\");\nconst child = fork(\"./a.js\");\nchild.start();\n\nchild.on(\"message\", () => {});\n\nchild.on(\"exit\", () => {});\n```\n\n## cluster\n\n为了更好管理进程、负载均衡以及端口复用，官方引入了`cluster`模块，遵循主从节点模式。\n\n## 工作线程\n\nNode10 以后，由于进程创建、销毁、切换时系统开销较大，为了减小 CPU 密集型任务计算的系统开销，官方提供了`worker_threads`模块。\n\n使用 parentPort （继承于 EventEmitter）进行父子线程通信\n\n参考资料：\n\n- [政采云前端-浅析 Node 进程与线程](https://juejin.im/post/5e0728ce518825122b0f99f2)\n","slug":"浅析node进程与线程","published":1,"updated":"2024-02-21T02:50:38.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvn004dlwxa6047uaw8","content":"<h2><span id=\"概念\">概念</span></h2><p>进程：是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p>\n<p>线程：是程序执行中一个单一的顺序控制流，它存在于进程之中，是比进程更小的能独立运行的基本单位。</p>\n<p>个人不成熟的通俗理解为：</p>\n<p>进程好比一个货物工厂的传送带，每个传送带是相互独立，执行各自任务，其中线程就是传送带上的机械手臂，控制货物在传送带上的具体摆放。</p>\n<h2><span id=\"单线程\">单线程</span></h2><p>常说的 node 是单线程，往往说的只是 node 只有一个 js 执行主线程，实际 node 有其他多个线程组成；</p>\n<p>示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.end(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">8000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"process id\"</span>, process.pid);</span><br></pre></td></tr></table></figure>\n\n<p>此时 8000 端口的服务 pid 为 35919，在 linux 下通过<code>top -pid 35919</code>查看详细信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID    COMMAND      %CPU TIME     #TH  #WQ  #POR MEM    PURG CMPRS  PGRP  PPID  STATE    BOOSTS     %CPU_ME</span><br><span class=\"line\">35919  node         0.0  00:00.09 7    0    35   8564K  0B   8548K  35919 35622 sleeping *0[1]      0.00000</span><br></pre></td></tr></table></figure>\n\n<p>其中 TH 是进程信息，表明当前进程有 7 个线程。</p>\n<p>事实上一个 Node 进程通常包含：</p>\n<ul>\n<li>1 个 Javascript 执行主线程；</li>\n<li>1 个 watchdog 监控线程用于处理调试信息；</li>\n<li>1 个 v8 task scheduler 线程用于调度任务优先级，加速延迟敏感任务执行；</li>\n<li>4 个 v8 线程，主要用来执行代码调优与 GC 等后台任务以及用于异步 I / O 的 libuv 线程池。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v8 初始化线程</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> thread_pool_size = <span class=\"number\">4</span>; <span class=\"comment\">// 默认 4 个线程</span></span><br><span class=\"line\">default_platform = v8::platform::CreateDefaultPlatform(thread_pool_size);</span><br><span class=\"line\">V8::InitializePlatform(default_platform);</span><br><span class=\"line\">V8::Initialize();</span><br></pre></td></tr></table></figure>\n\n<p>其中异步 I/O 线程池，如果执行程序中不包含 I/O 操作如文件读写等，则默认线程池大小为 0，否则 Node 会初始化大小为 4 的异步 I/O 线程池，当然我们也可以通过 process.env.UV_THREADPOOL_SIZE 自己设定线程池大小。需要注意的是在 Node 中网络 I/O 并不占用线程池。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/28/16f4bf755017c54b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node进程结构图\"></p>\n<h2><span id=\"事件循环\">事件循环</span></h2><p>Node 高并发是通过 libuv 实现的一个异步，非阻塞 I/O 的事件循环机制，参考浏览器事件循环，可保证程序时时刻刻都能保证响应</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/28/16f4bf749b92cfe4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node事件环\"></p>\n<h2><span id=\"子进程\">子进程</span></h2><p>Node 在处理 I/O 密集场景下的高并发，但在遇到 CPU 密集场景下，主线程被长时间阻塞导致无法处理额外请求。</p>\n<p>为了处理这样场景以及发挥多核 CPU 性能，官方提供了<code>child_process</code>模块。</p>\n<ul>\n<li>通信</li>\n</ul>\n<p>在 Linux 中，子进程之间可以通过管道、消息队列、信号量、共享内存、socket 等手段实现进程通信。</p>\n<p>Node 中使用 IPC 信道收发消息，IPC 由 libuv 通过 pipe 实现。</p>\n<p>父子进程通过<code>process.send</code>和<code>on(&#39;message&#39;)</code>这样发布订阅模式形式实现通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fork模式用来创建父子通信模式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = fork(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\">child.start();</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"message\"</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"exit\"</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"cluster\">cluster</span></h2><p>为了更好管理进程、负载均衡以及端口复用，官方引入了<code>cluster</code>模块，遵循主从节点模式。</p>\n<h2><span id=\"工作线程\">工作线程</span></h2><p>Node10 以后，由于进程创建、销毁、切换时系统开销较大，为了减小 CPU 密集型任务计算的系统开销，官方提供了<code>worker_threads</code>模块。</p>\n<p>使用 parentPort （继承于 EventEmitter）进行父子线程通信</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5e0728ce518825122b0f99f2\" target=\"_blank\" rel=\"noopener\">政采云前端-浅析 Node 进程与线程</a></li>\n</ul>\n","site":{"data":{}},"length":1751,"excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>进程：是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p>\n<p>线程：是程序执行中一个单一的顺序控制流，它存在于进程之中，是比进程更小的能独立运行的基本单位。</p>\n<p>个人不成熟的通俗理解为：</p>\n<p>进程好比一个货物工厂的传送带，每个传送带是相互独立，执行各自任务，其中线程就是传送带上的机械手臂，控制货物在传送带上的具体摆放。</p>\n<h2 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h2><p>常说的 node 是单线程，往往说的只是 node 只有一个 js 执行主线程，实际 node 有其他多个线程组成；</p>\n<p>示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\">  .createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.end(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">8000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"process id\"</span>, process.pid);</span><br></pre></td></tr></table></figure>\n\n<p>此时 8000 端口的服务 pid 为 35919，在 linux 下通过<code>top -pid 35919</code>查看详细信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID    COMMAND      %CPU TIME     #TH  #WQ  #POR MEM    PURG CMPRS  PGRP  PPID  STATE    BOOSTS     %CPU_ME</span><br><span class=\"line\">35919  node         0.0  00:00.09 7    0    35   8564K  0B   8548K  35919 35622 sleeping *0[1]      0.00000</span><br></pre></td></tr></table></figure>\n\n<p>其中 TH 是进程信息，表明当前进程有 7 个线程。</p>\n<p>事实上一个 Node 进程通常包含：</p>\n<ul>\n<li>1 个 Javascript 执行主线程；</li>\n<li>1 个 watchdog 监控线程用于处理调试信息；</li>\n<li>1 个 v8 task scheduler 线程用于调度任务优先级，加速延迟敏感任务执行；</li>\n<li>4 个 v8 线程，主要用来执行代码调优与 GC 等后台任务以及用于异步 I / O 的 libuv 线程池。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// v8 初始化线程</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> thread_pool_size = <span class=\"number\">4</span>; <span class=\"comment\">// 默认 4 个线程</span></span><br><span class=\"line\">default_platform = v8::platform::CreateDefaultPlatform(thread_pool_size);</span><br><span class=\"line\">V8::InitializePlatform(default_platform);</span><br><span class=\"line\">V8::Initialize();</span><br></pre></td></tr></table></figure>\n\n<p>其中异步 I/O 线程池，如果执行程序中不包含 I/O 操作如文件读写等，则默认线程池大小为 0，否则 Node 会初始化大小为 4 的异步 I/O 线程池，当然我们也可以通过 process.env.UV_THREADPOOL_SIZE 自己设定线程池大小。需要注意的是在 Node 中网络 I/O 并不占用线程池。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/28/16f4bf755017c54b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node进程结构图\"></p>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p>Node 高并发是通过 libuv 实现的一个异步，非阻塞 I/O 的事件循环机制，参考浏览器事件循环，可保证程序时时刻刻都能保证响应</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/28/16f4bf749b92cfe4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"Node事件环\"></p>\n<h2 id=\"子进程\"><a href=\"#子进程\" class=\"headerlink\" title=\"子进程\"></a>子进程</h2><p>Node 在处理 I/O 密集场景下的高并发，但在遇到 CPU 密集场景下，主线程被长时间阻塞导致无法处理额外请求。</p>\n<p>为了处理这样场景以及发挥多核 CPU 性能，官方提供了<code>child_process</code>模块。</p>\n<ul>\n<li>通信</li>\n</ul>\n<p>在 Linux 中，子进程之间可以通过管道、消息队列、信号量、共享内存、socket 等手段实现进程通信。</p>\n<p>Node 中使用 IPC 信道收发消息，IPC 由 libuv 通过 pipe 实现。</p>\n<p>父子进程通过<code>process.send</code>和<code>on(&#39;message&#39;)</code>这样发布订阅模式形式实现通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fork模式用来创建父子通信模式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = fork(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\">child.start();</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"message\"</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">child.on(<span class=\"string\">\"exit\"</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cluster\"><a href=\"#cluster\" class=\"headerlink\" title=\"cluster\"></a>cluster</h2><p>为了更好管理进程、负载均衡以及端口复用，官方引入了<code>cluster</code>模块，遵循主从节点模式。</p>\n<h2 id=\"工作线程\"><a href=\"#工作线程\" class=\"headerlink\" title=\"工作线程\"></a>工作线程</h2><p>Node10 以后，由于进程创建、销毁、切换时系统开销较大，为了减小 CPU 密集型任务计算的系统开销，官方提供了<code>worker_threads</code>模块。</p>\n<p>使用 parentPort （继承于 EventEmitter）进行父子线程通信</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5e0728ce518825122b0f99f2\" target=\"_blank\" rel=\"noopener\">政采云前端-浅析 Node 进程与线程</a></li>\n</ul>\n"},{"title":"记录typescript使用的几个注意点","catalog":true,"date":"2019-07-22T05:38:34.000Z","subtitle":null,"header-img":null,"_content":"\n近期在做前端团队公共模块和方法的私有 npm 包的时候，采用`typescript`保证包的代码质量，在使用`ts`的过程遇到一些小问题，特此记录下遇到的一些小问题。\n\n1. 不想一个个导入类型文件，希望有全局引用类型文件\n\n一开始在给每个文件定义类型的时候，都会将文件类型放在`types`文件夹下，通过`es6`模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：\n\n```javascript\n// types/test.d.ts\nexport declare const test = '123'\n\n// src/test.ts\nimport { test } from '../types/test'\n\n```\n\n这样的话默认也是把`.d.ts`文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？\n\n答案是有的：利用全局的`namespace`和`tsconfig.json`配置\n\n以下是`tsconfig.json`一些配置项：\n\n```javascript\n{\n    \"compilerOptions\": {\n      \"target\": \"es5\",\n      \"module\": \"commonjs\",\n      \"outDir\": \"./dist/lib\",\n      \"declaration\": true,  // 开启打包之后会输出.d.ts文件\n      \"declarationDir\": \"./dist/types\",  // 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径\n      \"strict\": true,\n      \"jsx\": \"preserve\",\n      \"importHelpers\": true,\n      \"removeComments\": true,\n      \"moduleResolution\": \"node\",\n      \"experimentalDecorators\": true,\n      \"allowJs\": false,\n      \"esModuleInterop\": true,\n      \"allowSyntheticDefaultImports\": true,\n      \"sourceMap\": false,\n      \"baseUrl\": \".\",\n      \"types\": [\n        \"node\",\n        \"./types\"  // 本地types所在目录，必须在此引入\n      ],\n      \"lib\": [\n        \"esnext\",\n        \"dom\",\n        \"dom.iterable\",\n        \"scripthost\"\n      ]\n    },\n    \"include\": [\n      \"src/**/*.ts\",\n      \"src/**/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"node_modules\"\n    ]\n}\n\n```\n\n注意上面的 types 配置需要将自己定义的`types`文件导入进来，这样一个未知类型会在这个指定范围去查找。\n\n项目代码使用：\n\n```javascript\n//types/test.d.ts\ndeclare namespace Test {\n    interface Detail {\n        name: string\n    }\n}\n\n// src/test.ts\nfunction getTestDetail (detail: Test.Detail){}\n\n```\n\n这样就不需要项目代码去引用类型文件，缺点是暴露全局的`namespace`，需要自己根据情况作出取舍。\n\n2. 定义自定义对象的属性枚举值\n\n定义一个配置对象，除了`key`之外其他属性一样，利用枚举特性定义`key`\n\n```javascript\ndeclare enum ENV {\n  dev = 'dev',\n  prod = 'prod'\n}\n\nexport interface ConfigResult {\n  region: string\n  accessKeyId: string\n  accessKeySecret: string\n  expAfter: number\n  bucket: string\n  maxSize: number\n  startsWith: string\n  ossHost: string\n  host: string\n}\n\nexport interface Config {\n  [key: string]: {\n    [key in ENV]: ConfigResult\n  }\n}\n\n```\n\n3. 类型文件里面不能导出/定义`枚举值`，枚举值需要单独定义在代码层面，不然会报\n\n```shell\nError: Debug Failure. False expression: Output generation failed\n```\n\n4. 开发第三方库的时候遇到，开发完之后库打包之后，在项目中导入相关方法并没有相关方法的提示，别人是怎么定义包内部方法的提示呢？在 github 上查阅了几个库，在`https://github.com/alibaba/pont`这个项目下发现别人`typing`指向的路径指向本身项目暴露出来的 ts 入口文件，这样就达到使用 ts 的时候有对应的方法提示。\n\n```json\n\"main\": \"lib/index.js\",   // 这个是编译后的库入口文件，一般是js\n\"typings\": \"src/index.ts\", // 这个是给ts用的本身项目开发的出口文件\n```\n\n5. 使用`paths`做路径映射时候，一定要当前项目配置文件指定`baseUrl`为当前目录，遇到继承外部项目公共基础配置，公共基础配置设置`baseUrl`之后，`paths`路径映射是以外部项目为基准；\n\n6. `paths`做了映射之后，利用提供的`tsc`编译后的代码并没有做响应的路径转换，比如`$src/index.ts`，最后编译出来的代码依然是原样，后来是采用`rollup.js`做了打包处理这个问题。\n","source":"_posts/记录typescript使用的几个注意点.md","raw":"---\ntitle: 记录typescript使用的几个注意点\ncatalog: true\ndate: 2019-07-22 13:38:34\nsubtitle:\nheader-img:\ntags: typescript\ncategories: 前端\n---\n\n近期在做前端团队公共模块和方法的私有 npm 包的时候，采用`typescript`保证包的代码质量，在使用`ts`的过程遇到一些小问题，特此记录下遇到的一些小问题。\n\n1. 不想一个个导入类型文件，希望有全局引用类型文件\n\n一开始在给每个文件定义类型的时候，都会将文件类型放在`types`文件夹下，通过`es6`模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：\n\n```javascript\n// types/test.d.ts\nexport declare const test = '123'\n\n// src/test.ts\nimport { test } from '../types/test'\n\n```\n\n这样的话默认也是把`.d.ts`文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？\n\n答案是有的：利用全局的`namespace`和`tsconfig.json`配置\n\n以下是`tsconfig.json`一些配置项：\n\n```javascript\n{\n    \"compilerOptions\": {\n      \"target\": \"es5\",\n      \"module\": \"commonjs\",\n      \"outDir\": \"./dist/lib\",\n      \"declaration\": true,  // 开启打包之后会输出.d.ts文件\n      \"declarationDir\": \"./dist/types\",  // 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径\n      \"strict\": true,\n      \"jsx\": \"preserve\",\n      \"importHelpers\": true,\n      \"removeComments\": true,\n      \"moduleResolution\": \"node\",\n      \"experimentalDecorators\": true,\n      \"allowJs\": false,\n      \"esModuleInterop\": true,\n      \"allowSyntheticDefaultImports\": true,\n      \"sourceMap\": false,\n      \"baseUrl\": \".\",\n      \"types\": [\n        \"node\",\n        \"./types\"  // 本地types所在目录，必须在此引入\n      ],\n      \"lib\": [\n        \"esnext\",\n        \"dom\",\n        \"dom.iterable\",\n        \"scripthost\"\n      ]\n    },\n    \"include\": [\n      \"src/**/*.ts\",\n      \"src/**/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"node_modules\"\n    ]\n}\n\n```\n\n注意上面的 types 配置需要将自己定义的`types`文件导入进来，这样一个未知类型会在这个指定范围去查找。\n\n项目代码使用：\n\n```javascript\n//types/test.d.ts\ndeclare namespace Test {\n    interface Detail {\n        name: string\n    }\n}\n\n// src/test.ts\nfunction getTestDetail (detail: Test.Detail){}\n\n```\n\n这样就不需要项目代码去引用类型文件，缺点是暴露全局的`namespace`，需要自己根据情况作出取舍。\n\n2. 定义自定义对象的属性枚举值\n\n定义一个配置对象，除了`key`之外其他属性一样，利用枚举特性定义`key`\n\n```javascript\ndeclare enum ENV {\n  dev = 'dev',\n  prod = 'prod'\n}\n\nexport interface ConfigResult {\n  region: string\n  accessKeyId: string\n  accessKeySecret: string\n  expAfter: number\n  bucket: string\n  maxSize: number\n  startsWith: string\n  ossHost: string\n  host: string\n}\n\nexport interface Config {\n  [key: string]: {\n    [key in ENV]: ConfigResult\n  }\n}\n\n```\n\n3. 类型文件里面不能导出/定义`枚举值`，枚举值需要单独定义在代码层面，不然会报\n\n```shell\nError: Debug Failure. False expression: Output generation failed\n```\n\n4. 开发第三方库的时候遇到，开发完之后库打包之后，在项目中导入相关方法并没有相关方法的提示，别人是怎么定义包内部方法的提示呢？在 github 上查阅了几个库，在`https://github.com/alibaba/pont`这个项目下发现别人`typing`指向的路径指向本身项目暴露出来的 ts 入口文件，这样就达到使用 ts 的时候有对应的方法提示。\n\n```json\n\"main\": \"lib/index.js\",   // 这个是编译后的库入口文件，一般是js\n\"typings\": \"src/index.ts\", // 这个是给ts用的本身项目开发的出口文件\n```\n\n5. 使用`paths`做路径映射时候，一定要当前项目配置文件指定`baseUrl`为当前目录，遇到继承外部项目公共基础配置，公共基础配置设置`baseUrl`之后，`paths`路径映射是以外部项目为基准；\n\n6. `paths`做了映射之后，利用提供的`tsc`编译后的代码并没有做响应的路径转换，比如`$src/index.ts`，最后编译出来的代码依然是原样，后来是采用`rollup.js`做了打包处理这个问题。\n","slug":"记录typescript使用的几个注意点","published":1,"updated":"2024-02-20T06:48:45.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvp004hlwxa2onqhf9k","content":"<p>近期在做前端团队公共模块和方法的私有 npm 包的时候，采用<code>typescript</code>保证包的代码质量，在使用<code>ts</code>的过程遇到一些小问题，特此记录下遇到的一些小问题。</p>\n<ol>\n<li>不想一个个导入类型文件，希望有全局引用类型文件</li>\n</ol>\n<p>一开始在给每个文件定义类型的时候，都会将文件类型放在<code>types</code>文件夹下，通过<code>es6</code>模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types/test.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> declare <span class=\"keyword\">const</span> test = <span class=\"string\">'123'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/test'</span></span><br></pre></td></tr></table></figure>\n\n<p>这样的话默认也是把<code>.d.ts</code>文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？</p>\n<p>答案是有的：利用全局的<code>namespace</code>和<code>tsconfig.json</code>配置</p>\n<p>以下是<code>tsconfig.json</code>一些配置项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist/lib\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">// 开启打包之后会输出.d.ts文件</span></span><br><span class=\"line\">      <span class=\"string\">\"declarationDir\"</span>: <span class=\"string\">\"./dist/types\"</span>,  <span class=\"comment\">// 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径</span></span><br><span class=\"line\">      <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"string\">\"preserve\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowJs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./types\"</span>  <span class=\"comment\">// 本地types所在目录，必须在此引入</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"lib\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"esnext\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom.iterable\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"scripthost\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"src/**/*.ts\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"src/**/**/*.ts\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的 types 配置需要将自己定义的<code>types</code>文件导入进来，这样一个未知类型会在这个指定范围去查找。</p>\n<p>项目代码使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//types/test.d.ts</span></span><br><span class=\"line\">declare namespace Test &#123;</span><br><span class=\"line\">    interface Detail &#123;</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTestDetail</span> (<span class=\"params\">detail: Test.Detail</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就不需要项目代码去引用类型文件，缺点是暴露全局的<code>namespace</code>，需要自己根据情况作出取舍。</p>\n<ol start=\"2\">\n<li>定义自定义对象的属性枚举值</li>\n</ol>\n<p>定义一个配置对象，除了<code>key</code>之外其他属性一样，利用枚举特性定义<code>key</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare enum ENV &#123;</span><br><span class=\"line\">  dev = <span class=\"string\">'dev'</span>,</span><br><span class=\"line\">  prod = <span class=\"string\">'prod'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ConfigResult &#123;</span><br><span class=\"line\">  region: string</span><br><span class=\"line\">  accessKeyId: string</span><br><span class=\"line\">  accessKeySecret: string</span><br><span class=\"line\">  expAfter: number</span><br><span class=\"line\">  bucket: string</span><br><span class=\"line\">  maxSize: number</span><br><span class=\"line\">  startsWith: string</span><br><span class=\"line\">  ossHost: string</span><br><span class=\"line\">  host: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface Config &#123;</span><br><span class=\"line\">  [key: string]: &#123;</span><br><span class=\"line\">    [key <span class=\"keyword\">in</span> ENV]: ConfigResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>类型文件里面不能导出/定义<code>枚举值</code>，枚举值需要单独定义在代码层面，不然会报</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Debug Failure. False expression: Output generation failed</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>开发第三方库的时候遇到，开发完之后库打包之后，在项目中导入相关方法并没有相关方法的提示，别人是怎么定义包内部方法的提示呢？在 github 上查阅了几个库，在<code>https://github.com/alibaba/pont</code>这个项目下发现别人<code>typing</code>指向的路径指向本身项目暴露出来的 ts 入口文件，这样就达到使用 ts 的时候有对应的方法提示。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"lib/index.js\",   // 这个是编译后的库入口文件，一般是js</span><br><span class=\"line\">\"typings\": \"src/index.ts\", // 这个是给ts用的本身项目开发的出口文件</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>使用<code>paths</code>做路径映射时候，一定要当前项目配置文件指定<code>baseUrl</code>为当前目录，遇到继承外部项目公共基础配置，公共基础配置设置<code>baseUrl</code>之后，<code>paths</code>路径映射是以外部项目为基准；</p>\n</li>\n<li><p><code>paths</code>做了映射之后，利用提供的<code>tsc</code>编译后的代码并没有做响应的路径转换，比如<code>$src/index.ts</code>，最后编译出来的代码依然是原样，后来是采用<code>rollup.js</code>做了打包处理这个问题。</p>\n</li>\n</ol>\n","site":{"data":{}},"length":2258,"excerpt":"","more":"<p>近期在做前端团队公共模块和方法的私有 npm 包的时候，采用<code>typescript</code>保证包的代码质量，在使用<code>ts</code>的过程遇到一些小问题，特此记录下遇到的一些小问题。</p>\n<ol>\n<li>不想一个个导入类型文件，希望有全局引用类型文件</li>\n</ol>\n<p>一开始在给每个文件定义类型的时候，都会将文件类型放在<code>types</code>文件夹下，通过<code>es6</code>模块暴露出来并在项目中引入对应的类型文件，开始引用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// types/test.d.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> declare <span class=\"keyword\">const</span> test = <span class=\"string\">'123'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/test'</span></span><br></pre></td></tr></table></figure>\n\n<p>这样的话默认也是把<code>.d.ts</code>文件当做一个模块，但是每次都引入的时候会比较麻烦，有没有更简便的方法，不需要引入类型文件？</p>\n<p>答案是有的：利用全局的<code>namespace</code>和<code>tsconfig.json</code>配置</p>\n<p>以下是<code>tsconfig.json</code>一些配置项：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"outDir\"</span>: <span class=\"string\">\"./dist/lib\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"declaration\"</span>: <span class=\"literal\">true</span>,  <span class=\"comment\">// 开启打包之后会输出.d.ts文件</span></span><br><span class=\"line\">      <span class=\"string\">\"declarationDir\"</span>: <span class=\"string\">\"./dist/types\"</span>,  <span class=\"comment\">// 默认.d.ts会输出到文件所在目录下，也可以指定.d.ts存放路径</span></span><br><span class=\"line\">      <span class=\"string\">\"strict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"string\">\"preserve\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"importHelpers\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowJs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\".\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"types\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./types\"</span>  <span class=\"comment\">// 本地types所在目录，必须在此引入</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">\"lib\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"esnext\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dom.iterable\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"scripthost\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"src/**/*.ts\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"src/**/**/*.ts\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"exclude\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的 types 配置需要将自己定义的<code>types</code>文件导入进来，这样一个未知类型会在这个指定范围去查找。</p>\n<p>项目代码使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//types/test.d.ts</span></span><br><span class=\"line\">declare namespace Test &#123;</span><br><span class=\"line\">    interface Detail &#123;</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/test.ts</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTestDetail</span> (<span class=\"params\">detail: Test.Detail</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就不需要项目代码去引用类型文件，缺点是暴露全局的<code>namespace</code>，需要自己根据情况作出取舍。</p>\n<ol start=\"2\">\n<li>定义自定义对象的属性枚举值</li>\n</ol>\n<p>定义一个配置对象，除了<code>key</code>之外其他属性一样，利用枚举特性定义<code>key</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare enum ENV &#123;</span><br><span class=\"line\">  dev = <span class=\"string\">'dev'</span>,</span><br><span class=\"line\">  prod = <span class=\"string\">'prod'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface ConfigResult &#123;</span><br><span class=\"line\">  region: string</span><br><span class=\"line\">  accessKeyId: string</span><br><span class=\"line\">  accessKeySecret: string</span><br><span class=\"line\">  expAfter: number</span><br><span class=\"line\">  bucket: string</span><br><span class=\"line\">  maxSize: number</span><br><span class=\"line\">  startsWith: string</span><br><span class=\"line\">  ossHost: string</span><br><span class=\"line\">  host: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface Config &#123;</span><br><span class=\"line\">  [key: string]: &#123;</span><br><span class=\"line\">    [key <span class=\"keyword\">in</span> ENV]: ConfigResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>类型文件里面不能导出/定义<code>枚举值</code>，枚举值需要单独定义在代码层面，不然会报</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Debug Failure. False expression: Output generation failed</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>开发第三方库的时候遇到，开发完之后库打包之后，在项目中导入相关方法并没有相关方法的提示，别人是怎么定义包内部方法的提示呢？在 github 上查阅了几个库，在<code>https://github.com/alibaba/pont</code>这个项目下发现别人<code>typing</code>指向的路径指向本身项目暴露出来的 ts 入口文件，这样就达到使用 ts 的时候有对应的方法提示。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"lib/index.js\",   // 这个是编译后的库入口文件，一般是js</span><br><span class=\"line\">\"typings\": \"src/index.ts\", // 这个是给ts用的本身项目开发的出口文件</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>使用<code>paths</code>做路径映射时候，一定要当前项目配置文件指定<code>baseUrl</code>为当前目录，遇到继承外部项目公共基础配置，公共基础配置设置<code>baseUrl</code>之后，<code>paths</code>路径映射是以外部项目为基准；</p>\n</li>\n<li><p><code>paths</code>做了映射之后，利用提供的<code>tsc</code>编译后的代码并没有做响应的路径转换，比如<code>$src/index.ts</code>，最后编译出来的代码依然是原样，后来是采用<code>rollup.js</code>做了打包处理这个问题。</p>\n</li>\n</ol>\n"},{"title":"记录平时jenkins使用遇到的问题","catalog":true,"date":"2019-05-21T05:51:07.000Z","subtitle":null,"header-img":null,"_content":"\n1. `gitlab`通过`webhooks`在项目指定的分支 push 之后触发 jekins 自动打包\n\n   - 在 jekins 安装 `gitlab-hook-plugin`和 `gitlab-plugin`插件，安装成功的话会在创建项目的`Build Triggers`构建地方看到一个选项 `Build when a change is pushed to GitLab. GitLab webhook URL`\n\n  [![G1dcqg.png](https://s1.ax1x.com/2020/04/01/G1dcqg.png)](https://imgchr.com/i/G1dcqg)\n\n按照如下配置方式在`jekins`里指定`dev-hc`分支触发打包\n\n[![G1d2ZQ.md.jpg](https://s1.ax1x.com/2020/04/01/G1d2ZQ.md.jpg)](https://imgchr.com/i/G1d2ZQ)\n\n在`gitlab`指定的项目设置`webhooks`，在项目的 url 写上`jekins`的项目 url 以及对应的`token`,完成之后保存下，按下对应的 Test 按钮可以测试下是否返回 200 状态码\n\n![G1d6sS.png](https://s1.ax1x.com/2020/04/01/G1d6sS.png)\n\n[![G1dRaj.md.png](https://s1.ax1x.com/2020/04/01/G1dRaj.md.png)](https://imgchr.com/i/G1dRaj)\n\n2.jekins 的时间不正确\n\n打开 【系统管理】->【脚本命令行】运行下面的命令\n\n```shell\nSystem.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\n```\n\n如果是在 docker 下运行的 jenkins 的话，可能上述还不生效，需要切换到`/etc`目录下\n如果`timezone`\n\n3.jenkins 配置执行的 shell 对接构建参数\n\n比如构建参数有`job`，在 shell 里面对应的参数就为`$job`\n","source":"_posts/记录平时jenkins使用遇到的问题.md","raw":"---\ntitle: 记录平时jenkins使用遇到的问题\ncatalog: true\ndate: 2019-05-21 13:51:07\nsubtitle:\nheader-img:\ntags: jenkins\ncategories: 运维\n---\n\n1. `gitlab`通过`webhooks`在项目指定的分支 push 之后触发 jekins 自动打包\n\n   - 在 jekins 安装 `gitlab-hook-plugin`和 `gitlab-plugin`插件，安装成功的话会在创建项目的`Build Triggers`构建地方看到一个选项 `Build when a change is pushed to GitLab. GitLab webhook URL`\n\n  [![G1dcqg.png](https://s1.ax1x.com/2020/04/01/G1dcqg.png)](https://imgchr.com/i/G1dcqg)\n\n按照如下配置方式在`jekins`里指定`dev-hc`分支触发打包\n\n[![G1d2ZQ.md.jpg](https://s1.ax1x.com/2020/04/01/G1d2ZQ.md.jpg)](https://imgchr.com/i/G1d2ZQ)\n\n在`gitlab`指定的项目设置`webhooks`，在项目的 url 写上`jekins`的项目 url 以及对应的`token`,完成之后保存下，按下对应的 Test 按钮可以测试下是否返回 200 状态码\n\n![G1d6sS.png](https://s1.ax1x.com/2020/04/01/G1d6sS.png)\n\n[![G1dRaj.md.png](https://s1.ax1x.com/2020/04/01/G1dRaj.md.png)](https://imgchr.com/i/G1dRaj)\n\n2.jekins 的时间不正确\n\n打开 【系统管理】->【脚本命令行】运行下面的命令\n\n```shell\nSystem.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\n```\n\n如果是在 docker 下运行的 jenkins 的话，可能上述还不生效，需要切换到`/etc`目录下\n如果`timezone`\n\n3.jenkins 配置执行的 shell 对接构建参数\n\n比如构建参数有`job`，在 shell 里面对应的参数就为`$job`\n","slug":"记录平时jenkins使用遇到的问题","published":1,"updated":"2024-02-20T06:48:45.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvr004klwxaomdipl7q","content":"<ol>\n<li><p><code>gitlab</code>通过<code>webhooks</code>在项目指定的分支 push 之后触发 jekins 自动打包</p>\n<ul>\n<li>在 jekins 安装 <code>gitlab-hook-plugin</code>和 <code>gitlab-plugin</code>插件，安装成功的话会在创建项目的<code>Build Triggers</code>构建地方看到一个选项 <code>Build when a change is pushed to GitLab. GitLab webhook URL</code></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/G1dcqg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1dcqg.png\" alt=\"G1dcqg.png\"></a></p>\n</li>\n</ol>\n<p>按照如下配置方式在<code>jekins</code>里指定<code>dev-hc</code>分支触发打包</p>\n<p><a href=\"https://imgchr.com/i/G1d2ZQ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1d2ZQ.md.jpg\" alt=\"G1d2ZQ.md.jpg\"></a></p>\n<p>在<code>gitlab</code>指定的项目设置<code>webhooks</code>，在项目的 url 写上<code>jekins</code>的项目 url 以及对应的<code>token</code>,完成之后保存下，按下对应的 Test 按钮可以测试下是否返回 200 状态码</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/01/G1d6sS.png\" alt=\"G1d6sS.png\"></p>\n<p><a href=\"https://imgchr.com/i/G1dRaj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1dRaj.md.png\" alt=\"G1dRaj.md.png\"></a></p>\n<p>2.jekins 的时间不正确</p>\n<p>打开 【系统管理】-&gt;【脚本命令行】运行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')</span><br></pre></td></tr></table></figure>\n\n<p>如果是在 docker 下运行的 jenkins 的话，可能上述还不生效，需要切换到<code>/etc</code>目录下<br>如果<code>timezone</code></p>\n<p>3.jenkins 配置执行的 shell 对接构建参数</p>\n<p>比如构建参数有<code>job</code>，在 shell 里面对应的参数就为<code>$job</code></p>\n","site":{"data":{}},"length":522,"excerpt":"","more":"<ol>\n<li><p><code>gitlab</code>通过<code>webhooks</code>在项目指定的分支 push 之后触发 jekins 自动打包</p>\n<ul>\n<li>在 jekins 安装 <code>gitlab-hook-plugin</code>和 <code>gitlab-plugin</code>插件，安装成功的话会在创建项目的<code>Build Triggers</code>构建地方看到一个选项 <code>Build when a change is pushed to GitLab. GitLab webhook URL</code></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/G1dcqg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1dcqg.png\" alt=\"G1dcqg.png\"></a></p>\n</li>\n</ol>\n<p>按照如下配置方式在<code>jekins</code>里指定<code>dev-hc</code>分支触发打包</p>\n<p><a href=\"https://imgchr.com/i/G1d2ZQ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1d2ZQ.md.jpg\" alt=\"G1d2ZQ.md.jpg\"></a></p>\n<p>在<code>gitlab</code>指定的项目设置<code>webhooks</code>，在项目的 url 写上<code>jekins</code>的项目 url 以及对应的<code>token</code>,完成之后保存下，按下对应的 Test 按钮可以测试下是否返回 200 状态码</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/01/G1d6sS.png\" alt=\"G1d6sS.png\"></p>\n<p><a href=\"https://imgchr.com/i/G1dRaj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/04/01/G1dRaj.md.png\" alt=\"G1dRaj.md.png\"></a></p>\n<p>2.jekins 的时间不正确</p>\n<p>打开 【系统管理】-&gt;【脚本命令行】运行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')</span><br></pre></td></tr></table></figure>\n\n<p>如果是在 docker 下运行的 jenkins 的话，可能上述还不生效，需要切换到<code>/etc</code>目录下<br>如果<code>timezone</code></p>\n<p>3.jenkins 配置执行的 shell 对接构建参数</p>\n<p>比如构建参数有<code>job</code>，在 shell 里面对应的参数就为<code>$job</code></p>\n"},{"title":"遇到过的面试题","catalog":true,"date":"2020-03-17T07:19:07.000Z","subtitle":null,"header-img":null,"_content":"\n## 头条面试题\n\n### 什么是闭包？应用？优缺点？如何释放\n\n### Event Loop\n\n### Promise 介绍？api？缺点\n\n### let const var\n\n### 如何实现 let\n\n### vue 的 v-model 实现\n\n### 虚拟 DOM 实现？优点\n\n### 同源策略？跨域\n\n### koa 中间件实现原理\n\n### webpack 大概流程\n\n### webpack plugin loader 区别\n\n### mock 模拟真实增删改查\n\n### typescript 的 pick emit\n\n### 链表和数组区别\n\n链表是动态分配内存，数组是静态分配内存\n\n链表是内存中不连续的组合，数组在内存中连续\n\n链表查找复杂度 O(n)，增删改 O(1) 数组查找复杂度 O(1)，增删改 O（n）\n\n示例：\n\nReact 的 fiber 架构就是利用链表，先执行一段逻辑之后处理其他逻辑，再去处理后续逻辑\n\n### 不固定高度的弹窗垂直居中\n\n### flex 1 是有哪些组成\n\nflex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。\n\nflex-grow：项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。\n\nflex-shrink：项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。\n\n### 如何解决盒子高度塌陷问题\n\nBFC\n\n### 发布订阅实现\n\n```javascript\nclass Emitter {\n  constuctor() {\n    this.queue = [];\n  }\n\n  on(obj) {\n    this.queue.push(obj);\n  }\n\n  notify() {\n    this.queue.forEach(obj => obj.fn());\n  }\n\n  off(name) {\n    const index = this.queue.indexOf(obj => obj.name === name);\n    this.queue.splice(index, 1);\n  }\n}\n\nconst emitter = new Emitter();\nemitter.on({\n  name: \"test1\",\n  fn: () => {}\n});\n\nemitter.on({\n  name: \"test2\",\n  fn: () => {}\n});\n\nemitter.notify();\nemitter.off(\"test2\");\n```\n\n## 代码题\n\n连续多次触发只会执行一次\n\n```javascript\nfunction singlePipe(promiseFunc) {\n  // TODO实现   start\n  let status = 0;\n  if (status === 1) return Promise.reject();\n  return data =>\n    new Promise(resolve => {\n      status = 1;\n      resolve(promiseFunc(data));\n    }).then(() => (status = 0));\n\n  // TODO实现   end\n}\nvar promiseFunc = function(data) {\n  return new Promise(resolve => {\n    window.setTimeout(() => resolve(data), 1000);\n  });\n};\n\nvar request = singlePipe(promiseFunc);\nrequest(1).then(data => console.log(data)); // 1\nrequest(2).then(data => console.log(data)); // 无反应\nwindow.setTimeout(() => {\n  request(3).then(data => console.log(data)); // 3\n}, 1000);\n```\n\n## 二面\n\n### 中台项目遇到的难点\n\n### 介绍一个比较复杂的项目\n\n### 左右两个盒子宽度固定，中间盒子宽度自适应\n\n### 算法题 1\n\n```javascript\n// 一本书的目录会有很多章节，每个章节下又会有一些子章节，由此可以形成一个章节树，实现一个序列化函数serialize，输出包含所有章节名称的一维数组，同时根据每个章节所在的层级，在章节名称前面加上该章节所在的层级结构\nvar chapterTree = {\n  name: \"总章节\",\n  children: [\n    {\n      name: \"章节一\",\n      children: [\n        {\n          name: \"第一节\",\n          children: [{ name: \"第一小节\" }, { name: \"第二小节\" }]\n        },\n        { name: \"第二节\" }\n      ]\n    },\n    {\n      name: \"章节二\",\n      children: [{ name: \"第三节\" }, { name: \"第四节\" }]\n    }\n  ]\n};\n\nfunction serialize(tree) {\n  // TODO\n}\n\n// 测试\nconst result = serialize(chapterTree);\nconsole.log(result); // [\"总章节\", \"(1)章节一\", \"(1.1)第一节\", \"(1.1.1)第一小节\", \"(1.1.2)第二小节\", \"(1.2)第二节\", \"(2)章节二\", \"(2.1)第三节\", \"(2.2)第四节\"]\n```\n\n### 算法题 2\n\n多维数组平铺为一维数组\n\n```javascript\nlet finalArr = [];\nfunction flattenArr(arr) {\n  // 代码实现\n  for (let i = 0; i < arr.length - 1; i++) {\n    const item = arr[i];\n\n    if (item instanceof Array) {\n      flattenArr(item);\n    } else {\n      finalArr.push(item);\n    }\n  }\n  return arr;\n}\n\nvar arr = [1, [2, [3, 4]], [5, 6], 7];\nvar newArr = flattenArr(arr);\nconsole.log(newArr);\n```\n\n## 三面\n\n### url 输入经历过什么过程\n\n### 前端优化\n\n### 图片有哪些格式，各个格式有什么特点\n\n### 算法题\n\n- 对一个单向链表反转\n\n- 一个无序数组，要求一次遍历得到第二大元素\n\n```javascript\nfunction find(arr) {\n  let maxItem = arr[0];\n  let seconditem = arr[1];\n\n  if (maxItem < seconditem) {\n    let temp = seconditem;\n    seconditem = maxItem;\n    maxItem = temp;\n  }\n\n  for (let i = 2; i < arr.length - 1; i++) {\n    const item = arr[i];\n    if (item > maxItem) {\n      let temp = maxItem;\n      maxItem = item;\n      seconditem = maxItem;\n    } else if (item > seconditem) {\n      seconditem = item;\n    }\n  }\n\n  return seconditem;\n}\n```\n\n---\n\n## teambition 面试题\n\n### 完整的 CI/CD 流程设计\n\n### Git commit 规范\n\n### 如何理解中台对前台的价值\n\n### 写过的 webpack|babel 等插件\n\n### webpack loader 和 plugin 区别\n\n### 跨域\n\n### typescript 泛型？泛型约束\n\n### typescript 联合类型还有啥类型\n\n### aop 和 ait\n\n### 组件单测流程？如何判断 state 表现？如何判断回调是否触发\n\n### vdom 介绍？优点\n\n### Event loop\n\n---\n\n## Bilibili\n\n### new 过程\n\n---\n","source":"_posts/遇到过的面试题.md","raw":"---\ntitle: 遇到过的面试题\ncatalog: true\ndate: 2020-03-17 15:19:07\nsubtitle:\nheader-img:\ntags: interview\ncategories: 前端\n---\n\n## 头条面试题\n\n### 什么是闭包？应用？优缺点？如何释放\n\n### Event Loop\n\n### Promise 介绍？api？缺点\n\n### let const var\n\n### 如何实现 let\n\n### vue 的 v-model 实现\n\n### 虚拟 DOM 实现？优点\n\n### 同源策略？跨域\n\n### koa 中间件实现原理\n\n### webpack 大概流程\n\n### webpack plugin loader 区别\n\n### mock 模拟真实增删改查\n\n### typescript 的 pick emit\n\n### 链表和数组区别\n\n链表是动态分配内存，数组是静态分配内存\n\n链表是内存中不连续的组合，数组在内存中连续\n\n链表查找复杂度 O(n)，增删改 O(1) 数组查找复杂度 O(1)，增删改 O（n）\n\n示例：\n\nReact 的 fiber 架构就是利用链表，先执行一段逻辑之后处理其他逻辑，再去处理后续逻辑\n\n### 不固定高度的弹窗垂直居中\n\n### flex 1 是有哪些组成\n\nflex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。\n\nflex-grow：项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。\n\nflex-shrink：项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。\n\n### 如何解决盒子高度塌陷问题\n\nBFC\n\n### 发布订阅实现\n\n```javascript\nclass Emitter {\n  constuctor() {\n    this.queue = [];\n  }\n\n  on(obj) {\n    this.queue.push(obj);\n  }\n\n  notify() {\n    this.queue.forEach(obj => obj.fn());\n  }\n\n  off(name) {\n    const index = this.queue.indexOf(obj => obj.name === name);\n    this.queue.splice(index, 1);\n  }\n}\n\nconst emitter = new Emitter();\nemitter.on({\n  name: \"test1\",\n  fn: () => {}\n});\n\nemitter.on({\n  name: \"test2\",\n  fn: () => {}\n});\n\nemitter.notify();\nemitter.off(\"test2\");\n```\n\n## 代码题\n\n连续多次触发只会执行一次\n\n```javascript\nfunction singlePipe(promiseFunc) {\n  // TODO实现   start\n  let status = 0;\n  if (status === 1) return Promise.reject();\n  return data =>\n    new Promise(resolve => {\n      status = 1;\n      resolve(promiseFunc(data));\n    }).then(() => (status = 0));\n\n  // TODO实现   end\n}\nvar promiseFunc = function(data) {\n  return new Promise(resolve => {\n    window.setTimeout(() => resolve(data), 1000);\n  });\n};\n\nvar request = singlePipe(promiseFunc);\nrequest(1).then(data => console.log(data)); // 1\nrequest(2).then(data => console.log(data)); // 无反应\nwindow.setTimeout(() => {\n  request(3).then(data => console.log(data)); // 3\n}, 1000);\n```\n\n## 二面\n\n### 中台项目遇到的难点\n\n### 介绍一个比较复杂的项目\n\n### 左右两个盒子宽度固定，中间盒子宽度自适应\n\n### 算法题 1\n\n```javascript\n// 一本书的目录会有很多章节，每个章节下又会有一些子章节，由此可以形成一个章节树，实现一个序列化函数serialize，输出包含所有章节名称的一维数组，同时根据每个章节所在的层级，在章节名称前面加上该章节所在的层级结构\nvar chapterTree = {\n  name: \"总章节\",\n  children: [\n    {\n      name: \"章节一\",\n      children: [\n        {\n          name: \"第一节\",\n          children: [{ name: \"第一小节\" }, { name: \"第二小节\" }]\n        },\n        { name: \"第二节\" }\n      ]\n    },\n    {\n      name: \"章节二\",\n      children: [{ name: \"第三节\" }, { name: \"第四节\" }]\n    }\n  ]\n};\n\nfunction serialize(tree) {\n  // TODO\n}\n\n// 测试\nconst result = serialize(chapterTree);\nconsole.log(result); // [\"总章节\", \"(1)章节一\", \"(1.1)第一节\", \"(1.1.1)第一小节\", \"(1.1.2)第二小节\", \"(1.2)第二节\", \"(2)章节二\", \"(2.1)第三节\", \"(2.2)第四节\"]\n```\n\n### 算法题 2\n\n多维数组平铺为一维数组\n\n```javascript\nlet finalArr = [];\nfunction flattenArr(arr) {\n  // 代码实现\n  for (let i = 0; i < arr.length - 1; i++) {\n    const item = arr[i];\n\n    if (item instanceof Array) {\n      flattenArr(item);\n    } else {\n      finalArr.push(item);\n    }\n  }\n  return arr;\n}\n\nvar arr = [1, [2, [3, 4]], [5, 6], 7];\nvar newArr = flattenArr(arr);\nconsole.log(newArr);\n```\n\n## 三面\n\n### url 输入经历过什么过程\n\n### 前端优化\n\n### 图片有哪些格式，各个格式有什么特点\n\n### 算法题\n\n- 对一个单向链表反转\n\n- 一个无序数组，要求一次遍历得到第二大元素\n\n```javascript\nfunction find(arr) {\n  let maxItem = arr[0];\n  let seconditem = arr[1];\n\n  if (maxItem < seconditem) {\n    let temp = seconditem;\n    seconditem = maxItem;\n    maxItem = temp;\n  }\n\n  for (let i = 2; i < arr.length - 1; i++) {\n    const item = arr[i];\n    if (item > maxItem) {\n      let temp = maxItem;\n      maxItem = item;\n      seconditem = maxItem;\n    } else if (item > seconditem) {\n      seconditem = item;\n    }\n  }\n\n  return seconditem;\n}\n```\n\n---\n\n## teambition 面试题\n\n### 完整的 CI/CD 流程设计\n\n### Git commit 规范\n\n### 如何理解中台对前台的价值\n\n### 写过的 webpack|babel 等插件\n\n### webpack loader 和 plugin 区别\n\n### 跨域\n\n### typescript 泛型？泛型约束\n\n### typescript 联合类型还有啥类型\n\n### aop 和 ait\n\n### 组件单测流程？如何判断 state 表现？如何判断回调是否触发\n\n### vdom 介绍？优点\n\n### Event loop\n\n---\n\n## Bilibili\n\n### new 过程\n\n---\n","slug":"遇到过的面试题","published":1,"updated":"2024-02-20T06:48:45.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsv7ijvt004olwxa4h517ud3","content":"<h2><span id=\"头条面试题\">头条面试题</span></h2><h3><span id=\"什么是闭包应用优缺点如何释放\">什么是闭包？应用？优缺点？如何释放</span></h3><h3><span id=\"event-loop\">Event Loop</span></h3><h3><span id=\"promise-介绍api缺点\">Promise 介绍？api？缺点</span></h3><h3><span id=\"let-const-var\">let const var</span></h3><h3><span id=\"如何实现-let\">如何实现 let</span></h3><h3><span id=\"vue-的-v-model-实现\">vue 的 v-model 实现</span></h3><h3><span id=\"虚拟-dom-实现优点\">虚拟 DOM 实现？优点</span></h3><h3><span id=\"同源策略跨域\">同源策略？跨域</span></h3><h3><span id=\"koa-中间件实现原理\">koa 中间件实现原理</span></h3><h3><span id=\"webpack-大概流程\">webpack 大概流程</span></h3><h3><span id=\"webpack-plugin-loader-区别\">webpack plugin loader 区别</span></h3><h3><span id=\"mock-模拟真实增删改查\">mock 模拟真实增删改查</span></h3><h3><span id=\"typescript-的-pick-emit\">typescript 的 pick emit</span></h3><h3><span id=\"链表和数组区别\">链表和数组区别</span></h3><p>链表是动态分配内存，数组是静态分配内存</p>\n<p>链表是内存中不连续的组合，数组在内存中连续</p>\n<p>链表查找复杂度 O(n)，增删改 O(1) 数组查找复杂度 O(1)，增删改 O（n）</p>\n<p>示例：</p>\n<p>React 的 fiber 架构就是利用链表，先执行一段逻辑之后处理其他逻辑，再去处理后续逻辑</p>\n<h3><span id=\"不固定高度的弹窗垂直居中\">不固定高度的弹窗垂直居中</span></h3><h3><span id=\"flex-1-是有哪些组成\">flex 1 是有哪些组成</span></h3><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p>\n<p>flex-grow：项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p>\n<p>flex-shrink：项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p>\n<h3><span id=\"如何解决盒子高度塌陷问题\">如何解决盒子高度塌陷问题</span></h3><p>BFC</p>\n<h3><span id=\"发布订阅实现\">发布订阅实现</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emitter</span> </span>&#123;</span><br><span class=\"line\">  constuctor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.forEach(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.fn());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  off(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.queue.indexOf(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.name === name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emitter = <span class=\"keyword\">new</span> Emitter();</span><br><span class=\"line\">emitter.on(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"test1\"</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">emitter.on(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"test2\"</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">emitter.notify();</span><br><span class=\"line\">emitter.off(<span class=\"string\">\"test2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"代码题\">代码题</span></h2><p>连续多次触发只会执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singlePipe</span>(<span class=\"params\">promiseFunc</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO实现   start</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">data</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      status = <span class=\"number\">1</span>;</span><br><span class=\"line\">      resolve(promiseFunc(data));</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (status = <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// TODO实现   end</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> promiseFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(data), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = singlePipe(promiseFunc);</span><br><span class=\"line\">request(<span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 1</span></span><br><span class=\"line\">request(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 无反应</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  request(<span class=\"number\">3</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"二面\">二面</span></h2><h3><span id=\"中台项目遇到的难点\">中台项目遇到的难点</span></h3><h3><span id=\"介绍一个比较复杂的项目\">介绍一个比较复杂的项目</span></h3><h3><span id=\"左右两个盒子宽度固定中间盒子宽度自适应\">左右两个盒子宽度固定，中间盒子宽度自适应</span></h3><h3><span id=\"算法题-1\">算法题 1</span></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一本书的目录会有很多章节，每个章节下又会有一些子章节，由此可以形成一个章节树，实现一个序列化函数serialize，输出包含所有章节名称的一维数组，同时根据每个章节所在的层级，在章节名称前面加上该章节所在的层级结构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chapterTree = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"总章节\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"章节一\"</span>,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"第一节\"</span>,</span><br><span class=\"line\">          children: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第一小节\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第二小节\"</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第二节\"</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"章节二\"</span>,</span><br><span class=\"line\">      children: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第三节\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第四节\"</span> &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialize</span>(<span class=\"params\">tree</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = serialize(chapterTree);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [\"总章节\", \"(1)章节一\", \"(1.1)第一节\", \"(1.1.1)第一小节\", \"(1.1.2)第二小节\", \"(1.2)第二节\", \"(2)章节二\", \"(2.1)第三节\", \"(2.2)第四节\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"算法题-2\">算法题 2</span></h3><p>多维数组平铺为一维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalArr = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenArr</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代码实现</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      flattenArr(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      finalArr.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = flattenArr(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"三面\">三面</span></h2><h3><span id=\"url-输入经历过什么过程\">url 输入经历过什么过程</span></h3><h3><span id=\"前端优化\">前端优化</span></h3><h3><span id=\"图片有哪些格式各个格式有什么特点\">图片有哪些格式，各个格式有什么特点</span></h3><h3><span id=\"算法题\">算法题</span></h3><ul>\n<li><p>对一个单向链表反转</p>\n</li>\n<li><p>一个无序数组，要求一次遍历得到第二大元素</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxItem = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> seconditem = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (maxItem &lt; seconditem) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = seconditem;</span><br><span class=\"line\">    seconditem = maxItem;</span><br><span class=\"line\">    maxItem = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; maxItem) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> temp = maxItem;</span><br><span class=\"line\">      maxItem = item;</span><br><span class=\"line\">      seconditem = maxItem;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &gt; seconditem) &#123;</span><br><span class=\"line\">      seconditem = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> seconditem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"teambition-面试题\">teambition 面试题</span></h2><h3><span id=\"完整的-cicd-流程设计\">完整的 CI/CD 流程设计</span></h3><h3><span id=\"git-commit-规范\">Git commit 规范</span></h3><h3><span id=\"如何理解中台对前台的价值\">如何理解中台对前台的价值</span></h3><h3><span id=\"写过的-webpackbabel-等插件\">写过的 webpack|babel 等插件</span></h3><h3><span id=\"webpack-loader-和-plugin-区别\">webpack loader 和 plugin 区别</span></h3><h3><span id=\"跨域\">跨域</span></h3><h3><span id=\"typescript-泛型泛型约束\">typescript 泛型？泛型约束</span></h3><h3><span id=\"typescript-联合类型还有啥类型\">typescript 联合类型还有啥类型</span></h3><h3><span id=\"aop-和-ait\">aop 和 ait</span></h3><h3><span id=\"组件单测流程如何判断-state-表现如何判断回调是否触发\">组件单测流程？如何判断 state 表现？如何判断回调是否触发</span></h3><h3><span id=\"vdom-介绍优点\">vdom 介绍？优点</span></h3><h3><span id=\"event-loop\">Event loop</span></h3><hr>\n<h2><span id=\"bilibili\">Bilibili</span></h2><h3><span id=\"new-过程\">new 过程</span></h3><hr>\n","site":{"data":{}},"length":3287,"excerpt":"","more":"<h2 id=\"头条面试题\"><a href=\"#头条面试题\" class=\"headerlink\" title=\"头条面试题\"></a>头条面试题</h2><h3 id=\"什么是闭包？应用？优缺点？如何释放\"><a href=\"#什么是闭包？应用？优缺点？如何释放\" class=\"headerlink\" title=\"什么是闭包？应用？优缺点？如何释放\"></a>什么是闭包？应用？优缺点？如何释放</h3><h3 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h3><h3 id=\"Promise-介绍？api？缺点\"><a href=\"#Promise-介绍？api？缺点\" class=\"headerlink\" title=\"Promise 介绍？api？缺点\"></a>Promise 介绍？api？缺点</h3><h3 id=\"let-const-var\"><a href=\"#let-const-var\" class=\"headerlink\" title=\"let const var\"></a>let const var</h3><h3 id=\"如何实现-let\"><a href=\"#如何实现-let\" class=\"headerlink\" title=\"如何实现 let\"></a>如何实现 let</h3><h3 id=\"vue-的-v-model-实现\"><a href=\"#vue-的-v-model-实现\" class=\"headerlink\" title=\"vue 的 v-model 实现\"></a>vue 的 v-model 实现</h3><h3 id=\"虚拟-DOM-实现？优点\"><a href=\"#虚拟-DOM-实现？优点\" class=\"headerlink\" title=\"虚拟 DOM 实现？优点\"></a>虚拟 DOM 实现？优点</h3><h3 id=\"同源策略？跨域\"><a href=\"#同源策略？跨域\" class=\"headerlink\" title=\"同源策略？跨域\"></a>同源策略？跨域</h3><h3 id=\"koa-中间件实现原理\"><a href=\"#koa-中间件实现原理\" class=\"headerlink\" title=\"koa 中间件实现原理\"></a>koa 中间件实现原理</h3><h3 id=\"webpack-大概流程\"><a href=\"#webpack-大概流程\" class=\"headerlink\" title=\"webpack 大概流程\"></a>webpack 大概流程</h3><h3 id=\"webpack-plugin-loader-区别\"><a href=\"#webpack-plugin-loader-区别\" class=\"headerlink\" title=\"webpack plugin loader 区别\"></a>webpack plugin loader 区别</h3><h3 id=\"mock-模拟真实增删改查\"><a href=\"#mock-模拟真实增删改查\" class=\"headerlink\" title=\"mock 模拟真实增删改查\"></a>mock 模拟真实增删改查</h3><h3 id=\"typescript-的-pick-emit\"><a href=\"#typescript-的-pick-emit\" class=\"headerlink\" title=\"typescript 的 pick emit\"></a>typescript 的 pick emit</h3><h3 id=\"链表和数组区别\"><a href=\"#链表和数组区别\" class=\"headerlink\" title=\"链表和数组区别\"></a>链表和数组区别</h3><p>链表是动态分配内存，数组是静态分配内存</p>\n<p>链表是内存中不连续的组合，数组在内存中连续</p>\n<p>链表查找复杂度 O(n)，增删改 O(1) 数组查找复杂度 O(1)，增删改 O（n）</p>\n<p>示例：</p>\n<p>React 的 fiber 架构就是利用链表，先执行一段逻辑之后处理其他逻辑，再去处理后续逻辑</p>\n<h3 id=\"不固定高度的弹窗垂直居中\"><a href=\"#不固定高度的弹窗垂直居中\" class=\"headerlink\" title=\"不固定高度的弹窗垂直居中\"></a>不固定高度的弹窗垂直居中</h3><h3 id=\"flex-1-是有哪些组成\"><a href=\"#flex-1-是有哪些组成\" class=\"headerlink\" title=\"flex 1 是有哪些组成\"></a>flex 1 是有哪些组成</h3><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p>\n<p>flex-grow：项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p>\n<p>flex-shrink：项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p>\n<h3 id=\"如何解决盒子高度塌陷问题\"><a href=\"#如何解决盒子高度塌陷问题\" class=\"headerlink\" title=\"如何解决盒子高度塌陷问题\"></a>如何解决盒子高度塌陷问题</h3><p>BFC</p>\n<h3 id=\"发布订阅实现\"><a href=\"#发布订阅实现\" class=\"headerlink\" title=\"发布订阅实现\"></a>发布订阅实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emitter</span> </span>&#123;</span><br><span class=\"line\">  constuctor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on(obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.forEach(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.fn());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  off(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.queue.indexOf(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.name === name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emitter = <span class=\"keyword\">new</span> Emitter();</span><br><span class=\"line\">emitter.on(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"test1\"</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">emitter.on(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"test2\"</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">emitter.notify();</span><br><span class=\"line\">emitter.off(<span class=\"string\">\"test2\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码题\"><a href=\"#代码题\" class=\"headerlink\" title=\"代码题\"></a>代码题</h2><p>连续多次触发只会执行一次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">singlePipe</span>(<span class=\"params\">promiseFunc</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO实现   start</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">data</span> =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      status = <span class=\"number\">1</span>;</span><br><span class=\"line\">      resolve(promiseFunc(data));</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (status = <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// TODO实现   end</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> promiseFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(data), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = singlePipe(promiseFunc);</span><br><span class=\"line\">request(<span class=\"number\">1</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 1</span></span><br><span class=\"line\">request(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 无反应</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  request(<span class=\"number\">3</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data)); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h2><h3 id=\"中台项目遇到的难点\"><a href=\"#中台项目遇到的难点\" class=\"headerlink\" title=\"中台项目遇到的难点\"></a>中台项目遇到的难点</h3><h3 id=\"介绍一个比较复杂的项目\"><a href=\"#介绍一个比较复杂的项目\" class=\"headerlink\" title=\"介绍一个比较复杂的项目\"></a>介绍一个比较复杂的项目</h3><h3 id=\"左右两个盒子宽度固定，中间盒子宽度自适应\"><a href=\"#左右两个盒子宽度固定，中间盒子宽度自适应\" class=\"headerlink\" title=\"左右两个盒子宽度固定，中间盒子宽度自适应\"></a>左右两个盒子宽度固定，中间盒子宽度自适应</h3><h3 id=\"算法题-1\"><a href=\"#算法题-1\" class=\"headerlink\" title=\"算法题 1\"></a>算法题 1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一本书的目录会有很多章节，每个章节下又会有一些子章节，由此可以形成一个章节树，实现一个序列化函数serialize，输出包含所有章节名称的一维数组，同时根据每个章节所在的层级，在章节名称前面加上该章节所在的层级结构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chapterTree = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"总章节\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"章节一\"</span>,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"第一节\"</span>,</span><br><span class=\"line\">          children: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第一小节\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第二小节\"</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第二节\"</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"章节二\"</span>,</span><br><span class=\"line\">      children: [&#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第三节\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"第四节\"</span> &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialize</span>(<span class=\"params\">tree</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = serialize(chapterTree);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [\"总章节\", \"(1)章节一\", \"(1.1)第一节\", \"(1.1.1)第一小节\", \"(1.1.2)第二小节\", \"(1.2)第二节\", \"(2)章节二\", \"(2.1)第三节\", \"(2.2)第四节\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"算法题-2\"><a href=\"#算法题-2\" class=\"headerlink\" title=\"算法题 2\"></a>算法题 2</h3><p>多维数组平铺为一维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> finalArr = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenArr</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代码实现</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      flattenArr(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      finalArr.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = flattenArr(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三面\"><a href=\"#三面\" class=\"headerlink\" title=\"三面\"></a>三面</h2><h3 id=\"url-输入经历过什么过程\"><a href=\"#url-输入经历过什么过程\" class=\"headerlink\" title=\"url 输入经历过什么过程\"></a>url 输入经历过什么过程</h3><h3 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h3><h3 id=\"图片有哪些格式，各个格式有什么特点\"><a href=\"#图片有哪些格式，各个格式有什么特点\" class=\"headerlink\" title=\"图片有哪些格式，各个格式有什么特点\"></a>图片有哪些格式，各个格式有什么特点</h3><h3 id=\"算法题\"><a href=\"#算法题\" class=\"headerlink\" title=\"算法题\"></a>算法题</h3><ul>\n<li><p>对一个单向链表反转</p>\n</li>\n<li><p>一个无序数组，要求一次遍历得到第二大元素</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxItem = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> seconditem = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (maxItem &lt; seconditem) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = seconditem;</span><br><span class=\"line\">    seconditem = maxItem;</span><br><span class=\"line\">    maxItem = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; maxItem) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> temp = maxItem;</span><br><span class=\"line\">      maxItem = item;</span><br><span class=\"line\">      seconditem = maxItem;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &gt; seconditem) &#123;</span><br><span class=\"line\">      seconditem = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> seconditem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"teambition-面试题\"><a href=\"#teambition-面试题\" class=\"headerlink\" title=\"teambition 面试题\"></a>teambition 面试题</h2><h3 id=\"完整的-CI-CD-流程设计\"><a href=\"#完整的-CI-CD-流程设计\" class=\"headerlink\" title=\"完整的 CI/CD 流程设计\"></a>完整的 CI/CD 流程设计</h3><h3 id=\"Git-commit-规范\"><a href=\"#Git-commit-规范\" class=\"headerlink\" title=\"Git commit 规范\"></a>Git commit 规范</h3><h3 id=\"如何理解中台对前台的价值\"><a href=\"#如何理解中台对前台的价值\" class=\"headerlink\" title=\"如何理解中台对前台的价值\"></a>如何理解中台对前台的价值</h3><h3 id=\"写过的-webpack-babel-等插件\"><a href=\"#写过的-webpack-babel-等插件\" class=\"headerlink\" title=\"写过的 webpack|babel 等插件\"></a>写过的 webpack|babel 等插件</h3><h3 id=\"webpack-loader-和-plugin-区别\"><a href=\"#webpack-loader-和-plugin-区别\" class=\"headerlink\" title=\"webpack loader 和 plugin 区别\"></a>webpack loader 和 plugin 区别</h3><h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><h3 id=\"typescript-泛型？泛型约束\"><a href=\"#typescript-泛型？泛型约束\" class=\"headerlink\" title=\"typescript 泛型？泛型约束\"></a>typescript 泛型？泛型约束</h3><h3 id=\"typescript-联合类型还有啥类型\"><a href=\"#typescript-联合类型还有啥类型\" class=\"headerlink\" title=\"typescript 联合类型还有啥类型\"></a>typescript 联合类型还有啥类型</h3><h3 id=\"aop-和-ait\"><a href=\"#aop-和-ait\" class=\"headerlink\" title=\"aop 和 ait\"></a>aop 和 ait</h3><h3 id=\"组件单测流程？如何判断-state-表现？如何判断回调是否触发\"><a href=\"#组件单测流程？如何判断-state-表现？如何判断回调是否触发\" class=\"headerlink\" title=\"组件单测流程？如何判断 state 表现？如何判断回调是否触发\"></a>组件单测流程？如何判断 state 表现？如何判断回调是否触发</h3><h3 id=\"vdom-介绍？优点\"><a href=\"#vdom-介绍？优点\" class=\"headerlink\" title=\"vdom 介绍？优点\"></a>vdom 介绍？优点</h3><h3 id=\"Event-loop\"><a href=\"#Event-loop\" class=\"headerlink\" title=\"Event loop\"></a>Event loop</h3><hr>\n<h2 id=\"Bilibili\"><a href=\"#Bilibili\" class=\"headerlink\" title=\"Bilibili\"></a>Bilibili</h2><h3 id=\"new-过程\"><a href=\"#new-过程\" class=\"headerlink\" title=\"new 过程\"></a>new 过程</h3><hr>\n"}],"PostAsset":[{"_id":"source/_posts/centos下开机自动重启服务和脚本/WX20190708-113220.png","post":"clsv7iju70013lwxamuaextjo","slug":"WX20190708-113220.png","modified":1,"renderable":1},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-error.png","post":"clsv7ijur001vlwxahzci71k6","slug":"node-gyp-error.png","modified":1,"renderable":1},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/node-gyp-success.png","post":"clsv7ijur001vlwxahzci71k6","slug":"node-gyp-success.png","modified":1,"renderable":1},{"_id":"source/_posts/node-gyp-rebuild-Error-EACCES-permission-denied/root-rw.png","post":"clsv7ijur001vlwxahzci71k6","slug":"root-rw.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clsv7ijtv000ilwxawk03wp2y","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7iju0000qlwxat2dyaq48"},{"post_id":"clsv7ijtq000clwxaq0qx2rh4","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7iju2000tlwxaflgu7o34"},{"post_id":"clsv7ijtw000klwxa3uejfvmq","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7iju3000vlwxad4lruy1e"},{"post_id":"clsv7ijtt000glwxaamfmftv3","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7iju5000zlwxaz5f23656"},{"post_id":"clsv7iju2000ulwxab7mk2ggs","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7iju80014lwxap6evca14"},{"post_id":"clsv7iju60010lwxaqaf8pyvy","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuc001blwxa4u7axm0q"},{"post_id":"clsv7ijub001alwxa35uimcoi","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuk001jlwxafvi271x0"},{"post_id":"clsv7ijue001dlwxadkxaii5o","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijul001mlwxa083fikq8"},{"post_id":"clsv7iju70013lwxamuaextjo","category_id":"clsv7ijub0018lwxa25ex3rm8","_id":"clsv7ijuo001plwxa2s8759nr"},{"post_id":"clsv7ijuh001flwxa8md1vybx","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijur001tlwxassz42vkk"},{"post_id":"clsv7ijuj001ilwxayyi2pi5b","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijus001wlwxadonxa5ha"},{"post_id":"clsv7iju90016lwxa47p8xv8l","category_id":"clsv7ijub0018lwxa25ex3rm8","_id":"clsv7ijut0020lwxaxalyo75l"},{"post_id":"clsv7ijul001llwxalndtgi8t","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuu0023lwxakh50y92w"},{"post_id":"clsv7ijun001olwxamfoy9whl","category_id":"clsv7ijub0018lwxa25ex3rm8","_id":"clsv7ijuu0026lwxay7dnqk64"},{"post_id":"clsv7ijuq001slwxa8ws1a7bx","category_id":"clsv7ijub0018lwxa25ex3rm8","_id":"clsv7ijuv0029lwxa4onv94br"},{"post_id":"clsv7ijur001vlwxahzci71k6","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuw002clwxar3b701ko"},{"post_id":"clsv7ijus001zlwxaqopyx2qo","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijux002glwxam86excah"},{"post_id":"clsv7ijut0022lwxat2fmu8vq","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuy002ilwxaq363ey08"},{"post_id":"clsv7ijuu0025lwxaneqxa5ba","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuy002mlwxaojnytssu"},{"post_id":"clsv7ijuv002blwxa5vnp4niu","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijuz002olwxa7i4571nf"},{"post_id":"clsv7ijuw002flwxavpg7ix3u","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv0002rlwxaw1lbzcce"},{"post_id":"clsv7ijux002hlwxax2xfnq00","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv1002ulwxa5h86myb7"},{"post_id":"clsv7ijuv0028lwxap0fc6uwn","category_id":"clsv7ijuw002elwxalbrmexlu","_id":"clsv7ijv3002ylwxatsbhisd3"},{"post_id":"clsv7ijuy002llwxaw2dd227u","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv30031lwxat0g8msp8"},{"post_id":"clsv7ijuz002nlwxaujn8wr36","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv50034lwxaqu8zq7t4"},{"post_id":"clsv7ijv0002qlwxagzb5m8bi","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv50037lwxa6aamvr4v"},{"post_id":"clsv7ijv0002tlwxaf6cvo8ip","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv6003alwxawn79kpou"},{"post_id":"clsv7ijv2002xlwxadjja6la5","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv7003dlwxasg6fycjk"},{"post_id":"clsv7ijv30030lwxa4mb9dmqd","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv8003hlwxa2j44y92y"},{"post_id":"clsv7ijv40033lwxa7h2fag6v","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijv8003klwxaemgcr109"},{"post_id":"clsv7ijv50036lwxac5ya8vep","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvb003nlwxaobdsl0up"},{"post_id":"clsv7ijv60039lwxazv2j76ql","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvc003rlwxajhg4pjg2"},{"post_id":"clsv7ijv6003clwxaj3tyfadg","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvd003tlwxabx96ik5l"},{"post_id":"clsv7ijv7003glwxao4nj4qo0","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvg003xlwxaphe9autr"},{"post_id":"clsv7ijv8003jlwxasxals4dq","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvh0040lwxamo1fe4ar"},{"post_id":"clsv7ijva003mlwxazzjt9noo","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvj0044lwxa2bb5gymz"},{"post_id":"clsv7ijvc003qlwxab25c5r7m","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvl0047lwxaresba0qd"},{"post_id":"clsv7ijvd003slwxak72goqid","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvn004blwxa7u5v8te6"},{"post_id":"clsv7ijvf003wlwxaaursdqm0","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvo004elwxabbjen84q"},{"post_id":"clsv7ijvg003zlwxa5olj8y7h","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvq004ilwxa3jkxjaib"},{"post_id":"clsv7ijvi0043lwxaqtfesr8g","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvs004llwxau6lybrh7"},{"post_id":"clsv7ijvm004alwxag72u5azb","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvu004plwxa4f8ca3xy"},{"post_id":"clsv7ijvn004dlwxa6047uaw8","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvu004rlwxa9vnzgppw"},{"post_id":"clsv7ijvp004hlwxa2onqhf9k","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvv004tlwxa761pbt71"},{"post_id":"clsv7ijvr004klwxaomdipl7q","category_id":"clsv7ijub0018lwxa25ex3rm8","_id":"clsv7ijvv004wlwxa4v2iz4ka"},{"post_id":"clsv7ijvt004olwxa4h517ud3","category_id":"clsv7ijtt000flwxaboc5m079","_id":"clsv7ijvw004xlwxa2o2c6k4s"}],"PostTag":[{"post_id":"clsv7ijte0001lwxaevlzftz3","tag_id":"clsv7ijtj0005lwxa3uwqvrmt","_id":"clsv7ijtq000blwxa4obxzh1y"},{"post_id":"clsv7ijth0003lwxaldriwsu3","tag_id":"clsv7ijtq000alwxa4opyd3xg","_id":"clsv7ijtu000hlwxaw83x543q"},{"post_id":"clsv7ijtk0006lwxaal7fxd7a","tag_id":"clsv7ijtt000elwxabjkaqfxh","_id":"clsv7ijtx000mlwxa7rjxiopg"},{"post_id":"clsv7ijtn0008lwxaqpggyxw7","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7iju0000rlwxakre1q42m"},{"post_id":"clsv7ijtp0009lwxa5rk1ww7k","tag_id":"clsv7ijtz000olwxa2yxmb1ed","_id":"clsv7iju4000xlwxa3qq0o4b8"},{"post_id":"clsv7iju4000ylwxaa6knptti","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7iju70012lwxa2bh04vv2"},{"post_id":"clsv7ijtq000clwxaq0qx2rh4","tag_id":"clsv7iju3000wlwxa8f9julhi","_id":"clsv7iju90015lwxacc0vec6o"},{"post_id":"clsv7iju60010lwxaqaf8pyvy","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijub0019lwxapqjm3omu"},{"post_id":"clsv7ijts000dlwxaq47a6y31","tag_id":"clsv7iju70011lwxa1mcepn1g","_id":"clsv7ijue001clwxafxmfqgg1"},{"post_id":"clsv7ijtt000glwxaamfmftv3","tag_id":"clsv7iju3000wlwxa8f9julhi","_id":"clsv7ijui001hlwxab3ypb16p"},{"post_id":"clsv7ijtv000ilwxawk03wp2y","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijum001nlwxabbtlm80n"},{"post_id":"clsv7ijuj001ilwxayyi2pi5b","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijuo001qlwxa05cwneti"},{"post_id":"clsv7ijul001llwxalndtgi8t","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijur001ulwxaq6b1ws86"},{"post_id":"clsv7ijtw000klwxa3uejfvmq","tag_id":"clsv7iju3000wlwxa8f9julhi","_id":"clsv7ijus001xlwxadjx4v6t7"},{"post_id":"clsv7ijty000nlwxad9nnzij3","tag_id":"clsv7iju70011lwxa1mcepn1g","_id":"clsv7ijut0021lwxa2bw0edka"},{"post_id":"clsv7iju2000ulwxab7mk2ggs","tag_id":"clsv7ijus001ylwxa06l5fnm5","_id":"clsv7ijuu0027lwxa6yapokqa"},{"post_id":"clsv7iju70013lwxamuaextjo","tag_id":"clsv7ijus001ylwxa06l5fnm5","_id":"clsv7ijuw002dlwxaoj3ims99"},{"post_id":"clsv7iju90016lwxa47p8xv8l","tag_id":"clsv7ijuv002alwxaa6i8b7y6","_id":"clsv7ijuy002klwxakemw2o1k"},{"post_id":"clsv7ijub001alwxa35uimcoi","tag_id":"clsv7ijuy002jlwxaj2gpattq","_id":"clsv7ijv0002slwxaf1y5oaa6"},{"post_id":"clsv7ijv0002qlwxagzb5m8bi","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijv1002wlwxapg44o4cl"},{"post_id":"clsv7ijue001dlwxadkxaii5o","tag_id":"clsv7ijuz002plwxa1s0it79b","_id":"clsv7ijv3002zlwxaor06nrmb"},{"post_id":"clsv7ijuh001flwxa8md1vybx","tag_id":"clsv7ijuz002plwxa1s0it79b","_id":"clsv7ijv50035lwxajug9kx0l"},{"post_id":"clsv7ijun001olwxamfoy9whl","tag_id":"clsv7ijus001ylwxa06l5fnm5","_id":"clsv7ijv6003blwxas09xxn3g"},{"post_id":"clsv7ijv60039lwxazv2j76ql","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijv7003elwxafadn97dj"},{"post_id":"clsv7ijuq001slwxa8ws1a7bx","tag_id":"clsv7ijv60038lwxan3rghl6l","_id":"clsv7ijv8003ilwxaeeo9eskq"},{"post_id":"clsv7ijv6003clwxaj3tyfadg","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijva003llwxaz443r3rm"},{"post_id":"clsv7ijur001vlwxahzci71k6","tag_id":"clsv7ijv7003flwxan104ouyz","_id":"clsv7ijvb003plwxaj5qalwig"},{"post_id":"clsv7ijvc003qlwxab25c5r7m","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijvf003vlwxalu6367qx"},{"post_id":"clsv7ijus001zlwxaqopyx2qo","tag_id":"clsv7ijvb003olwxaiwa40zy1","_id":"clsv7ijvg003ylwxafg6ias64"},{"post_id":"clsv7ijvd003slwxak72goqid","tag_id":"clsv7ijv7003flwxan104ouyz","_id":"clsv7ijvi0042lwxaj73zvx3x"},{"post_id":"clsv7ijut0022lwxat2fmu8vq","tag_id":"clsv7ijvb003olwxaiwa40zy1","_id":"clsv7ijvk0045lwxaqtmptwnw"},{"post_id":"clsv7ijvg003zlwxa5olj8y7h","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijvl0049lwxa2s57qmew"},{"post_id":"clsv7ijvi0043lwxaqtfesr8g","tag_id":"clsv7ijtw000jlwxadkqng4x2","_id":"clsv7ijvn004clwxaz32yinyf"},{"post_id":"clsv7ijuu0025lwxaneqxa5ba","tag_id":"clsv7ijvb003olwxaiwa40zy1","_id":"clsv7ijvp004glwxa9sif1y5h"},{"post_id":"clsv7ijvm004alwxag72u5azb","tag_id":"clsv7ijvl0048lwxae161shyc","_id":"clsv7ijvr004jlwxatnv8009h"},{"post_id":"clsv7ijuv0028lwxap0fc6uwn","tag_id":"clsv7ijvl0048lwxae161shyc","_id":"clsv7ijvt004mlwxakkik424u"},{"post_id":"clsv7ijvn004dlwxa6047uaw8","tag_id":"clsv7ijvb003olwxaiwa40zy1","_id":"clsv7ijvu004qlwxaxotrcxyv"},{"post_id":"clsv7ijuv002blwxa5vnp4niu","tag_id":"clsv7ijvp004flwxauiwx1p16","_id":"clsv7ijvv004slwxajmfb51ph"},{"post_id":"clsv7ijuw002flwxavpg7ix3u","tag_id":"clsv7ijvt004nlwxascynpm5t","_id":"clsv7ijvv004vlwxa61akg2nu"},{"post_id":"clsv7ijux002hlwxax2xfnq00","tag_id":"clsv7ijvv004ulwxaiymmqftq","_id":"clsv7ijvw004zlwxa0oog0qvm"},{"post_id":"clsv7ijuy002llwxaw2dd227u","tag_id":"clsv7ijv7003flwxan104ouyz","_id":"clsv7ijvx0051lwxajuzgxu9r"},{"post_id":"clsv7ijuz002nlwxaujn8wr36","tag_id":"clsv7ijvp004flwxauiwx1p16","_id":"clsv7ijvx0053lwxacb0yngw4"},{"post_id":"clsv7ijv0002tlwxaf6cvo8ip","tag_id":"clsv7ijv7003flwxan104ouyz","_id":"clsv7ijvy0055lwxaxxkiud1h"},{"post_id":"clsv7ijv2002xlwxadjja6la5","tag_id":"clsv7ijvy0054lwxag44ysjpx","_id":"clsv7ijvy0057lwxanxccwgwx"},{"post_id":"clsv7ijv30030lwxa4mb9dmqd","tag_id":"clsv7ijvy0056lwxaqgow6fk9","_id":"clsv7ijvy0059lwxaheru761x"},{"post_id":"clsv7ijv40033lwxa7h2fag6v","tag_id":"clsv7ijvy0058lwxaw58qawhx","_id":"clsv7ijvz005blwxaldeo61o8"},{"post_id":"clsv7ijv50036lwxac5ya8vep","tag_id":"clsv7ijvy0054lwxag44ysjpx","_id":"clsv7ijvz005dlwxafkn75id9"},{"post_id":"clsv7ijv7003glwxao4nj4qo0","tag_id":"clsv7ijvv004ulwxaiymmqftq","_id":"clsv7ijw0005flwxan2f67z14"},{"post_id":"clsv7ijv8003jlwxasxals4dq","tag_id":"clsv7ijw0005elwxa5p0gr5mc","_id":"clsv7ijw0005hlwxaf7gisng5"},{"post_id":"clsv7ijva003mlwxazzjt9noo","tag_id":"clsv7ijvy0054lwxag44ysjpx","_id":"clsv7ijw1005jlwxartv0wfpt"},{"post_id":"clsv7ijvf003wlwxaaursdqm0","tag_id":"clsv7ijw0005ilwxa6hlwstu1","_id":"clsv7ijw1005llwxag4rl178u"},{"post_id":"clsv7ijvk0046lwxa1qmsy838","tag_id":"clsv7ijw1005klwxapqwebuf5","_id":"clsv7ijw1005nlwxaesvbbiql"},{"post_id":"clsv7ijvp004hlwxa2onqhf9k","tag_id":"clsv7ijw1005mlwxalazaj8nq","_id":"clsv7ijw3005plwxa111ije2f"},{"post_id":"clsv7ijvr004klwxaomdipl7q","tag_id":"clsv7ijw1005olwxaaoj1eo3m","_id":"clsv7ijw4005rlwxaau8ortam"},{"post_id":"clsv7ijvt004olwxa4h517ud3","tag_id":"clsv7ijvy0058lwxaw58qawhx","_id":"clsv7ijw4005slwxane9qn32m"}],"Tag":[{"name":"mocha","_id":"clsv7ijtj0005lwxa3uwqvrmt"},{"name":"js","_id":"clsv7ijtq000alwxa4opyd3xg"},{"name":"redis","_id":"clsv7ijtt000elwxabjkaqfxh"},{"name":"javascript","_id":"clsv7ijtw000jlwxadkqng4x2"},{"name":"mysql","_id":"clsv7ijtz000olwxa2yxmb1ed"},{"name":"deep","_id":"clsv7iju3000wlwxa8f9julhi"},{"name":"前端","_id":"clsv7iju70011lwxa1mcepn1g"},{"name":"linux","_id":"clsv7ijus001ylwxa06l5fnm5"},{"name":"docker","_id":"clsv7ijuv002alwxaa6i8b7y6"},{"name":"CI/CD","_id":"clsv7ijuy002jlwxaj2gpattq"},{"name":"git","_id":"clsv7ijuz002plwxa1s0it79b"},{"name":"nginx","_id":"clsv7ijv60038lwxan3rghl6l"},{"name":"npm","_id":"clsv7ijv7003flwxan104ouyz"},{"name":"node","_id":"clsv7ijvb003olwxaiwa40zy1"},{"name":"crawler","_id":"clsv7ijvl0048lwxae161shyc"},{"name":"react","_id":"clsv7ijvp004flwxauiwx1p16"},{"name":"IDE","_id":"clsv7ijvt004nlwxascynpm5t"},{"name":"sentry","_id":"clsv7ijvv004ulwxaiymmqftq"},{"name":"algorithm","_id":"clsv7ijvy0054lwxag44ysjpx"},{"name":"httpa","_id":"clsv7ijvy0056lwxaqgow6fk9"},{"name":"interview","_id":"clsv7ijvy0058lwxaw58qawhx"},{"name":"小程序","_id":"clsv7ijw0005elwxa5p0gr5mc"},{"name":"css","_id":"clsv7ijw0005ilwxa6hlwstu1"},{"name":"随笔","_id":"clsv7ijw1005klwxapqwebuf5"},{"name":"typescript","_id":"clsv7ijw1005mlwxalazaj8nq"},{"name":"jenkins","_id":"clsv7ijw1005olwxaaoj1eo3m"}]}}